(self.webpackChunkmediapipe_facemesh_effects=self.webpackChunkmediapipe_facemesh_effects||[]).push([[237],{6396:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sign: () => (/* binding */ sign)\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es6_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7482);\n/* harmony import */ var core_js_modules_es6_object_to_string_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_to_string_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_date_to_string_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7849);\n/* harmony import */ var core_js_modules_es6_date_to_string_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_string_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8604);\n/* harmony import */ var core_js_modules_es6_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_regexp_replace_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8305);\n/* harmony import */ var core_js_modules_es6_regexp_replace_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var core_js_modules_es6_date_to_iso_string_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9429);\n/* harmony import */ var core_js_modules_es6_date_to_iso_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_date_to_iso_string_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var core_js_modules_es6_array_reduce_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1449);\n/* harmony import */ var core_js_modules_es6_array_reduce_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_reduce_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var core_js_modules_es6_object_keys_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8647);\n/* harmony import */ var core_js_modules_es6_object_keys_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_keys_js__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var core_js_modules_es6_array_is_array_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7899);\n/* harmony import */ var core_js_modules_es6_array_is_array_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_is_array_js__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var core_js_modules_es6_array_for_each_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3504);\n/* harmony import */ var core_js_modules_es6_array_for_each_js__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_for_each_js__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var core_js_modules_es6_array_sort_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7075);\n/* harmony import */ var core_js_modules_es6_array_sort_js__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_sort_js__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var core_js_modules_es6_array_map_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4913);\n/* harmony import */ var core_js_modules_es6_array_map_js__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_map_js__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var core_js_modules_es6_regexp_split_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(341);\n/* harmony import */ var core_js_modules_es6_regexp_split_js__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split_js__WEBPACK_IMPORTED_MODULE_11__);\n/* harmony import */ var core_js_modules_es6_string_trim_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(957);\n/* harmony import */ var core_js_modules_es6_string_trim_js__WEBPACK_IMPORTED_MODULE_12___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_string_trim_js__WEBPACK_IMPORTED_MODULE_12__);\n/* harmony import */ var core_js_modules_es6_array_filter_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9813);\n/* harmony import */ var core_js_modules_es6_array_filter_js__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_filter_js__WEBPACK_IMPORTED_MODULE_13__);\n/* harmony import */ var core_js_modules_es6_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(8301);\n/* harmony import */ var core_js_modules_es6_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_14___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_constructor_js__WEBPACK_IMPORTED_MODULE_14__);\n/* harmony import */ var core_js_modules_es6_array_index_of_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(4609);\n/* harmony import */ var core_js_modules_es6_array_index_of_js__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_index_of_js__WEBPACK_IMPORTED_MODULE_15__);\n/* harmony import */ var core_js_modules_es6_array_slice_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(5853);\n/* harmony import */ var core_js_modules_es6_array_slice_js__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_slice_js__WEBPACK_IMPORTED_MODULE_16__);\n/* harmony import */ var core_js_modules_es6_object_define_property_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(6064);\n/* harmony import */ var core_js_modules_es6_object_define_property_js__WEBPACK_IMPORTED_MODULE_17___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_object_define_property_js__WEBPACK_IMPORTED_MODULE_17__);\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar url = __webpack_require__(8835);\nvar querystring = __webpack_require__(7186);\nvar sha256 = __webpack_require__(3009);\nvar hmacSHA256 = __webpack_require__(3793);\nfunction hmac(key, string, encoding) {\n  return hmacSHA256(string, key).toString();\n}\nfunction hash(string, encoding) {\n  return sha256(string).toString();\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!\'()*]/g, function (c) {\n    return "%" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\nfunction encodeRfc3986Full(str) {\n  return str;\n  // return encodeRfc3986(encodeURIComponent(str));\n}\nvar HEADERS_TO_IGNORE = {\n  authorization: true,\n  connection: true,\n  "x-amzn-trace-id": true,\n  "user-agent": true,\n  expect: true,\n  "presigned-expires": true,\n  range: true\n};\nvar HEADERS_TO_INCLUDE = ["x-ebg-.*", "host"];\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\nvar RequestSigner = /*#__PURE__*/function () {\n  function RequestSigner(request) {\n    _classCallCheck(this, RequestSigner);\n    if (typeof request === "string") {\n      request = url.parse(request);\n    }\n    var headers = request.headers = request.headers || {};\n    this.request = request;\n    if (!request.method && request.body) {\n      request.method = "POST";\n    }\n    if (!headers.Host && !headers.host) {\n      headers.Host = request.hostname || request.host;\n\n      // If a port is specified explicitly, use it as is\n      if (request.port) {\n        headers.Host += ":" + request.port;\n      }\n    }\n    if (!request.hostname && !request.host) {\n      request.hostname = headers.Host || headers.host;\n    }\n  }\n  _createClass(RequestSigner, [{\n    key: "prepareRequest",\n    value: function prepareRequest() {\n      this.parsePath();\n      var request = this.request;\n      var headers = request.headers;\n      var query;\n      if (request.signQuery) {\n        this.parsedPath.query = query = this.parsedPath.query || {};\n        if (query["x-ebg-param"]) {\n          this.datetime = query["x-ebg-param"];\n        } else {\n          query["x-ebg-param"] = this.getDateTime();\n        }\n      } else {\n        if (!request.doNotModifyHeaders) {\n          if (headers["x-ebg-param"]) {\n            this.datetime = headers["x-ebg-param"] || headers["x-ebg-param"];\n          } else {\n            headers["x-ebg-param"] = this.getDateTime();\n          }\n        }\n        delete headers["x-ebg-signature"];\n        delete headers["X-Ebg-Signature"];\n      }\n    }\n  }, {\n    key: "sign",\n    value: function sign() {\n      if (!this.parsedPath) {\n        this.prepareRequest();\n      }\n      if (this.request.signQuery) {\n        this.parsedPath.query["x-ebg-signature"] = this.signature();\n      } else {\n        this.request.headers["x-ebg-signature"] = this.signature();\n      }\n      this.request.path = this.formatPath();\n      return this.request;\n    }\n  }, {\n    key: "getDateTime",\n    value: function getDateTime() {\n      if (!this.datetime) {\n        var headers = this.request.headers;\n        var date = new Date(headers.Date || headers.date || new Date());\n        this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, "");\n      }\n      return this.datetime;\n    }\n  }, {\n    key: "getDate",\n    value: function getDate() {\n      return this.getDateTime().substr(0, 8);\n    }\n  }, {\n    key: "signature",\n    value: function signature() {\n      var kCredentials = "1234567";\n      var strTosign = this.stringToSign();\n      return "v1:".concat(hmac(kCredentials, strTosign, "hex"));\n    }\n  }, {\n    key: "stringToSign",\n    value: function stringToSign() {\n      return [this.getDateTime(), hash(this.canonicalString(), "hex")].join("\\n");\n    }\n  }, {\n    key: "canonicalString",\n    value: function canonicalString() {\n      if (!this.parsedPath) {\n        this.prepareRequest();\n      }\n      var pathStr = this.parsedPath.path;\n      var query = this.parsedPath.query;\n      var headers = this.request.headers;\n      var queryStr = "";\n      var normalizePath = true;\n      var decodePath = this.request.doNotEncodePath;\n      var decodeSlashesInPath = false;\n      var firstValOnly = false;\n      var bodyHash = hash(this.request.body || "", "hex");\n      if (query) {\n        var reducedQuery = Object.keys(query).reduce(function (obj, key) {\n          if (!key) {\n            return obj;\n          }\n          obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n          return obj;\n        }, {});\n        var encodedQueryPieces = [];\n        Object.keys(reducedQuery).sort().forEach(function (key) {\n          if (!Array.isArray(reducedQuery[key])) {\n            encodedQueryPieces.push(key + "=" + encodeRfc3986Full(reducedQuery[key]));\n          } else {\n            reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function (val) {\n              encodedQueryPieces.push(key + "=" + val);\n            });\n          }\n        });\n        queryStr = encodedQueryPieces.join("&");\n      }\n      if (pathStr !== "/") {\n        if (normalizePath) {\n          pathStr = pathStr.replace(/\\/{2,}/g, "/");\n        }\n        pathStr = pathStr.split("/").reduce(function (path, piece) {\n          if (normalizePath && piece === "..") {\n            path.pop();\n          } else if (!normalizePath || piece !== ".") {\n            if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, " "));\n            path.push(encodeRfc3986Full(piece));\n          }\n          return path;\n        }, []).join("/");\n        if (pathStr[0] !== "/") pathStr = "/" + pathStr;\n        if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, "/");\n      }\n      var canonicalReq = [this.request.method || "GET", pathStr, queryStr, this.canonicalHeaders() + "\\n", this.signedHeaders(), bodyHash].join("\\n");\n      return canonicalReq;\n    }\n  }, {\n    key: "canonicalHeaders",\n    value: function canonicalHeaders() {\n      var headers = this.request.headers;\n      function trimAll(header) {\n        return header.toString().trim().replace(/\\s+/g, " ");\n      }\n      return Object.keys(headers).filter(function (key) {\n        var notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n        if (notInIgnoreHeader) {\n          var foundMatch = false;\n          for (var t in HEADERS_TO_INCLUDE) {\n            if (Object.prototype.hasOwnProperty.call(HEADERS_TO_INCLUDE, t)) {\n              foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], "ig").test(key);\n            }\n          }\n          return foundMatch;\n        } else {\n          return false;\n        }\n      }).sort(function (a, b) {\n        return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n      }).map(function (key) {\n        return key.toLowerCase() + ":" + trimAll(headers[key]);\n      }).join("\\n");\n    }\n  }, {\n    key: "signedHeaders",\n    value: function signedHeaders() {\n      return Object.keys(this.request.headers).map(function (key) {\n        return key.toLowerCase();\n      }).filter(function (key) {\n        var notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n        if (notInIgnoreHeader) {\n          var foundMatch = false;\n          for (var t in HEADERS_TO_INCLUDE) {\n            if (Object.prototype.hasOwnProperty.call(HEADERS_TO_INCLUDE, t)) {\n              foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], "ig").test(key);\n            }\n          }\n          return foundMatch;\n        } else {\n          return false;\n        }\n      }).sort().join(";");\n    }\n  }, {\n    key: "parsePath",\n    value: function parsePath() {\n      var path = this.request.path || "/";\n\n      // So if there are non-reserved chars (and it\'s not already all % encoded), just encode them all\n      if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*\'()#%]/.test(path)) {\n        path = encodeURI(decodeURI(path));\n      }\n      var queryIx = path.indexOf("?");\n      var query = null;\n      if (queryIx >= 0) {\n        query = querystring.parse(path.slice(queryIx + 1));\n        path = path.slice(0, queryIx);\n      }\n      this.parsedPath = {\n        path: path,\n        query: query\n      };\n    }\n  }, {\n    key: "formatPath",\n    value: function formatPath() {\n      var path = this.parsedPath.path;\n      var query = this.parsedPath.query;\n      if (!query) {\n        return path;\n      }\n\n      // Services don\'t support empty query string keys\n      if (query[""] != null) {\n        delete query[""];\n      }\n      return path + "?" + encodeRfc3986(querystring.stringify(query));\n    }\n  }]);\n  return RequestSigner;\n}();\nfunction sign(request) {\n  return new RequestSigner(request).sign();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6396\n')},4876:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  CloseModule: () => (/* binding */ CloseModule),\n  SdkEngine: () => (/* binding */ SdkEngine),\n  configSliderHandler: () => (/* binding */ configSliderHandler),\n  disableInitLoading: () => (/* binding */ disableInitLoading),\n  fakeInit: () => (/* binding */ fakeInit),\n  getAnimationFrameId: () => (/* binding */ getAnimationFrameId),\n  getCameraPermissionState: () => (/* binding */ getCameraPermissionState),\n  getComparisonState: () => (/* binding */ getComparisonState),\n  getCurrentStream: () => (/* binding */ getCurrentStream),\n  getCurrentTryon: () => (/* binding */ getCurrentTryon),\n  getDebug: () => (/* binding */ getDebug),\n  getInputImage: () => (/* binding */ sdkEngine_getInputImage),\n  getIsInitialized: () => (/* binding */ getIsInitialized),\n  getIsVideo: () => (/* binding */ getIsVideo),\n  getProviders: () => (/* binding */ getProviders),\n  getSceneManagerInstance: () => (/* binding */ getSceneManagerInstance),\n  getTrackingMode: () => (/* binding */ getTrackingMode),\n  getVideo: () => (/* binding */ getVideo),\n  getVideoEl: () => (/* binding */ getVideoEl),\n  getuseOrtho: () => (/* binding */ getuseOrtho),\n  handleApiResponse: () => (/* binding */ handleApiResponse),\n  initialize: () => (/* binding */ initialize),\n  loadML: () => (/* binding */ loadML),\n  modelsEventHandler: () => (/* binding */ modelsEventHandler),\n  onCameraFrame: () => (/* binding */ onCameraFrame),\n  onClearClick: () => (/* binding */ onClearClick),\n  onHairSegment: () => (/* binding */ onHairSegment),\n  onHandLandsmarks: () => (/* binding */ onHandLandsmarks),\n  onImageClick: () => (/* binding */ onImageClick),\n  onLandmarks: () => (/* binding */ onLandmarks),\n  setClicked: () => (/* binding */ setClicked),\n  setComparisonState: () => (/* binding */ setComparisonState),\n  setCurrentTryon: () => (/* binding */ setCurrentTryon),\n  setImageSource: () => (/* binding */ setImageSource),\n  setInputImage: () => (/* binding */ setInputImage),\n  setInputImageTexture: () => (/* binding */ setInputImageTexture),\n  setIsPause: () => (/* binding */ setIsPause),\n  setIsVideo: () => (/* binding */ setIsVideo),\n  setProvider: () => (/* binding */ setProvider),\n  setSceneManager: () => (/* binding */ setSceneManager),\n  setTempWidth: () => (/* binding */ setTempWidth),\n  setTrackingMode: () => (/* binding */ setTrackingMode),\n  setVideo: () => (/* binding */ setVideo),\n  setVideoEl: () => (/* binding */ setVideoEl),\n  setVisibilityStateOfUploadInput: () => (/* binding */ setVisibilityStateOfUploadInput),\n  timercallback: () => (/* binding */ timercallback),\n  tryOnEventHandler: () => (/* binding */ sdkEngine_tryOnEventHandler)\n});\n\n// NAMESPACE OBJECT: ./src/utils/event.js\nvar event_namespaceObject = {};\n__webpack_require__.r(event_namespaceObject);\n__webpack_require__.d(event_namespaceObject, {\n  sG: () => (emitCameraAccessIssue),\n  Oy: () => (emitCameraFailed),\n  mC: () => (emitCameraOpened),\n  eO: () => (event_emitError),\n  vC: () => (emitFaceAnalysisEvent),\n  DS: () => (emitInitComplete),\n  eM: () => (emitLiveModeStarted),\n  Rl: () => (emitModelTryonModeStarted),\n  qz: () => (emitModuleClosed),\n  bw: () => (emitModuleLoaded),\n  eN: () => (emitModuleLoading),\n  B$: () => (emitModuleOpened),\n  cL: () => (emitModulePause),\n  vf: () => (emitModuleResume),\n  t3: () => (emitNailColorEvent),\n  DU: () => (emitPhotoLoaded),\n  wQ: () => (emitPhotoLoadedFailed),\n  pu: () => (emitReset),\n  a0: () => (emitSKUApplied),\n  SJ: () => (emitSKUFailed),\n  Kr: () => (emitSubscriptionIssue),\n  w2: () => (emitUploadCancelled),\n  py: () => (emitUploadModeStarted),\n  cZ: () => (emitUploadStarted),\n  wq: () => (setWrapperType)\n});\n\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__(7452);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.for-each.js\nvar es6_array_for_each = __webpack_require__(3504);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js\nvar es7_array_includes = __webpack_require__(9087);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.to-string.js\nvar es6_object_to_string = __webpack_require__(7482);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.promise.js\nvar es6_promise = __webpack_require__(6517);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.bind.js\nvar es6_function_bind = __webpack_require__(5049);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.define-property.js\nvar es6_object_define_property = __webpack_require__(6064);\n// EXTERNAL MODULE: ./node_modules/@mediapipe/face_mesh/face_mesh.js\nvar face_mesh = __webpack_require__(2726);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.replace.js\nvar es6_regexp_replace = __webpack_require__(8305);\n;// CONCATENATED MODULE: ./src/makeupVTOs/public_path.js\n\nvar PUBLIC_PATH = __webpack_require__.p.replace(/\\/$/, \'\') || \'\';\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js\nvar es6_array_find = __webpack_require__(5144);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.map.js\nvar es6_array_map = __webpack_require__(4913);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js\nvar es6_string_includes = __webpack_require__(8872);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.index-of.js\nvar es6_array_index_of = __webpack_require__(4609);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js\nvar es6_object_keys = __webpack_require__(8647);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.symbol.js\nvar es6_symbol = __webpack_require__(9650);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.filter.js\nvar es6_array_filter = __webpack_require__(9813);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.get-own-property-descriptor.js\nvar es6_object_get_own_property_descriptor = __webpack_require__(2642);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.object.get-own-property-descriptors.js\nvar es7_object_get_own_property_descriptors = __webpack_require__(4614);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.define-properties.js\nvar es6_object_define_properties = __webpack_require__(7067);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(9437);\n;// CONCATENATED MODULE: ./src/MLModelProviders/face_geom.js\n//\n\nvar FACE_MESH_INDEX_BUFFER = [173, 155, 133, 246, 33, 7, 382, 398, 362, 263, 466, 249, 308, 415, 324, 78, 95, 191, 356, 389, 264, 127, 34, 162, 368, 264, 389, 139, 162, 34, 267, 0, 302, 37, 72, 0, 11, 302, 0, 11, 0, 72, 349, 451, 350, 120, 121, 231, 452, 350, 451, 232, 231, 121, 267, 302, 269, 37, 39, 72, 303, 269, 302, 73, 72, 39, 357, 343, 350, 128, 121, 114, 277, 350, 343, 47, 114, 121, 350, 452, 357, 121, 128, 232, 453, 357, 452, 233, 232, 128, 299, 333, 297, 69, 67, 104, 332, 297, 333, 103, 104, 67, 175, 152, 396, 175, 171, 152, 377, 396, 152, 148, 152, 171, 381, 384, 382, 154, 155, 157, 398, 382, 384, 173, 157, 155, 280, 347, 330, 50, 101, 118, 348, 330, 347, 119, 118, 101, 269, 303, 270, 39, 40, 73, 304, 270, 303, 74, 73, 40, 9, 336, 151, 9, 151, 107, 337, 151, 336, 108, 107, 151, 344, 278, 360, 115, 131, 48, 279, 360, 278, 49, 48, 131, 262, 431, 418, 32, 194, 211, 424, 418, 431, 204, 211, 194, 304, 408, 270, 74, 40, 184, 409, 270, 408, 185, 184, 40, 272, 310, 407, 42, 183, 80, 415, 407, 310, 191, 80, 183, 322, 270, 410, 92, 186, 40, 409, 410, 270, 185, 40, 186, 347, 449, 348, 118, 119, 229, 450, 348, 449, 230, 229, 119, 434, 432, 430, 214, 210, 212, 422, 430, 432, 202, 212, 210, 313, 314, 18, 83, 18, 84, 17, 18, 314, 17, 84, 18, 307, 375, 306, 77, 76, 146, 291, 306, 375, 61, 146, 76, 259, 387, 260, 29, 30, 160, 388, 260, 387, 161, 160, 30, 286, 414, 384, 56, 157, 190, 398, 384, 414, 173, 190, 157, 418, 424, 406, 194, 182, 204, 335, 406, 424, 106, 204, 182, 367, 416, 364, 138, 135, 192, 434, 364, 416, 214, 192, 135, 391, 423, 327, 165, 98, 203, 358, 327, 423, 129, 203, 98, 298, 301, 284, 68, 54, 71, 251, 284, 301, 21, 71, 54, 4, 275, 5, 4, 5, 45, 281, 5, 275, 51, 45, 5, 254, 373, 253, 24, 23, 144, 374, 253, 373, 145, 144, 23, 320, 321, 307, 90, 77, 91, 375, 307, 321, 146, 91, 77, 280, 425, 411, 50, 187, 205, 427, 411, 425, 207, 205, 187, 421, 313, 200, 201, 200, 83, 18, 200, 313, 18, 83, 200, 335, 321, 406, 106, 182, 91, 405, 406, 321, 181, 91, 182, 405, 321, 404, 181, 180, 91, 320, 404, 321, 90, 91, 180, 17, 314, 16, 17, 16, 84, 315, 16, 314, 85, 84, 16, 425, 266, 426, 205, 206, 36, 423, 426, 266, 203, 36, 206, 369, 396, 400, 140, 176, 171, 377, 400, 396, 148, 171, 176, 391, 269, 322, 165, 92, 39, 270, 322, 269, 40, 39, 92, 417, 465, 413, 193, 189, 245, 464, 413, 465, 244, 245, 189, 257, 258, 386, 27, 159, 28, 385, 386, 258, 158, 28, 159, 260, 388, 467, 30, 247, 161, 466, 467, 388, 246, 161, 247, 248, 456, 419, 3, 196, 236, 399, 419, 456, 174, 236, 196, 333, 298, 332, 104, 103, 68, 284, 332, 298, 54, 68, 103, 285, 8, 417, 55, 193, 8, 168, 417, 8, 168, 8, 193, 340, 261, 346, 111, 117, 31, 448, 346, 261, 228, 31, 117, 285, 417, 441, 55, 221, 193, 413, 441, 417, 189, 193, 221, 327, 460, 326, 98, 97, 240, 328, 326, 460, 99, 240, 97, 277, 355, 329, 47, 100, 126, 371, 329, 355, 142, 126, 100, 309, 392, 438, 79, 218, 166, 439, 438, 392, 219, 166, 218, 381, 382, 256, 154, 26, 155, 341, 256, 382, 112, 155, 26, 360, 279, 420, 131, 198, 49, 429, 420, 279, 209, 49, 198, 365, 364, 379, 136, 150, 135, 394, 379, 364, 169, 135, 150, 355, 277, 437, 126, 217, 47, 343, 437, 277, 114, 47, 217, 443, 444, 282, 223, 52, 224, 283, 282, 444, 53, 224, 52, 281, 275, 363, 51, 134, 45, 440, 363, 275, 220, 45, 134, 431, 262, 395, 211, 170, 32, 369, 395, 262, 140, 32, 170, 337, 299, 338, 108, 109, 69, 297, 338, 299, 67, 69, 109, 335, 273, 321, 106, 91, 43, 375, 321, 273, 146, 43, 91, 348, 450, 349, 119, 120, 230, 451, 349, 450, 231, 230, 120, 467, 359, 342, 247, 113, 130, 446, 342, 359, 226, 130, 113, 282, 283, 334, 52, 105, 53, 293, 334, 283, 63, 53, 105, 250, 458, 462, 20, 242, 238, 461, 462, 458, 241, 238, 242, 276, 353, 300, 46, 70, 124, 383, 300, 353, 156, 124, 70, 325, 292, 324, 96, 95, 62, 308, 324, 292, 78, 62, 95, 283, 276, 293, 53, 63, 46, 300, 293, 276, 70, 46, 63, 447, 264, 345, 227, 116, 34, 372, 345, 264, 143, 34, 116, 352, 345, 346, 123, 117, 116, 340, 346, 345, 111, 116, 117, 1, 19, 274, 1, 44, 19, 354, 274, 19, 125, 19, 44, 248, 281, 456, 3, 236, 51, 363, 456, 281, 134, 51, 236, 425, 426, 427, 205, 207, 206, 436, 427, 426, 216, 206, 207, 380, 381, 252, 153, 22, 154, 256, 252, 381, 26, 154, 22, 391, 393, 269, 165, 39, 167, 267, 269, 393, 37, 167, 39, 199, 428, 200, 199, 200, 208, 421, 200, 428, 201, 208, 200, 330, 329, 266, 101, 36, 100, 371, 266, 329, 142, 100, 36, 422, 432, 273, 202, 43, 212, 287, 273, 432, 57, 212, 43, 290, 250, 328, 60, 99, 20, 462, 328, 250, 242, 20, 99, 258, 286, 385, 28, 158, 56, 384, 385, 286, 157, 56, 158, 342, 446, 353, 113, 124, 226, 265, 353, 446, 35, 226, 124, 257, 386, 259, 27, 29, 159, 387, 259, 386, 160, 159, 29, 430, 422, 431, 210, 211, 202, 424, 431, 422, 204, 202, 211, 445, 342, 276, 225, 46, 113, 353, 276, 342, 124, 113, 46, 424, 422, 335, 204, 106, 202, 273, 335, 422, 43, 202, 106, 306, 292, 307, 76, 77, 62, 325, 307, 292, 96, 62, 77, 366, 447, 352, 137, 123, 227, 345, 352, 447, 116, 227, 123, 302, 268, 303, 72, 73, 38, 271, 303, 268, 41, 38, 73, 371, 358, 266, 142, 36, 129, 423, 266, 358, 203, 129, 36, 327, 294, 460, 98, 240, 64, 455, 460, 294, 235, 64, 240, 294, 331, 278, 64, 48, 102, 279, 278, 331, 49, 102, 48, 303, 271, 304, 73, 74, 41, 272, 304, 271, 42, 41, 74, 427, 436, 434, 207, 214, 216, 432, 434, 436, 212, 216, 214, 304, 272, 408, 74, 184, 42, 407, 408, 272, 183, 42, 184, 394, 430, 395, 169, 170, 210, 431, 395, 430, 211, 210, 170, 395, 369, 378, 170, 149, 140, 400, 378, 369, 176, 140, 149, 296, 334, 299, 66, 69, 105, 333, 299, 334, 104, 105, 69, 417, 168, 351, 193, 122, 168, 6, 351, 168, 6, 168, 122, 280, 411, 352, 50, 123, 187, 376, 352, 411, 147, 187, 123, 319, 320, 325, 89, 96, 90, 307, 325, 320, 77, 90, 96, 285, 295, 336, 55, 107, 65, 296, 336, 295, 66, 65, 107, 404, 320, 403, 180, 179, 90, 319, 403, 320, 89, 90, 179, 330, 348, 329, 101, 100, 119, 349, 329, 348, 120, 119, 100, 334, 293, 333, 105, 104, 63, 298, 333, 293, 68, 63, 104, 323, 454, 366, 93, 137, 234, 447, 366, 454, 227, 234, 137, 16, 315, 15, 16, 15, 85, 316, 15, 315, 86, 85, 15, 429, 279, 358, 209, 129, 49, 331, 358, 279, 102, 49, 129, 15, 316, 14, 15, 14, 86, 317, 14, 316, 87, 86, 14, 8, 285, 9, 8, 9, 55, 336, 9, 285, 107, 55, 9, 329, 349, 277, 100, 47, 120, 350, 277, 349, 121, 120, 47, 252, 253, 380, 22, 153, 23, 374, 380, 253, 145, 23, 153, 402, 403, 318, 178, 88, 179, 319, 318, 403, 89, 179, 88, 351, 6, 419, 122, 196, 6, 197, 419, 6, 197, 6, 196, 324, 318, 325, 95, 96, 88, 319, 325, 318, 89, 88, 96, 397, 367, 365, 172, 136, 138, 364, 365, 367, 135, 138, 136, 288, 435, 397, 58, 172, 215, 367, 397, 435, 138, 215, 172, 438, 439, 344, 218, 115, 219, 278, 344, 439, 48, 219, 115, 271, 311, 272, 41, 42, 81, 310, 272, 311, 80, 81, 42, 5, 281, 195, 5, 195, 51, 248, 195, 281, 3, 51, 195, 273, 287, 375, 43, 146, 57, 291, 375, 287, 61, 57, 146, 396, 428, 175, 171, 175, 208, 199, 175, 428, 199, 208, 175, 268, 312, 271, 38, 41, 82, 311, 271, 312, 81, 82, 41, 444, 445, 283, 224, 53, 225, 276, 283, 445, 46, 225, 53, 254, 339, 373, 24, 144, 110, 390, 373, 339, 163, 110, 144, 295, 282, 296, 65, 66, 52, 334, 296, 282, 105, 52, 66, 346, 448, 347, 117, 118, 228, 449, 347, 448, 229, 228, 118, 454, 356, 447, 234, 227, 127, 264, 447, 356, 34, 127, 227, 336, 296, 337, 107, 108, 66, 299, 337, 296, 69, 66, 108, 151, 337, 10, 151, 10, 108, 338, 10, 337, 109, 108, 10, 278, 439, 294, 48, 64, 219, 455, 294, 439, 235, 219, 64, 407, 415, 292, 183, 62, 191, 308, 292, 415, 78, 191, 62, 358, 371, 429, 129, 209, 142, 355, 429, 371, 126, 142, 209, 345, 372, 340, 116, 111, 143, 265, 340, 372, 35, 143, 111, 388, 390, 466, 161, 246, 163, 249, 466, 390, 7, 163, 246, 352, 346, 280, 123, 50, 117, 347, 280, 346, 118, 117, 50, 295, 442, 282, 65, 52, 222, 443, 282, 442, 223, 222, 52, 19, 94, 354, 19, 125, 94, 370, 354, 94, 141, 94, 125, 295, 285, 442, 65, 222, 55, 441, 442, 285, 221, 55, 222, 419, 197, 248, 196, 3, 197, 195, 248, 197, 195, 197, 3, 359, 263, 255, 130, 25, 33, 249, 255, 263, 7, 33, 25, 275, 274, 440, 45, 220, 44, 457, 440, 274, 237, 44, 220, 300, 383, 301, 70, 71, 156, 368, 301, 383, 139, 156, 71, 417, 351, 465, 193, 245, 122, 412, 465, 351, 188, 122, 245, 466, 263, 467, 246, 247, 33, 359, 467, 263, 130, 33, 247, 389, 251, 368, 162, 139, 21, 301, 368, 251, 71, 21, 139, 374, 386, 380, 145, 153, 159, 385, 380, 386, 158, 159, 153, 379, 394, 378, 150, 149, 169, 395, 378, 394, 170, 169, 149, 351, 419, 412, 122, 188, 196, 399, 412, 419, 174, 196, 188, 426, 322, 436, 206, 216, 92, 410, 436, 322, 186, 92, 216, 387, 373, 388, 160, 161, 144, 390, 388, 373, 163, 144, 161, 393, 326, 164, 167, 164, 97, 2, 164, 326, 2, 97, 164, 354, 370, 461, 125, 241, 141, 462, 461, 370, 242, 141, 241, 0, 267, 164, 0, 164, 37, 393, 164, 267, 167, 37, 164, 11, 12, 302, 11, 72, 12, 268, 302, 12, 38, 12, 72, 386, 374, 387, 159, 160, 145, 373, 387, 374, 144, 145, 160, 12, 13, 268, 12, 38, 13, 312, 268, 13, 82, 13, 38, 293, 300, 298, 63, 68, 70, 301, 298, 300, 71, 70, 68, 340, 265, 261, 111, 31, 35, 446, 261, 265, 226, 35, 31, 380, 385, 381, 153, 154, 158, 384, 381, 385, 157, 158, 154, 280, 330, 425, 50, 205, 101, 266, 425, 330, 36, 101, 205, 423, 391, 426, 203, 206, 165, 322, 426, 391, 92, 165, 206, 429, 355, 420, 209, 198, 126, 437, 420, 355, 217, 126, 198, 391, 327, 393, 165, 167, 98, 326, 393, 327, 97, 98, 167, 457, 438, 440, 237, 220, 218, 344, 440, 438, 115, 218, 220, 382, 362, 341, 155, 112, 133, 463, 341, 362, 243, 133, 112, 457, 461, 459, 237, 239, 241, 458, 459, 461, 238, 241, 239, 434, 430, 364, 214, 135, 210, 394, 364, 430, 169, 210, 135, 414, 463, 398, 190, 173, 243, 362, 398, 463, 133, 243, 173, 262, 428, 369, 32, 140, 208, 396, 369, 428, 171, 208, 140, 457, 274, 461, 237, 241, 44, 354, 461, 274, 125, 44, 241, 316, 403, 317, 86, 87, 179, 402, 317, 403, 178, 179, 87, 315, 404, 316, 85, 86, 180, 403, 316, 404, 179, 180, 86, 314, 405, 315, 84, 85, 181, 404, 315, 405, 180, 181, 85, 313, 406, 314, 83, 84, 182, 405, 314, 406, 181, 182, 84, 418, 406, 421, 194, 201, 182, 313, 421, 406, 83, 182, 201, 366, 401, 323, 137, 93, 177, 361, 323, 401, 132, 177, 93, 408, 407, 306, 184, 76, 183, 292, 306, 407, 62, 183, 76, 408, 306, 409, 184, 185, 76, 291, 409, 306, 61, 76, 185, 410, 409, 287, 186, 57, 185, 291, 287, 409, 61, 185, 57, 436, 410, 432, 216, 212, 186, 287, 432, 410, 57, 186, 212, 434, 416, 427, 214, 207, 192, 411, 427, 416, 187, 192, 207, 264, 368, 372, 34, 143, 139, 383, 372, 368, 156, 139, 143, 457, 459, 438, 237, 218, 239, 309, 438, 459, 79, 239, 218, 352, 376, 366, 123, 137, 147, 401, 366, 376, 177, 147, 137, 4, 1, 275, 4, 45, 1, 274, 275, 1, 44, 1, 45, 428, 262, 421, 208, 201, 32, 418, 421, 262, 194, 32, 201, 327, 358, 294, 98, 64, 129, 331, 294, 358, 102, 129, 64, 367, 435, 416, 138, 192, 215, 433, 416, 435, 213, 215, 192, 455, 439, 289, 235, 59, 219, 392, 289, 439, 166, 219, 59, 328, 462, 326, 99, 97, 242, 370, 326, 462, 141, 242, 97, 326, 370, 2, 97, 2, 141, 94, 2, 370, 94, 141, 2, 460, 455, 305, 240, 75, 235, 289, 305, 455, 59, 235, 75, 448, 339, 449, 228, 229, 110, 254, 449, 339, 24, 110, 229, 261, 446, 255, 31, 25, 226, 359, 255, 446, 130, 226, 25, 449, 254, 450, 229, 230, 24, 253, 450, 254, 23, 24, 230, 450, 253, 451, 230, 231, 23, 252, 451, 253, 22, 23, 231, 451, 252, 452, 231, 232, 22, 256, 452, 252, 26, 22, 232, 256, 341, 452, 26, 232, 112, 453, 452, 341, 233, 112, 232, 413, 464, 414, 189, 190, 244, 463, 414, 464, 243, 244, 190, 441, 413, 286, 221, 56, 189, 414, 286, 413, 190, 189, 56, 441, 286, 442, 221, 222, 56, 258, 442, 286, 28, 56, 222, 442, 258, 443, 222, 223, 28, 257, 443, 258, 27, 28, 223, 444, 443, 259, 224, 29, 223, 257, 259, 443, 27, 223, 29, 259, 260, 444, 29, 224, 30, 445, 444, 260, 225, 30, 224, 260, 467, 445, 30, 225, 247, 342, 445, 467, 113, 247, 225, 250, 309, 458, 20, 238, 79, 459, 458, 309, 239, 79, 238, 290, 305, 392, 60, 166, 75, 289, 392, 305, 59, 75, 166, 460, 305, 328, 240, 99, 75, 290, 328, 305, 60, 75, 99, 376, 433, 401, 147, 177, 213, 435, 401, 433, 215, 213, 177, 250, 290, 309, 20, 79, 60, 392, 309, 290, 166, 60, 79, 411, 416, 376, 187, 147, 192, 433, 376, 416, 213, 192, 147, 341, 463, 453, 112, 233, 243, 464, 453, 463, 244, 243, 233, 453, 464, 357, 233, 128, 244, 465, 357, 464, 245, 244, 128, 412, 343, 465, 188, 245, 114, 357, 465, 343, 128, 114, 245, 437, 343, 399, 217, 174, 114, 412, 399, 343, 188, 114, 174, 363, 440, 360, 134, 131, 220, 344, 360, 440, 115, 220, 131, 456, 420, 399, 236, 174, 198, 437, 399, 420, 217, 198, 174, 456, 363, 420, 236, 198, 134, 360, 420, 363, 131, 134, 198, 361, 401, 288, 132, 58, 177, 435, 288, 401, 215, 177, 58, 353, 265, 383, 124, 156, 35, 372, 383, 265, 143, 35, 156, 255, 249, 339, 25, 110, 7, 390, 339, 249, 163, 7, 110, 261, 255, 448, 31, 228, 25, 339, 448, 255, 110, 25, 228,\n//Lips--\n14, 317, 13, 14, 13, 87, 312, 13, 317, 82, 87, 13, 317, 402, 312, 87, 82, 178, 311, 312, 402, 81, 178, 82, 402, 318, 311, 178, 81, 88, 310, 311, 318, 80, 88, 81, 318, 324, 310, 88, 80, 95,\n//------\n415, 310, 324, 191, 95, 80];\nvar FACE_MESH_INDEX_test = (/* unused pure expression or super */ null && ([246, 33, 7, 7, 163, 246, 161, 246, 163, 163, 144, 161, 160, 161, 144, 144, 145, 160, 159, 160, 145, 145, 153, 159, 158, 159, 153, 153, 154, 158, 157, 158, 154, 154, 155, 157, 173, 157, 155, 155, 133, 173]));\nvar FACE_MESH_INDEX_test1 = (/* unused pure expression or super */ null && ([15, 1, 0, 0, 13, 15, 12, 15, 13, 13, 3, 12, 11, 12, 3, 3, 4, 11, 10, 11, 4, 4, 5, 10, 9, 10, 5, 5, 6, 9, 8, 9, 6, 6, 7, 8, 14, 8, 7, 7, 2, 14]));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar FACE_MESH_UV = [[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.274657994508743, 0.389131009578705],\n//[-0.005, +0.003],\n[0.393361985683441, 0.403706014156342], [0.345234006643295, 0.344011008739471],\n//[+0.001, -0.024],\n[0.370094001293182, 0.346076011657715],\n//[+0.008, -0.021],\n[0.319321990013123, 0.347265005111694],\n//[0.319321990013123, 0.325265005111694],\n[0.297903001308441, 0.353591024875641],\n//[+0.012, -0.015],\n[0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.257764995098114, 0.314490020275116],\n//[-0.01, -0.03],\n[0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.33721199631691, 0.282882988452911],\n//[-0.012, -0.022],\n[0.296391993761063, 0.293242990970612],\n//[-0.056, -0.004],\n[0.169294998049736, 0.193813979625702], [0.447580009698868, 0.302609980106354],\n//[+0.01, -0.02],\n[0.392390012741089, 0.353887975215912],\n//[0.405390012741089, 0.338887975215912],\n[0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.385919004678726, 0.281364023685455],\n//[-0.01, -0.01],\n[0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.288955003023148, 0.398952007293701],\n//[-0.008, +0.002],\n[0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.257135003805161, 0.355440020561218],\n//[0, -0.013],\n[0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.348950982093811],\n//[0, -0.01],\n[0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.266469985246658, 0.376977026462555],\n//[0, -0.003]\n[0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.43639200925827, 0.359887003898621],\n//[+0.02, 0],\n[0.416164010763168, 0.368713974952698],\n//[+0.007, -0.008],\n[0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.414712011814117, 0.335219979286194],\n//[+0.015, -0.01],\n[0.37704598903656, 0.322777986526489],\n//[0, -0.01],\n[0.344107985496521, 0.320150971412659],\n//[+0.006, -0.013],\n[0.312875986099243, 0.32233202457428],\n//[-0.02, -0.022],\n[0.283526003360748, 0.333190023899078],\n//[-0.003, -0.023],\n[0.241245999932289, 0.382785975933075], [0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.42645001411438, 0.389798998832703], [0.438998997211456, 0.39649498462677], [0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.276670008897781, 0.363372981548309],\n//[+0.001, -0.013],\n[0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.725341975688934, 0.389131009578705], [0.606630027294159, 0.40370500087738], [0.654766023159027, 0.344011008739471], [0.629905998706818, 0.346076011657715], [0.680678009986877, 0.347265005111694], [0.702096998691559, 0.353591024875641], [0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.742246985435486, 0.314507007598877], [0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.662801027297974, 0.282917976379395], [0.70362401008606, 0.293271005153656], [0.830704987049103, 0.193813979625702], [0.552385985851288, 0.302568018436432], [0.607609987258911, 0.353887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.614082992076874, 0.281386971473694], [0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.711045026779175, 0.398952007293701], [0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.355445981025696], [0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.348959028720856], [0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.376977026462555], [0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.563543975353241, 0.359827995300293], [0.583841025829315, 0.368713974952698], [0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.585271000862122, 0.335177004337311], [0.622952997684479, 0.32277899980545], [0.655896008014679, 0.320163011550903], [0.687132000923157, 0.322345972061157], [0.716481983661652, 0.333200991153717], [0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.573594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.723330020904541, 0.363372981548309]];\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar FACE_MESH_UV_Eyelid = [[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.269657994508743, 0.392131009578705], [0.393361985683441, 0.403706014156342], [0.346234006643295, 0.320011008739471], [0.378094001293182, 0.325076011657715], [0.319321990013123, 0.325265005111694], [0.285903001308441, 0.338591024875641], [0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.247764995098114, 0.284490020275116], [0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.32521199631691, 0.260882988452911], [0.240391993761063, 0.289242990970612], [0.169294998049736, 0.193813979625702], [0.457580009698868, 0.292609980106354], [0.405390012741089, 0.338887975215912], [0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.375919004678726, 0.271364023685455], [0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.280955003023148, 0.400952007293701], [0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.257135003805161, 0.342440020561218], [0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.338950982093811], [0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.266469985246658, 0.373977026462555], [0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.45639200925827, 0.359887003898621], [0.423164010763168, 0.360713974952698], [0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.429712011814117, 0.325219979286194], [0.37704598903656, 0.312777986526489], [0.350107985496521, 0.307150971412659], [0.292875986099243, 0.30033202457428], [0.280526003360748, 0.310190023899078], [0.241245999932289, 0.385785975933075], [0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.43045001411438, 0.389798998832703], [0.438998997211456, 0.39649498462677], [0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.275670008897781, 0.350372981548309], [0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.730341975688934, 0.392131009578705],\n//[-0.005, +0.003],\n[0.606630027294159, 0.40370500087738], [0.653766023159027, 0.320011008739471],\n//[-0.001, -0.024],\n[0.621905998706818, 0.325076011657715],\n//[-0.008, -0.021],\n[0.680678009986877, 0.325265005111694], [0.714096998691559, 0.338591024875641],\n//[+0.012, -0.015],\n[0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.752246985435486, 0.284507007598877],\n//[-0.01, -0.03],\n[0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.674801027297974, 0.260917976379395],\n//[-0.012, -0.022],\n[0.75962401008606, 0.289271005153656],\n//[-0.056, -0.004],\n[0.830704987049103, 0.193813979625702], [0.542385985851288, 0.292568018436432],\n//[+0.01, -0.02],\n[0.59409987258911, 0.338887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.624082992076874, 0.271386971473694],\n//[-0.01, -0.01],\n[0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.719045026779175, 0.400952007293701],\n//[-0.008, +0.002],\n[0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.342445981025696],\n//[0, -0.013],\n[0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.338959028720856],\n//[0, -0.01],\n[0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.373977026462555],\n//[0, -0.003]\n[0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.543543975353241, 0.359827995300293],\n//[+0.02, 0],\n[0.576841025829315, 0.360713974952698],\n//[+0.007, -0.008],\n[0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.570271000862122, 0.325177004337311],\n//[+0.015, -0.01],\n[0.622952997684479, 0.31277899980545],\n//[0, -0.01],\n[0.649896008014679, 0.308163011550903],\n//[+0.006, -0.013],\n[0.707132000923157, 0.300345972061157],\n//[-0.02, -0.022],\n[0.719481983661652, 0.310200991153717],\n//[-0.003, -0.023],\n[0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.569594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.722330020904541, 0.350372981548309] //[+0.001, -0.013],\n];\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar FACE_MESH_UV_EyeLash = (/* unused pure expression or super */ null && ([[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.269657994508743, 0.392131009578705], [0.393361985683441, 0.403706014156342], [0.343364000320435, 0.355356991291046],\n//[0.346234006643295, 0.320011008739471],\n[0.365961998701096, 0.355970978736877],\n//[0.378094001293182, 0.325076011657715],\n[0.318785011768341, 0.35834002494812],\n//[0.319321990013123, 0.325265005111694],\n[0.301414996385574, 0.363156020641327],\n//[0.285903001308441, 0.338591024875641],\n[0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.247764995098114, 0.284490020275116], [0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.32521199631691, 0.260882988452911], [0.240391993761063, 0.289242990970612], [0.169294998049736, 0.193813979625702], [0.457580009698868, 0.292609980106354], [0.388664990663528, 0.362284004688263],\n//[0.405390012741089, 0.338887975215912],\n[0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.375919004678726, 0.271364023685455], [0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.280955003023148, 0.400952007293701], [0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.289712011814117, 0.368252992630005],\n// [0.257135003805161, 0.342440020561218],\n[0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.338950982093811], [0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.280097991228104, 0.375599980354309],\n//[0.266469985246658, 0.373977026462555],\n[0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.408771991729736, 0.373893976211548],\n//[0.45639200925827, 0.359887003898621],\n[0.408771991729736, 0.373893976211548],\n//[0.423164010763168, 0.360713974952698],\n[0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.388664990663528, 0.362284004688263],\n// [0.429712011814117, 0.325219979286194],\n[0.365961998701096, 0.355970978736877],\n// [0.37704598903656, 0.312777986526489],\n[0.343364000320435, 0.355356991291046],\n// [0.350107985496521, 0.307150971412659],\n[0.318785011768341, 0.35834002494812],\n// [0.292875986099243, 0.30033202457428],\n[0.301414996385574, 0.363156020641327],\n// [0.280526003360748, 0.310190023899078],\n[0.280097991228104, 0.375599980354309],\n//[0.241245999932289, 0.385785975933075],\n[0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.419054001569748, 0.387154996395111],\n//[0.43045001411438, 0.389798998832703],\n[0.419054001569748, 0.387154996395111],\n//[0.438998997211456, 0.39649498462677],\n[0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.289712011814117, 0.368252992630005],\n//[0.275670008897781, 0.350372981548309],\n[0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.730341975688934, 0.392131009578705], [0.606630027294159, 0.40370500087738], [0.653766023159027, 0.320011008739471], [0.621905998706818, 0.325076011657715], [0.680678009986877, 0.325265005111694], [0.714096998691559, 0.338591024875641], [0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.752246985435486, 0.284507007598877], [0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.674801027297974, 0.260917976379395], [0.75962401008606, 0.289271005153656], [0.830704987049103, 0.193813979625702], [0.542385985851288, 0.292568018436432], [0.59409987258911, 0.338887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.624082992076874, 0.271386971473694], [0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.719045026779175, 0.400952007293701], [0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.342445981025696], [0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.338959028720856], [0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.373977026462555], [0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.543543975353241, 0.359827995300293], [0.576841025829315, 0.360713974952698], [0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.570271000862122, 0.325177004337311], [0.622952997684479, 0.31277899980545], [0.649896008014679, 0.308163011550903], [0.707132000923157, 0.300345972061157], [0.719481983661652, 0.310200991153717], [0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.569594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.722330020904541, 0.350372981548309]]));\nvar FACE_MESH_UV_test = (/* unused pure expression or super */ null && ([[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433]]));\n;// CONCATENATED MODULE: ./src/MLModelProviders/landmarks_helpers.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Mediapipe uses different convention for axis\n * than three js. This function adapts mediapipe\n * landmarks for three js.\n * @param {*} landmarks\n */\nvar transformLandmarks = function transformLandmarks(landmarks) {\n  // console.log(landmarks);\n  if (!landmarks) {\n    return landmarks;\n  }\n  var hasVisiblity = !!landmarks.find(function (l) {\n    return l.visibility;\n  });\n  var minZ = 1e-4;\n  if (hasVisiblity) {\n    landmarks.forEach(function (landmark) {\n      var z = landmark.z,\n        visibility = landmark.visibility;\n      z = -z;\n      if (z < minZ && visibility) {\n        minZ = z;\n      }\n    });\n  } else {\n    minZ = Math.max(-landmarks[234].z, -landmarks[454].z);\n  }\n  return landmarks.map(function (landmark) {\n    var x = landmark.x,\n      y = landmark.y,\n      z = landmark.z;\n    return {\n      x: -0.5 + x,\n      y: 0.5 - y,\n      z: 0.5 - z,\n      visibility: landmark.visibility\n    };\n  });\n};\n\n/**\n * Scales landmark by width and height\n * @param {*} landmark\n * @param {*} width\n * @param {*} height\n */\nvar scaleLandmark = function scaleLandmark(landmark, width, height) {\n  var x = landmark.x,\n    y = landmark.y,\n    z = landmark.z;\n  return _objectSpread(_objectSpread({}, landmark), {}, {\n    x: x * width,\n    y: y * height,\n    z: z * width\n  });\n};\n\n/**\n * makes buffer geometry from facemesh landmarks\n * @param {*} landmarks\n */\n\nvar geometry = new three_module/* BufferGeometry */.LoY();\nvar params = {\n  iterations: 1,\n  split: false,\n  // optional, default: true\n  uvSmooth: true,\n  // optional, default: false\n  preserveEdges: true,\n  // optional, default: false\n  flatOnly: false,\n  // optional, default: false\n  maxTriangles: 2000,\n  // optional, default: Infinity\n  flatShading: false,\n  textured: false,\n  wireframe: false\n};\nvar makeGeometry = function makeGeometry(landmarks, geometry, type, pattern) {\n  var vertices = [];\n  var uvs = [];\n  for (var i = 0; i < 468; i++) {\n    var _landmarks$i = landmarks[i],\n      x = _landmarks$i.x,\n      y = _landmarks$i.y,\n      z = _landmarks$i.z;\n    var vertex = [x, y, z];\n    if (type && type === "eyelash") {\n      if (EyelidUpperLeftLandmarkIndices.includes(i) || EyelidDownLeftLandmarkIndices.includes(i) || EyelidSecondUpperLeftLandmarkIndices.includes(i) || EyelidThirdUpperLeftLandmarkIndices.includes(i) || EyelidUpperRightLandmarkIndices.includes(i) || EyelidDownRightLandmarkIndices.includes(i) || EyelidSecondUpperRightLandmarkIndices.includes(i) || EyelidThirdUpperRightLandmarkIndices.includes(i)) {\n        var p1 = landmarks[264];\n        var p2 = landmarks[34];\n        var p3 = landmarks[10];\n        var p4 = landmarks[151];\n        var vec1 = new three_module/* Vector3 */.Pq0(p1.x, p1.y, p1.z);\n        var vec2 = new three_module/* Vector3 */.Pq0(p2.x, p2.y, p2.z);\n        var vec3 = new three_module/* Vector3 */.Pq0(p3.x, p3.y, p3.z);\n        var vec4 = new three_module/* Vector3 */.Pq0(p4.x, p4.y, p4.z);\n        var distH = Math.abs(vec2.distanceTo(vec1) * 4.5);\n        var distV = Math.abs(vec3.distanceTo(vec4) * 18);\n        if (EyelidUpperLeftLandmarkIndices.includes(i)) {\n          var index = EyelidUpperLeftLandmarkIndices.indexOf(i);\n          var lower = EyelidDownLeftLandmarkIndices.at(index);\n          var offset = EyelidOffeset.at(index);\n          vertex[0] = landmarks[lower].x + offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          // vertex[2] = landmarks[lower].z;\n          vertex[2] = landmarks[EyelidDownLeftLandmarkIndices.at(4)].z;\n        }\n        if (EyelidSecondUpperLeftLandmarkIndices.includes(i)) {\n          var _index = EyelidSecondUpperLeftLandmarkIndices.indexOf(i);\n          var _lower = EyelidDownLeftLandmarkIndices.at(_index);\n          var _offset = EyelidOffeset1.at(_index);\n          vertex[0] = landmarks[_lower].x + _offset.x * distH;\n          vertex[1] = landmarks[_lower].y + _offset.y * distV;\n          vertex[2] = landmarks[EyelidDownLeftLandmarkIndices.at(4)].z;\n        }\n        if (EyelidThirdUpperLeftLandmarkIndices.includes(i)) {\n          var _index2 = EyelidThirdUpperLeftLandmarkIndices.indexOf(i);\n          var _lower2 = EyelidDownLeftLandmarkIndices.at(_index2);\n          var _offset2 = EyelidOffeset2.at(_index2);\n          vertex[0] = landmarks[_lower2].x + _offset2.x * distH;\n          vertex[1] = landmarks[_lower2].y + _offset2.y * distV;\n          vertex[2] = landmarks[EyelidDownLeftLandmarkIndices.at(4)].z;\n        }\n\n        ///\n        if (EyelidUpperRightLandmarkIndices.includes(i)) {\n          var _index3 = EyelidUpperRightLandmarkIndices.indexOf(i);\n          var _lower3 = EyelidDownRightLandmarkIndices.at(_index3);\n          var _offset3 = EyelidOffeset.at(_index3);\n          vertex[0] = landmarks[_lower3].x - _offset3.x * distH;\n          vertex[1] = landmarks[_lower3].y + _offset3.y * distV;\n          // vertex[2] = landmarks[lower].z;\n          vertex[2] = landmarks[EyelidDownRightLandmarkIndices.at(4)].z;\n        }\n        if (EyelidSecondUpperRightLandmarkIndices.includes(i)) {\n          var _index4 = EyelidSecondUpperRightLandmarkIndices.indexOf(i);\n          var _lower4 = EyelidDownRightLandmarkIndices.at(_index4);\n          var _offset4 = EyelidOffeset1.at(_index4);\n          vertex[0] = landmarks[_lower4].x - _offset4.x * distH;\n          vertex[1] = landmarks[_lower4].y + _offset4.y * distV;\n          vertex[2] = landmarks[EyelidDownRightLandmarkIndices.at(4)].z;\n        }\n        if (EyelidThirdUpperRightLandmarkIndices.includes(i)) {\n          var _index5 = EyelidThirdUpperRightLandmarkIndices.indexOf(i);\n          var _lower5 = EyelidDownRightLandmarkIndices.at(_index5);\n          var _offset5 = EyelidOffeset2.at(_index5);\n          vertex[0] = landmarks[_lower5].x - _offset5.x * distH;\n          vertex[1] = landmarks[_lower5].y + _offset5.y * distV;\n          vertex[2] = landmarks[EyelidDownRightLandmarkIndices.at(4)].z;\n        }\n      } else {\n        //vertex[2] -= 100;\n      }\n      vertices.push.apply(vertices, vertex);\n    } else if (type && type === "foundation") {\n      if (lipsOuterFull.includes(i)) {\n        var _index6 = lipsOuterFull.indexOf(i);\n        var _lower6 = lipsInnerFull.at(_index6);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower6].x, 0.65);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower6].y, 0.65);\n      }\n      if (foundationUpperIndices.includes(i)) {\n        var _p = landmarks[264];\n        var _p2 = landmarks[34];\n        var _p3 = landmarks[10];\n        var _p4 = landmarks[151];\n        var _vec = new three_module/* Vector3 */.Pq0(_p.x, _p.y, _p.z);\n        var _vec2 = new three_module/* Vector3 */.Pq0(_p2.x, _p2.y, _p2.z);\n        var _vec3 = new three_module/* Vector3 */.Pq0(_p3.x, _p3.y, _p3.z);\n        var _vec4 = new three_module/* Vector3 */.Pq0(_p4.x, _p4.y, _p4.z);\n        var _distH = Math.abs(_vec2.distanceTo(_vec) * 4.5);\n        var _distV = Math.abs(_vec3.distanceTo(_vec4) * 18);\n        var _index7 = foundationUpperIndices.indexOf(i);\n        var _offset6 = foundationUpperOffset.at(_index7);\n        vertex[0] = landmarks[i].x + _offset6.x * _distH;\n        vertex[1] = landmarks[i].y + _offset6.y * _distV;\n        vertex[2] = landmarks[i].z + _offset6.z * _distV;\n      }\n      if (foundationLowerIndices.includes(i)) {\n        var _p5 = landmarks[264];\n        var _p6 = landmarks[34];\n        var _p7 = landmarks[10];\n        var _p8 = landmarks[151];\n        var _vec5 = new three_module/* Vector3 */.Pq0(_p5.x, _p5.y, _p5.z);\n        var _vec6 = new three_module/* Vector3 */.Pq0(_p6.x, _p6.y, _p6.z);\n        var _vec7 = new three_module/* Vector3 */.Pq0(_p7.x, _p7.y, _p7.z);\n        var _vec8 = new three_module/* Vector3 */.Pq0(_p8.x, _p8.y, _p8.z);\n        var _distH2 = Math.abs(_vec6.distanceTo(_vec5) * 4.5);\n        var _distV2 = Math.abs(_vec7.distanceTo(_vec8) * 18);\n        var _index8 = foundationLowerIndices.indexOf(i);\n        var _offset7 = foundationLowerOffset.at(_index8);\n        vertex[0] = landmarks[i].x + _offset7.x / 1.3 * _distH2;\n        vertex[1] = landmarks[i].y + _offset7.y / 1.3 * _distV2;\n        vertex[2] = landmarks[i].z + _offset7.z * _distV2;\n      }\n      vertices.push.apply(vertices, vertex);\n    } else if (type && type === "lipliner") {\n      var liplinerPattern = lipLinerPatternConfig.find(function (config) {\n        return config.pattern === pattern;\n      });\n      if (lipsOuter.includes(i)) {\n        var _index9 = lipsOuter.indexOf(i);\n        if (liplinerPattern.ignoreUpper && _index9 < lipsOuter.length / 2 || liplinerPattern.ignoreLower && _index9 >= lipsOuter.length / 2) {\n          var _lower7 = lipsInner.at(_index9);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower7].x, liplinerPattern.defaultOuterLayerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower7].y, liplinerPattern.defaultOuterLayerOffset);\n        } else {\n          var _lower8 = lipsInner.at(_index9);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower8].x, liplinerPattern.outerLayerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower8].y, liplinerPattern.outerLayerOffset);\n        }\n      }\n      if (lipsOuterCorner.includes(i)) {\n        var _index10 = lipsOuterCorner.indexOf(i);\n        if (liplinerPattern.ignoreUpper && _index10 < lipsOuterCorner.length / 2 || liplinerPattern.ignoreLower && _index10 >= lipsOuterCorner.length / 2) {\n          var _lower9 = lipsInnerCorner.at(_index10);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower9].x, liplinerPattern.defaultCornerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower9].y, liplinerPattern.defaultCornerOffset);\n        } else {\n          var _lower10 = lipsInnerCorner.at(_index10);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower10].x, liplinerPattern.cornerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower10].y, liplinerPattern.cornerOffset);\n        }\n      }\n      if (lipsOuterCornerLast.includes(i)) {\n        var _index11 = lipsOuterCornerLast.indexOf(i);\n        var _lower11 = lipsInnerCornerLast.at(_index11);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower11].x, liplinerPattern.cornerLastOffset);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower11].y, liplinerPattern.cornerLastOffset);\n      }\n      if (lipsInnerFull.includes(i)) {\n        var _index12 = lipsInnerFull.indexOf(i);\n        var _lower12 = lipsInnerSecond.at(_index12);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower12].x, liplinerPattern.innerLayerOffset);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower12].y, liplinerPattern.innerLayerOffset);\n      }\n      vertices.push.apply(vertices, vertex);\n    } else if (type && type === "lipstick") {\n      if (lipsOuterFull.includes(i)) {\n        var _index13 = lipsOuterFull.indexOf(i);\n        var _lower13 = lipsInnerFull.at(_index13);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[_lower13].x, 0.65);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[_lower13].y, 0.65);\n      }\n      vertices.push.apply(vertices, vertex);\n    } else {\n      vertices.push.apply(vertices, vertex);\n    }\n  }\n  if (type && type === "eyeliner") {\n    for (var j = 0; j < 468; j++) {\n      uvs[j * 2] = FACE_MESH_UV_Eyelid[j][0];\n      uvs[j * 2 + 1] = FACE_MESH_UV_Eyelid[j][1];\n    }\n  } else {\n    for (var _j = 0; _j < 468; _j++) {\n      uvs[_j * 2] = FACE_MESH_UV[_j][0];\n      uvs[_j * 2 + 1] = FACE_MESH_UV[_j][1];\n    }\n  }\n  geometry.setIndex(FACE_MESH_INDEX_BUFFER);\n  geometry.setAttribute("position", new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n  geometry.setAttribute("uv", new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n  geometry.computeVertexNormals();\n\n  //geometry = LoopSubdivision.modify(geometry, params.iterations, params);\n\n  // return geometry;\n};\nvar isMouthLandmark = function isMouthLandmark(index, landmarks) {\n  return mouthLandmarkIndices.includes(index);\n};\nvar mouthLandmarkIndices = (/* unused pure expression or super */ null && ([14, 87, 317, 82, 13, 402, 178, 311, 312, 81, 318, 88, 310, 80, 324, 95, 415, 191]));\nvar eyetest = (/* unused pure expression or super */ null && ([7, 33, 133, 144, 145, 153, 154, 155, 157, 158, 159, 160, 161, 163, 173, 246]));\nvar eyetest1 = (/* unused pure expression or super */ null && ([9, 107, 108, 151]));\nvar EyelidDownLeftLandmarkIndices = [33, 246, 161, 160, 159, 158, 157, 173, 133,\n//down\n155, 154, 153, 145, 144, 163, 7];\nvar EyelidUpperLeftLandmarkIndices = [130, 247, 30, 29, 27, 28, 56, 190, 243,\n//down\n112, 26, 22, 23, 24, 110, 25];\nvar EyelidSecondUpperLeftLandmarkIndices = [226, 113, 225, 224, 223, 222, 221, 189, 244,\n//down\n233, 232, 231, 230, 229, 228, 31];\nvar EyelidThirdUpperLeftLandmarkIndices = [35, 124, 46, 53, 52, 65, 55, 193, 245];\nvar EyelidDownRightLandmarkIndices = [263, 466, 388, 387, 386, 385, 384, 398, 362,\n//down\n382, 381, 380, 374, 373, 390, 249];\nvar EyelidUpperRightLandmarkIndices = [359, 467, 260, 259, 257, 258, 286, 414, 463,\n//down\n341, 256, 252, 253, 254, 339, 255];\nvar EyelidSecondUpperRightLandmarkIndices = [446, 342, 445, 444, 443, 442, 441, 413, 464,\n//down\n453, 452, 451, 450, 449, 448, 261];\nvar EyelidThirdUpperRightLandmarkIndices = [265, 353, 276, 283, 282, 295, 285, 417, 465];\nvar foundationUpperIndices = [152, 148, 176, 149, 150, 136, 172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109, 10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 397, 365, 379, 378, 400, 377];\nvar foundationLowerIndices = [34, 139, 71, 68, 104, 69, 108, 151, 337, 299, 333, 298, 301, 368, 264];\nvar foundationUpperOffset = [new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(-0.0011, -0.025, 0), new three_module/* Vector3 */.Pq0(-0.0021, -0.02, 0), new three_module/* Vector3 */.Pq0(-0.0021, -0.015, 0), new three_module/* Vector3 */.Pq0(-0.0036, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0, 0),\n//\nnew three_module/* Vector3 */.Pq0(-0.0036, 0.015, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0.025, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0.055, 0), new three_module/* Vector3 */.Pq0(-0.0035, 0.1, 0), new three_module/* Vector3 */.Pq0(-0.0025, 0.12, 0), new three_module/* Vector3 */.Pq0(-0.0015, 0.13, 0), new three_module/* Vector3 */.Pq0(-0.001, 0.13, 0), new three_module/* Vector3 */.Pq0(0, 0.13, 0), new three_module/* Vector3 */.Pq0(0.001, 0.13, 0), new three_module/* Vector3 */.Pq0(0.0015, 0.13, 0), new three_module/* Vector3 */.Pq0(0.0025, 0.12, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.1, 0), new three_module/* Vector3 */.Pq0(0.0036, 0.055, 0), new three_module/* Vector3 */.Pq0(0.0036, 0.025, 0), new three_module/* Vector3 */.Pq0(0.0036, 0.015, 0),\n//\nnew three_module/* Vector3 */.Pq0(0.0036, 0, 0), new three_module/* Vector3 */.Pq0(0.0036, 0, 0), new three_module/* Vector3 */.Pq0(0.0036, -0.01, 0), new three_module/* Vector3 */.Pq0(0.0021, -0.015, 0), new three_module/* Vector3 */.Pq0(0.0021, -0.02, 0), new three_module/* Vector3 */.Pq0(0.0011, -0.025, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0)];\nvar foundationLowerOffset = [new three_module/* Vector3 */.Pq0(-0.0035, 0.015, 0), new three_module/* Vector3 */.Pq0(-0.0035, 0.025, 0), new three_module/* Vector3 */.Pq0(-0.0035, 0.055, 0), new three_module/* Vector3 */.Pq0(-0.0025, 0.065, 0), new three_module/* Vector3 */.Pq0(-0.002, 0.085, 0), new three_module/* Vector3 */.Pq0(-0.0015, 0.09, 0), new three_module/* Vector3 */.Pq0(-0.001, 0.09, 0), new three_module/* Vector3 */.Pq0(0, 0.09, 0), new three_module/* Vector3 */.Pq0(0.001, 0.09, 0), new three_module/* Vector3 */.Pq0(0.0015, 0.09, 0), new three_module/* Vector3 */.Pq0(0.002, 0.085, 0), new three_module/* Vector3 */.Pq0(0.0025, 0.065, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.055, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.025, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.015, 0)];\nvar EyelidOffeset = [new three_module/* Vector3 */.Pq0(-0.0045, -0.0013, 0), new three_module/* Vector3 */.Pq0(-0.0047, 0.004, 0), new three_module/* Vector3 */.Pq0(-0.002, 0.007, 0), new three_module/* Vector3 */.Pq0(-0.0007, 0.008, 0), new three_module/* Vector3 */.Pq0(0.0002, 0.0085, 0), new three_module/* Vector3 */.Pq0(0.0015, 0.0085, 0), new three_module/* Vector3 */.Pq0(0.001, 0.007, 0), new three_module/* Vector3 */.Pq0(0.0037, 0.0035, 0), new three_module/* Vector3 */.Pq0(0.004, -0.001, 0),\n//down\nnew three_module/* Vector3 */.Pq0(0.0024, -0.0063, 0), new three_module/* Vector3 */.Pq0(-0.00019, -0.009, 0), new three_module/* Vector3 */.Pq0(0.00015, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.0015, -0.011, 0), new three_module/* Vector3 */.Pq0(-0.0016, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.003, -0.009, 0), new three_module/* Vector3 */.Pq0(-0.005, -0.006, 0)];\nvar EyelidOffeset1 = [new three_module/* Vector3 */.Pq0(-0.012, -0.005, 0), new three_module/* Vector3 */.Pq0(-0.0105, 0.009, 0), new three_module/* Vector3 */.Pq0(-0.0078, 0.018, 0), new three_module/* Vector3 */.Pq0(-0.004, 0.023, 0), new three_module/* Vector3 */.Pq0(-0.001, 0.024, 0), new three_module/* Vector3 */.Pq0(0.003, 0.023, 0), new three_module/* Vector3 */.Pq0(0.009, 0.019, 0), new three_module/* Vector3 */.Pq0(0.011, 0.0078, 0), new three_module/* Vector3 */.Pq0(0.009, -0.003, 0),\n//down\nnew three_module/* Vector3 */.Pq0(0.005, -0.017, 0), new three_module/* Vector3 */.Pq0(0.0014, -0.022, 0), new three_module/* Vector3 */.Pq0(0.00023, -0.024, 0), new three_module/* Vector3 */.Pq0(-0.003, -0.026, 0), new three_module/* Vector3 */.Pq0(-0.005, -0.027, 0), new three_module/* Vector3 */.Pq0(-0.009, -0.026, 0), new three_module/* Vector3 */.Pq0(-0.013, -0.017, 0)];\nvar EyelidOffeset2 = [new three_module/* Vector3 */.Pq0(-0.02, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.018, 0.014, 0), new three_module/* Vector3 */.Pq0(-0.016, 0.028, 0), new three_module/* Vector3 */.Pq0(-0.011, 0.037, 0), new three_module/* Vector3 */.Pq0(-0.005, 0.039, 0), new three_module/* Vector3 */.Pq0(0.0053, 0.039, 0), new three_module/* Vector3 */.Pq0(0.0215, 0.0275, 0), new three_module/* Vector3 */.Pq0(0.023, 0.008, 0), new three_module/* Vector3 */.Pq0(0.015, -0.008, 0)];\nvar lipsOuter = [92, 165, 167, 164, 393, 391, 322,\n//down\n335, 406, 313, 18, 83, 182, 106];\nvar lipsInner = [40, 39, 37, 0, 267, 269, 270,\n//down\n321, 405, 314, 17, 84, 181, 91];\nvar lipsOuterFull = [57, 186, 92, 165, 167, 164, 393, 391, 322, 410, 287,\n//down\n273, 335, 406, 313, 18, 83, 182, 106, 43];\nvar lipsInnerFull = [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291,\n//down\n375, 321, 405, 314, 17, 84, 181, 91, 146];\nvar lipsInnerSecond = [76, 184, 74, 73, 72, 11, 302, 303, 304, 408, 306,\n//down\n307, 320, 404, 315, 16, 85, 180, 90, 77];\nvar lipsOuterCorner = [186, 410,\n//down\n273, 43];\nvar lipsInnerCorner = [185, 409,\n//down\n375, 146];\nvar lipsOuterCornerLast = [57, 287];\nvar lipsInnerCornerLast = [61, 291];\nvar lipLinerPatternConfig = [{\n  pattern: "natural",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.65,\n  cornerOffset: 0.65,\n  cornerLastOffset: 0.65,\n  innerLayerOffset: 0\n}, {\n  pattern: "wide",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.68,\n  cornerOffset: 0.57,\n  cornerLastOffset: 0.52,\n  innerLayerOffset: 0.15\n}, {\n  pattern: "small",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.85,\n  cornerOffset: 0.85,\n  cornerLastOffset: 0.85,\n  innerLayerOffset: 0.4\n}, {\n  pattern: "largeandfull",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.48,\n  cornerOffset: 0.5,\n  cornerLastOffset: 0.52,\n  innerLayerOffset: 0\n}, {\n  pattern: "largelower",\n  ignoreUpper: true,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.68,\n  outerLayerOffset: 0.5,\n  defaultCornerOffset: 0.68,\n  cornerOffset: 0.57,\n  cornerLastOffset: 0.62,\n  innerLayerOffset: 0\n}, {\n  pattern: "largeupper",\n  ignoreUpper: false,\n  ignoreLower: true,\n  defaultOuterLayerOffset: 0.68,\n  outerLayerOffset: 0.5,\n  defaultCornerOffset: 0.68,\n  cornerOffset: 0.57,\n  cornerLastOffset: 0.62,\n  innerLayerOffset: 0\n}, {\n  pattern: "rosebud",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.53,\n  cornerOffset: 0.64,\n  cornerLastOffset: 0.78,\n  innerLayerOffset: 0\n}];\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(2505);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n;// CONCATENATED MODULE: ./src/constants/authConstants.js\nvar apiKey = "";\nfunction setAPIKey(key) {\n  apiKey = key;\n}\nfunction authConstants_getAPIKey() {\n  //return "ff4146c9-386a-463d-9b7d-4191bfa35c7"; //glamarz0 decoded key\n  //return "62a16d1e-0103-4b73-9a07-57b55aeb6277";\n  return apiKey;\n}\n// EXTERNAL MODULE: ./src/env.js\nvar env = __webpack_require__(838);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.iterator.js\nvar es6_string_iterator = __webpack_require__(2975);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.iterator.js\nvar es6_array_iterator = __webpack_require__(5165);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js\nvar web_dom_iterable = __webpack_require__(5890);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.slice.js\nvar es6_array_slice = __webpack_require__(5853);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.is-array.js\nvar es6_array_is_array = __webpack_require__(7899);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.search.js\nvar es6_regexp_search = __webpack_require__(4701);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.trim.js\nvar es6_string_trim = __webpack_require__(957);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.date.to-string.js\nvar es6_date_to_string = __webpack_require__(7849);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js\nvar es6_regexp_to_string = __webpack_require__(8604);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js\nvar es6_string_starts_with = __webpack_require__(177);\n;// CONCATENATED MODULE: ./src/apiService/interceptors/index.js\n\n\n\n\n\nvar _excluded = ["common", "delete", "get", "head", "post", "put", "patch"];\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nvar combineURLs = __webpack_require__(4680);\nvar isAbsoluteURL = __webpack_require__(9137);\nvar _require = __webpack_require__(6127),\n  isBrowser = _require.isBrowser;\nvar _require2 = __webpack_require__(/* webpackChunkName: "buffer" */8287),\n  Buffer = _require2.Buffer;\n// const { transformRequestOptions } = require("./../../../helper/utils");\n\nvar _require3 = __webpack_require__(6396),\n  sign = _require3.sign;\nfunction transformRequestOptions(params) {\n  var options = "";\n  var _loop = function _loop(key) {\n    if (_typeof(params[key]) !== "object" && typeof params[key] !== "undefined") {\n      var encodeVal = encodeURIComponent(params[key]);\n      options += "".concat(key, "=").concat(encodeVal, "&");\n    } else if (Array.isArray(params[key])) {\n      // eslint-disable-next-line no-loop-func\n      params[key].forEach(function (el) {\n        var encodeVal = encodeURIComponent(params[key]);\n        options += "".concat(key, "=").concat(encodeVal, "&");\n      });\n    } else if (_typeof(params[key]) === "object" && params[key]) {\n      options += transformRequestOptions(params[key]);\n    }\n  };\n  for (var key in params) {\n    _loop(key);\n  }\n  return options ? options.slice(0, -1) : options;\n}\nfunction getTransformer(config) {\n  var transformRequest = config.transformRequest;\n  if (transformRequest) {\n    if (typeof transformRequest === "function") {\n      return transformRequest;\n    } else if (transformRequest.length) {\n      return transformRequest[0];\n    }\n  }\n  throw new Error("Could not get default transformRequest function from Axios defaults");\n}\nfunction processQueryParams(_ref) {\n  var params = _ref.params,\n    search = _ref.search;\n  var queryParam = "";\n  if (params && Object.keys(params).length) {\n    if (search && search.trim() !== "") {\n      queryParam = "&".concat(transformRequestOptions(params));\n    } else {\n      queryParam = "?".concat(transformRequestOptions(params));\n    }\n  }\n  return queryParam;\n}\nfunction base64Encode(text) {\n  return Buffer.from(text).toString("base64");\n}\nfunction interceptorFn(options) {\n  return function (config) {\n    if (!config.url) {\n      throw new Error("No URL present in request config, unable to sign request");\n    }\n    var url = config.url;\n    if (config.baseURL && !isAbsoluteURL(config.url)) {\n      url = combineURLs(config.baseURL, config.url);\n    }\n    if (url.startsWith("/api") && isBrowser) {\n      url = "https://".concat(window.location.host).concat(url);\n    }\n    var _URL = new URL(url),\n      host = _URL.host,\n      pathname = _URL.pathname,\n      search = _URL.search;\n    //log(pathname);\n    if (pathname.startsWith("/service/panel") || pathname.startsWith("/api/service/panel") || pathname.startsWith("/service/platform") || pathname.startsWith("/service/private")) {\n      var data = config.data,\n        headers = config.headers,\n        method = config.method,\n        params = config.params;\n      var queryParam = processQueryParams({\n        params: params,\n        search: search\n      });\n      var transformRequest = getTransformer(config);\n      var transformedData = transformRequest(data, headers);\n      // console.log(63, queryParam, headers, transformedData);\n      // Remove all the default Axios headers\n      var common = headers.common,\n        _delete = headers["delete"],\n        get = headers.get,\n        head = headers.head,\n        post = headers.post,\n        put = headers.put,\n        patch = headers.patch,\n        headersToSign = _objectWithoutProperties(headers, _excluded);\n      var signingOptions = {\n        method: method && method.toUpperCase(),\n        host: host,\n        path: pathname + search + queryParam,\n        body: transformedData,\n        headers: headersToSign\n      };\n      if (signingOptions["body"] && signingOptions["body"] instanceof FormData) {\n        delete signingOptions["body"];\n      }\n      sign(signingOptions);\n      // console.log(signingOptions);\n      config.headers["x-ebg-param"] = base64Encode(signingOptions.headers["x-ebg-param"]);\n      config.headers["x-ebg-signature"] = signingOptions.headers["x-ebg-signature"];\n    }\n    // console.log(config);\n    return config;\n  };\n}\nvar addSignatureFn = interceptorFn;\n// EXTERNAL MODULE: ./src/utils/globalVariables.js\nvar globalVariables = __webpack_require__(711);\n;// CONCATENATED MODULE: ./src/apiService/api-billing.js\n\n\n\n\n\nvar API = axios_default().create({\n  baseURL: "".concat(env/* default */.A.BILLING_MAIN_URL),\n  headers: {\n    "Content-Type": "application/json"\n    // Source: "web",\n  }\n});\nAPI.interceptors.request.use(addSignatureFn({}));\nAPI.defaults.withCredentials = true;\nvar setAuthorization = function setAuthorization() {\n  API.defaults.headers["Authorization"] = "Bearer ".concat(btoa(authConstants_getAPIKey()));\n};\nvar sendBilling = function sendBilling() {\n  if ((0,globalVariables/* getPlatformMode */.XG)() === "platform" || (0,globalVariables/* getPlatformMode */.XG)() === "console") return;\n  setAuthorization();\n  var body = {\n    eventType: "virtualtryon"\n  };\n  return API.post("/billing", body).then(function (response) {\n    // console.log(response);\n    return response;\n  })["catch"](function (error) {\n    // console.error("Error billing", error);\n    throw error;\n  });\n};\n;// CONCATENATED MODULE: ./src/utils/event.js\n\n\nvar parentOrigin = "";\nvar wrapper = "web";\nvar setWrapperType = function setWrapperType(type) {\n  wrapper = type;\n  //console.log("wrappertype set ---\x3e" + type);\n};\nvar sendMessage = function sendMessage(message) {\n  window.parent !== window.self && window.parent.postMessage(message, "*");\n  if (wrapper === "android" && window.Android) {\n    window.Android.onLog(JSON.stringify(message));\n  }\n  if (wrapper === "ios" && window.webkit && window.webkit.messageHandlers) {\n    window.webkit.messageHandlers.onLog.postMessage(JSON.stringify(message));\n  }\n  if (wrapper === "flutter" && window.flutter_inappwebview && window.flutter_inappwebview.callHandler) {\n    window.flutter_inappwebview.callHandler("onLog", JSON.stringify(message));\n  }\n};\nvar setParentOrigin = function setParentOrigin(origin) {\n  parentOrigin = origin;\n};\nvar emitInitComplete = function emitInitComplete() {\n  //console.log("emitInitComplete");\n  sendMessage({\n    type: "init-complete"\n  });\n};\nvar emitModuleLoading = function emitModuleLoading() {\n  // console.log("emitModuleLoading");\n  sendMessage({\n    type: "loading"\n  });\n};\nvar emitModuleLoaded = function emitModuleLoaded() {\n  // console.log("emitModuleLoaded");\n  sendMessage({\n    type: "loaded"\n  });\n};\nvar emitModuleOpened = function emitModuleOpened() {\n  //console.log("emitModuleOpened");\n  sendMessage({\n    type: "opened"\n  });\n};\nvar emitModuleClosed = function emitModuleClosed() {\n  //console.log("emitModuleClosed");\n  sendMessage({\n    type: "closed"\n  });\n};\nvar emitModuleResume = function emitModuleResume() {\n  //console.log("emitModuleResume");\n  sendMessage({\n    type: "resume"\n  });\n};\nvar emitModulePause = function emitModulePause() {\n  //console.log("emitModulePause");\n  sendMessage({\n    type: "pause"\n  });\n};\nvar emitCameraOpened = function emitCameraOpened() {\n  //console.log("emitCameraOpened");\n  sendMessage({\n    type: "camera-opened"\n  });\n};\nvar emitModelTryonModeStarted = function emitModelTryonModeStarted() {\n  //console.log("emitModelTryonModeStarted");\n  sendMessage({\n    type: "ModelMode-started"\n  });\n};\nvar emitUploadModeStarted = function emitUploadModeStarted() {\n  //console.log("emitUploadModeStarted");\n  sendMessage({\n    type: "uploadMode-started"\n  });\n};\nvar emitLiveModeStarted = function emitLiveModeStarted() {\n  //console.log("emitLiveModeStarted");\n  sendMessage({\n    type: "liveMode-started"\n  });\n};\nvar emitCameraClosed = function emitCameraClosed() {\n  //console.log("emitCameraClosed");\n  sendMessage({\n    type: "camera-closed"\n  });\n};\nvar emitCameraFailed = function emitCameraFailed() {\n  //console.log("emitCameraFailed");\n  sendMessage({\n    type: "camera-failed"\n  });\n};\nvar emitCameraAccessIssue = function emitCameraAccessIssue() {\n  //console.log("emitCameraFailed");\n  sendMessage({\n    type: "camera-access-issue"\n  });\n};\nvar emitPhotoLoaded = function emitPhotoLoaded(base64) {\n  // console.log("emitPhotoLoaded", base64);\n  sendMessage({\n    type: "photo-loaded",\n    payload: {\n      image: base64,\n      status: "success"\n    }\n  });\n};\nvar emitPhotoLoadedFailed = function emitPhotoLoadedFailed() {\n  sendMessage({\n    type: "photo-loaded",\n    payload: {\n      image: null,\n      status: "failed"\n    }\n  });\n};\nvar emitSKUApplied = function emitSKUApplied() {\n  //console.log("emitSKUApplied");\n  sendBilling();\n  sendMessage({\n    type: "sku-applied"\n  });\n  // console.log("emitSKUApplied");\n};\nvar emitSKUFailed = function emitSKUFailed() {\n  sendMessage({\n    type: "sku-failed"\n  });\n};\nvar emitSubscriptionIssue = function emitSubscriptionIssue(response) {\n  sendMessage({\n    type: "subscription-invalid",\n    payload: {\n      response: response\n    }\n  });\n};\nvar emitReset = function emitReset() {\n  //console.log("emitReset");\n  sendMessage({\n    type: "reset"\n  });\n};\nvar emitUploadCancelled = function emitUploadCancelled() {\n  sendMessage({\n    type: "upload-cancelled"\n  });\n};\nvar emitUploadStarted = function emitUploadStarted() {\n  sendMessage({\n    type: "upload-started"\n  });\n};\nvar event_emitError = function emitError(error) {\n  sendMessage({\n    type: "error",\n    error: error\n  });\n};\nvar emitNailColorEvent = function emitNailColorEvent(option, val) {\n  // console.log("emitNailColorEvent", option, val);\n  sendMessage({\n    type: "nailcolor",\n    payload: {\n      options: option,\n      value: val\n    }\n  });\n  //console.log(option, val);\n};\nvar emitFaceAnalysisEvent = function emitFaceAnalysisEvent(option, val) {\n  // console.log("emitFaceAnalysisEvent", option, val);\n  sendMessage({\n    type: "faceAnalysis",\n    payload: {\n      options: option,\n      value: val\n    }\n  });\n  //console.log(option, val);\n};\n// EXTERNAL MODULE: ./node_modules/@mediapipe/tasks-vision/vision_bundle.mjs\nvar vision_bundle = __webpack_require__(3260);\n;// CONCATENATED MODULE: ./src/MLModels/face_landmarker.task\n/* harmony default export */ const face_landmarker = (__webpack_require__.p + "assets/src/MLModels/face_landmarker.task");\n;// CONCATENATED MODULE: ./src/assets/svg/Error.svg\n/* harmony default export */ const svg_Error = (__webpack_require__.p + "assets/src/assets/svg/Error.svg");\n;// CONCATENATED MODULE: ./src/htmlService/errorPanel.js\n\nvar Panel = null;\nvar msg = null;\nvar img = null;\nvar btn = null;\nfunction hideErrorPermissionPanel() {\n  Panel.style.display = "none";\n}\nfunction errorPanel_showErrorPermissionPanel(msgText) {\n  msg.innerHTML = msgText || "Something Went Wrong";\n  Panel.style.display = "flex";\n}\nfunction setErrorElement(handler) {\n  Panel = document.querySelector(".error-panel");\n  msg = document.querySelector(".error-message");\n  img = document.getElementById("error-icon");\n  btn = document.getElementById("error-btn");\n  img.src = svg_Error;\n  msg.innerHTML = "Something Went Wrong";\n  hideErrorPermissionPanel();\n  btn.addEventListener("click", function () {\n    handleErrorPermissionClickEvent(handler);\n  });\n}\nvar handleErrorPermissionClickEvent = function handleErrorPermissionClickEvent(handler) {\n  handler();\n};\n;// CONCATENATED MODULE: ./src/MLModelProviders/landmarks_provider.js\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n//import { transformLandmarks } from "./eyeliner_landmark_helper";\n\nvar FacemeshLandmarksProvider = /*#__PURE__*/function () {\n  function FacemeshLandmarksProvider(callback, outputcanvas) {\n    _classCallCheck(this, FacemeshLandmarksProvider);\n    this.isold = false;\n    this.callback = callback;\n    this.faceMesh = null;\n    this.faceLandmarker;\n    this.runningMode = "VIDEO";\n    this.init = false;\n    this.landmarks;\n    this.distanceState = -1;\n    this.prevdistanceState = -1;\n    this.positionState = -1;\n    this.prevPositionState = -1;\n    this.shouldCalculate = false;\n    this.result;\n    this.lastVideoTime = -1;\n  }\n  _createClass(FacemeshLandmarksProvider, [{\n    key: "send",\n    value: function send(image) {\n      var _this = this;\n      var _shouldCalculate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isVideo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      this.shouldCalculate = _shouldCalculate;\n      if (this.isold) {\n        return new Promise(function (resolve, reject) {\n          _this.faceMesh.send({\n            image: image\n          }).then(function () {\n            // Add any additional logic after successful send\n            resolve(); // Resolve the Promise upon successful completion\n          })["catch"](function (error) {\n            // Handle errors from the send method\n            // console.error("Error sending image:", error);\n            // Perform appropriate actions based on the error, such as retries or fallbacks\n            reject(error); // Reject the Promise with the encountered error\n          });\n        });\n      } else {\n        if (isVideo) {\n          if (this.lastVideoTime !== image.currentTime) {\n            this.lastVideoTime = image.currentTime;\n            this.result = this.faceLandmarker.detectForVideo(image, performance.now());\n          }\n        } else {\n          this.result = this.faceLandmarker.detect(image);\n        }\n        this.landmarks = this.result.faceLandmarks[0];\n        var multiFaceLandmarks = transformLandmarks(this.result.faceLandmarks[0]);\n        if (this.shouldCalculate && this.landmarks) {\n          this.calculateDistance(this.landmarks[300].x, this.landmarks[70].x, this.landmarks[300].y, this.landmarks[70].y);\n          this.categorizePosition(this.landmarks[4].x, this.landmarks[4].y);\n        }\n        this.callback({\n          image: image,\n          landmarks: multiFaceLandmarks,\n          ogLandmarks: this.result.faceLandmarks[0]\n        });\n      }\n    }\n  }, {\n    key: "onResults",\n    value: function onResults(_ref) {\n      var image = _ref.image,\n        multiFaceLandmarks = _ref.multiFaceLandmarks,\n        multiFaceGeometry = _ref.multiFaceGeometry;\n      if (this.isold) {\n        if (image != null && multiFaceLandmarks != null) {\n          this.landmarks = multiFaceLandmarks[0];\n          multiFaceLandmarks = transformLandmarks(multiFaceLandmarks[0]);\n          this.callback({\n            image: image,\n            landmarks: multiFaceLandmarks\n          });\n          if (this.shouldCalculate && this.landmarks) {\n            this.calculateDistance(this.landmarks[300].x, this.landmarks[70].x, this.landmarks[300].y, this.landmarks[70].y);\n            this.categorizePosition(this.landmarks[4].x, this.landmarks[4].y);\n            //console.log(this.landmarks[9].x, this.landmarks[9].y);\n          }\n        }\n      }\n    }\n  }, {\n    key: "createFaceLandmark",\n    value: function () {\n      var _createFaceLandmark = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var response, vision;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return fetch("".concat(env/* default */.A.GlamAR_CDN, "original/glamar-ml-models/face_landmarker.task"));\n              case 3:\n                response = _context.sent;\n                if (response.ok) {\n                  _context.next = 7;\n                  break;\n                }\n                throw new Error("Failed to fetch the model file from CDN");\n              case 7:\n                _context.next = 9;\n                return vision_bundle/* FilesetResolver */.Ps.forVisionTasks("".concat(PUBLIC_PATH, "/mediapipe/task-vision/wasm"));\n              case 9:\n                vision = _context.sent;\n                _context.next = 12;\n                return vision_bundle/* FaceLandmarker */.pR.createFromOptions(vision, {\n                  baseOptions: {\n                    modelAssetPath: response.url,\n                    delegate: "GPU"\n                  },\n                  outputFaceBlendshapes: false,\n                  outputFacialTransformationMatrixes: false,\n                  runningMode: this.runningMode,\n                  numFaces: 1\n                });\n              case 12:\n                this.faceLandmarker = _context.sent;\n                this.init = true;\n                // console.log("success");\n                _context.next = 20;\n                break;\n              case 16:\n                _context.prev = 16;\n                _context.t0 = _context["catch"](0);\n                errorPanel_showErrorPermissionPanel();\n                this.init = false;\n                // console.log("error");\n                // Handle errors here\n                // console.error("Error in createImageSegmenter:", error);\n                // You might want to throw the error again to propagate it to the caller\n                //throw error;\n              case 20:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 16]]);\n      }));\n      function createFaceLandmark() {\n        return _createFaceLandmark.apply(this, arguments);\n      }\n      return createFaceLandmark;\n    }()\n  }, {\n    key: "initialize",\n    value: function () {\n      var _initialize = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!this.isold) {\n                  _context2.next = 5;\n                  break;\n                }\n                _context2.next = 3;\n                return this.initializeOld();\n              case 3:\n                _context2.next = 7;\n                break;\n              case 5:\n                _context2.next = 7;\n                return this.createFaceLandmark();\n              case 7:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: "initializeOld",\n    value: function () {\n      var _initializeOld = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var onResults;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // console.log("face init");\n                onResults = this.onResults.bind(this);\n                this.faceMesh = new face_mesh.FaceMesh({\n                  locateFile: function locateFile(file) {\n                    var url = "".concat(PUBLIC_PATH, "/mediapipe/").concat(file);\n                    return url;\n                  }\n                });\n                this.faceMesh.setOptions({\n                  maxNumFaces: 1,\n                  //enableFaceGeometry: true,\n                  selfieMode: true,\n                  refineLandmarks: true,\n                  minDetectionConfidence: 0.5,\n                  minTrackingConfidence: 0.5,\n                  useCpuInference: true\n                });\n                this.faceMesh.onResults(onResults);\n                _context3.next = 6;\n                return this.faceMesh.initialize();\n              case 6:\n                this.init = true;\n              case 7:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function initializeOld() {\n        return _initializeOld.apply(this, arguments);\n      }\n      return initializeOld;\n    }()\n  }, {\n    key: "IsInit",\n    value: function IsInit() {\n      return this.init;\n    }\n  }, {\n    key: "setSelfieMode",\n    value: function () {\n      var _setSelfieMode = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4(state) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.IsInit()) {\n                  _context4.next = 2;\n                  break;\n                }\n                return _context4.abrupt("return");\n              case 2:\n                if (!this.isold) {\n                  _context4.next = 6;\n                  break;\n                }\n                this.faceMesh.setOptions({\n                  selfieMode: state\n                });\n                _context4.next = 11;\n                break;\n              case 6:\n                if (!(this.getState() === state)) {\n                  _context4.next = 8;\n                  break;\n                }\n                return _context4.abrupt("return");\n              case 8:\n                if (state) this.runningMode = "VIDEO";else this.runningMode = "IMAGE";\n                _context4.next = 11;\n                return this.faceLandmarker.setOptions({\n                  runningMode: this.runningMode\n                });\n              case 11:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function setSelfieMode(_x) {\n        return _setSelfieMode.apply(this, arguments);\n      }\n      return setSelfieMode;\n    }()\n  }, {\n    key: "getState",\n    value: function getState() {\n      if (this.runningMode === "IMAGE") return false;else return true;\n    }\n  }, {\n    key: "close",\n    value: function () {\n      var _close = _asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this.isold) {\n                  _context5.next = 3;\n                  break;\n                }\n                _context5.next = 3;\n                return this.faceMesh.close();\n              case 3:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }, {\n    key: "calculateDistance",\n    value: function calculateDistance(lefteye, righteyes, lefteyeY, righteyesY) {\n      var eyeToEye = 13.0;\n      var depthToFace = 48.0;\n      var eyeToEyeInPixel = 384.5;\n\n      // Calculate focal length\n      var calculatedFocalLength = this.focalLength(depthToFace, eyeToEye, eyeToEyeInPixel);\n\n      // Calculate eye measurement (assuming x_300 and x_70 are defined)\n      var x_300 = lefteye;\n      var x_70 = righteyes;\n      var y_300 = lefteyeY;\n      var y_70 = righteyesY;\n      var distance;\n      if (Math.abs(x_300 - x_70) > Math.abs(y_300 - y_70)) {\n        distance = Math.abs(x_300 - x_70);\n      } else {\n        distance = Math.abs(y_300 - y_70);\n      }\n      var eyeMeasurement = distance; //Math.abs(x_300 - x_70);\n\n      // Calculate distance\n      var calculatedDistance = this.distanceFinder(calculatedFocalLength, eyeToEye, eyeMeasurement);\n      var categorizedDepth = this.categorizeDepth(calculatedDistance);\n    }\n  }, {\n    key: "categorizeDepth",\n    value: function categorizeDepth(distance) {\n      var smallThreshold = 40000;\n      var mediumThreshold = 72000;\n\n      // if (isMobileDevice()) {\n      //   smallThreshold = 50000;\n      //   mediumThreshold = 100000;\n      // }\n      var msg = null;\n      //console.log("distance", distance);\n      if (distance < smallThreshold) {\n        this.distanceState = 1;\n        //emitRecognizationDistanceAlert("TOO_CLOSE");\n        msg = "TOO_CLOSE";\n        // showDistanceMessagePanel();\n        // setDistanceMsg("Too Close");\n      } else if (distance > mediumThreshold) {\n        this.distanceState = 2;\n        //emitRecognizationDistanceAlert("TOO_FAR");\n        msg = "TOO_FAR";\n        // showDistanceMessagePanel();\n        // setDistanceMsg("Too far");\n      } else {\n        this.distanceState = 0;\n        //emitRecognizationDistanceAlert("PERFECT");\n        msg = "PERFECT";\n        //hideDistanceMessagePanel();\n      }\n      if (this.distanceState !== this.prevdistanceState) {\n        if (msg) {\n          var json = {\n            state: this.distanceState,\n            message: msg\n          };\n          emitFaceAnalysisEvent("distance", json);\n        }\n        this.prevdistanceState = this.distanceState;\n      }\n      return distance > smallThreshold && distance < mediumThreshold ? false : true;\n    }\n  }, {\n    key: "categorizePosition",\n    value: function categorizePosition(xdist, ydist) {\n      var xMinThresold = 0.4;\n      var xMaxThresold = 0.6;\n      var yMinThresold = 0.4;\n      var yMaxThresold = 0.75;\n      var msg = null;\n      //console.log("distance", distance);\n      if (xdist > xMinThresold && xdist < xMaxThresold && ydist > yMinThresold && ydist < yMaxThresold) {\n        this.positionState = 0;\n        msg = "PERFECT";\n      } else {\n        this.positionState = 1;\n        msg = "Out";\n      }\n      if (this.positionState !== this.prevPositionState) {\n        if (msg) {\n          var json = {\n            state: this.positionState,\n            message: msg\n          };\n          emitFaceAnalysisEvent("position", json);\n        }\n        this.prevPositionState = this.positionState;\n      }\n    }\n  }, {\n    key: "focalLength",\n    value: function focalLength(depthToFace, eyeToEye, eyeToEyeInPixel) {\n      return eyeToEyeInPixel * depthToFace / eyeToEye;\n    }\n\n    // Function to find distance based on focal length, eye-to-eye in pixels, and width calculated\n  }, {\n    key: "distanceFinder",\n    value: function distanceFinder(focalLength, eyeToEyeInPixel, widthCalculated) {\n      var distance = eyeToEyeInPixel * focalLength / widthCalculated;\n      return distance - 6;\n    }\n  }]);\n  return FacemeshLandmarksProvider;\n}();\n;// CONCATENATED MODULE: ./src/utils/general.js\n\n\n\n\n\nvar hexToRgb = function hexToRgb(hex) {\n  if (!hex) return [0, 0, 1];\n  // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? [parseInt(result[1], 16), parseInt(result[2], 16), parseInt(result[3], 16)] : [0, 0, 1];\n};\nvar isMobile = function isMobile() {\n  var isAndroid = /Android/i.test(navigator.userAgent);\n  var isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\n  return isAndroid || isiOS;\n};\nvar canvasToBlob = function canvasToBlob(canvas) {\n  return new Promise(function (resolve) {\n    canvas.toBlob(function (blob) {\n      resolve(blob);\n    });\n  });\n};\nvar isEmpty = function isEmpty(item) {\n  return item === null || item === undefined;\n};\nvar createSkuParamsString = function createSkuParamsString(params) {\n  var str = new URLSearchParams(params).toString();\n  return str;\n};\nvar getAspectRatio = function getAspectRatio(width, height) {\n  var divisor = gcd(width, height);\n  var aspectWidth = width / divisor;\n  var aspectHeight = height / divisor;\n  return {\n    aspectWidth: aspectWidth,\n    aspectHeight: aspectHeight\n  };\n};\nfunction gcd(a, b) {\n  while (b != 0) {\n    var t = b;\n    b = a % b;\n    a = t;\n  }\n  return a;\n}\n;// CONCATENATED MODULE: ./src/threeComponents/video_bg.js\nfunction video_bg_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction video_bg_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction video_bg_createClass(Constructor, protoProps, staticProps) { if (protoProps) video_bg_defineProperties(Constructor.prototype, protoProps); if (staticProps) video_bg_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\nvar plane;\nfunction getCurrentPlaneMap() {\n  return plane.material.map.clone();\n  //return plane.material.map;\n}\nvar VideoBackground = /*#__PURE__*/function () {\n  function VideoBackground(scene, width, height) {\n    video_bg_classCallCheck(this, VideoBackground);\n    this.scene = scene;\n    this.image = null;\n    // plane = null;\n    this.width = width;\n    this.height = height;\n    this.imageUpdated = false;\n    this.sizeUpdated = false;\n    this.isVideo = true;\n    this.flipCanvas = false;\n    this.video;\n    this.log;\n    this.texture;\n  }\n  video_bg_createClass(VideoBackground, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      if (plane) {\n        plane.scale.x = width;\n        plane.scale.y = height;\n      }\n    }\n  }, {\n    key: "setImage",\n    value: function setImage(image, isvideo_, flip) {\n      this.image = image;\n      this.imageUpdated = true;\n      this.isVideo = isvideo_;\n\n      // if (flip && flip === true) {\n      //   this.flipCanvas = flip;\n      //   if (plane) plane.scale.set(-1, 1, 1);\n      // } else {\n      //   this.flipCanvas = false;\n      //   if (plane) plane.scale.set(1, 1, 1);\n      // }\n    }\n  }, {\n    key: "createNewPlane",\n    value: function createNewPlane(video) {\n      this.video = video;\n      var geometry = this.createGeometry();\n      if (video) {\n        this.texture = new three_module/* VideoTexture */.Nv2(video);\n        this.texture.generateMipmaps = false;\n        this.texture.minFilter = three_module/* LinearFilter */.k6q;\n        this.texture.magFilter = three_module/* LinearFilter */.k6q;\n        this.texture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      }\n      var material = new three_module/* MeshBasicMaterial */.V9B({\n        map: this.texture,\n        depthWrite: false,\n        toneMapped: false,\n        fog: false\n      });\n      plane = new three_module/* Mesh */.eaF(geometry, material);\n\n      //plane.scale.set(1, 1, 1);\n      // this.updateDimensions();\n      this.addPlaneToScene();\n    }\n  }, {\n    key: "updatePlaneWithImage",\n    value: function updatePlaneWithImage(texture) {\n      if (plane) {\n        texture.colorSpace = three_module/* SRGBColorSpace */.er$;\n        texture.generateMipmaps = false;\n        plane.material.map = texture;\n        plane.material.needsUpdate = true;\n      } else {\n        texture.colorSpace = three_module/* SRGBColorSpace */.er$;\n        texture.generateMipmaps = false;\n        var geometry = this.createGeometry();\n        var material = new three_module/* MeshBasicMaterial */.V9B({\n          map: texture,\n          depthWrite: false,\n          toneMapped: false,\n          fog: false\n        });\n        plane = new three_module/* Mesh */.eaF(geometry, material);\n        this.addPlaneToScene();\n      }\n    }\n\n    // createNewPlane() {\n    //   const geometry = this.createGeometry();\n    //   const material = this.createMaterial();\n\n    //   plane = new THREE.Mesh(geometry, material);\n    //   if (this.flipCanvas) {\n    //     //  console.log(this.flipCanvas);\n    //     plane.scale.set(-1, 1, 1);\n    //   } else plane.scale.set(1, 1, 1);\n    //   // this.updateDimensions();\n    //   this.addPlaneToScene();\n    //   if (this.isVideo) plane.material = this.createMaterial();\n    //   else plane.material = this.createMaterialImage();\n    // }\n  }, {\n    key: "addPlaneToScene",\n    value: function addPlaneToScene() {\n      if (plane != null) {\n        // this.updateDimensions();\n        this.scene.add(plane);\n        plane.position.set(0, 0, 0);\n      }\n    }\n  }, {\n    key: "createGeometry",\n    value: function createGeometry() {\n      return new three_module/* PlaneGeometry */.bdM(1, 1);\n    }\n  }, {\n    key: "createMaterial",\n    value: function createMaterial() {\n      if (this.image == null) {\n        return new three_module/* MeshBasicMaterial */.V9B({\n          color: new three_module/* Color */.Q1f(0xcccccc)\n        });\n      }\n      // console.log(this.image);\n      var texture = new three_module/* VideoTexture */.Nv2(this.image);\n\n      // texture.colorSpace = THREE.SRGBColorSpace;\n      var material = new three_module/* MeshBasicMaterial */.V9B({\n        map: texture //new THREE.CanvasTexture(this.image),\n        // depthWrite: false,\n        //color: 0xffff00,\n      });\n      return material;\n    }\n  }, {\n    key: "createMaterialImage",\n    value: function createMaterialImage() {\n      if (this.image == null) {\n        return new three_module/* MeshBasicMaterial */.V9B({\n          color: new three_module/* Color */.Q1f(0xcccccc)\n        });\n      }\n      var material = new three_module/* MeshBasicMaterial */.V9B({\n        map: this.image\n        //color: 0xffff00,\n      });\n      // material.needsUpdate = true;\n      return material;\n    }\n  }, {\n    key: "removePlaneFromScene",\n    value: function removePlaneFromScene() {\n      // this.scene.remove(plane);\n      // plane = null;\n    }\n  }, {\n    key: "update",\n    value: function update(trueVideoWidth, trueVideoHeight) {\n      if (plane) {\n        /*\n        let windowAspect = window.innerWidth / window.innerHeight;\n        var mql = window.matchMedia("(orientation: portrait)");\n        let cw = this.video.videoWidth;\n        let ch = this.video.videoHeight;\n         let videoAspect;\n         if (mql.matches && isMobileDevice()) videoAspect = ch / cw;\n        else videoAspect = cw / ch;\n         let offset = 1;\n        let diff = 0;\n        let boundry = 0;\n         if (mql.matches && isMobileDevice()) {\n          offset = videoAspect;\n        } else {\n          if (windowAspect < videoAspect) {\n            diff = videoAspect - windowAspect;\n            offset = videoAspect - diff;\n            if (windowAspect < 1) offset = 1;\n          } else {\n            offset = videoAspect;\n          }\n        }\n         // this.log.innerHTML = `v9+${windowAspect} + ${videoAspect} + ${offset}\n        // + ${this.video.videoWidth}+ ${this.video.videoHeight} +${window.innerWidth}+${window.innerHeight}\n        // +${mql.matches}+  ${trueVideoWidth}+ ${trueVideoHeight} +  ${diff}`;\n         plane.scale.x = cw / offset;\n        plane.scale.y = ch / offset;\n        */\n        plane.scale.x = trueVideoWidth;\n        plane.scale.y = trueVideoHeight;\n      }\n      // if (plane == null) {\n      //   this.createNewPlane();\n      // }\n      // if (this.sizeUpdated) {\n      //   this.removePlaneFromScene();\n      //   this.createNewPlane();\n      //   this.sizeUpdated = false;\n      //   this.imageUpdated = false;\n      // }\n      // if (this.imageUpdated) {\n      //   if (this.isVideo) null; //plane.material = this.createMaterial();\n      //   else plane.material = this.createMaterialImage();\n      //   this.imageUpdated = false;\n      // }\n    }\n  }]);\n  return VideoBackground;\n}();\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(7024);\n;// CONCATENATED MODULE: ./src/utils/modelDataProvider.js\n\nfunction modelDataProvider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction modelDataProvider_createClass(Constructor, protoProps, staticProps) { if (protoProps) modelDataProvider_defineProperties(Constructor.prototype, protoProps); if (staticProps) modelDataProvider_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction modelDataProvider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nvar modelDataProvider = /*#__PURE__*/modelDataProvider_createClass(function modelDataProvider(data) {\n  modelDataProvider_classCallCheck(this, modelDataProvider);\n  this.category = data.category;\n  this.subCategory = data.subCategory;\n  this.imageUrl = data.imageUrl;\n  this.isActive = data.isActive;\n});\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/environments/RoomEnvironment.js\nvar RoomEnvironment = __webpack_require__(3950);\n// EXTERNAL MODULE: ./src/assets/svg/align_face.svg\nvar align_face = __webpack_require__(6356);\n;// CONCATENATED MODULE: ./src/assets/svg/hand_icon.svg\n/* harmony default export */ const hand_icon = (__webpack_require__.p + "assets/src/assets/svg/hand_icon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/nail_icon.svg\n/* harmony default export */ const nail_icon = (__webpack_require__.p + "assets/src/assets/svg/nail_icon.svg");\n;// CONCATENATED MODULE: ./src/htmlService/alignMessagePanel.js\n\n\n\n\n\nvar alignMessagePanel_Panel = null;\nvar alignMessagePanel_msg = null;\nvar alignMessagePanel_img = null;\nvar CurrentType;\nvar CurrentMsg;\nvar isShowing = false;\nfunction updateAlignUI(type, message) {\n  if (CurrentType && CurrentMsg && CurrentType === type && CurrentMsg == message) return;\n  setAlignMsg(message);\n  setAlignIcon(type);\n  event_emitError(message);\n  CurrentType = type;\n  CurrentMsg = message;\n}\nfunction setAlignMsg(message) {\n  alignMessagePanel_msg.innerHTML = message;\n}\nfunction setAlignIcon(type) {\n  // if (CurrentType && CurrentType === type) return;\n  // CurrentType = type;\n  switch (type) {\n    case "face":\n      alignMessagePanel_img.src = align_face/* default */.A;\n      break;\n    case "hand":\n      alignMessagePanel_img.src = hand_icon;\n      break;\n    case "ring":\n      alignMessagePanel_img.src = hand_icon;\n      break;\n    default:\n  }\n}\nfunction hideAlignMessagePanel() {\n  if (isShowing) {\n    updatePanel("none");\n    isShowing = false;\n  }\n  //Panel.style.display = "none";\n}\nfunction showAlignMessagePanel(url) {\n  if (!isShowing) {\n    updatePanel("flex");\n    isShowing = true;\n  }\n  // Panel.style.display = "flex";\n}\nvar debouncedUpdatePanel = debounce(function (state) {\n  alignMessagePanel_Panel.style.display = state;\n}, 100); // Adjust delay as needed\n\nfunction updatePanel(state) {\n  debouncedUpdatePanel(state);\n}\nfunction setAlignMessageElement() {\n  //console.error("emitNailColorEvent");\n  alignMessagePanel_Panel = document.querySelector(".align-message-panel");\n  alignMessagePanel_msg = document.querySelector(".align-message");\n  alignMessagePanel_img = document.getElementById("align-icon");\n  alignMessagePanel_Panel.style.display = "none";\n  isShowing = false;\n  hideAlignMessagePanel();\n}\nfunction debounce(func, delay) {\n  var timerId;\n  return function () {\n    var _this = this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(function () {\n      return func.apply(_this, args);\n    }, delay);\n  };\n}\n;// CONCATENATED MODULE: ./src/htmlService/getHtmlElemets.js\nvar loaderContainer = null;\nvar LoaderImage = null;\nvar videoContainer = null;\nvar video_Container = null;\nvar optionsContainer = null;\nvar canavas_container = null;\nvar imageInput = null;\nvar dragContainer = null;\nvar dragLineSpan = null;\nvar dragIcon = null;\nvar modelsContainer = null;\nvar dropZone = null;\nvar canvas = null;\nvar configurationContainer = null;\nvar configurationSubContainer = null;\nvar toastElement = null;\nvar canvasBackButton = null;\nvar log = null;\nvar tryOnScreen = null;\nvar settingOptions = null;\nvar statusPill = null;\nvar popupModal = null;\nvar screenShotTag = null;\nvar lottieLoader = null;\nvar captureTimer = null;\nvar configSettings = null;\nvar setHtmlElements = function setHtmlElements() {\n  loaderContainer = document.querySelector(".loader-container");\n  LoaderImage = document.getElementById("loadergif");\n  videoContainer = document.querySelector(".video-container");\n  video_Container = document.querySelector(".video_container");\n  optionsContainer = document.querySelector(".options-conatiner");\n  canavas_container = document.querySelector(".canavas_container");\n  imageInput = document.getElementById("imageInput");\n  dragContainer = document.querySelector(".drag-container");\n  dragLineSpan = document.querySelector(".drag-line-container");\n  dragIcon = document.querySelector(".drag-btn");\n  modelsContainer = document.querySelector(".models-container");\n  dropZone = document.getElementById("dropZone");\n  canvas = document.querySelector(".output_canvas");\n  configurationContainer = document.querySelector(".configuration-container");\n  configurationSubContainer = document.querySelector(".configuration-sub-container");\n  toastElement = document.getElementById("snackbar");\n  canvasBackButton = document.querySelector("#canvas-back-btn");\n  log = document.querySelector(".log-Text");\n  tryOnScreen = document.querySelector(".tryon-screen");\n  settingOptions = document.querySelector(".setting-options");\n  statusPill = document.querySelector(".status-pill");\n  popupModal = document.querySelector(".popup-modal");\n  screenShotTag = document.querySelector(".screenshot-tag");\n  lottieLoader = document.querySelector("#lottie");\n  captureTimer = document.querySelector(".capture-timer");\n  configSettings = document.querySelector(".config-settings-fs");\n};\nfunction getHtmlElements() {\n  return {\n    loaderContainer: loaderContainer,\n    LoaderImage: LoaderImage,\n    videoContainer: videoContainer,\n    video_Container: video_Container,\n    optionsContainer: optionsContainer,\n    canavas_container: canavas_container,\n    imageInput: imageInput,\n    dragContainer: dragContainer,\n    dragLineSpan: dragLineSpan,\n    dragIcon: dragIcon,\n    modelsContainer: modelsContainer,\n    dropZone: dropZone,\n    canvas: canvas,\n    configurationContainer: configurationContainer,\n    configurationSubContainer: configurationSubContainer,\n    toastElement: toastElement,\n    canvasBackButton: canvasBackButton,\n    log: log,\n    tryOnScreen: tryOnScreen,\n    settingOptions: settingOptions,\n    statusPill: statusPill,\n    popupModal: popupModal,\n    screenShotTag: screenShotTag,\n    lottieLoader: lottieLoader,\n    captureTimer: captureTimer,\n    configSettings: configSettings\n  };\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js\nvar es6_function_name = __webpack_require__(489);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.from.js\nvar es6_array_from = __webpack_require__(3863);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/settingOptions.css\nvar styles_settingOptions = __webpack_require__(6009);\n;// CONCATENATED MODULE: ./src/htmlService/styles/settingOptions.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(styles_settingOptions/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_settingOptions = (styles_settingOptions/* default */.A && styles_settingOptions/* default */.A.locals ? styles_settingOptions/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/assets/svg/settingIcon.svg\n/* harmony default export */ const settingIcon = (__webpack_require__.p + "assets/src/assets/svg/settingIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/zoomIn.svg\n/* harmony default export */ const zoomIn = (__webpack_require__.p + "assets/src/assets/svg/zoomIn.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/zoomOut.svg\n/* harmony default export */ const zoomOut = (__webpack_require__.p + "assets/src/assets/svg/zoomOut.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/compareIcon.svg\n/* harmony default export */ const compareIcon = (__webpack_require__.p + "assets/src/assets/svg/compareIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/sliderSelected.svg\n/* harmony default export */ const sliderSelected = (__webpack_require__.p + "assets/src/assets/svg/sliderSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/settingsIconSelected.svg\n/* harmony default export */ const settingsIconSelected = (__webpack_require__.p + "assets/src/assets/svg/settingsIconSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/downloadIcon.svg\n/* harmony default export */ const downloadIcon = (__webpack_require__.p + "assets/src/assets/svg/downloadIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/reset-icon.svg\n/* harmony default export */ const reset_icon = (__webpack_require__.p + "assets/src/assets/svg/reset-icon.svg");\n;// CONCATENATED MODULE: ./src/htmlService/settingOptions.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar SettingOptionsConfig = [{\n  tag: "configSettings",\n  icon: settingIcon,\n  selectedIcon: settingsIconSelected,\n  isSelected: false,\n  isDisabled: false,\n  show: true,\n  toggleRequired: true\n}, {\n  tag: "comparison",\n  icon: compareIcon,\n  selectedIcon: sliderSelected,\n  isSelected: false,\n  isDisabled: false,\n  show: true,\n  toggleRequired: true\n}, {\n  tag: "zoomIn",\n  icon: zoomIn,\n  selectedIcon: zoomIn,\n  isSelected: false,\n  isDisabled: false,\n  show: true,\n  toggleRequired: false\n}, {\n  tag: "zoomOut",\n  icon: zoomOut,\n  selectedIcon: zoomOut,\n  isSelected: false,\n  isDisabled: true,\n  show: true,\n  toggleRequired: false\n}, {\n  tag: "capture",\n  icon: downloadIcon,\n  selectedIcon: downloadIcon,\n  isSelected: false,\n  isDisabled: true,\n  show: true,\n  toggleRequired: false\n  // customIcon: true,\n}, {\n  tag: "reset",\n  icon: reset_icon,\n  selectedIcon: reset_icon,\n  isSelected: false,\n  isDisabled: true,\n  show: false,\n  toggleRequired: false\n}];\nvar ElementsList = [];\nfunction buildSettingOptions(handler) {\n  var _getHtmlElements = getHtmlElements(),\n    settingOptions = _getHtmlElements.settingOptions;\n  var container = document.createElement("div");\n  container.classList.add("settingOptions-container");\n  SettingOptionsConfig.forEach(function (item, index) {\n    var iconContainer = document.createElement("div");\n    iconContainer.classList.add("settingOptions-icon-container");\n    if (item !== null && item !== void 0 && item.isDisabled) {\n      iconContainer.classList.add("settingOptions-icon-disabled");\n    }\n    if (!(item !== null && item !== void 0 && item.customIcon)) {\n      var iconWrapperDiv = document.createElement("div");\n      iconWrapperDiv.classList.add("settingOptions-icon-wrapper");\n      var icon = document.createElement("img");\n      icon.id = "settingIcon-".concat(item.tag);\n      icon.src = item.icon;\n      iconWrapperDiv.appendChild(icon);\n      iconContainer.appendChild(iconWrapperDiv);\n      if (!item.show) {\n        iconContainer.classList.add("hide-setting-icon");\n      }\n    } else {\n      var _iconWrapperDiv = document.createElement("div");\n      _iconWrapperDiv.classList.add("settingOptions-custom-icon-wrapper");\n      var customIcon = document.createElement("div");\n      customIcon.classList.add("settingOptions-custom-icon");\n      _iconWrapperDiv.appendChild(customIcon);\n      iconContainer.appendChild(_iconWrapperDiv);\n    }\n    container.appendChild(iconContainer);\n    ElementsList.push(iconContainer);\n    iconContainer.addEventListener("click", function () {\n      handleSettingIconClick(item, index, handler);\n    });\n  });\n  settingOptions.appendChild(container);\n}\nfunction handleSettingIconClick(configItem, ClickedIndex, handler) {\n  if (configItem.isDisabled) return;\n  if (configItem !== null && configItem !== void 0 && configItem.toggleRequired) {\n    handleToggle(configItem, ClickedIndex);\n  }\n  handler(configItem, ClickedIndex, ElementsList);\n}\nfunction handleToggle(configItem, ClickedIndex) {\n  // handle clicked item first\n  var icon = document.getElementById("settingIcon-".concat(configItem.tag));\n  if (configItem.isSelected && !(configItem !== null && configItem !== void 0 && configItem.customIcon)) {\n    ElementsList[ClickedIndex].classList.remove("settingOptions-icon-selected");\n    configItem.isSelected = false;\n    icon.src = configItem.icon;\n  } else if (!configItem.isSelected && !(configItem !== null && configItem !== void 0 && configItem.customIcon)) {\n    ElementsList[ClickedIndex].classList.add("settingOptions-icon-selected");\n    configItem.isSelected = true;\n    icon.src = configItem.selectedIcon;\n  }\n  // toggle icon that requires to be toggled\n  var _iterator = _createForOfIteratorHelper(SettingOptionsConfig.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        index = _step$value[0],\n        eachConfig = _step$value[1];\n      if (index !== ClickedIndex && eachConfig !== null && eachConfig !== void 0 && eachConfig.toggleRequired && !(eachConfig !== null && eachConfig !== void 0 && eachConfig.customIcon)) {\n        if (eachConfig !== null && eachConfig !== void 0 && eachConfig.isSelected) {\n          ElementsList[index].classList.remove("settingOptions-icon-selected");\n          eachConfig.isSelected = false;\n          var prevSelectedIcon = document.getElementById("settingIcon-".concat(eachConfig.tag));\n          prevSelectedIcon.src = eachConfig.icon;\n        }\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction unSelectAllSettings() {\n  SettingOptionsConfig.forEach(function (item, indx) {\n    item.isSelected = false;\n    ElementsList[indx].classList.remove("settingOptions-icon-selected");\n    var prevSelectedIcon = document.getElementById("settingIcon-".concat(item.tag));\n    if (prevSelectedIcon !== null && prevSelectedIcon !== void 0 && prevSelectedIcon.src) prevSelectedIcon.src = item.icon;\n  });\n}\nfunction disableSettingIcon(tag) {\n  var idxToBeDisabled = SettingOptionsConfig.map(function (item) {\n    return item.tag;\n  }).indexOf(tag);\n  if (!SettingOptionsConfig[idxToBeDisabled].isDisabled) {\n    ElementsList[idxToBeDisabled].classList.add("settingOptions-icon-disabled");\n    SettingOptionsConfig[idxToBeDisabled].isDisabled = true;\n  }\n}\nfunction enableSettingIcon(tag) {\n  var idxToBeEnabled = SettingOptionsConfig.map(function (item) {\n    return item.tag;\n  }).indexOf(tag);\n  if (SettingOptionsConfig[idxToBeEnabled].isDisabled) {\n    ElementsList[idxToBeEnabled].classList.remove("settingOptions-icon-disabled");\n    SettingOptionsConfig[idxToBeEnabled].isDisabled = false;\n  }\n}\nfunction enableBothZoomIcons() {\n  enableSettingIcon("zoomIn");\n  enableSettingIcon("zoomOut");\n}\nfunction showSettingOptions() {\n  var _getHtmlElements2 = getHtmlElements(),\n    settingOptions = _getHtmlElements2.settingOptions;\n  settingOptions.classList.remove("hide-settingOptions");\n  settingOptions.style.visibility = "visible";\n}\nfunction hideSettingOptions() {\n  var _getHtmlElements3 = getHtmlElements(),\n    settingOptions = _getHtmlElements3.settingOptions;\n  settingOptions.classList.add("hide-settingOptions");\n  settingOptions.style.visibility = "hidden";\n}\nfunction hideSettingIcon(tag, isInitial) {\n  var idxToShow = SettingOptionsConfig.map(function (item) {\n    return item.tag;\n  }).indexOf(tag);\n  if (SettingOptionsConfig[idxToShow].show || isInitial) {\n    ElementsList[idxToShow].classList.add("hide-setting-icon");\n    SettingOptionsConfig[idxToShow].show = false;\n  }\n}\nfunction showSettingIcon(tag) {\n  var idxToShow = SettingOptionsConfig.map(function (item) {\n    return item.tag;\n  }).indexOf(tag);\n  if (!SettingOptionsConfig[idxToShow].show) {\n    ElementsList[idxToShow].classList.remove("hide-setting-icon");\n    SettingOptionsConfig[idxToShow].show = true;\n  }\n}\n;// CONCATENATED MODULE: ./src/assets/env.hdr\n/* harmony default export */ const assets_env = (__webpack_require__.p + "assets/src/assets/env.hdr");\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/RGBELoader.js\nvar RGBELoader = __webpack_require__(7231);\n;// CONCATENATED MODULE: ./src/virtualTryOns/face_mask.js\n\nfunction face_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction face_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction face_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) face_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) face_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n// import { getXSliderValue, getYSliderValue } from "../utils/sliderHandler";\n\nvar FaceMask = /*#__PURE__*/function () {\n  function FaceMask(scene, width, height) {\n    face_mask_classCallCheck(this, FaceMask);\n    this.scene = scene;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = null;\n    this.width = width;\n    this.height = height;\n    this.configOffset = 1;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      // map: texture,\n      // transparent: true,\n      // opacity: 0.5,\n    });\n  }\n  face_mask_createClass(FaceMask, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateMaterial",\n    value: function updateMaterial(material) {\n      this.material = material;\n      this.material.needsUpdate = true;\n    }\n  }, {\n    key: "setConfigOffset",\n    value: function setConfigOffset(offset) {\n      this.configOffset = offset;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      var leftEyeUpper1 = scaleLandmark(this.landmarks[264], this.width, this.height);\n      var rightEyeUpper1 = scaleLandmark(this.landmarks[34], this.width, this.height);\n      var eyeDist = Math.sqrt(Math.pow(leftEyeUpper1.x - rightEyeUpper1.x, 2) + Math.pow(leftEyeUpper1.y - rightEyeUpper1.y, 2) + Math.pow(leftEyeUpper1.z - rightEyeUpper1.z, 2));\n      makeGeometry(this.landmarks, this.geometry, "foundation");\n      if (!this.faces) {\n        this.faces = new three_module/* Mesh */.eaF(this.geometry, this.material);\n        this.faces.renderOrder = 1;\n        this.faces.envMapIntensity = 1;\n        this.faces.material.colorWrite = false;\n        this.scene.add(this.faces);\n      } else {\n        this.faces.geometry = this.geometry;\n      }\n      this.faces.position.set(-this.width * -0.0005 + 0 * this.configOffset * eyeDist, -(0 * this.configOffset * eyeDist), -this.width * 0.07);\n      this.faces.scale.set(this.width, this.height, this.width);\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      this.faces = null;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.faces) this.faces.visible = false;\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.faces) this.faces.visible = true;\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n    }\n  }, {\n    key: "forceUpdate",\n    value: function forceUpdate() {\n      this.addFaces();\n    }\n  }]);\n  return FaceMask;\n}();\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.set-prototype-of.js\nvar es6_object_set_prototype_of = __webpack_require__(8132);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.get-prototype-of.js\nvar es6_object_get_prototype_of = __webpack_require__(3000);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.reflect.construct.js\nvar es6_reflect_construct = __webpack_require__(2586);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.create.js\nvar es6_object_create = __webpack_require__(935);\n;// CONCATENATED MODULE: ./src/makeupVTOs/style_factory.js\n\nfunction style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nvar StyleFactory = /*#__PURE__*/function () {\n  function StyleFactory() {\n    style_factory_classCallCheck(this, StyleFactory);\n    if (this.constructor === StyleFactory) {\n      throw new Error("Abstract class StyleFactory cannot be instantiated.");\n    }\n  }\n  style_factory_createClass(StyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      throw new Error("Method createStyle() must be implemented.");\n    }\n  }]);\n  return StyleFactory;\n}();\n;// CONCATENATED MODULE: ./src/utils/color_utils.js\n\n\nfunction color_utils_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction color_utils_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction color_utils_createClass(Constructor, protoProps, staticProps) { if (protoProps) color_utils_defineProperties(Constructor.prototype, protoProps); if (staticProps) color_utils_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nvar ColorUtils = /*#__PURE__*/function () {\n  function ColorUtils() {\n    color_utils_classCallCheck(this, ColorUtils);\n  }\n  color_utils_createClass(ColorUtils, null, [{\n    key: "hexToColor",\n    value: function hexToColor(hex) {\n      hex = hex.replace("#", "");\n      var red = parseInt(hex.substring(0, 2), 16);\n      var green = parseInt(hex.substring(2, 4), 16);\n      var blue = parseInt(hex.substring(4, 6), 16);\n      return "rgb(".concat(red, ", ").concat(green, ", ").concat(blue, ")");\n    }\n  }, {\n    key: "hexToVector4",\n    value: function hexToVector4(hex) {\n      var alpha = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;\n      // Remove the hash if it exists\n      hex = hex.replace(/^#/, "");\n\n      // Parse the hex values\n      var bigint = parseInt(hex, 16);\n      var r = bigint >> 16 & 255;\n      var g = bigint >> 8 & 255;\n      var b = bigint & 255;\n\n      // Normalize to [0, 1] range and create the THREE.Vector4\n      return new three_module/* Vector4 */.IUQ(r / 255, g / 255, b / 255, alpha);\n    }\n  }, {\n    key: "getColorWithIntensity",\n    value: function getColorWithIntensity(hex, intensity) {\n      var red = parseInt(hex.substring(1, 3), 16);\n      var green = parseInt(hex.substring(3, 5), 16);\n      var blue = parseInt(hex.substring(5, 7), 16);\n      var alpha = Math.floor(intensity / 100 * 255);\n      return "rgba(".concat(red, ", ").concat(green, ", ").concat(blue, ", ").concat(alpha, ")");\n    }\n  }]);\n  return ColorUtils;\n}();\n;// CONCATENATED MODULE: ./src/htmlService/snackbar.js\n\n\n\n\nvar snackbarElement = null;\nfunction getSnackbarElement() {\n  return snackbarElement;\n}\nfunction setSnackbarElement() {\n  snackbarElement = document.getElementById("snackbar");\n}\nfunction showSnackbar() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Something Went Wrong";\n  return new Promise(function (resolve, reject) {\n    try {\n      emitError(message);\n      var _snackbarElement = getSnackbarElement();\n      _snackbarElement.classList.add("show-bar");\n      _snackbarElement.innerHTML = "";\n      var snackBarInnerDiv = "\\n      <div class=\'snackbar-container\'>\\n        <div class=\'snackbar-left-icon-container\'>\\n          <img class=\'snackbar-left-icon-image\' src=\\"https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar_assets/camera-off.svg\\"/>\\n        </div>\\n        <div class=\'snackbar-text-container\'>\\n          ".concat(message, "\\n        </div>\\n        <div class=\'snackbar-right-icon-container\'>\\n          <img id=\\"snackbar-close-icon\\" src=\\"https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar_assets/x-close.svg\\"/>\\n        </div>\\n      </div>");\n      _snackbarElement.innerHTML = snackBarInnerDiv;\n      resolve("hidden succesfully");\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nfunction hideSnackbar() {\n  var snackbarElement = getSnackbarElement();\n  snackbarElement.classList.remove("show-bar");\n}\nfunction isSnackBarVisible() {\n  if (snackbarElement && snackbarElement.style.display !== "none") return true;else return false;\n}\n;// CONCATENATED MODULE: ./src/assets/svg/positionIcon.svg\n/* harmony default export */ const positionIcon = (__webpack_require__.p + "assets/src/assets/svg/positionIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/positionIconSelected.svg\n/* harmony default export */ const positionIconSelected = (__webpack_require__.p + "assets/src/assets/svg/positionIconSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/scaleIcon.svg\n/* harmony default export */ const scaleIcon = (__webpack_require__.p + "assets/src/assets/svg/scaleIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/scaleIconSelected.svg\n/* harmony default export */ const scaleIconSelected = (__webpack_require__.p + "assets/src/assets/svg/scaleIconSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/fingerIcon.svg\n/* harmony default export */ const fingerIcon = (__webpack_require__.p + "assets/src/assets/svg/fingerIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/fingerIconSelected.svg\n/* harmony default export */ const fingerIconSelected = (__webpack_require__.p + "assets/src/assets/svg/fingerIconSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/indexSelected.svg\n/* harmony default export */ const indexSelected = (__webpack_require__.p + "assets/src/assets/svg/indexSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/middleSelected.svg\n/* harmony default export */ const middleSelected = (__webpack_require__.p + "assets/src/assets/svg/middleSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/ringSelected.svg\n/* harmony default export */ const ringSelected = (__webpack_require__.p + "assets/src/assets/svg/ringSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/littleSelected.svg\n/* harmony default export */ const littleSelected = (__webpack_require__.p + "assets/src/assets/svg/littleSelected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/indexUnselected.svg\n/* harmony default export */ const indexUnselected = (__webpack_require__.p + "assets/src/assets/svg/indexUnselected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/middleUnselected.svg\n/* harmony default export */ const middleUnselected = (__webpack_require__.p + "assets/src/assets/svg/middleUnselected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/ringUnselected.svg\n/* harmony default export */ const ringUnselected = (__webpack_require__.p + "assets/src/assets/svg/ringUnselected.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/littleUnselected.svg\n/* harmony default export */ const littleUnselected = (__webpack_require__.p + "assets/src/assets/svg/littleUnselected.svg");\n;// CONCATENATED MODULE: ./src/constants/configContants.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar configContants_sliderConfigurations = [{\n  text: "Opacity",\n  leftText: "",\n  rightText: "",\n  tag: "Opacity",\n  min: 0.2,\n  max: 0.8,\n  step: 0.01,\n  defaultValue: 0.5\n}\n// {\n//   text: "Shift Horizontally",\n//   leftText: "Left",\n//   rightText: "Right",\n//   tag: "horizontal",\n//   min: -1,\n//   max: 1,\n//   step: 0.1,\n//   defaultValue: 0,\n// },\n// {\n//   text: "Zoom",\n//   leftText: "Zoom Out",\n//   rightText: "Zoom In",\n//   tag: "zoom",\n//   min: 0.8,\n//   max: 1.2,\n//   step: 0.03,\n//   defaultValue: 1,\n// },\n];\nvar configContants_configBottomSheetConfig = {\n  tabs: [{\n    label: "Finger",\n    selectedIcon: fingerIconSelected,\n    tag: "finger",\n    unSelectedIcon: fingerIcon,\n    allowedCategory: ["ring"],\n    selected: false,\n    subComponent: [{\n      type: "fingers",\n      tag: "fingers",\n      defaultValue: 2\n    }]\n  }, {\n    label: "Position",\n    tag: "position",\n    selectedIcon: positionIconSelected,\n    unSelectedIcon: positionIcon,\n    allowedCategory: ["ring", "glasses", "cap", "necklace", "bracelet", "earring", "watch", "mangtika"],\n    selected: false,\n    subComponent: [{\n      type: "slider",\n      tag: "horizontal",\n      leftText: "Left",\n      rightText: "Right",\n      defaultValue: 0,\n      step: 0.01,\n      min: -1,\n      max: 1\n    }, {\n      type: "slider",\n      tag: "vertical",\n      leftText: "Up",\n      rightText: "Down",\n      defaultValue: 0,\n      step: 0.01,\n      min: -1,\n      max: 1\n    }]\n  }, {\n    label: "Scale",\n    tag: "scale",\n    selectedIcon: scaleIconSelected,\n    unSelectedIcon: scaleIcon,\n    allowedCategory: ["ring", "glasses", "cap", "necklace", "bracelet", "earring", "watch", "mangtika"],\n    selected: false,\n    subComponent: [{\n      type: "slider",\n      leftText: "Scale",\n      tag: "scale",\n      defaultValue: 1,\n      step: 0.02,\n      min: 0.8,\n      max: 1.2\n    }]\n  }]\n};\nvar ringIconConfig = [{\n  label: "Index",\n  tag: "index",\n  unSelectedIcon: indexSelected,\n  selectedIcon: indexUnselected\n}, {\n  label: "Middle",\n  tag: "middle",\n  unSelectedIcon: middleSelected,\n  selectedIcon: middleUnselected\n}, {\n  label: "Ring",\n  tag: "ring",\n  unSelectedIcon: ringSelected,\n  selectedIcon: ringUnselected\n}, {\n  label: "Little",\n  tag: "little",\n  unSelectedIcon: littleSelected,\n  selectedIcon: littleUnselected\n}];\nvar CategoriesTypes = [{\n  allowedCategory: ["lipstick", "eyeliner", "eyeshadow", "blush", "eyebrow"],\n  apiPayload: "lipstick",\n  // any of makeup category\n  categoryKey: "makeup"\n}\n// {\n//   allowedCategory: ["hair"],\n//   apiPayload: "hair", // hair category\n//   categoryKey: "hair",\n// },\n// {\n//   allowedCategory: ["glasses"],\n//   apiPayload: "glasses", // hair category\n//   categoryKey: "glasses",\n// },\n];\n;// CONCATENATED MODULE: ./src/utils/sliderHandler.js\n\n\nvar opacityDefaultValue = configContants_sliderConfigurations[0].defaultValue;\nvar opacityValue = configContants_sliderConfigurations[0].defaultValue;\nvar scaleValue = configContants_configBottomSheetConfig.tabs[2].subComponent[0].defaultValue;\nvar xValue = configContants_configBottomSheetConfig.tabs[1].subComponent[0].defaultValue;\nvar yValue = configContants_configBottomSheetConfig.tabs[1].subComponent[1].defaultValue;\nvar ringIndex = configContants_configBottomSheetConfig.tabs[0].subComponent[0].defaultValue;\nfunction getOpacitySliderValue() {\n  return opacityValue;\n}\nfunction setDefaultOpacitySliderValue(value) {\n  opacityDefaultValue = value;\n}\nfunction setOpacitySliderValue(value) {\n  opacityValue = value;\n}\nfunction ResetOpacitySliderValue() {\n  opacityValue = opacityDefaultValue;\n  resetSliderValues();\n}\nfunction getRingIndex() {\n  return ringIndex;\n}\nfunction setRingIndex(index) {\n  ringIndex = index;\n}\nfunction getScaleSliderValue() {\n  return scaleValue;\n}\nfunction getXSliderValue() {\n  return xValue;\n}\nfunction getYSliderValue() {\n  return yValue;\n}\nfunction setScaleSliderValue(positive) {\n  scaleValue = positive;\n  // let currentVal = 0;\n  // if (positive) {\n  //   currentVal =\n  //     scaleValue + configBottomSheetConfig.tabs[2].subComponent[0].step;\n  //   if (currentVal < configBottomSheetConfig.tabs[2].subComponent[0].max)\n  //     scaleValue = currentVal;\n  //   else scaleValue = configBottomSheetConfig.tabs[2].subComponent[0].max;\n  // } else {\n  //   currentVal =\n  //     scaleValue - configBottomSheetConfig.tabs[2].subComponent[0].step;\n  //   if (currentVal > configBottomSheetConfig.tabs[2].subComponent[0].min)\n  //     scaleValue = currentVal;\n  //   else scaleValue = configBottomSheetConfig.tabs[2].subComponent[0].min;\n  // }\n}\nfunction setXSliderValue(positive) {\n  if (getIsVideo()) xValue = -positive;else xValue = positive;\n  // let currentVal = 0;\n  // if (positive) {\n  //   currentVal = xValue + configBottomSheetConfig.tabs[1].subComponent[0].step;\n  //   if (currentVal < configBottomSheetConfig.tabs[1].subComponent[0].max)\n  //     xValue = currentVal;\n  //   else xValue = configBottomSheetConfig.tabs[1].subComponent[0].max;\n  // } else {\n  //   currentVal = xValue - configBottomSheetConfig.tabs[1].subComponent[0].step;\n  //   if (currentVal > configBottomSheetConfig.tabs[1].subComponent[0].min)\n  //     xValue = currentVal;\n  //   else xValue = configBottomSheetConfig.tabs[1].subComponent[0].min;\n  // }\n}\nfunction setYSliderValue(positive) {\n  yValue = positive;\n  // let currentVal = 0;\n  // if (positive) {\n  //   currentVal = yValue + configBottomSheetConfig.tabs[1].subComponent[1].step;\n  //   if (currentVal < configBottomSheetConfig.tabs[1].subComponent[1].max)\n  //     yValue = currentVal;\n  //   else yValue = configBottomSheetConfig.tabs[1].subComponent[1].max;\n  // } else {\n  //   currentVal = yValue - configBottomSheetConfig.tabs[1].subComponent[1].step;\n  //   if (currentVal > configBottomSheetConfig.tabs[1].subComponent[1].min)\n  //     yValue = currentVal;\n  //   else yValue = configBottomSheetConfig.tabs[1].subComponent[1].min;\n  // }\n}\nfunction resetSliderValues() {\n  scaleValue = configContants_configBottomSheetConfig.tabs[2].defaultValue;\n  xValue = configContants_configBottomSheetConfig.tabs[1].subComponent[0].defaultValue;\n  yValue = configContants_configBottomSheetConfig.tabs[1].subComponent[1].defaultValue;\n  ringIndex = configContants_configBottomSheetConfig.tabs[0].subComponent.defaultValue;\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/configSlider.css\nvar configSlider = __webpack_require__(7038);\n;// CONCATENATED MODULE: ./src/htmlService/styles/configSlider.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar configSlider_options = {};\n\nconfigSlider_options.styleTagTransform = (styleTagTransform_default());\nconfigSlider_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      configSlider_options.insert = insertBySelector_default().bind(null, "head");\n    \nconfigSlider_options.domAPI = (styleDomAPI_default());\nconfigSlider_options.insertStyleElement = (insertStyleElement_default());\n\nvar configSlider_update = injectStylesIntoStyleTag_default()(configSlider/* default */.A, configSlider_options);\n\n\n\n\n       /* harmony default export */ const styles_configSlider = (configSlider/* default */.A && configSlider/* default */.A.locals ? configSlider/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/assets/svg/Angle Right.svg\n/* harmony default export */ const Angle_Right = (__webpack_require__.p + "assets/src/assets/svg/Angle Right.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/resetBig.svg\n/* harmony default export */ const resetBig = (__webpack_require__.p + "assets/src/assets/svg/resetBig.svg");\n;// CONCATENATED MODULE: ./src/htmlService/configSlider.js\nfunction configSlider_slicedToArray(arr, i) { return configSlider_arrayWithHoles(arr) || configSlider_iterableToArrayLimit(arr, i) || configSlider_unsupportedIterableToArray(arr, i) || configSlider_nonIterableRest(); }\nfunction configSlider_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction configSlider_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction configSlider_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\nfunction configSlider_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = configSlider_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction configSlider_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return configSlider_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return configSlider_arrayLikeToArray(o, minLen); }\nfunction configSlider_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\nvar configContainerDiv = null;\nvar ringContainerDiv = null;\nvar confgSliderValueDiv = null;\nvar sliderInput = null;\nvar selectedImage = null;\nvar defaultOpacity = 50;\nfunction setDefaultOpacitySlider(value) {\n  defaultOpacity = value * 100;\n  ResetSliders();\n}\nvar initConfigContainer = function initConfigContainer(conifContainer, ringContainer) {\n  configContainerDiv = conifContainer;\n};\n\n// export const createSlider = (containerList, handler) => {\n//   let moveBtnsContainer = containerList[0];\n//   let zoomBtnsContainer = containerList[1];\n\n//   const slideDiv = document.createElement("div");\n//   const MoveImgDiv = document.createElement("div");\n//   MoveImgDiv.classList.add("d-flex");\n//   MoveImgDiv.classList.add("g-8");\n//   const ZoomImgDiv = document.createElement("div");\n//   ZoomImgDiv.classList.add("d-flex");\n//   ZoomImgDiv.classList.add("g-8");\n//   for (const [index, sliderConfig] of distortConfig.move.entries()) {\n//     const img = document.createElement("img");\n//     img.src = sliderConfig.iconLink;\n//     img.addEventListener("click", () => {\n//       handler(sliderConfig.tag);\n//     });\n//     MoveImgDiv.appendChild(img);\n//   }\n//   moveBtnsContainer.appendChild(MoveImgDiv);\n//   for (const [index, sliderConfig] of distortConfig.zoom.entries()) {\n//     const img = document.createElement("img");\n//     img.src = sliderConfig.iconLink;\n//     img.addEventListener("click", () => {\n//       handler(sliderConfig.tag);\n//     });\n//     ZoomImgDiv.appendChild(img);\n//   }\n//   zoomBtnsContainer.appendChild(ZoomImgDiv);\n// };\n\nvar createSlider = function createSlider(container, handler) {\n  var _iterator = configSlider_createForOfIteratorHelper(sliderConfigurations.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = configSlider_slicedToArray(_step.value, 2),\n        index = _step$value[0],\n        sliderConfig = _step$value[1];\n      var eachSliderWrapperDiv = "\\n        <div class=\'config-slider\'>\\n            <div class=\\"config-reset-icon\\">\\n              <img src=".concat(resetIcon, "></img>\\n            </div>\\n            <div class=\\"config-slider-type\\">Depth</div>\\n            <div class=\'config-type-slider\'>\\n                <input id=\\"config-slider-type").concat(index, "\\" class=\\"configSlider\\" type=\\"range\\" id=\\"scaleSlider\\" min=\\"").concat(sliderConfig.min, "\\" max=\\"").concat(sliderConfig.max, "\\" step=\\"").concat(sliderConfig.step, "\\" value=\\"").concat(sliderConfig.defaultValue, "\\">\\n            </div>\\n            <div class=\\"config-slider-value\\">").concat(defaultOpacity, "</div>\\n        </div>\\n    ");\n      container.innerHTML += eachSliderWrapperDiv;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  confgSliderValueDiv = document.querySelector(".config-slider-value");\n  var _iterator2 = configSlider_createForOfIteratorHelper(sliderConfigurations.entries()),\n    _step2;\n  try {\n    var _loop = function _loop() {\n      var _step2$value = configSlider_slicedToArray(_step2.value, 2),\n        index = _step2$value[0],\n        sliderConfig = _step2$value[1];\n      var sliderInput = document.querySelector("#config-slider-type".concat(index));\n      sliderInput.addEventListener("input", function () {\n        confgSliderValueDiv.innerText = sliderInput.value;\n        handler(sliderInput.value, sliderConfig.tag);\n      });\n    };\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\nvar createConfigBottomSheet = function createConfigBottomSheet(listener) {\n  var _getHtmlElements = getHtmlElements(),\n    configurationContainer = _getHtmlElements.configurationContainer;\n  var configBottomSheetFragment = document.createDocumentFragment();\n  var configBottomSheetDiv = document.createElement("div");\n  var configBottomSheetHeaderDiv = document.createElement("div");\n  var configBottomSheetDividerDiv = document.createElement("div");\n  var configBottomSheetContentDiv = document.createElement("div");\n  var configBottomSheetActionsDiv = document.createElement("div");\n  configBottomSheetDiv.classList.add("config-bottom-sheet-container");\n  configBottomSheetHeaderDiv.classList.add("config-bottom-sheet-header");\n  configBottomSheetDividerDiv.classList.add("config-bottom-sheet-divider");\n  configBottomSheetContentDiv.classList.add("config-bottom-sheet-content");\n  configBottomSheetActionsDiv.classList.add("config-bottom-sheet-actions");\n  var HeaderElements = getHeaderElements();\n  configBottomSheetHeaderDiv.append(HeaderElements);\n  var SheetContent = getSheetTabContent(listener);\n  configBottomSheetContentDiv.append(SheetContent);\n  var SheetActionsElements = getSheetActionsContent(listener);\n  configBottomSheetActionsDiv.append(SheetActionsElements);\n  configBottomSheetDiv.append(configBottomSheetHeaderDiv, configBottomSheetDividerDiv, configBottomSheetContentDiv, configBottomSheetActionsDiv);\n  configBottomSheetFragment.append(configBottomSheetDiv);\n  configurationContainer.appendChild(configBottomSheetFragment);\n};\nfunction getSheetTabContent(handler) {\n  var sheetContentFragment = document.createDocumentFragment();\n  var LeftText = document.createElement("div");\n  LeftText.classList.add("config-bottom-sheet-left-text");\n  LeftText.innerText = "Intensity";\n  var SliderDiv = document.createElement("div");\n  SliderDiv.classList.add("config-bottom-sheet-slider");\n  var SliderInput = document.createElement("input");\n  SliderInput.type = "range";\n  SliderInput.step = "0.01";\n  SliderDiv.append(SliderInput);\n  SliderInput.addEventListener("input", function () {\n    handleSliderCss(sliderInput.value);\n    handleInputEvent(SliderInput.value, handler);\n  });\n  var RightText = document.createElement("div");\n  RightText.classList.add("config-bottom-sheet-right-text");\n  RightText.innerText = "80";\n  RightText.min = "0.2";\n  RightText.max = "0.8";\n  confgSliderValueDiv = RightText;\n  sliderInput = SliderInput;\n  sheetContentFragment.append(LeftText, SliderDiv, RightText);\n  return sheetContentFragment;\n}\nfunction handleInputEvent(value, handler) {\n  confgSliderValueDiv.innerText = Math.round(value);\n  handler(value / 100, "Opacity");\n}\nfunction getHeaderElements() {\n  var HeaderFragment = document.createDocumentFragment();\n  var _iterator3 = configSlider_createForOfIteratorHelper(configContants_sliderConfigurations),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var elem = _step3.value;\n      // if (elem.allowedCategory?.length) {\n      var PillDiv = document.createElement("div");\n      PillDiv.classList.add("config-bottom-sheet-header-text");\n      PillDiv.innerText = elem.text;\n      HeaderFragment.append(PillDiv);\n      // }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return HeaderFragment;\n}\nfunction getSheetActionsContent(handler) {\n  var SheetActionFragment = document.createDocumentFragment();\n  var ResetIconDiv = document.createElement("div");\n  var CloseIconDiv = document.createElement("div");\n  ResetIconDiv.classList.add("config-bottom-sheet-reset-button");\n  CloseIconDiv.classList.add("config-bottom-sheet-close-button");\n  ResetIconDiv.addEventListener("click", function () {\n    handler("", "reset");\n  });\n  CloseIconDiv.addEventListener("click", function () {\n    handler("", "close");\n  });\n  var ResetIcon = document.createElement("img");\n  var CloseIcon = document.createElement("img");\n  ResetIcon.src = resetBig;\n  CloseIcon.src = Angle_Right;\n  ResetIconDiv.append(ResetIcon);\n  CloseIconDiv.append(CloseIcon);\n  SheetActionFragment.append(ResetIconDiv, CloseIconDiv);\n  return SheetActionFragment;\n}\nvar ResetSliders = function ResetSliders() {\n  // const sliderInput = document.querySelector(`#config-slider-type${index}`);\n  sliderInput.value = defaultOpacity;\n  confgSliderValueDiv.innerText = defaultOpacity;\n  handleSliderCss(defaultOpacity);\n};\nfunction handleSliderCss(value) {\n  sliderInput.style.background = "linear-gradient(to right, white 0%, white ".concat(value, "%, rgba(255, 255, 255, 0.4) ").concat(value, "%, rgba(255, 255, 255, 0.4) 100%)");\n}\nvar toggleConfigContainer = function toggleConfigContainer() {\n  // if (!iconConfig[3].isSelected) {\n  if (!SettingOptionsConfig[0].isSelected) {\n    // above value gets set in the settingOptions file first\n    hideConfigContainer();\n  } else {\n    showConfigContainer();\n  }\n};\nvar showConfigContainer = function showConfigContainer() {\n  if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) return;\n  configContainerDiv.classList.add("show-configuration-container");\n};\nvar isConfigContainerActive = function isConfigContainerActive() {\n  if (configContainerDiv.style.visibility === "visible") {\n    return false;\n  }\n  return true;\n};\nvar hideConfigContainer = function hideConfigContainer() {\n  configContainerDiv.classList.remove("show-configuration-container");\n};\nfunction setApplyButton(handler) {\n  var applyButton = document.getElementById("config-close");\n  // applyButton.addEventListener("click", (event) => {\n  //   handler();\n  // });\n}\nfunction setResetButton(handler) {\n  // const resetButton = document.querySelector(".config-reset-icon");\n  // resetButton.addEventListener("click", (event) => {\n  //   handler();\n  //   handler(2);\n  // });\n}\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/blush_style.js\n\n\n\nfunction blush_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction blush_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction blush_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) blush_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) blush_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar blush_style_BlushStyle = /*#__PURE__*/function () {\n  function BlushStyle(sku, scene, width, height, materials) {\n    blush_style_classCallCheck(this, BlushStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  blush_style_createClass(BlushStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry);\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width / 10);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return BlushStyle;\n}();\n;// CONCATENATED MODULE: ./src/assets/Blush_oval.png\n/* harmony default export */ const Blush_oval = (__webpack_require__.p + "assets/src/assets/Blush_oval.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/glossy_blush_mask.js\nfunction glossy_blush_mask_typeof(obj) { "@babel/helpers - typeof"; return glossy_blush_mask_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, glossy_blush_mask_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction glossy_blush_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glossy_blush_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glossy_blush_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glossy_blush_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction glossy_blush_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (glossy_blush_mask_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n // Import BlushStyle class\n\n\n\nvar vertexShader = [\'varying vec2 vUv;\', \'void main() {\', \'  vUv = uv;\', \'  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\', \'}\'].join(\'\\n\');\nvar fragmentShader = [\'uniform sampler2D makeupTexture;\',\n// The texture you want to render\n\'uniform vec3 colorValue;\',\n// Uniform for controlling color\n\'uniform float opacityValue;\',\n// Uniform for controlling opacity\n\'varying vec2 vUv;\', \'void main() {\', \'  vec4 textureColor = texture2D(makeupTexture, vUv);\', \'  if (textureColor.a < 0.01) {\', \'    discard;\', \'  }\', \'  gl_FragColor = vec4(textureColor.rgb * colorValue, textureColor.a * opacityValue);\',\n// Multiply texture color with the specified color and opacity\n\'}\'].join(\'\\n\');\nvar GlossyBlushMask = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_BlushStyle) {\n  _inherits(GlossyBlushMask, _BlushStyle);\n  var _super = _createSuper(GlossyBlushMask);\n  function GlossyBlushMask(apiResponseData, scene, width, height) {\n    glossy_blush_mask_classCallCheck(this, GlossyBlushMask);\n    var material = new THREE.ShaderMaterial({\n      vertexShader: vertexShader,\n      // Your vertex shader code\n      fragmentShader: fragmentShader,\n      // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new THREE.TextureLoader().load(GlossyAOTexture, function (texture) {\n            // texture.premultiplyAlpha = true;\n            texture.flipY = false;\n          })\n        },\n        opacityValue: {\n          value: 1\n        },\n        colorValue: {\n          value: new THREE.Vector3(1, 1, 1)\n        }\n      },\n      transparent: true,\n      color: 0xff0000\n    });\n    material.uniforms.colorValue.value.set(1, 0, 0); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material.uniforms.opacityValue.value = 0.6;\n    var material1 = new THREE.ShaderMaterial({\n      vertexShader: vertexShader,\n      // Your vertex shader code\n      fragmentShader: fragmentShader,\n      // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new THREE.TextureLoader().load(GlossyColorMaskTexture, function (texture) {\n            // texture.premultiplyAlpha = true;\n            texture.flipY = false;\n          })\n        },\n        opacityValue: {\n          value: 1\n        },\n        colorValue: {\n          value: new THREE.Vector3(1, 1, 1)\n        }\n      },\n      transparent: true,\n      color: 0xff0000\n    });\n    material1.uniforms.colorValue.value.set(1, 1, 1); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material1.uniforms.opacityValue.value = 0.6;\n    material1.needsUpdate = true;\n    var materialsArray = [material, material1];\n    return _super.call(this, apiResponseData, scene, width, height, materialsArray);\n  }\n  return glossy_blush_mask_createClass(GlossyBlushMask);\n}(BlushStyle)));\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/shimmer_blush_mask.js\n\nfunction shimmer_blush_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shimmer_blush_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction shimmer_blush_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) shimmer_blush_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) shimmer_blush_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar ShimmerBlushMask = /*#__PURE__*/function () {\n  function ShimmerBlushMask(_pattern, _texture) {\n    shimmer_blush_mask_classCallCheck(this, ShimmerBlushMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor1 = null;\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    if (_pattern.colors.length > 1) {\n      var color1 = _pattern.colors[1];\n      var newColor1 = ColorUtils.getColorWithIntensity(color1, 100);\n      threeColor1 = new three_module/* Color */.Q1f(newColor1);\n    } else {\n      threeColor1 = new three_module/* Color */.Q1f("0xffffff");\n    }\n    var material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[0], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 0.22,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      // clearcoat: 1,\n      // clearcoatRoughness: 0.3,\n      specularIntensity: 0.5,\n      specularColor: threeColor,\n      color: threeColor\n    });\n    var material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 0.22,\n      metalness: 0,\n      specularIntensity: 0.6,\n      specularColor: threeColor1,\n      color: threeColor1\n    });\n    this.MaterialArray = [material, material1];\n  }\n  shimmer_blush_mask_createClass(ShimmerBlushMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return ShimmerBlushMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/matte_blush_mask.js\n\nfunction matte_blush_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_blush_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_blush_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_blush_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_blush_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteBlushMask = /*#__PURE__*/function () {\n  function MatteBlushMask(_pattern, _texture) {\n    matte_blush_mask_classCallCheck(this, MatteBlushMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  matte_blush_mask_createClass(MatteBlushMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteBlushMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/glitter_blush_mask.js\nfunction glitter_blush_mask_typeof(obj) { "@babel/helpers - typeof"; return glitter_blush_mask_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, glitter_blush_mask_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction glitter_blush_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glitter_blush_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glitter_blush_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glitter_blush_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction glitter_blush_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glitter_blush_mask_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) glitter_blush_mask_setPrototypeOf(subClass, superClass); }\nfunction glitter_blush_mask_setPrototypeOf(o, p) { glitter_blush_mask_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return glitter_blush_mask_setPrototypeOf(o, p); }\nfunction glitter_blush_mask_createSuper(Derived) { var hasNativeReflectConstruct = glitter_blush_mask_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = glitter_blush_mask_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = glitter_blush_mask_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return glitter_blush_mask_possibleConstructorReturn(this, result); }; }\nfunction glitter_blush_mask_possibleConstructorReturn(self, call) { if (call && (glitter_blush_mask_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return glitter_blush_mask_assertThisInitialized(self); }\nfunction glitter_blush_mask_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction glitter_blush_mask_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction glitter_blush_mask_getPrototypeOf(o) { glitter_blush_mask_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return glitter_blush_mask_getPrototypeOf(o); }\n\n // Import BlushStyle class\n\n\n\n\nvar glitter_blush_mask_vertexShader = [\'varying vec2 vUv;\', \'void main() {\', \'  vUv = uv;\', \'  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\', \'}\'].join(\'\\n\');\nvar glitterFragmentShader = [\'uniform sampler2D makeupAO;\', \'uniform sampler2D makeupColorMask;\', \'uniform sampler2D makeupLighting;\', \'uniform vec3 colorValue;\', \'uniform float mainTextureAlpha;\', \'uniform vec3 newColorValue;\',\n// New color for color mask\n\'uniform float roughness;\',\n// Roughness property\n\n\'varying vec2 vUv;\', \'void main() {\', \'  vec2 uv = vec2(vUv.x, 1.0 - vUv.y);\',\n// Flip the texture in the y-axis\n\'  float aoValue = texture2D(makeupAO, uv).r;\', \'  vec4 colorMask = texture2D(makeupColorMask, uv);\', \'  vec4 lighting = texture2D(makeupLighting, uv);\', \'  vec4 finalColor = colorMask * vec4(colorValue, 0.1);\',\n// Consider original lighting color\n\'  finalColor.rgb *= aoValue;\', \'\', \'  // Adjust the opacity and intensity of the color mask\', \'  float colorMaskAlpha = colorMask.a * 0.8;\',\n// Reduce the alpha value of the color mask\n\'  float colorMaskIntensity = colorMask.r;\',\n// Grayscale intensity of the color mask\n\'  float adjustedColorMaskIntensity = mix(colorMaskIntensity, dot(newColorValue.rgb, vec3(0.299, 0.587, 0.114)), 0.9);\',\n// Blend the intensity with the new color value\n\'  colorMask = vec4(adjustedColorMaskIntensity, adjustedColorMaskIntensity, adjustedColorMaskIntensity, colorMaskAlpha);\',\n// Update the color mask with the adjusted intensity and opacity\n\'\', \'  // Adjust the opacity of the lighting texture only\', \'  finalColor.a *= 0.8 * lighting.a;\',\n// Set opacity to 80% multiplied by lighting texture\'s opacity\n\'\', \'  // Use green color value in the lighting texture as white light\', \'  vec3 whiteLight = vec3(1.0, 1.0, 1.0);\',\n// White light color\n\'  vec3 greenLight = vec3(0.0, 1.0, 0.0);\',\n// Green light color\n\'  float greenLightIntensity = lighting.g;\',\n// Green channel intensity in the lighting texture\n\'  float blendFactor = 0.8;\',\n// Adjust the blend factor as desired (0.0 - 1.0)\n\'  vec3 blendedColor = mix(whiteLight * greenLightIntensity, newColorValue, blendFactor);\',\n// Blend white light and new color based on green intensity\n\'  finalColor.rgb *= blendedColor;\', \'\', \'  // Add emission for glitter effect\', \'  vec3 emissionColor = vec3(1.0, 1.0, 1.0);\',\n// Emission color (adjust as desired)\n\'  float glitterIntensity = 0.8 * lighting.g;\',\n// Intensity of glitter effect based on red channel in the lighting texture\n\'  finalColor.rgb += emissionColor * glitterIntensity;\',\n// Add emission color multiplied by glitter intensity\n\'\', \'  finalColor.rgb *= mainTextureAlpha;\', \'  finalColor.a = pow(finalColor.a, 0.13);\',\n// Apply roughness effect to opacity\n\'  gl_FragColor = finalColor;\', \'}\'].join(\'\\n\');\nvar GlitterBlushMask = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_BlushStyle) {\n  glitter_blush_mask_inherits(GlitterBlushMask, _BlushStyle);\n  var _super = glitter_blush_mask_createSuper(GlitterBlushMask);\n  function GlitterBlushMask(apiResponseData, scene, width, height) {\n    glitter_blush_mask_classCallCheck(this, GlitterBlushMask);\n    var material = new THREE.ShaderMaterial({\n      vertexShader: glitter_blush_mask_vertexShader,\n      fragmentShader: glitterFragmentShader,\n      uniforms: {\n        makeupAO: {\n          value: new THREE.TextureLoader().load(GlitterAOTexture, function (texture) {\n            texture.premultiplyAlpha = true;\n          })\n        },\n        makeupColorMask: {\n          value: new THREE.TextureLoader().load(GlitterColorMaskTexture, function (texture) {\n            texture.premultiplyAlpha = true;\n          })\n        },\n        makeupLighting: {\n          value: new THREE.TextureLoader().load(GlitterLightingTexture, function (texture) {\n            texture.premultiplyAlpha = true;\n          })\n        },\n        colorValue: {\n          value: new THREE.Color(1, 1, 1)\n        },\n        mainTextureAlpha: {\n          value: 1\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      blending: THREE.AdditiveBlending\n    });\n    return _super.call(this, apiResponseData, scene, width, height, material);\n  }\n  return glitter_blush_mask_createClass(GlitterBlushMask);\n}(BlushStyle)));\n;// CONCATENATED MODULE: ./src/assets/blush_round_base.png\n/* harmony default export */ const blush_round_base = (__webpack_require__.p + "assets/src/assets/blush_round_base.png");\n;// CONCATENATED MODULE: ./src/assets/blush_round_shimmer.png\n/* harmony default export */ const blush_round_shimmer = (__webpack_require__.p + "assets/src/assets/blush_round_shimmer.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/pattern_factory.js\n\nfunction pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nvar PatternFactory = /*#__PURE__*/function () {\n  function PatternFactory() {\n    pattern_factory_classCallCheck(this, PatternFactory);\n    if (this.constructor === PatternFactory) {\n      throw new Error("Abstract class PatternFactory cannot be instantiated.");\n    }\n  }\n  pattern_factory_createClass(PatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(apiResponseData, scene, width, height) {\n      throw new Error("Method createPattern() must be implemented.");\n    }\n  }]);\n  return PatternFactory;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/blush_pattern_factory.js\nfunction blush_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return blush_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, blush_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction blush_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction blush_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction blush_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) blush_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) blush_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction blush_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) blush_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction blush_pattern_factory_setPrototypeOf(o, p) { blush_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return blush_pattern_factory_setPrototypeOf(o, p); }\nfunction blush_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = blush_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = blush_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = blush_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return blush_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction blush_pattern_factory_possibleConstructorReturn(self, call) { if (call && (blush_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return blush_pattern_factory_assertThisInitialized(self); }\nfunction blush_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction blush_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction blush_pattern_factory_getPrototypeOf(o) { blush_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return blush_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\nvar BlushPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  blush_pattern_factory_inherits(BlushPatternFactory, _PatternFactory);\n  var _super = blush_pattern_factory_createSuper(BlushPatternFactory);\n  function BlushPatternFactory() {\n    var _this;\n    blush_pattern_factory_classCallCheck(this, BlushPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      // matte: MatteEyeShadowMask,\n      matte: MatteBlushMask,\n      shimmer: ShimmerBlushMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  blush_pattern_factory_createClass(BlushPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return BlushPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/blush_style_1.js\nfunction blush_style_1_typeof(obj) { "@babel/helpers - typeof"; return blush_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, blush_style_1_typeof(obj); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || blush_style_1_unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction blush_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return blush_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return blush_style_1_arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return blush_style_1_arrayLikeToArray(arr); }\nfunction blush_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction blush_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction blush_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) blush_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) blush_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction blush_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction blush_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) blush_style_1_setPrototypeOf(subClass, superClass); }\nfunction blush_style_1_setPrototypeOf(o, p) { blush_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return blush_style_1_setPrototypeOf(o, p); }\nfunction blush_style_1_createSuper(Derived) { var hasNativeReflectConstruct = blush_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = blush_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = blush_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return blush_style_1_possibleConstructorReturn(this, result); }; }\nfunction blush_style_1_possibleConstructorReturn(self, call) { if (call && (blush_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return blush_style_1_assertThisInitialized(self); }\nfunction blush_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction blush_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction blush_style_1_getPrototypeOf(o) { blush_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return blush_style_1_getPrototypeOf(o); }\n\n\n\n\n\nvar BlushStyle1 = /*#__PURE__*/function (_BlushStyle) {\n  blush_style_1_inherits(BlushStyle1, _BlushStyle);\n  var _super = blush_style_1_createSuper(BlushStyle1);\n  function BlushStyle1(sku, scene, width, height) {\n    blush_style_1_classCallCheck(this, BlushStyle1);\n    var patternDefaultTextures = {\n      matte: blush_round_base,\n      // glossy: MatteAOTexture,\n      shimmer: [blush_round_base, blush_round_shimmer]\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new BlushPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, _toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return blush_style_1_createClass(BlushStyle1);\n}(blush_style_BlushStyle);\n;// CONCATENATED MODULE: ./src/assets/blush_oval_base.png\n/* harmony default export */ const blush_oval_base = (__webpack_require__.p + "assets/src/assets/blush_oval_base.png");\n;// CONCATENATED MODULE: ./src/assets/blush_oval_shimmer.png\n/* harmony default export */ const blush_oval_shimmer = (__webpack_require__.p + "assets/src/assets/blush_oval_shimmer.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/blush_style_2.js\nfunction blush_style_2_typeof(obj) { "@babel/helpers - typeof"; return blush_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, blush_style_2_typeof(obj); }\nfunction blush_style_2_toConsumableArray(arr) { return blush_style_2_arrayWithoutHoles(arr) || blush_style_2_iterableToArray(arr) || blush_style_2_unsupportedIterableToArray(arr) || blush_style_2_nonIterableSpread(); }\nfunction blush_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction blush_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return blush_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return blush_style_2_arrayLikeToArray(o, minLen); }\nfunction blush_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction blush_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return blush_style_2_arrayLikeToArray(arr); }\nfunction blush_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction blush_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction blush_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) blush_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) blush_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction blush_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction blush_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) blush_style_2_setPrototypeOf(subClass, superClass); }\nfunction blush_style_2_setPrototypeOf(o, p) { blush_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return blush_style_2_setPrototypeOf(o, p); }\nfunction blush_style_2_createSuper(Derived) { var hasNativeReflectConstruct = blush_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = blush_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = blush_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return blush_style_2_possibleConstructorReturn(this, result); }; }\nfunction blush_style_2_possibleConstructorReturn(self, call) { if (call && (blush_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return blush_style_2_assertThisInitialized(self); }\nfunction blush_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction blush_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction blush_style_2_getPrototypeOf(o) { blush_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return blush_style_2_getPrototypeOf(o); }\n\n\n\n\n\nvar BlushStyle2 = /*#__PURE__*/function (_BlushStyle) {\n  blush_style_2_inherits(BlushStyle2, _BlushStyle);\n  var _super = blush_style_2_createSuper(BlushStyle2);\n  function BlushStyle2(sku, scene, width, height) {\n    blush_style_2_classCallCheck(this, BlushStyle2);\n    var patternDefaultTextures = {\n      matte: blush_oval_base,\n      // glossy: MatteAOTexture,\n      shimmer: [blush_oval_base, blush_oval_shimmer]\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new BlushPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, blush_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return blush_style_2_createClass(BlushStyle2);\n}(blush_style_BlushStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/blush-style/blush_style_factory.js\nfunction blush_style_factory_typeof(obj) { "@babel/helpers - typeof"; return blush_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, blush_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction blush_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction blush_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction blush_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) blush_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) blush_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction blush_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) blush_style_factory_setPrototypeOf(subClass, superClass); }\nfunction blush_style_factory_setPrototypeOf(o, p) { blush_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return blush_style_factory_setPrototypeOf(o, p); }\nfunction blush_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = blush_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = blush_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = blush_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return blush_style_factory_possibleConstructorReturn(this, result); }; }\nfunction blush_style_factory_possibleConstructorReturn(self, call) { if (call && (blush_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return blush_style_factory_assertThisInitialized(self); }\nfunction blush_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction blush_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction blush_style_factory_getPrototypeOf(o) { blush_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return blush_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\nvar BlushStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  blush_style_factory_inherits(BlushStyleFactory, _StyleFactory);\n  var _super = blush_style_factory_createSuper(BlushStyleFactory);\n  function BlushStyleFactory() {\n    var _this;\n    blush_style_factory_classCallCheck(this, BlushStyleFactory);\n    _this = _super.call(this);\n    _this.blushStyles = {\n      round: BlushStyle1,\n      oval: BlushStyle2\n      // "blush3": GlitterBlushMask,\n      // "shimmer": ShimmerBlushMask\n    };\n    return _this;\n  }\n  blush_style_factory_createClass(BlushStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.blushStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported blush style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return BlushStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/assets/eyebrows_arrow1.png\n/* harmony default export */ const eyebrows_arrow1 = (__webpack_require__.p + "assets/src/assets/eyebrows_arrow1.png");\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.sort.js\nvar es6_array_sort = __webpack_require__(7075);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style.js\nfunction eyebrows_style_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = eyebrows_style_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction eyebrows_style_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyebrows_style_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyebrows_style_arrayLikeToArray(o, minLen); }\nfunction eyebrows_style_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n\nvar EyebrowsStyle = /*#__PURE__*/function () {\n  function EyebrowsStyle(sku, scene, width, height, materials) {\n    eyebrows_style_classCallCheck(this, EyebrowsStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n    this.maskMesh;\n\n    // this.leftEyeBrow = [\n    //   70, 63, 105, 66, 107, 55, 221, 222, 223, 224, 225, 46, 70,\n    // ];\n    this.leftEyeBrow = [151, 69, 68, 139, 246, 160, 158, 190, 193, 8, 151];\n    this.RightEyeBrow = [151, 299, 298, 368, 468, 387, 385, 414, 417, 8, 151];\n  }\n  eyebrows_style_createClass(EyebrowsStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks, ogLandmarks) {\n      this.landmarks = landmarks;\n      this.ogLandmarks = ogLandmarks;\n      // console.log(ogLandmarks);\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      console.log("alhsflahflhasLFHLASFLAGSLGALG", this.maskMesh);\n      if (!this.maskMesh) {\n        var blurGeom = new three_module/* PlaneGeometry */.bdM(1, 1);\n        this.maskMesh = new three_module/* Mesh */.eaF(blurGeom, this.materialArray[0]);\n        this.maskMesh.position.set(0, 0, 0);\n        this.scene.add(this.maskMesh);\n        var cropCoords = [];\n        for (var i = 0; i < this.leftEyeBrow.length; i++) {\n          var p = this.ogLandmarks[this.leftEyeBrow[i]];\n          var vec = new three_module/* Vector2 */.I9Y(p.x, p.y);\n          cropCoords.push(vec);\n        }\n        var cropCoords2 = [];\n        for (var _i = 0; _i < this.RightEyeBrow.length; _i++) {\n          var _p = this.ogLandmarks[this.RightEyeBrow[_i]];\n          var _vec = new three_module/* Vector2 */.I9Y(_p.x, _p.y);\n          cropCoords2.push(_vec);\n        }\n        this.materialArray[0].uniforms.cropCoords.value = cropCoords;\n        this.materialArray[0].uniforms.cropCoords2.value = cropCoords2;\n        var tex = getCurrentPlaneMap();\n        tex.colorSpace = three_module/* NoColorSpace */.jf0;\n        tex.needsUpdate = true;\n        this.materialArray[0].uniforms.map.value = tex;\n        this.maskMesh.scale.set(this.width, this.height, 0);\n      }\n      if (this.faces) {\n        var _cropCoords = [];\n        for (var _i2 = 0; _i2 < this.leftEyeBrow.length; _i2++) {\n          var _p2 = this.ogLandmarks[this.leftEyeBrow[_i2]];\n          var _vec2 = new three_module/* Vector2 */.I9Y(_p2.x, _p2.y);\n          _cropCoords.push(_vec2);\n        }\n        var _cropCoords2 = [];\n        for (var _i3 = 0; _i3 < this.RightEyeBrow.length; _i3++) {\n          var _p3 = this.ogLandmarks[this.RightEyeBrow[_i3]];\n          var _vec3 = new three_module/* Vector2 */.I9Y(_p3.x, _p3.y);\n          _cropCoords2.push(_vec3);\n        }\n        this.materialArray[0].uniforms.cropCoords.value = _cropCoords;\n        this.materialArray[0].uniforms.cropCoords2.value = _cropCoords2;\n        var _tex = getCurrentPlaneMap();\n        _tex.colorSpace = three_module/* NoColorSpace */.jf0;\n        _tex.needsUpdate = true;\n        this.materialArray[0].uniforms.map.value = _tex;\n        this.maskMesh.scale.set(this.width, this.height, 0);\n        //console.log(getCurrentPlaneMap());\n      }\n      for (var _i4 = 1; _i4 < this.materialArray.length; _i4++) {\n        makeGeometry(this.landmarks, this.geometry);\n        if (!this.faces || this.faces.length <= _i4) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[_i4]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[_i4 - 1].receiveShadow = false; // Disable receiving shadows\n          this.faces[_i4 - 1].castShadow = false; // Disable casting shadows\n          this.faces[_i4 - 1].position.set(0, 0, 0);\n          this.faces[_i4 - 1].name = "makeup";\n        } else {\n          this.faces[_i4 - 1].geometry = this.geometry;\n          this.faces[_i4 - 1].material = this.materialArray[_i4];\n        }\n        this.faces[_i4 - 1].scale.set(this.width, this.height, 0);\n      }\n    }\n  }, {\n    key: "getConvexHull",\n    value: function getConvexHull(points) {\n      points.sort(function (a, b) {\n        return a.x !== b.x ? a.x - b.x : a.y - b.y;\n      });\n      var lower = [];\n      var _iterator = eyebrows_style_createForOfIteratorHelper(points),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _p4 = _step.value;\n          while (lower.length >= 2 && this.cross(lower[lower.length - 2], lower[lower.length - 1], _p4) <= 0) {\n            lower.pop();\n          }\n          lower.push(_p4);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var upper = [];\n      for (var i = points.length - 1; i >= 0; i--) {\n        var p = points[i];\n        while (upper.length >= 2 && this.cross(upper[upper.length - 2], upper[upper.length - 1], p) <= 0) {\n          upper.pop();\n        }\n        upper.push(p);\n      }\n      lower.pop();\n      upper.pop();\n      return lower.concat(upper);\n    }\n  }, {\n    key: "cross",\n    value: function cross(o, a, b) {\n      return (a.x - o.x) * (b.y - o.y) - (a.y - o.y) * (b.x - o.x);\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      this.scene.remove(this.maskMesh);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n      this.maskMesh = null;\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return EyebrowsStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/matte_eyebrows_mask.js\n\nfunction matte_eyebrows_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_eyebrows_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_eyebrows_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_eyebrows_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_eyebrows_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteEyebrowsMask = /*#__PURE__*/function () {\n  function MatteEyebrowsMask(_pattern, _texture) {\n    matte_eyebrows_mask_classCallCheck(this, MatteEyebrowsMask);\n    // console.log(_texture);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n\n    //let maskColor = new THREE.Vector4(0.4667, 0.0941, 0.2157, 1.0);\n\n    var vertexShader = "\\nvarying vec2 vUv;\\nvoid main() {\\n    vUv = uv;\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n";\n    var fragmentShader = "\\nuniform sampler2D map;\\nuniform int numCoords; // Number of coordinates\\nuniform vec2 cropCoords[11]; // Increase the maximum number of coordinates\\nuniform vec2 cropCoords2[11]; // Increase the maximum number of coordinates\\n\\nvarying vec2 vUv;\\n\\nfloat gaussian(float x, float sigma) {\\n    float PI = 3.141592653589793;\\n    return exp(-(x * x) / (2.0 * sigma * sigma)) / (sqrt(2.0 * PI) * sigma);\\n}\\n\\n// Point-in-polygon test using the ray-casting algorithm\\nbool isInsidePolygon(vec2 point, vec2 polygon[11], int numCoords) {\\n    bool inside = false;\\n    for (int i = 0, j = numCoords - 1; i < numCoords; j = i++) {\\n        if (((polygon[i].y > point.y) != (polygon[j].y > point.y)) &&\\n            (point.x < (polygon[j].x - polygon[i].x) * (point.y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x)) {\\n            inside = !inside;\\n        }\\n    }\\n    return inside;\\n}\\n\\n// Function to calculate the distance to the edge of the polygon\\nfloat distanceToPolygonEdge(vec2 point, vec2 polygon[11], int numCoords) {\\n    float minDistance = 1e20;\\n    for (int i = 0; i < numCoords; i++) {\\n        vec2 a = polygon[i];\\n        vec2 b = polygon[(i + 1) % numCoords];\\n        vec2 ab = b - a;\\n        vec2 ap = point - a;\\n        float t = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);\\n        vec2 projection = a + t * ab;\\n        float distance = length(point - projection);\\n        minDistance = min(minDistance, distance);\\n    }\\n    return minDistance;\\n}\\n\\nvoid main() {\\n    vec2 flippedUV = vec2(vUv.x, 1.0 - vUv.y);\\n    vec2 textureSizeFloat = vec2(textureSize(map, 0));\\n    vec2 texelSize = 1.0 / textureSizeFloat;\\n\\n    float blurSize = 5.0;\\n    float sigma =5.0;\\n    float blendWidth = 0.02; // Width of the blending region\\n\\n    vec4 sum = vec4(0.0);\\n    float weightSum = 0.0;\\n\\n    vec4 sum2 = vec4(0.0);\\n    float weightSum2 = 0.0;\\n\\n    // Calculate distance to the edge of the polygon\\n    float distance = distanceToPolygonEdge(flippedUV, cropCoords, numCoords);\\n    float distance2 = distanceToPolygonEdge(flippedUV, cropCoords2, numCoords);\\n\\n    // Calculate blending factor based on the distance\\n    float blendFactor = smoothstep(0.0, blendWidth, distance);\\n    float blendFactor2 = smoothstep(0.0, blendWidth, distance2);\\n\\n    // Check if the current UV is inside the crop polygon\\n    if (isInsidePolygon(flippedUV, cropCoords, numCoords)) {\\n        // Apply horizontal blur\\n        for (int i = -5; i <= 5; i++) {\\n            float offset = float(i) * texelSize.x * blurSize;\\n            vec4 col = texture2D(map, vUv + vec2(offset, 0.0));\\n            float weight = gaussian(float(i), sigma);\\n            sum += col * weight;\\n            weightSum += weight;\\n        }\\n\\n        // Normalize by weight sum\\n        vec4 horizontalBlurredCol = sum / weightSum;\\n\\n        sum = vec4(0.0);\\n        weightSum = 0.0;\\n\\n        // Apply vertical blur\\n        for (int i = -5; i <= 5; i++) {\\n            float offset = float(i) * texelSize.y * blurSize;\\n            vec4 col = texture2D(map, vUv + vec2(0.0, offset));\\n            float weight = gaussian(float(i), sigma);\\n            sum += col * weight;\\n            weightSum += weight;\\n        }\\n\\n        // Normalize by weight sum\\n        vec4 verticalBlurredCol = sum / weightSum;\\n\\n        // Blend between the original and blurred color\\n        vec4 originalCol = texture2D(map, vUv);\\n        vec4 blurredCol = mix(horizontalBlurredCol, verticalBlurredCol, 0.5);\\n        gl_FragColor = mix(originalCol, blurredCol, blendFactor);\\n\\n    } else if (isInsidePolygon(flippedUV, cropCoords2, numCoords)) {\\n        // Apply horizontal blur\\n        for (int i = -5; i <= 5; i++) {\\n            float offset = float(i) * texelSize.x * blurSize;\\n            vec4 col = texture2D(map, vUv + vec2(offset, 0.0));\\n            float weight = gaussian(float(i), sigma);\\n            sum2 += col * weight;\\n            weightSum2 += weight;\\n        }\\n\\n        // Normalize by weight sum\\n        vec4 horizontalBlurredCol2 = sum2 / weightSum2;\\n\\n        sum2 = vec4(0.0);\\n        weightSum2 = 0.0;\\n\\n        // Apply vertical blur\\n        for (int i = -5; i <= 5; i++) {\\n            float offset = float(i) * texelSize.y * blurSize;\\n            vec4 col = texture2D(map, vUv + vec2(0.0, offset));\\n            float weight = gaussian(float(i), sigma);\\n            sum2 += col * weight;\\n            weightSum2 += weight;\\n        }\\n\\n        // Normalize by weight sum\\n        vec4 verticalBlurredCol2 = sum2 / weightSum2;\\n\\n        // Blend between the original and blurred color\\n        vec4 originalCol = texture2D(map, vUv);\\n        vec4 blurredCol2 = mix(horizontalBlurredCol2, verticalBlurredCol2, 0.5);\\n        gl_FragColor = mix(originalCol, blurredCol2, blendFactor2);\\n\\n    } else {\\n        // Outside the polygon, render the original texture\\n        vec4 originalCol = texture2D(map, vUv);\\n        gl_FragColor = originalCol;\\n    }\\n}\\n";\n\n    // Load the textures\n    var texture = new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    var numPoints = 11;\n    var radius = 0.25; // Circle radius (half of the 0.0 to 0.5 range)\n    var centerX = 0.25; // Circle center x-coordinate\n    var centerY = 0.25; // Circle center y-coordinate\n\n    var cropCoords = [];\n    for (var i = 0; i < numPoints; i++) {\n      var angle = i / numPoints * Math.PI * 2; // Angle in radians\n      var x = centerX + radius * Math.cos(angle);\n      var y = centerY + radius * Math.sin(angle);\n      cropCoords.push(new three_module/* Vector2 */.I9Y(x, y));\n      // console.log(x, y);\n    }\n    var material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        map: {\n          value: texture\n        },\n        cropCoords: {\n          value: cropCoords\n        },\n        cropCoords2: {\n          value: cropCoords\n        },\n        // cropCoords: {\n        //   value: [\n        //     new THREE.Vector2(0.2, 0.2), // Vertex 0\n        //     new THREE.Vector2(0.3, 0.2), // Vertex 1\n        //     new THREE.Vector2(0.3, 0.3), // Vertex 2\n        //     new THREE.Vector2(0.2, 0.3), // Vertex 3\n        //     new THREE.Vector2(0.2, 0.2),\n        //     new THREE.Vector2(0.3, 0.2),\n        //     // new THREE.Vector2(0.3, 0.3),\n        //     // new THREE.Vector2(0.2, 0.3),\n        //     // new THREE.Vector2(0.2, 0.2), // Closing the loop\n        //   ],\n        // },\n        numCoords: {\n          value: numPoints\n        }\n\n        // numCoords: { value: 10 },\n        // alphaMap: { value: alphaMap },\n        //  _Threshold: { value: 0 },\n        // resolution: { type: "v2", value: new THREE.Vector2(2048.0, 2048.0) },\n        // blurAmount: { type: "f", value: 10.0 },\n        // _MainColor: { value: maskColor },\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5,\n      depthWrite: false,\n      toneMapped: false\n    });\n    var material1 = new three_module/* MeshStandardMaterial */._4j({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* DoubleSide */.$EB,\n      envMapIntensity: 1,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n      // envMap: new THREE.TextureLoader().load(_texture, function (texture) {\n      //   texture.flipY = false;\n      // }),\n    });\n    this.MaterialArray = [material, material1];\n  }\n  matte_eyebrows_mask_createClass(MatteEyebrowsMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteEyebrowsMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_pattern_factory.js\nfunction eyebrows_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_pattern_factory_setPrototypeOf(o, p) { eyebrows_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_pattern_factory_setPrototypeOf(o, p); }\nfunction eyebrows_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_pattern_factory_possibleConstructorReturn(self, call) { if (call && (eyebrows_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_pattern_factory_assertThisInitialized(self); }\nfunction eyebrows_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_pattern_factory_getPrototypeOf(o) { eyebrows_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar EyebrowsPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  eyebrows_pattern_factory_inherits(EyebrowsPatternFactory, _PatternFactory);\n  var _super = eyebrows_pattern_factory_createSuper(EyebrowsPatternFactory);\n  function EyebrowsPatternFactory() {\n    var _this;\n    eyebrows_pattern_factory_classCallCheck(this, EyebrowsPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteEyebrowsMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  eyebrows_pattern_factory_createClass(EyebrowsPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return EyebrowsPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style_1.js\nfunction eyebrows_style_1_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_style_1_typeof(obj); }\nfunction eyebrows_style_1_toConsumableArray(arr) { return eyebrows_style_1_arrayWithoutHoles(arr) || eyebrows_style_1_iterableToArray(arr) || eyebrows_style_1_unsupportedIterableToArray(arr) || eyebrows_style_1_nonIterableSpread(); }\nfunction eyebrows_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyebrows_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyebrows_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyebrows_style_1_arrayLikeToArray(o, minLen); }\nfunction eyebrows_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyebrows_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyebrows_style_1_arrayLikeToArray(arr); }\nfunction eyebrows_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_style_1_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_style_1_setPrototypeOf(o, p) { eyebrows_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_style_1_setPrototypeOf(o, p); }\nfunction eyebrows_style_1_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_style_1_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_style_1_possibleConstructorReturn(self, call) { if (call && (eyebrows_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_style_1_assertThisInitialized(self); }\nfunction eyebrows_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_style_1_getPrototypeOf(o) { eyebrows_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_style_1_getPrototypeOf(o); }\n\n\n\n\nvar EyebrowsStyle1 = /*#__PURE__*/function (_EyebrowsStyle) {\n  eyebrows_style_1_inherits(EyebrowsStyle1, _EyebrowsStyle);\n  var _super = eyebrows_style_1_createSuper(EyebrowsStyle1);\n  function EyebrowsStyle1(sku, scene, width, height) {\n    eyebrows_style_1_classCallCheck(this, EyebrowsStyle1);\n    var patternDefaultTextures = {\n      matte: eyebrows_arrow1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyebrowsPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyebrows_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyebrows_style_1_createClass(EyebrowsStyle1);\n}(EyebrowsStyle);\n;// CONCATENATED MODULE: ./src/assets/eyebrows_arrow2.png\n/* harmony default export */ const eyebrows_arrow2 = (__webpack_require__.p + "assets/src/assets/eyebrows_arrow2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style_2.js\nfunction eyebrows_style_2_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_style_2_typeof(obj); }\nfunction eyebrows_style_2_toConsumableArray(arr) { return eyebrows_style_2_arrayWithoutHoles(arr) || eyebrows_style_2_iterableToArray(arr) || eyebrows_style_2_unsupportedIterableToArray(arr) || eyebrows_style_2_nonIterableSpread(); }\nfunction eyebrows_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyebrows_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyebrows_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyebrows_style_2_arrayLikeToArray(o, minLen); }\nfunction eyebrows_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyebrows_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyebrows_style_2_arrayLikeToArray(arr); }\nfunction eyebrows_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_style_2_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_style_2_setPrototypeOf(o, p) { eyebrows_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_style_2_setPrototypeOf(o, p); }\nfunction eyebrows_style_2_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_style_2_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_style_2_possibleConstructorReturn(self, call) { if (call && (eyebrows_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_style_2_assertThisInitialized(self); }\nfunction eyebrows_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_style_2_getPrototypeOf(o) { eyebrows_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_style_2_getPrototypeOf(o); }\n\n\n\n\nvar EyebrowsStyle2 = /*#__PURE__*/function (_EyebrowsStyle) {\n  eyebrows_style_2_inherits(EyebrowsStyle2, _EyebrowsStyle);\n  var _super = eyebrows_style_2_createSuper(EyebrowsStyle2);\n  function EyebrowsStyle2(sku, scene, width, height) {\n    eyebrows_style_2_classCallCheck(this, EyebrowsStyle2);\n    var patternDefaultTextures = {\n      matte: eyebrows_arrow2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyebrowsPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyebrows_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyebrows_style_2_createClass(EyebrowsStyle2);\n}(EyebrowsStyle);\n;// CONCATENATED MODULE: ./src/assets/eyebrows_arrow3.png\n/* harmony default export */ const eyebrows_arrow3 = (__webpack_require__.p + "assets/src/assets/eyebrows_arrow3.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style_3.js\nfunction eyebrows_style_3_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_style_3_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_style_3_typeof(obj); }\nfunction eyebrows_style_3_toConsumableArray(arr) { return eyebrows_style_3_arrayWithoutHoles(arr) || eyebrows_style_3_iterableToArray(arr) || eyebrows_style_3_unsupportedIterableToArray(arr) || eyebrows_style_3_nonIterableSpread(); }\nfunction eyebrows_style_3_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyebrows_style_3_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyebrows_style_3_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyebrows_style_3_arrayLikeToArray(o, minLen); }\nfunction eyebrows_style_3_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyebrows_style_3_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyebrows_style_3_arrayLikeToArray(arr); }\nfunction eyebrows_style_3_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_3_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_3_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_3_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_3_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_style_3_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_3_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_style_3_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_style_3_setPrototypeOf(o, p) { eyebrows_style_3_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_style_3_setPrototypeOf(o, p); }\nfunction eyebrows_style_3_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_style_3_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_style_3_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_style_3_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_style_3_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_style_3_possibleConstructorReturn(self, call) { if (call && (eyebrows_style_3_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_style_3_assertThisInitialized(self); }\nfunction eyebrows_style_3_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_style_3_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_style_3_getPrototypeOf(o) { eyebrows_style_3_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_style_3_getPrototypeOf(o); }\n\n\n\n\nvar EyebrowsStyle3 = /*#__PURE__*/function (_EyebrowsStyle) {\n  eyebrows_style_3_inherits(EyebrowsStyle3, _EyebrowsStyle);\n  var _super = eyebrows_style_3_createSuper(EyebrowsStyle3);\n  function EyebrowsStyle3(sku, scene, width, height) {\n    eyebrows_style_3_classCallCheck(this, EyebrowsStyle3);\n    var patternDefaultTextures = {\n      matte: eyebrows_arrow3\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyebrowsPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyebrows_style_3_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyebrows_style_3_createClass(EyebrowsStyle3);\n}(EyebrowsStyle);\n;// CONCATENATED MODULE: ./src/assets/eyebrows_curved1.png\n/* harmony default export */ const eyebrows_curved1 = (__webpack_require__.p + "assets/src/assets/eyebrows_curved1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style_4.js\nfunction eyebrows_style_4_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_style_4_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_style_4_typeof(obj); }\nfunction eyebrows_style_4_toConsumableArray(arr) { return eyebrows_style_4_arrayWithoutHoles(arr) || eyebrows_style_4_iterableToArray(arr) || eyebrows_style_4_unsupportedIterableToArray(arr) || eyebrows_style_4_nonIterableSpread(); }\nfunction eyebrows_style_4_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyebrows_style_4_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyebrows_style_4_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyebrows_style_4_arrayLikeToArray(o, minLen); }\nfunction eyebrows_style_4_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyebrows_style_4_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyebrows_style_4_arrayLikeToArray(arr); }\nfunction eyebrows_style_4_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_4_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_4_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_4_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_4_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_style_4_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_4_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_style_4_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_style_4_setPrototypeOf(o, p) { eyebrows_style_4_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_style_4_setPrototypeOf(o, p); }\nfunction eyebrows_style_4_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_style_4_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_style_4_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_style_4_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_style_4_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_style_4_possibleConstructorReturn(self, call) { if (call && (eyebrows_style_4_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_style_4_assertThisInitialized(self); }\nfunction eyebrows_style_4_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_style_4_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_style_4_getPrototypeOf(o) { eyebrows_style_4_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_style_4_getPrototypeOf(o); }\n\n\n\n\nvar EyebrowsStyle4 = /*#__PURE__*/function (_EyebrowsStyle) {\n  eyebrows_style_4_inherits(EyebrowsStyle4, _EyebrowsStyle);\n  var _super = eyebrows_style_4_createSuper(EyebrowsStyle4);\n  function EyebrowsStyle4(sku, scene, width, height) {\n    eyebrows_style_4_classCallCheck(this, EyebrowsStyle4);\n    var patternDefaultTextures = {\n      matte: eyebrows_curved1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyebrowsPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyebrows_style_4_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyebrows_style_4_createClass(EyebrowsStyle4);\n}(EyebrowsStyle);\n;// CONCATENATED MODULE: ./src/assets/eyebrows_straight1.png\n/* harmony default export */ const eyebrows_straight1 = (__webpack_require__.p + "assets/src/assets/eyebrows_straight1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style_5.js\nfunction eyebrows_style_5_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_style_5_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_style_5_typeof(obj); }\nfunction eyebrows_style_5_toConsumableArray(arr) { return eyebrows_style_5_arrayWithoutHoles(arr) || eyebrows_style_5_iterableToArray(arr) || eyebrows_style_5_unsupportedIterableToArray(arr) || eyebrows_style_5_nonIterableSpread(); }\nfunction eyebrows_style_5_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyebrows_style_5_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyebrows_style_5_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyebrows_style_5_arrayLikeToArray(o, minLen); }\nfunction eyebrows_style_5_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyebrows_style_5_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyebrows_style_5_arrayLikeToArray(arr); }\nfunction eyebrows_style_5_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_5_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_5_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_5_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_5_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_style_5_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_5_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_style_5_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_style_5_setPrototypeOf(o, p) { eyebrows_style_5_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_style_5_setPrototypeOf(o, p); }\nfunction eyebrows_style_5_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_style_5_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_style_5_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_style_5_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_style_5_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_style_5_possibleConstructorReturn(self, call) { if (call && (eyebrows_style_5_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_style_5_assertThisInitialized(self); }\nfunction eyebrows_style_5_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_style_5_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_style_5_getPrototypeOf(o) { eyebrows_style_5_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_style_5_getPrototypeOf(o); }\n\n\n\n\nvar EyebrowsStyle5 = /*#__PURE__*/function (_EyebrowsStyle) {\n  eyebrows_style_5_inherits(EyebrowsStyle5, _EyebrowsStyle);\n  var _super = eyebrows_style_5_createSuper(EyebrowsStyle5);\n  function EyebrowsStyle5(sku, scene, width, height) {\n    eyebrows_style_5_classCallCheck(this, EyebrowsStyle5);\n    var patternDefaultTextures = {\n      matte: eyebrows_straight1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyebrowsPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyebrows_style_5_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyebrows_style_5_createClass(EyebrowsStyle5);\n}(EyebrowsStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyebrows-style/eyebrows_style_factory.js\nfunction eyebrows_style_factory_typeof(obj) { "@babel/helpers - typeof"; return eyebrows_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyebrows_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction eyebrows_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyebrows_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyebrows_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyebrows_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyebrows_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyebrows_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyebrows_style_factory_setPrototypeOf(subClass, superClass); }\nfunction eyebrows_style_factory_setPrototypeOf(o, p) { eyebrows_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyebrows_style_factory_setPrototypeOf(o, p); }\nfunction eyebrows_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyebrows_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyebrows_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyebrows_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyebrows_style_factory_possibleConstructorReturn(this, result); }; }\nfunction eyebrows_style_factory_possibleConstructorReturn(self, call) { if (call && (eyebrows_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyebrows_style_factory_assertThisInitialized(self); }\nfunction eyebrows_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyebrows_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyebrows_style_factory_getPrototypeOf(o) { eyebrows_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyebrows_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\nvar EyebrowsStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  eyebrows_style_factory_inherits(EyebrowsStyleFactory, _StyleFactory);\n  var _super = eyebrows_style_factory_createSuper(EyebrowsStyleFactory);\n  function EyebrowsStyleFactory() {\n    var _this;\n    eyebrows_style_factory_classCallCheck(this, EyebrowsStyleFactory);\n    _this = _super.call(this);\n    _this.eyebrowsStyles = {\n      arrow1: EyebrowsStyle1,\n      arrow2: EyebrowsStyle2,\n      arrow3: EyebrowsStyle3,\n      curve1: EyebrowsStyle4,\n      straight1: EyebrowsStyle5\n    };\n    return _this;\n  }\n  eyebrows_style_factory_createClass(EyebrowsStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.eyebrowsStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported eyebrows style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return EyebrowsStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/matte_eyelashes_mask.js\n\nfunction matte_eyelashes_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_eyelashes_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_eyelashes_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_eyelashes_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_eyelashes_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteEyelashesMask = /*#__PURE__*/function () {\n  function MatteEyelashesMask(_pattern, _texture) {\n    matte_eyelashes_mask_classCallCheck(this, MatteEyelashesMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  matte_eyelashes_mask_createClass(MatteEyelashesMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteEyelashesMask;\n}();\n;// CONCATENATED MODULE: ./src/assets/eyelash_natural1.png\n/* harmony default export */ const eyelash_natural1 = (__webpack_require__.p + "assets/src/assets/eyelash_natural1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style.js\n\n\n\nfunction eyelashes_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar EyelashesStyle = /*#__PURE__*/function () {\n  function EyelashesStyle(sku, scene, width, height, materials) {\n    eyelashes_style_classCallCheck(this, EyelashesStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  eyelashes_style_createClass(EyelashesStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry, "eyelash");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          //this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return EyelashesStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_pattern_factory.js\nfunction eyelashes_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_pattern_factory_setPrototypeOf(o, p) { eyelashes_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_pattern_factory_setPrototypeOf(o, p); }\nfunction eyelashes_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_pattern_factory_possibleConstructorReturn(self, call) { if (call && (eyelashes_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_pattern_factory_assertThisInitialized(self); }\nfunction eyelashes_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_pattern_factory_getPrototypeOf(o) { eyelashes_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar EyelashesPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  eyelashes_pattern_factory_inherits(EyelashesPatternFactory, _PatternFactory);\n  var _super = eyelashes_pattern_factory_createSuper(EyelashesPatternFactory);\n  function EyelashesPatternFactory() {\n    var _this;\n    eyelashes_pattern_factory_classCallCheck(this, EyelashesPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteEyelashesMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  eyelashes_pattern_factory_createClass(EyelashesPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return EyelashesPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style_1.js\nfunction eyelashes_style_1_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_style_1_typeof(obj); }\nfunction eyelashes_style_1_toConsumableArray(arr) { return eyelashes_style_1_arrayWithoutHoles(arr) || eyelashes_style_1_iterableToArray(arr) || eyelashes_style_1_unsupportedIterableToArray(arr) || eyelashes_style_1_nonIterableSpread(); }\nfunction eyelashes_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyelashes_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyelashes_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyelashes_style_1_arrayLikeToArray(o, minLen); }\nfunction eyelashes_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyelashes_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyelashes_style_1_arrayLikeToArray(arr); }\nfunction eyelashes_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_style_1_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_style_1_setPrototypeOf(o, p) { eyelashes_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_style_1_setPrototypeOf(o, p); }\nfunction eyelashes_style_1_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_style_1_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_style_1_possibleConstructorReturn(self, call) { if (call && (eyelashes_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_style_1_assertThisInitialized(self); }\nfunction eyelashes_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_style_1_getPrototypeOf(o) { eyelashes_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_style_1_getPrototypeOf(o); }\n\n\n\n\nvar EyelashesStyle1 = /*#__PURE__*/function (_EyelashesStyle) {\n  eyelashes_style_1_inherits(EyelashesStyle1, _EyelashesStyle);\n  var _super = eyelashes_style_1_createSuper(EyelashesStyle1);\n  function EyelashesStyle1(sku, scene, width, height) {\n    eyelashes_style_1_classCallCheck(this, EyelashesStyle1);\n    var patternDefaultTextures = {\n      matte: eyelash_natural1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyelashesPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyelashes_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return eyelashes_style_1_createClass(EyelashesStyle1);\n}(EyelashesStyle);\n;// CONCATENATED MODULE: ./src/assets/eyelash_natural2.png\n/* harmony default export */ const eyelash_natural2 = (__webpack_require__.p + "assets/src/assets/eyelash_natural2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style_2.js\nfunction eyelashes_style_2_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_style_2_typeof(obj); }\nfunction eyelashes_style_2_toConsumableArray(arr) { return eyelashes_style_2_arrayWithoutHoles(arr) || eyelashes_style_2_iterableToArray(arr) || eyelashes_style_2_unsupportedIterableToArray(arr) || eyelashes_style_2_nonIterableSpread(); }\nfunction eyelashes_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyelashes_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyelashes_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyelashes_style_2_arrayLikeToArray(o, minLen); }\nfunction eyelashes_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyelashes_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyelashes_style_2_arrayLikeToArray(arr); }\nfunction eyelashes_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_style_2_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_style_2_setPrototypeOf(o, p) { eyelashes_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_style_2_setPrototypeOf(o, p); }\nfunction eyelashes_style_2_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_style_2_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_style_2_possibleConstructorReturn(self, call) { if (call && (eyelashes_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_style_2_assertThisInitialized(self); }\nfunction eyelashes_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_style_2_getPrototypeOf(o) { eyelashes_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_style_2_getPrototypeOf(o); }\n\n\n\n\nvar EyelashesStyle2 = /*#__PURE__*/function (_EyelashesStyle) {\n  eyelashes_style_2_inherits(EyelashesStyle2, _EyelashesStyle);\n  var _super = eyelashes_style_2_createSuper(EyelashesStyle2);\n  function EyelashesStyle2(sku, scene, width, height) {\n    eyelashes_style_2_classCallCheck(this, EyelashesStyle2);\n    var patternDefaultTextures = {\n      matte: eyelash_natural2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new EyelashesPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyelashes_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return eyelashes_style_2_createClass(EyelashesStyle2);\n}(EyelashesStyle);\n;// CONCATENATED MODULE: ./src/assets/eyelash_natural3.png\n/* harmony default export */ const eyelash_natural3 = (__webpack_require__.p + "assets/src/assets/eyelash_natural3.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style_3.js\nfunction eyelashes_style_3_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_style_3_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_style_3_typeof(obj); }\nfunction eyelashes_style_3_toConsumableArray(arr) { return eyelashes_style_3_arrayWithoutHoles(arr) || eyelashes_style_3_iterableToArray(arr) || eyelashes_style_3_unsupportedIterableToArray(arr) || eyelashes_style_3_nonIterableSpread(); }\nfunction eyelashes_style_3_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyelashes_style_3_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyelashes_style_3_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyelashes_style_3_arrayLikeToArray(o, minLen); }\nfunction eyelashes_style_3_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyelashes_style_3_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyelashes_style_3_arrayLikeToArray(arr); }\nfunction eyelashes_style_3_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_style_3_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_3_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_3_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_3_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_style_3_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_3_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_style_3_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_style_3_setPrototypeOf(o, p) { eyelashes_style_3_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_style_3_setPrototypeOf(o, p); }\nfunction eyelashes_style_3_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_style_3_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_style_3_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_style_3_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_style_3_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_style_3_possibleConstructorReturn(self, call) { if (call && (eyelashes_style_3_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_style_3_assertThisInitialized(self); }\nfunction eyelashes_style_3_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_style_3_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_style_3_getPrototypeOf(o) { eyelashes_style_3_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_style_3_getPrototypeOf(o); }\n\n\n\n\nvar EyelashesStyle3 = /*#__PURE__*/function (_EyelashesStyle) {\n  eyelashes_style_3_inherits(EyelashesStyle3, _EyelashesStyle);\n  var _super = eyelashes_style_3_createSuper(EyelashesStyle3);\n  function EyelashesStyle3(sku, scene, width, height) {\n    eyelashes_style_3_classCallCheck(this, EyelashesStyle3);\n    var patternDefaultTextures = {\n      matte: eyelash_natural3\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new EyelashesPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyelashes_style_3_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return eyelashes_style_3_createClass(EyelashesStyle3);\n}(EyelashesStyle);\n;// CONCATENATED MODULE: ./src/assets/eyelash_upperlower1.png\n/* harmony default export */ const eyelash_upperlower1 = (__webpack_require__.p + "assets/src/assets/eyelash_upperlower1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style_4.js\nfunction eyelashes_style_4_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_style_4_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_style_4_typeof(obj); }\nfunction eyelashes_style_4_toConsumableArray(arr) { return eyelashes_style_4_arrayWithoutHoles(arr) || eyelashes_style_4_iterableToArray(arr) || eyelashes_style_4_unsupportedIterableToArray(arr) || eyelashes_style_4_nonIterableSpread(); }\nfunction eyelashes_style_4_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyelashes_style_4_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyelashes_style_4_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyelashes_style_4_arrayLikeToArray(o, minLen); }\nfunction eyelashes_style_4_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyelashes_style_4_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyelashes_style_4_arrayLikeToArray(arr); }\nfunction eyelashes_style_4_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_style_4_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_4_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_4_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_4_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_style_4_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_4_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_style_4_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_style_4_setPrototypeOf(o, p) { eyelashes_style_4_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_style_4_setPrototypeOf(o, p); }\nfunction eyelashes_style_4_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_style_4_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_style_4_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_style_4_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_style_4_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_style_4_possibleConstructorReturn(self, call) { if (call && (eyelashes_style_4_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_style_4_assertThisInitialized(self); }\nfunction eyelashes_style_4_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_style_4_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_style_4_getPrototypeOf(o) { eyelashes_style_4_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_style_4_getPrototypeOf(o); }\n\n\n\n\nvar EyelashesStyle4 = /*#__PURE__*/function (_EyelashesStyle) {\n  eyelashes_style_4_inherits(EyelashesStyle4, _EyelashesStyle);\n  var _super = eyelashes_style_4_createSuper(EyelashesStyle4);\n  function EyelashesStyle4(sku, scene, width, height) {\n    eyelashes_style_4_classCallCheck(this, EyelashesStyle4);\n    var patternDefaultTextures = {\n      matte: eyelash_upperlower1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new EyelashesPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyelashes_style_4_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return eyelashes_style_4_createClass(EyelashesStyle4);\n}(EyelashesStyle);\n;// CONCATENATED MODULE: ./src/assets/eyelash_upperlower2.png\n/* harmony default export */ const eyelash_upperlower2 = (__webpack_require__.p + "assets/src/assets/eyelash_upperlower2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style_5.js\nfunction eyelashes_style_5_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_style_5_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_style_5_typeof(obj); }\nfunction eyelashes_style_5_toConsumableArray(arr) { return eyelashes_style_5_arrayWithoutHoles(arr) || eyelashes_style_5_iterableToArray(arr) || eyelashes_style_5_unsupportedIterableToArray(arr) || eyelashes_style_5_nonIterableSpread(); }\nfunction eyelashes_style_5_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyelashes_style_5_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyelashes_style_5_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyelashes_style_5_arrayLikeToArray(o, minLen); }\nfunction eyelashes_style_5_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyelashes_style_5_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyelashes_style_5_arrayLikeToArray(arr); }\nfunction eyelashes_style_5_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_style_5_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_5_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_5_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_5_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_style_5_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_5_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_style_5_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_style_5_setPrototypeOf(o, p) { eyelashes_style_5_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_style_5_setPrototypeOf(o, p); }\nfunction eyelashes_style_5_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_style_5_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_style_5_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_style_5_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_style_5_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_style_5_possibleConstructorReturn(self, call) { if (call && (eyelashes_style_5_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_style_5_assertThisInitialized(self); }\nfunction eyelashes_style_5_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_style_5_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_style_5_getPrototypeOf(o) { eyelashes_style_5_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_style_5_getPrototypeOf(o); }\n\n\n//import MatteAOTexture from "../../assets/eyelash_12.png";\n\n\nvar EyelashesStyle5 = /*#__PURE__*/function (_EyelashesStyle) {\n  eyelashes_style_5_inherits(EyelashesStyle5, _EyelashesStyle);\n  var _super = eyelashes_style_5_createSuper(EyelashesStyle5);\n  function EyelashesStyle5(sku, scene, width, height) {\n    eyelashes_style_5_classCallCheck(this, EyelashesStyle5);\n    var patternDefaultTextures = {\n      matte: eyelash_upperlower2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new EyelashesPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyelashes_style_5_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return eyelashes_style_5_createClass(EyelashesStyle5);\n}(EyelashesStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyelashes-style/eyelashes_style_factory.js\nfunction eyelashes_style_factory_typeof(obj) { "@babel/helpers - typeof"; return eyelashes_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyelashes_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction eyelashes_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelashes_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelashes_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelashes_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelashes_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyelashes_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyelashes_style_factory_setPrototypeOf(subClass, superClass); }\nfunction eyelashes_style_factory_setPrototypeOf(o, p) { eyelashes_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyelashes_style_factory_setPrototypeOf(o, p); }\nfunction eyelashes_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyelashes_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyelashes_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyelashes_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyelashes_style_factory_possibleConstructorReturn(this, result); }; }\nfunction eyelashes_style_factory_possibleConstructorReturn(self, call) { if (call && (eyelashes_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyelashes_style_factory_assertThisInitialized(self); }\nfunction eyelashes_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyelashes_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyelashes_style_factory_getPrototypeOf(o) { eyelashes_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyelashes_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\nvar EyelashesStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  eyelashes_style_factory_inherits(EyelashesStyleFactory, _StyleFactory);\n  var _super = eyelashes_style_factory_createSuper(EyelashesStyleFactory);\n  function EyelashesStyleFactory() {\n    var _this;\n    eyelashes_style_factory_classCallCheck(this, EyelashesStyleFactory);\n    _this = _super.call(this);\n    _this.eyeShadowStyles = {\n      natural1: EyelashesStyle1,\n      natural2: EyelashesStyle2,\n      natural3: EyelashesStyle3,\n      upperlower1: EyelashesStyle4,\n      upperlower2: EyelashesStyle5\n    };\n    return _this;\n  }\n  eyelashes_style_factory_createClass(EyelashesStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.eyeShadowStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported eyelashes style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return EyelashesStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/assets/Eyeliner_11.png\n/* harmony default export */ const Eyeliner_11 = (__webpack_require__.p + "assets/src/assets/Eyeliner_11.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeliner-style/eyelinerstyle.js\n\n\n\nfunction eyelinerstyle_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyelinerstyle_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyelinerstyle_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyelinerstyle_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyelinerstyle_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n//import { makeGeometry } from "../facemesh/eyeliner_landmark_helper";\n\n\n\n\n\n\n\nvar EyeLinerStyle = /*#__PURE__*/function () {\n  function EyeLinerStyle(sku, scene, width, height, materials) {\n    eyelinerstyle_classCallCheck(this, EyeLinerStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  eyelinerstyle_createClass(EyeLinerStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      // this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry, "eyelash");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return EyeLinerStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeliner-style/matter_eyeliner.js\n\nfunction matter_eyeliner_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matter_eyeliner_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matter_eyeliner_createClass(Constructor, protoProps, staticProps) { if (protoProps) matter_eyeliner_defineProperties(Constructor.prototype, protoProps); if (staticProps) matter_eyeliner_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteEyeLinerMask = /*#__PURE__*/function () {\n  function MatteEyeLinerMask(_pattern, _texture) {\n    matter_eyeliner_classCallCheck(this, MatteEyeLinerMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  matter_eyeliner_createClass(MatteEyeLinerMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteEyeLinerMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeliner-style/eyeliner_pattern_factory.js\nfunction eyeliner_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return eyeliner_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeliner_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction eyeliner_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeliner_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeliner_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeliner_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeliner_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeliner_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeliner_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction eyeliner_pattern_factory_setPrototypeOf(o, p) { eyeliner_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeliner_pattern_factory_setPrototypeOf(o, p); }\nfunction eyeliner_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyeliner_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeliner_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeliner_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeliner_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction eyeliner_pattern_factory_possibleConstructorReturn(self, call) { if (call && (eyeliner_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeliner_pattern_factory_assertThisInitialized(self); }\nfunction eyeliner_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeliner_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeliner_pattern_factory_getPrototypeOf(o) { eyeliner_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeliner_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar EyelinerPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  eyeliner_pattern_factory_inherits(EyelinerPatternFactory, _PatternFactory);\n  var _super = eyeliner_pattern_factory_createSuper(EyelinerPatternFactory);\n  function EyelinerPatternFactory() {\n    var _this;\n    eyeliner_pattern_factory_classCallCheck(this, EyelinerPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteEyeLinerMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  eyeliner_pattern_factory_createClass(EyelinerPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return EyelinerPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeliner-style/eyeliner_style_1.js\nfunction eyeliner_style_1_typeof(obj) { "@babel/helpers - typeof"; return eyeliner_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeliner_style_1_typeof(obj); }\nfunction eyeliner_style_1_toConsumableArray(arr) { return eyeliner_style_1_arrayWithoutHoles(arr) || eyeliner_style_1_iterableToArray(arr) || eyeliner_style_1_unsupportedIterableToArray(arr) || eyeliner_style_1_nonIterableSpread(); }\nfunction eyeliner_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyeliner_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyeliner_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyeliner_style_1_arrayLikeToArray(o, minLen); }\nfunction eyeliner_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyeliner_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyeliner_style_1_arrayLikeToArray(arr); }\nfunction eyeliner_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyeliner_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeliner_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeliner_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeliner_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeliner_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeliner_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeliner_style_1_setPrototypeOf(subClass, superClass); }\nfunction eyeliner_style_1_setPrototypeOf(o, p) { eyeliner_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeliner_style_1_setPrototypeOf(o, p); }\nfunction eyeliner_style_1_createSuper(Derived) { var hasNativeReflectConstruct = eyeliner_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeliner_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeliner_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeliner_style_1_possibleConstructorReturn(this, result); }; }\nfunction eyeliner_style_1_possibleConstructorReturn(self, call) { if (call && (eyeliner_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeliner_style_1_assertThisInitialized(self); }\nfunction eyeliner_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeliner_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeliner_style_1_getPrototypeOf(o) { eyeliner_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeliner_style_1_getPrototypeOf(o); }\n\n\n\n\n\nvar EyelinerStyle1 = /*#__PURE__*/function (_EyeLinerStyle) {\n  eyeliner_style_1_inherits(EyelinerStyle1, _EyeLinerStyle);\n  var _super = eyeliner_style_1_createSuper(EyelinerStyle1);\n  function EyelinerStyle1(sku, scene, width, height) {\n    eyeliner_style_1_classCallCheck(this, EyelinerStyle1);\n    var patternDefaultTextures = {\n      matte: Eyeliner_11\n      // glossy: MatteAOTexture,\n      //shimmer: [MatteAOTexture, ShimmerAOTexture],\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyelinerPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyeliner_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyeliner_style_1_createClass(EyelinerStyle1);\n}(EyeLinerStyle);\n;// CONCATENATED MODULE: ./src/assets/Eyeliner_12.png\n/* harmony default export */ const Eyeliner_12 = (__webpack_require__.p + "assets/src/assets/Eyeliner_12.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeliner-style/eyeliner_style_2.js\nfunction eyeliner_style_2_typeof(obj) { "@babel/helpers - typeof"; return eyeliner_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeliner_style_2_typeof(obj); }\nfunction eyeliner_style_2_toConsumableArray(arr) { return eyeliner_style_2_arrayWithoutHoles(arr) || eyeliner_style_2_iterableToArray(arr) || eyeliner_style_2_unsupportedIterableToArray(arr) || eyeliner_style_2_nonIterableSpread(); }\nfunction eyeliner_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyeliner_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyeliner_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyeliner_style_2_arrayLikeToArray(o, minLen); }\nfunction eyeliner_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyeliner_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyeliner_style_2_arrayLikeToArray(arr); }\nfunction eyeliner_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyeliner_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeliner_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeliner_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeliner_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeliner_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeliner_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeliner_style_2_setPrototypeOf(subClass, superClass); }\nfunction eyeliner_style_2_setPrototypeOf(o, p) { eyeliner_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeliner_style_2_setPrototypeOf(o, p); }\nfunction eyeliner_style_2_createSuper(Derived) { var hasNativeReflectConstruct = eyeliner_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeliner_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeliner_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeliner_style_2_possibleConstructorReturn(this, result); }; }\nfunction eyeliner_style_2_possibleConstructorReturn(self, call) { if (call && (eyeliner_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeliner_style_2_assertThisInitialized(self); }\nfunction eyeliner_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeliner_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeliner_style_2_getPrototypeOf(o) { eyeliner_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeliner_style_2_getPrototypeOf(o); }\n\n\n\n\n\nvar EyelinerStyle2 = /*#__PURE__*/function (_EyeLinerStyle) {\n  eyeliner_style_2_inherits(EyelinerStyle2, _EyeLinerStyle);\n  var _super = eyeliner_style_2_createSuper(EyelinerStyle2);\n  function EyelinerStyle2(sku, scene, width, height) {\n    eyeliner_style_2_classCallCheck(this, EyelinerStyle2);\n    var patternDefaultTextures = {\n      matte: Eyeliner_12\n      //shimmer: [MatteAOTextureUpper, ShimmerAOTextureUpper],\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyelinerPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyeliner_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    //console.log("asfasf" + materialsArray.length);\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyeliner_style_2_createClass(EyelinerStyle2);\n}(EyeLinerStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeliner-style/eyeliner_style_factory.js\nfunction eyeliner_style_factory_typeof(obj) { "@babel/helpers - typeof"; return eyeliner_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeliner_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction eyeliner_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeliner_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeliner_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeliner_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeliner_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeliner_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeliner_style_factory_setPrototypeOf(subClass, superClass); }\nfunction eyeliner_style_factory_setPrototypeOf(o, p) { eyeliner_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeliner_style_factory_setPrototypeOf(o, p); }\nfunction eyeliner_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyeliner_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeliner_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeliner_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeliner_style_factory_possibleConstructorReturn(this, result); }; }\nfunction eyeliner_style_factory_possibleConstructorReturn(self, call) { if (call && (eyeliner_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeliner_style_factory_assertThisInitialized(self); }\nfunction eyeliner_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeliner_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeliner_style_factory_getPrototypeOf(o) { eyeliner_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeliner_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar EyeLinerStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  eyeliner_style_factory_inherits(EyeLinerStyleFactory, _StyleFactory);\n  var _super = eyeliner_style_factory_createSuper(EyeLinerStyleFactory);\n  function EyeLinerStyleFactory() {\n    var _this;\n    eyeliner_style_factory_classCallCheck(this, EyeLinerStyleFactory);\n    _this = _super.call(this);\n    _this.eyeLinerStyles = {\n      eyeliner1: EyelinerStyle1,\n      eyeliner2: EyelinerStyle2\n    };\n    return _this;\n  }\n  eyeliner_style_factory_createClass(EyeLinerStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.eyeLinerStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported lips style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return EyeLinerStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/assets/Eyeshadow1.png\n/* harmony default export */ const Eyeshadow1 = (__webpack_require__.p + "assets/src/assets/Eyeshadow1.png");\n;// CONCATENATED MODULE: ./src/assets/Eyeshadow1_shimmer.png\n/* harmony default export */ const Eyeshadow1_shimmer = (__webpack_require__.p + "assets/src/assets/Eyeshadow1_shimmer.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/eyeshadow_style.js\n\n\n\nfunction eyeshadow_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeshadow_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeshadow_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeshadow_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeshadow_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar EyeShadowStyle = /*#__PURE__*/function () {\n  function EyeShadowStyle(sku, scene, width, height, materials) {\n    eyeshadow_style_classCallCheck(this, EyeShadowStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  eyeshadow_style_createClass(EyeShadowStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry, "eyeliner");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width / 5);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          //this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return EyeShadowStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/matte_eyeshadow_mask.js\n\nfunction matte_eyeshadow_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_eyeshadow_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_eyeshadow_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_eyeshadow_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_eyeshadow_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteEyeShadowMask = /*#__PURE__*/function () {\n  function MatteEyeShadowMask(_pattern, _texture) {\n    matte_eyeshadow_mask_classCallCheck(this, MatteEyeShadowMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  matte_eyeshadow_mask_createClass(MatteEyeShadowMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteEyeShadowMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/shimmer_eyeshadow_mask.js\n\nfunction shimmer_eyeshadow_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shimmer_eyeshadow_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction shimmer_eyeshadow_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) shimmer_eyeshadow_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) shimmer_eyeshadow_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar ShimmerEyeShadowMask = /*#__PURE__*/function () {\n  function ShimmerEyeShadowMask(_pattern, _texture) {\n    shimmer_eyeshadow_mask_classCallCheck(this, ShimmerEyeShadowMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var threeColor1 = null;\n    if (_pattern.colors.length > 1) {\n      var color1 = _pattern.colors[1];\n      var newColor1 = ColorUtils.getColorWithIntensity(color1, 100);\n      threeColor1 = new three_module/* Color */.Q1f(newColor1);\n    } else {\n      threeColor1 = new three_module/* Color */.Q1f("0xffffff");\n    }\n    var material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[0], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 0.24,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      // clearcoat: 1,\n      // clearcoatRoughness: 0.3,\n      specularIntensity: 0.5,\n      specularColor: threeColor,\n      color: threeColor\n    });\n    var material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 0.24,\n      metalness: 0,\n      specularIntensity: 0.6,\n      specularColor: threeColor1,\n      color: threeColor1\n    });\n    this.MaterialArray = [material, material1];\n  }\n  shimmer_eyeshadow_mask_createClass(ShimmerEyeShadowMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return ShimmerEyeShadowMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/eyeshadow_pattern_factory.js\nfunction eyeshadow_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return eyeshadow_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeshadow_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction eyeshadow_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeshadow_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeshadow_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeshadow_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeshadow_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeshadow_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeshadow_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction eyeshadow_pattern_factory_setPrototypeOf(o, p) { eyeshadow_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeshadow_pattern_factory_setPrototypeOf(o, p); }\nfunction eyeshadow_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyeshadow_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeshadow_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeshadow_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeshadow_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction eyeshadow_pattern_factory_possibleConstructorReturn(self, call) { if (call && (eyeshadow_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeshadow_pattern_factory_assertThisInitialized(self); }\nfunction eyeshadow_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeshadow_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeshadow_pattern_factory_getPrototypeOf(o) { eyeshadow_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeshadow_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\nvar EyeshadowPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  eyeshadow_pattern_factory_inherits(EyeshadowPatternFactory, _PatternFactory);\n  var _super = eyeshadow_pattern_factory_createSuper(EyeshadowPatternFactory);\n  function EyeshadowPatternFactory() {\n    var _this;\n    eyeshadow_pattern_factory_classCallCheck(this, EyeshadowPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteEyeShadowMask,\n      shimmer: ShimmerEyeShadowMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  eyeshadow_pattern_factory_createClass(EyeshadowPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return EyeshadowPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/eyeshadow_style_1.js\nfunction eyeshadow_style_1_typeof(obj) { "@babel/helpers - typeof"; return eyeshadow_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeshadow_style_1_typeof(obj); }\nfunction eyeshadow_style_1_toConsumableArray(arr) { return eyeshadow_style_1_arrayWithoutHoles(arr) || eyeshadow_style_1_iterableToArray(arr) || eyeshadow_style_1_unsupportedIterableToArray(arr) || eyeshadow_style_1_nonIterableSpread(); }\nfunction eyeshadow_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyeshadow_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyeshadow_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyeshadow_style_1_arrayLikeToArray(o, minLen); }\nfunction eyeshadow_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyeshadow_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyeshadow_style_1_arrayLikeToArray(arr); }\nfunction eyeshadow_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyeshadow_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeshadow_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeshadow_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeshadow_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeshadow_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeshadow_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeshadow_style_1_setPrototypeOf(subClass, superClass); }\nfunction eyeshadow_style_1_setPrototypeOf(o, p) { eyeshadow_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeshadow_style_1_setPrototypeOf(o, p); }\nfunction eyeshadow_style_1_createSuper(Derived) { var hasNativeReflectConstruct = eyeshadow_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeshadow_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeshadow_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeshadow_style_1_possibleConstructorReturn(this, result); }; }\nfunction eyeshadow_style_1_possibleConstructorReturn(self, call) { if (call && (eyeshadow_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeshadow_style_1_assertThisInitialized(self); }\nfunction eyeshadow_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeshadow_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeshadow_style_1_getPrototypeOf(o) { eyeshadow_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeshadow_style_1_getPrototypeOf(o); }\n\n\n\n\n\nvar EyeshadowStyle1 = /*#__PURE__*/function (_EyeShadowStyle) {\n  eyeshadow_style_1_inherits(EyeshadowStyle1, _EyeShadowStyle);\n  var _super = eyeshadow_style_1_createSuper(EyeshadowStyle1);\n  function EyeshadowStyle1(sku, scene, width, height) {\n    eyeshadow_style_1_classCallCheck(this, EyeshadowStyle1);\n    var patternDefaultTextures = {\n      matte: Eyeshadow1,\n      // glossy: MatteAOTexture,\n      shimmer: [Eyeshadow1, Eyeshadow1_shimmer]\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new EyeshadowPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyeshadow_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyeshadow_style_1_createClass(EyeshadowStyle1);\n}(EyeShadowStyle);\n;// CONCATENATED MODULE: ./src/assets/Eyeshadow2.png\n/* harmony default export */ const Eyeshadow2 = (__webpack_require__.p + "assets/src/assets/Eyeshadow2.png");\n;// CONCATENATED MODULE: ./src/assets/Eyeshadow2_shimmer.png\n/* harmony default export */ const Eyeshadow2_shimmer = (__webpack_require__.p + "assets/src/assets/Eyeshadow2_shimmer.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/eyeshadow_style_2.js\nfunction eyeshadow_style_2_typeof(obj) { "@babel/helpers - typeof"; return eyeshadow_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeshadow_style_2_typeof(obj); }\nfunction eyeshadow_style_2_toConsumableArray(arr) { return eyeshadow_style_2_arrayWithoutHoles(arr) || eyeshadow_style_2_iterableToArray(arr) || eyeshadow_style_2_unsupportedIterableToArray(arr) || eyeshadow_style_2_nonIterableSpread(); }\nfunction eyeshadow_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction eyeshadow_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return eyeshadow_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return eyeshadow_style_2_arrayLikeToArray(o, minLen); }\nfunction eyeshadow_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction eyeshadow_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return eyeshadow_style_2_arrayLikeToArray(arr); }\nfunction eyeshadow_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction eyeshadow_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeshadow_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeshadow_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeshadow_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeshadow_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeshadow_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeshadow_style_2_setPrototypeOf(subClass, superClass); }\nfunction eyeshadow_style_2_setPrototypeOf(o, p) { eyeshadow_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeshadow_style_2_setPrototypeOf(o, p); }\nfunction eyeshadow_style_2_createSuper(Derived) { var hasNativeReflectConstruct = eyeshadow_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeshadow_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeshadow_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeshadow_style_2_possibleConstructorReturn(this, result); }; }\nfunction eyeshadow_style_2_possibleConstructorReturn(self, call) { if (call && (eyeshadow_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeshadow_style_2_assertThisInitialized(self); }\nfunction eyeshadow_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeshadow_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeshadow_style_2_getPrototypeOf(o) { eyeshadow_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeshadow_style_2_getPrototypeOf(o); }\n\n\n\n\n\nvar EyeshadowStyle2 = /*#__PURE__*/function (_EyeShadowStyle) {\n  eyeshadow_style_2_inherits(EyeshadowStyle2, _EyeShadowStyle);\n  var _super = eyeshadow_style_2_createSuper(EyeshadowStyle2);\n  function EyeshadowStyle2(sku, scene, width, height) {\n    eyeshadow_style_2_classCallCheck(this, EyeshadowStyle2);\n    var patternDefaultTextures = {\n      matte: Eyeshadow2,\n      // glossy: MatteAOTexture,\n      shimmer: [Eyeshadow2, Eyeshadow2_shimmer]\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new EyeshadowPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, eyeshadow_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return eyeshadow_style_2_createClass(EyeshadowStyle2);\n}(EyeShadowStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/eyeshadow-style/eyeshadow_style_factory.js\nfunction eyeshadow_style_factory_typeof(obj) { "@babel/helpers - typeof"; return eyeshadow_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, eyeshadow_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction eyeshadow_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction eyeshadow_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction eyeshadow_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) eyeshadow_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) eyeshadow_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction eyeshadow_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) eyeshadow_style_factory_setPrototypeOf(subClass, superClass); }\nfunction eyeshadow_style_factory_setPrototypeOf(o, p) { eyeshadow_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return eyeshadow_style_factory_setPrototypeOf(o, p); }\nfunction eyeshadow_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = eyeshadow_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = eyeshadow_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = eyeshadow_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return eyeshadow_style_factory_possibleConstructorReturn(this, result); }; }\nfunction eyeshadow_style_factory_possibleConstructorReturn(self, call) { if (call && (eyeshadow_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return eyeshadow_style_factory_assertThisInitialized(self); }\nfunction eyeshadow_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction eyeshadow_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction eyeshadow_style_factory_getPrototypeOf(o) { eyeshadow_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return eyeshadow_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar EyeShadowStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  eyeshadow_style_factory_inherits(EyeShadowStyleFactory, _StyleFactory);\n  var _super = eyeshadow_style_factory_createSuper(EyeShadowStyleFactory);\n  function EyeShadowStyleFactory() {\n    var _this;\n    eyeshadow_style_factory_classCallCheck(this, EyeShadowStyleFactory);\n    _this = _super.call(this);\n    _this.eyeShadowStyles = {\n      eyeshadow1: EyeshadowStyle1,\n      eyeshadow2: EyeshadowStyle2\n      //"eyeShadow3": GlossyEyeShadowMask\n      // "shimmer": ShimmerEyeShadowMask,\n    };\n    return _this;\n  }\n  eyeshadow_style_factory_createClass(EyeShadowStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.eyeShadowStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported eyeshadow style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return EyeShadowStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/assets/Foundation.png\n/* harmony default export */ const Foundation = (__webpack_require__.p + "assets/src/assets/Foundation.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/foundation-style/foundation_style.js\n\n\n\nfunction foundation_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction foundation_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction foundation_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) foundation_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) foundation_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar FoundationStyle = /*#__PURE__*/function () {\n  function FoundationStyle(sku, scene, width, height, materials) {\n    foundation_style_classCallCheck(this, FoundationStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  foundation_style_createClass(FoundationStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry, "foundation");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width / 10);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return FoundationStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/foundation-style/matte_foundation_mask.js\n\nfunction matte_foundation_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_foundation_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_foundation_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_foundation_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_foundation_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteFoundationMask = /*#__PURE__*/function () {\n  function MatteFoundationMask(_pattern, _texture) {\n    matte_foundation_mask_classCallCheck(this, MatteFoundationMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      color: threeColor\n    });\n    this.MaterialArray = [material];\n  }\n  matte_foundation_mask_createClass(MatteFoundationMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteFoundationMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/foundation-style/glossy_foundation_mask.js\n\nfunction glossy_foundation_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glossy_foundation_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glossy_foundation_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glossy_foundation_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glossy_foundation_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar GlossyFoundationMask = /*#__PURE__*/function () {\n  function GlossyFoundationMask(_pattern, _texture) {\n    glossy_foundation_mask_classCallCheck(this, GlossyFoundationMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 1,\n      metalness: 0,\n      specularIntensity: 1,\n      specularColor: threeColor,\n      clearcoat: 0.1,\n      clearcoatRoughness: 0.25,\n      //need to change this value for gloss slider\n      color: threeColor\n    });\n    this.MaterialArray = [material];\n  }\n  glossy_foundation_mask_createClass(GlossyFoundationMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return GlossyFoundationMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/foundation-style/foundation_pattern_factory.js\nfunction foundation_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return foundation_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, foundation_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction foundation_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction foundation_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction foundation_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) foundation_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) foundation_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction foundation_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) foundation_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction foundation_pattern_factory_setPrototypeOf(o, p) { foundation_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return foundation_pattern_factory_setPrototypeOf(o, p); }\nfunction foundation_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = foundation_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = foundation_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = foundation_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return foundation_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction foundation_pattern_factory_possibleConstructorReturn(self, call) { if (call && (foundation_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return foundation_pattern_factory_assertThisInitialized(self); }\nfunction foundation_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction foundation_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction foundation_pattern_factory_getPrototypeOf(o) { foundation_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return foundation_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\nvar FoundationPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  foundation_pattern_factory_inherits(FoundationPatternFactory, _PatternFactory);\n  var _super = foundation_pattern_factory_createSuper(FoundationPatternFactory);\n  function FoundationPatternFactory() {\n    var _this;\n    foundation_pattern_factory_classCallCheck(this, FoundationPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteFoundationMask,\n      glossy: GlossyFoundationMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  foundation_pattern_factory_createClass(FoundationPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return FoundationPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/foundation-style/foundation_style_1.js\nfunction foundation_style_1_typeof(obj) { "@babel/helpers - typeof"; return foundation_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, foundation_style_1_typeof(obj); }\nfunction foundation_style_1_toConsumableArray(arr) { return foundation_style_1_arrayWithoutHoles(arr) || foundation_style_1_iterableToArray(arr) || foundation_style_1_unsupportedIterableToArray(arr) || foundation_style_1_nonIterableSpread(); }\nfunction foundation_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction foundation_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return foundation_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return foundation_style_1_arrayLikeToArray(o, minLen); }\nfunction foundation_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction foundation_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return foundation_style_1_arrayLikeToArray(arr); }\nfunction foundation_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction foundation_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction foundation_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) foundation_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) foundation_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction foundation_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction foundation_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) foundation_style_1_setPrototypeOf(subClass, superClass); }\nfunction foundation_style_1_setPrototypeOf(o, p) { foundation_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return foundation_style_1_setPrototypeOf(o, p); }\nfunction foundation_style_1_createSuper(Derived) { var hasNativeReflectConstruct = foundation_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = foundation_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = foundation_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return foundation_style_1_possibleConstructorReturn(this, result); }; }\nfunction foundation_style_1_possibleConstructorReturn(self, call) { if (call && (foundation_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return foundation_style_1_assertThisInitialized(self); }\nfunction foundation_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction foundation_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction foundation_style_1_getPrototypeOf(o) { foundation_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return foundation_style_1_getPrototypeOf(o); }\n\n\n\nvar FoundationStyle1 = /*#__PURE__*/function (_FoundationStyle) {\n  foundation_style_1_inherits(FoundationStyle1, _FoundationStyle);\n  var _super = foundation_style_1_createSuper(FoundationStyle1);\n  function FoundationStyle1(sku, scene, width, height) {\n    foundation_style_1_classCallCheck(this, FoundationStyle1);\n    var patternDefaultTextures = {\n      matte: Foundation,\n      glossy: Foundation\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new FoundationPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, foundation_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return foundation_style_1_createClass(FoundationStyle1);\n}(FoundationStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/foundation-style/foundation_style_factory.js\nfunction foundation_style_factory_typeof(obj) { "@babel/helpers - typeof"; return foundation_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, foundation_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction foundation_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction foundation_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction foundation_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) foundation_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) foundation_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction foundation_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) foundation_style_factory_setPrototypeOf(subClass, superClass); }\nfunction foundation_style_factory_setPrototypeOf(o, p) { foundation_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return foundation_style_factory_setPrototypeOf(o, p); }\nfunction foundation_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = foundation_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = foundation_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = foundation_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return foundation_style_factory_possibleConstructorReturn(this, result); }; }\nfunction foundation_style_factory_possibleConstructorReturn(self, call) { if (call && (foundation_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return foundation_style_factory_assertThisInitialized(self); }\nfunction foundation_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction foundation_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction foundation_style_factory_getPrototypeOf(o) { foundation_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return foundation_style_factory_getPrototypeOf(o); }\n\n\n\n\nvar FoundationStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  foundation_style_factory_inherits(FoundationStyleFactory, _StyleFactory);\n  var _super = foundation_style_factory_createSuper(FoundationStyleFactory);\n  function FoundationStyleFactory() {\n    var _this;\n    foundation_style_factory_classCallCheck(this, FoundationStyleFactory);\n    _this = _super.call(this);\n    _this.foundationStyles = {\n      foundation1: FoundationStyle1\n    };\n    return _this;\n  }\n  foundation_style_factory_createClass(FoundationStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.foundationStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported foundation style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return FoundationStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/hair-style/glossy_hair_mask.js\n\nfunction glossy_hair_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glossy_hair_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glossy_hair_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glossy_hair_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glossy_hair_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar glossy_hair_mask_vertexShader = ["varying vec2 vUv;", "void main() {", "  vUv = uv;", "  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\n\n// var fragmentShader = [\n//   "uniform sampler2D _MainTex;",\n//   "uniform sampler2D _MaskTex;",\n//   "uniform vec4 _MainColor;", // Added variable for main color\n//   "uniform float _Threshold;",\n//   "",\n//   "varying vec2 vUv;",\n//   "",\n//   "void main() {",\n//   " vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);",\n//   "  vec4 mainCol = texture2D(_MainTex, flippedUV);",\n//   "  vec4 maskCol = texture2D(_MaskTex, flippedUV);",\n//   "",\n//   "  float mask = maskCol.g;",\n//   "  // Apply main color",\n//   "  vec4 mainColor = _MainColor * mainCol;",\n//   "",\n//   "  // Calculate final color based on mask and threshold",\n//   "  vec4 col = mix(maskCol, mix(maskCol, mainColor, mask), step(_Threshold, mask));",\n//   "",\n//   "  gl_FragColor = col;",\n//   "}",\n// ].join("\\n");\n\nvar glossy_hair_mask_fragmentShader = ["uniform sampler2D _MainTex;", "uniform sampler2D _MaskTex;", "uniform vec4 _MainColor;",\n// Added variable for main color\n"uniform float _Threshold;", "", "varying vec2 vUv;", "", "void main() {", " vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);", "  vec4 mainCol = texture2D(_MainTex, flippedUV);", "  vec4 maskCol = texture2D(_MaskTex, flippedUV);", "", "  float mask = maskCol.g;", "  // Apply main color", "  vec4 mainColor = _MainColor * mainCol;", "", "  // Calculate final color based on mask and threshold", "  vec4 col = mix(mainCol, mix(mainCol, maskCol, mask), step(_Threshold, mask));", "", "  if (mask > _Threshold) {", "    col = _MainColor;",\n// Set the mask color to newColorValue if mask value is greater than _Threshold\n"  }", "", "  gl_FragColor = col;", "}"].join("\\n");\n\n// var fragmentShader = [\n//   "uniform sampler2D _MainTex;",\n//   "uniform sampler2D _MaskTex;",\n//   "uniform vec4 _MainColor;", // Original main color variable\n//   "uniform vec4 _EdgeColor;", // New variable for edge color\n//   "uniform float _Threshold;",\n//   "uniform float _EdgeWidth;", // New variable for edge width\n//   "",\n//   "varying vec2 vUv;",\n//   "",\n//   "void main() {",\n//   "  vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);",\n//   "  vec4 mainCol = texture2D(_MainTex, flippedUV);",\n//   "  vec4 maskCol = texture2D(_MaskTex, flippedUV);",\n//   "",\n//   "  float mask = maskCol.r;",\n//   "  // Apply main color",\n//   "  vec4 mainColor = _MainColor * mainCol;",\n//   "",\n//   "  // Edge detection",\n//   "  float edge = 1.0 - smoothstep(0.5 - _EdgeWidth, 0.5 + _EdgeWidth, mask);",\n//   "  vec4 edgeColor = _EdgeColor * edge;",\n//   "",\n//   "  // Calculate final color based on mask, edges, and threshold",\n//   "  vec4 col = mix(maskCol, mix(mainColor, mainColor + edgeColor, edge), step(_Threshold, mask));",\n//   "",\n//   "  gl_FragColor = col;",\n//   "}",\n// ].join("\\n");\n\n// var fragmentShader = [\n//   "uniform sampler2D _MainTex;",\n//   "uniform sampler2D _MaskTex;",\n//   "uniform float _Threshold;",\n//   "uniform vec4 _MainColor;",\n//   "",\n//   "varying vec2 vUv;",\n//   "",\n//   "void main() {",\n//   " vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);",\n//   "  vec4 mainCol = texture2D(_MainTex, flippedUV);",\n//   "  vec4 maskCol = texture2D(_MaskTex, flippedUV);",\n//   "",\n//   "  float mask = maskCol.a;", // Use the red channel value of _MaskTex as the mask value\n//   "  vec4 col = mix(mainCol, mix(mainCol, maskCol, mask), step(_Threshold, mask));",\n//   "",\n// "  if (mask > _Threshold) {",\n// "    col = _MainColor;", // Set the mask color to newColorValue if mask value is greater than _Threshold\n// "  }",\n// "",\n//   "  gl_FragColor = col;",\n//   "}",\n// ].join("\\n");\n\nfunction maskShader(maskColor) {\n  return {\n    uniforms: {\n      _MainTex: {\n        value: null\n      },\n      _MaskTex: {\n        value: null\n      },\n      _Threshold: {\n        value: 0.9\n      },\n      _MainColor: {\n        value: maskColor\n      } // Initialize with an empty Vector4\n    },\n    vertexShader: glossy_hair_mask_vertexShader,\n    fragmentShader: glossy_hair_mask_fragmentShader\n  };\n}\nvar GlossyHairMask = /*#__PURE__*/function () {\n  function GlossyHairMask(_pattern, _texture) {\n    glossy_hair_mask_classCallCheck(this, GlossyHairMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var maskColor = new three_module/* Vector4 */.IUQ(threeColor.r, threeColor.g, threeColor.b, 0);\n    var material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: maskShader(maskColor).uniforms,\n      vertexShader: maskShader(maskColor).vertexShader,\n      fragmentShader: maskShader(maskColor).fragmentShader,\n      transparent: true,\n      opacity: 0\n    });\n    this.MaterialArray = [material];\n  }\n  glossy_hair_mask_createClass(GlossyHairMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return GlossyHairMask;\n}();\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.uint8-array.js\nvar es6_typed_uint8_array = __webpack_require__(4702);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.repeat.js\nvar es6_string_repeat = __webpack_require__(4894);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/math/Lut.js\nvar Lut = __webpack_require__(6443);\n;// CONCATENATED MODULE: ./src/makeupVTOs/hair-style/hair_style.js\n\n\n\n\nfunction hair_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction hair_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction hair_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) hair_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) hair_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n//import { Lut } from "three/examples/jsm/math/Lut.js";\n\n// import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";\n// import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";\n\nvar HairStyle = /*#__PURE__*/function () {\n  function HairStyle(sku, scene, width, height, materials) {\n    hair_style_classCallCheck(this, HairStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.imageCanvas;\n    this.mask = null;\n    this.maskMesh = null;\n    this.imageMesh = null;\n    this.isvideo = true;\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n    this.lut = new Lut/* Lut */.S("grayscale", 256);\n    this.lut.setMin(0);\n    this.lut.setMax(1);\n    this.imageMaterial = null;\n  }\n  hair_style_createClass(HairStyle, [{\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      if (this.imageMaterial) {\n        this.imageMaterial.opacity = getOpacitySliderValue();\n      }\n      this.materialArray.forEach(function (material) {\n        material.uniforms._MainColor.value = new three_module/* Vector4 */.IUQ(material.uniforms._MainColor.value.x, material.uniforms._MainColor.value.y, material.uniforms._MainColor.value.z, 0\n        //getOpacitySliderValue()\n        );\n        // material.uniforms._Threshold.value = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.uniforms._MainColor.value = new three_module/* Vector4 */.IUQ(material.uniforms._MainColor.value.x, material.uniforms._MainColor.value.y, material.uniforms._MainColor.value.z, intensity);\n      });\n    }\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateMask",\n    value: function updateMask(imageCanvas, mask, isvideo) {\n      this.isvideo = isvideo;\n      if (imageCanvas) {\n        this.imageCanvas = imageCanvas;\n      }\n      if (!this.mask || this.mask.width !== mask.width || this.mask.height !== mask.height) {\n        this.mask = {\n          data: this.flipImageData(mask.data, mask.width, mask.height),\n          width: mask.width,\n          height: mask.height\n        };\n      } else {\n        this.mask.data.set(\n        //mask.data\n        this.flipImageData(mask.data, mask.width, mask.height));\n      }\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      if (this.maskMesh) {\n        this.scene.remove(this.maskMesh);\n      }\n      if (this.imageMesh) {\n        this.scene.remove(this.imageMesh);\n      }\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        this.removeFaces();\n        if (this.mask) {\n          this.addRendering();\n        } else {\n          // Handle case when there is no mask\n        }\n        this.needsUpdate = false;\n      }\n      if (this.mask != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "flipImageData",\n    value: function flipImageData(data, width, height) {\n      var flippedData = new Uint8Array(data.length);\n      var rowSize = width * 4; // Assuming 4 channels (RGBA)\n\n      for (var row = 0; row < height; row++) {\n        var srcOffset = row * rowSize;\n        var destOffset = (height - row - 1) * rowSize;\n        flippedData.set(data.subarray(srcOffset, srcOffset + rowSize), destOffset);\n      }\n      return flippedData;\n    }\n  }, {\n    key: "addRendering",\n    value: function addRendering() {\n      var originalImageTexture = new three_module/* Texture */.gPd(this.imageCanvas);\n      //originalImageTexture.premultiplyAlpha = true;\n      // originalImageTexture.generateMipmaps = false;\n      // originalImageTexture.minFilter = THREE.LinearFilter;\n      // originalImageTexture.magFilter = THREE.LinearFilter;\n      originalImageTexture.wrapS = three_module/* RepeatWrapping */.GJx;\n      originalImageTexture.repeat.x = -1;\n\n      //originalImageTexture.needsUpdate = true;\n\n      var imageGeometry = new three_module/* PlaneGeometry */.bdM(this.width, this.height);\n      var shaderColor = this.materialArray[0].uniforms._MainColor.value;\n\n      // Step 2: Create a canvas to manipulate pixel data\n      var canvas = document.createElement("canvas");\n      var context = canvas.getContext("2d", {\n        willReadFrequently: true\n      });\n      canvas.width = originalImageTexture.image.width;\n      canvas.height = originalImageTexture.image.height;\n\n      // Step 3: Iterate through pixels and apply grayscale effect\n      context.drawImage(originalImageTexture.image, 0, 0);\n      var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n      var data = imageData.data;\n      for (var i = 0; i < data.length; i += 4) {\n        // Extract the original color values\n        var r = data[i] / 255;\n        var g = data[i + 1] / 255;\n        var b = data[i + 2] / 255;\n        var grayscaleColor = this.lut.getColor(1 * r + 0 * g + 0 * b);\n\n        // Update pixel data with grayscale values\n        data[i] = grayscaleColor.r * 255;\n        data[i + 1] = grayscaleColor.g * 255;\n        data[i + 2] = grayscaleColor.b * 255;\n      }\n\n      // Update the originalImageTexture with the new grayscale data\n      context.putImageData(imageData, 0, 0);\n      originalImageTexture.needsUpdate = true;\n      var grayscaleTexture = new three_module/* Texture */.gPd(canvas);\n      grayscaleTexture.generateMipmaps = false;\n      grayscaleTexture.minFilter = three_module/* LinearFilter */.k6q;\n      grayscaleTexture.magFilter = three_module/* LinearFilter */.k6q;\n      grayscaleTexture.wrapS = three_module/* RepeatWrapping */.GJx;\n      grayscaleTexture.repeat.x = -1;\n      grayscaleTexture.needsUpdate = true;\n      this.imageMaterial = new three_module/* MeshBasicMaterial */.V9B({\n        map: grayscaleTexture,\n        color: new three_module/* Color */.Q1f().setRGB(shaderColor.x, shaderColor.y, shaderColor.z),\n        transparent: true,\n        premultipliedAlpha: false\n      });\n\n      // this.imageMaterial = new THREE.ShaderMaterial({\n      //   uniforms: {\n      //     detailTexture: { value: grayscaleTexture },\n      //     customColor: { value: new THREE.Color(0xeedee9) }, // Set your custom color here\n      //   },\n      //   vertexShader: vertexShader,\n      //   fragmentShader: fragmentShader,\n      // });\n\n      this.imageMesh = new three_module/* Mesh */.eaF(imageGeometry, this.imageMaterial);\n      this.imageMesh.position.set(0, 0, 0);\n      if (this.isvideo) this.imageMesh.scale.set(-1, 1, 1);else this.imageMesh.scale.set(-1, 1, 1);\n      this.scene.add(this.imageMesh);\n      var maskImageTexture = new three_module/* DataTexture */.GYF(this.mask.data, this.mask.width, this.mask.height, three_module/* RGBAFormat */.GWd);\n      maskImageTexture.generateMipmaps = false;\n      maskImageTexture.minFilter = three_module/* LinearFilter */.k6q;\n      maskImageTexture.magFilter = three_module/* LinearFilter */.k6q;\n      maskImageTexture.needsUpdate = true;\n      var maskGeometry = new three_module/* PlaneGeometry */.bdM(this.width, this.height);\n      this.materialArray[0].uniforms._MainTex.value = originalImageTexture;\n      this.materialArray[0].uniforms._MaskTex.value = maskImageTexture;\n      this.materialArray[0].uniforms._Threshold.value = 0.9;\n      this.maskMesh = new three_module/* Mesh */.eaF(maskGeometry, this.materialArray[0]);\n      this.maskMesh.position.set(0, 0, 0);\n      if (this.isvideo) this.maskMesh.scale.set(-1, 1, 1);else this.maskMesh.scale.set(-1, 1, 1);\n      this.scene.add(this.maskMesh);\n    }\n  }]);\n  return HairStyle;\n}();\nvar hair_style_vertexShader = ["varying vec2 vUv;", "void main() {", "    vUv = vec2(1.0 - uv.x,  uv.y);",\n// Adjust UV to correct horizontal flip\n"    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\nvar hair_style_fragmentShader = ["uniform sampler2D detailTexture;", "uniform vec3 customColor;", "varying vec2 vUv;", "vec3 rgbToHsl(vec3 color) {", "    float minVal = min(min(color.r, color.g), color.b);", "    float maxVal = max(max(color.r, color.g), color.b);", "    float delta = maxVal - minVal;", "    float l = (maxVal + minVal) / 2.0;", "    float s = 0.0;", "    if (delta > 0.0) {", "        s = (l < 0.5) ? (delta / (maxVal + minVal)) : (delta / (2.0 - maxVal - minVal));", "    }", "    float h = 0.0;", "    if (delta > 0.0) {", "        if (maxVal == color.r) {", "            h = (color.g - color.b) / delta + ((color.g < color.b) ? 6.0 : 0.0);", "        } else if (maxVal == color.g) {", "            h = (color.b - color.r) / delta + 2.0;", "        } else if (maxVal == color.b) {", "            h = (color.r - color.g) / delta + 4.0;", "        }", "        h /= 6.0;", "    }", "    return vec3(h, s, l);", "}", "vec3 hslToRgb(vec3 hsl) {", "    float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;", "    float x = c * (1.0 - abs(mod(hsl.x * 6.0, 2.0) - 1.0));", "    float m = hsl.z - c / 2.0;", "    vec3 rgb;", "    if (hsl.x < 1.0 / 6.0) {", "        rgb = vec3(c, x, 0.0);", "    } else if (hsl.x < 2.0 / 6.0) {", "        rgb = vec3(x, c, 0.0);", "    } else if (hsl.x < 3.0 / 6.0) {", "        rgb = vec3(0.0, c, x);", "    } else if (hsl.x < 4.0 / 6.0) {", "        rgb = vec3(0.0, x, c);", "    } else if (hsl.x < 5.0 / 6.0) {", "        rgb = vec3(x, 0.0, c);", "    } else {", "        rgb = vec3(c, 0.0, x);", "    }", "    return rgb + vec3(m);", "}", "void main() {", "    vec4 detailColor = texture2D(detailTexture, vUv);", "    vec3 hsl = rgbToHsl(detailColor.rgb);", "    hsl.y = clamp(hsl.y + 0.2, 0.0, 1.0); // Adjust saturation (increase by 0.2)", "    hsl.z = clamp(hsl.z + 0.1, 0.0, 1.0); // Adjust luminosity (increase by 0.1)", "    vec3 adjustedColor = hslToRgb(hsl);", "    vec4 finalColor = vec4(mix(customColor, adjustedColor, detailColor.r), 1.0);", "    gl_FragColor = finalColor;", "}"].join("\\n");\n;// CONCATENATED MODULE: ./src/makeupVTOs/hair-style/hair_pattern_factory.js\nfunction hair_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return hair_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, hair_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction hair_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction hair_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction hair_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) hair_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) hair_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction hair_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) hair_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction hair_pattern_factory_setPrototypeOf(o, p) { hair_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return hair_pattern_factory_setPrototypeOf(o, p); }\nfunction hair_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = hair_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = hair_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = hair_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return hair_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction hair_pattern_factory_possibleConstructorReturn(self, call) { if (call && (hair_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return hair_pattern_factory_assertThisInitialized(self); }\nfunction hair_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction hair_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction hair_pattern_factory_getPrototypeOf(o) { hair_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return hair_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\nvar HairPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  hair_pattern_factory_inherits(HairPatternFactory, _PatternFactory);\n  var _super = hair_pattern_factory_createSuper(HairPatternFactory);\n  function HairPatternFactory() {\n    var _this;\n    hair_pattern_factory_classCallCheck(this, HairPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      glossy: GlossyHairMask,\n      matte: GlossyHairMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  hair_pattern_factory_createClass(HairPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      //console.log(this.patternClass.MaterialArray);\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return HairPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/hair-style/hair_single_tone.js\nfunction hair_single_tone_typeof(obj) { "@babel/helpers - typeof"; return hair_single_tone_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, hair_single_tone_typeof(obj); }\nfunction hair_single_tone_toConsumableArray(arr) { return hair_single_tone_arrayWithoutHoles(arr) || hair_single_tone_iterableToArray(arr) || hair_single_tone_unsupportedIterableToArray(arr) || hair_single_tone_nonIterableSpread(); }\nfunction hair_single_tone_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction hair_single_tone_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return hair_single_tone_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return hair_single_tone_arrayLikeToArray(o, minLen); }\nfunction hair_single_tone_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction hair_single_tone_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return hair_single_tone_arrayLikeToArray(arr); }\nfunction hair_single_tone_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction hair_single_tone_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction hair_single_tone_createClass(Constructor, protoProps, staticProps) { if (protoProps) hair_single_tone_defineProperties(Constructor.prototype, protoProps); if (staticProps) hair_single_tone_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction hair_single_tone_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction hair_single_tone_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) hair_single_tone_setPrototypeOf(subClass, superClass); }\nfunction hair_single_tone_setPrototypeOf(o, p) { hair_single_tone_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return hair_single_tone_setPrototypeOf(o, p); }\nfunction hair_single_tone_createSuper(Derived) { var hasNativeReflectConstruct = hair_single_tone_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = hair_single_tone_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = hair_single_tone_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return hair_single_tone_possibleConstructorReturn(this, result); }; }\nfunction hair_single_tone_possibleConstructorReturn(self, call) { if (call && (hair_single_tone_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return hair_single_tone_assertThisInitialized(self); }\nfunction hair_single_tone_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction hair_single_tone_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction hair_single_tone_getPrototypeOf(o) { hair_single_tone_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return hair_single_tone_getPrototypeOf(o); }\n\n\n\nvar HairSingleTone = /*#__PURE__*/function (_HairStyle) {\n  hair_single_tone_inherits(HairSingleTone, _HairStyle);\n  var _super = hair_single_tone_createSuper(HairSingleTone);\n  function HairSingleTone(sku, scene, width, height) {\n    hair_single_tone_classCallCheck(this, HairSingleTone);\n    var patternDefaultTextures = {\n      matte: null,\n      glossy: null,\n      shimmer: null\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new HairPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, hair_single_tone_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return hair_single_tone_createClass(HairSingleTone);\n}(HairStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/hair-style/hair_style_factory.js\nfunction hair_style_factory_typeof(obj) { "@babel/helpers - typeof"; return hair_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, hair_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction hair_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction hair_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction hair_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) hair_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) hair_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction hair_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) hair_style_factory_setPrototypeOf(subClass, superClass); }\nfunction hair_style_factory_setPrototypeOf(o, p) { hair_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return hair_style_factory_setPrototypeOf(o, p); }\nfunction hair_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = hair_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = hair_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = hair_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return hair_style_factory_possibleConstructorReturn(this, result); }; }\nfunction hair_style_factory_possibleConstructorReturn(self, call) { if (call && (hair_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return hair_style_factory_assertThisInitialized(self); }\nfunction hair_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction hair_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction hair_style_factory_getPrototypeOf(o) { hair_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return hair_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar HairStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  hair_style_factory_inherits(HairStyleFactory, _StyleFactory);\n  var _super = hair_style_factory_createSuper(HairStyleFactory);\n  function HairStyleFactory() {\n    var _this;\n    hair_style_factory_classCallCheck(this, HairStyleFactory);\n    _this = _super.call(this);\n    _this.hairStyles = {\n      single: HairSingleTone\n    };\n    return _this;\n  }\n  hair_style_factory_createClass(HairStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      // for (let i = 0; i < apiResponseData.config.style.length; i++) {\n      //   if (apiResponseData.config.style[i]._id === parseInt(styleid, 10)) {\n      //     style = apiResponseData.config.style[i];\n      //     break;\n      //   }\n      // }\n\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.hairStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported hair style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return HairStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/assets/highlighter_heartface1.png\n/* harmony default export */ const highlighter_heartface1 = (__webpack_require__.p + "assets/src/assets/highlighter_heartface1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style.js\n\n\n\nfunction highlighter_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar HighlighterStyle = /*#__PURE__*/function () {\n  function HighlighterStyle(sku, scene, width, height, materials) {\n    highlighter_style_classCallCheck(this, HighlighterStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  highlighter_style_createClass(HighlighterStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry, "foundation");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return HighlighterStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /matte_highlighter_mask.js\n\nfunction matte_highlighter_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_highlighter_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_highlighter_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_highlighter_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_highlighter_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteHighlighterMask = /*#__PURE__*/function () {\n  function MatteHighlighterMask(_pattern, _texture) {\n    matte_highlighter_mask_classCallCheck(this, MatteHighlighterMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      // envMapIntensity: 0,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n      // envMap: new THREE.TextureLoader().load(_texture, function (texture) {\n      //   texture.flipY = false;\n      // }),\n    });\n    this.MaterialArray = [material];\n  }\n  matte_highlighter_mask_createClass(MatteHighlighterMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteHighlighterMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_pattern_factory.js\nfunction highlighter_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return highlighter_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction highlighter_pattern_factory_setPrototypeOf(o, p) { highlighter_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_pattern_factory_setPrototypeOf(o, p); }\nfunction highlighter_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction highlighter_pattern_factory_possibleConstructorReturn(self, call) { if (call && (highlighter_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_pattern_factory_assertThisInitialized(self); }\nfunction highlighter_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_pattern_factory_getPrototypeOf(o) { highlighter_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_pattern_factory_getPrototypeOf(o); }\n\n\n\n\nvar HighlighterPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  highlighter_pattern_factory_inherits(HighlighterPatternFactory, _PatternFactory);\n  var _super = highlighter_pattern_factory_createSuper(HighlighterPatternFactory);\n  function HighlighterPatternFactory() {\n    var _this;\n    highlighter_pattern_factory_classCallCheck(this, HighlighterPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteHighlighterMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  highlighter_pattern_factory_createClass(HighlighterPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return HighlighterPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style_1.js\nfunction highlighter_style_1_typeof(obj) { "@babel/helpers - typeof"; return highlighter_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_style_1_typeof(obj); }\nfunction highlighter_style_1_toConsumableArray(arr) { return highlighter_style_1_arrayWithoutHoles(arr) || highlighter_style_1_iterableToArray(arr) || highlighter_style_1_unsupportedIterableToArray(arr) || highlighter_style_1_nonIterableSpread(); }\nfunction highlighter_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction highlighter_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return highlighter_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return highlighter_style_1_arrayLikeToArray(o, minLen); }\nfunction highlighter_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction highlighter_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return highlighter_style_1_arrayLikeToArray(arr); }\nfunction highlighter_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_style_1_setPrototypeOf(subClass, superClass); }\nfunction highlighter_style_1_setPrototypeOf(o, p) { highlighter_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_style_1_setPrototypeOf(o, p); }\nfunction highlighter_style_1_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_style_1_possibleConstructorReturn(this, result); }; }\nfunction highlighter_style_1_possibleConstructorReturn(self, call) { if (call && (highlighter_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_style_1_assertThisInitialized(self); }\nfunction highlighter_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_style_1_getPrototypeOf(o) { highlighter_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_style_1_getPrototypeOf(o); }\n\n\n\nvar HighlighterStyle1 = /*#__PURE__*/function (_HighlighterStyle) {\n  highlighter_style_1_inherits(HighlighterStyle1, _HighlighterStyle);\n  var _super = highlighter_style_1_createSuper(HighlighterStyle1);\n  function HighlighterStyle1(sku, scene, width, height) {\n    highlighter_style_1_classCallCheck(this, HighlighterStyle1);\n    var patternDefaultTextures = {\n      matte: highlighter_heartface1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new HighlighterPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, highlighter_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return highlighter_style_1_createClass(HighlighterStyle1);\n}(HighlighterStyle);\n;// CONCATENATED MODULE: ./src/assets/highlighter_heartface2.png\n/* harmony default export */ const highlighter_heartface2 = (__webpack_require__.p + "assets/src/assets/highlighter_heartface2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style_2.js\nfunction highlighter_style_2_typeof(obj) { "@babel/helpers - typeof"; return highlighter_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_style_2_typeof(obj); }\nfunction highlighter_style_2_toConsumableArray(arr) { return highlighter_style_2_arrayWithoutHoles(arr) || highlighter_style_2_iterableToArray(arr) || highlighter_style_2_unsupportedIterableToArray(arr) || highlighter_style_2_nonIterableSpread(); }\nfunction highlighter_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction highlighter_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return highlighter_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return highlighter_style_2_arrayLikeToArray(o, minLen); }\nfunction highlighter_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction highlighter_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return highlighter_style_2_arrayLikeToArray(arr); }\nfunction highlighter_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_style_2_setPrototypeOf(subClass, superClass); }\nfunction highlighter_style_2_setPrototypeOf(o, p) { highlighter_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_style_2_setPrototypeOf(o, p); }\nfunction highlighter_style_2_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_style_2_possibleConstructorReturn(this, result); }; }\nfunction highlighter_style_2_possibleConstructorReturn(self, call) { if (call && (highlighter_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_style_2_assertThisInitialized(self); }\nfunction highlighter_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_style_2_getPrototypeOf(o) { highlighter_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_style_2_getPrototypeOf(o); }\n\n\n\nvar HighlighterStyle2 = /*#__PURE__*/function (_HighlighterStyle) {\n  highlighter_style_2_inherits(HighlighterStyle2, _HighlighterStyle);\n  var _super = highlighter_style_2_createSuper(HighlighterStyle2);\n  function HighlighterStyle2(sku, scene, width, height) {\n    highlighter_style_2_classCallCheck(this, HighlighterStyle2);\n    var patternDefaultTextures = {\n      matte: highlighter_heartface2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new HighlighterPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, highlighter_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return highlighter_style_2_createClass(HighlighterStyle2);\n}(HighlighterStyle);\n;// CONCATENATED MODULE: ./src/assets/highlighter_invtriangle1.png\n/* harmony default export */ const highlighter_invtriangle1 = (__webpack_require__.p + "assets/src/assets/highlighter_invtriangle1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style_3.js\nfunction highlighter_style_3_typeof(obj) { "@babel/helpers - typeof"; return highlighter_style_3_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_style_3_typeof(obj); }\nfunction highlighter_style_3_toConsumableArray(arr) { return highlighter_style_3_arrayWithoutHoles(arr) || highlighter_style_3_iterableToArray(arr) || highlighter_style_3_unsupportedIterableToArray(arr) || highlighter_style_3_nonIterableSpread(); }\nfunction highlighter_style_3_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction highlighter_style_3_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return highlighter_style_3_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return highlighter_style_3_arrayLikeToArray(o, minLen); }\nfunction highlighter_style_3_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction highlighter_style_3_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return highlighter_style_3_arrayLikeToArray(arr); }\nfunction highlighter_style_3_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_style_3_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_3_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_3_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_3_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_style_3_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_3_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_style_3_setPrototypeOf(subClass, superClass); }\nfunction highlighter_style_3_setPrototypeOf(o, p) { highlighter_style_3_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_style_3_setPrototypeOf(o, p); }\nfunction highlighter_style_3_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_style_3_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_style_3_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_style_3_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_style_3_possibleConstructorReturn(this, result); }; }\nfunction highlighter_style_3_possibleConstructorReturn(self, call) { if (call && (highlighter_style_3_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_style_3_assertThisInitialized(self); }\nfunction highlighter_style_3_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_style_3_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_style_3_getPrototypeOf(o) { highlighter_style_3_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_style_3_getPrototypeOf(o); }\n\n\n\nvar HighlighterStyle3 = /*#__PURE__*/function (_HighlighterStyle) {\n  highlighter_style_3_inherits(HighlighterStyle3, _HighlighterStyle);\n  var _super = highlighter_style_3_createSuper(HighlighterStyle3);\n  function HighlighterStyle3(sku, scene, width, height) {\n    highlighter_style_3_classCallCheck(this, HighlighterStyle3);\n    var patternDefaultTextures = {\n      matte: highlighter_invtriangle1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new HighlighterPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, highlighter_style_3_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return highlighter_style_3_createClass(HighlighterStyle3);\n}(HighlighterStyle);\n;// CONCATENATED MODULE: ./src/assets/highlighter_invtriangle2.png\n/* harmony default export */ const highlighter_invtriangle2 = (__webpack_require__.p + "assets/src/assets/highlighter_invtriangle2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style_4.js\nfunction highlighter_style_4_typeof(obj) { "@babel/helpers - typeof"; return highlighter_style_4_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_style_4_typeof(obj); }\nfunction highlighter_style_4_toConsumableArray(arr) { return highlighter_style_4_arrayWithoutHoles(arr) || highlighter_style_4_iterableToArray(arr) || highlighter_style_4_unsupportedIterableToArray(arr) || highlighter_style_4_nonIterableSpread(); }\nfunction highlighter_style_4_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction highlighter_style_4_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return highlighter_style_4_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return highlighter_style_4_arrayLikeToArray(o, minLen); }\nfunction highlighter_style_4_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction highlighter_style_4_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return highlighter_style_4_arrayLikeToArray(arr); }\nfunction highlighter_style_4_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_style_4_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_4_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_4_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_4_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_style_4_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_4_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_style_4_setPrototypeOf(subClass, superClass); }\nfunction highlighter_style_4_setPrototypeOf(o, p) { highlighter_style_4_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_style_4_setPrototypeOf(o, p); }\nfunction highlighter_style_4_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_style_4_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_style_4_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_style_4_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_style_4_possibleConstructorReturn(this, result); }; }\nfunction highlighter_style_4_possibleConstructorReturn(self, call) { if (call && (highlighter_style_4_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_style_4_assertThisInitialized(self); }\nfunction highlighter_style_4_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_style_4_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_style_4_getPrototypeOf(o) { highlighter_style_4_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_style_4_getPrototypeOf(o); }\n\n\n\nvar HighlighterStyle4 = /*#__PURE__*/function (_HighlighterStyle) {\n  highlighter_style_4_inherits(HighlighterStyle4, _HighlighterStyle);\n  var _super = highlighter_style_4_createSuper(HighlighterStyle4);\n  function HighlighterStyle4(sku, scene, width, height) {\n    highlighter_style_4_classCallCheck(this, HighlighterStyle4);\n    var patternDefaultTextures = {\n      matte: highlighter_invtriangle2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new HighlighterPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, highlighter_style_4_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return highlighter_style_4_createClass(HighlighterStyle4);\n}(HighlighterStyle);\n;// CONCATENATED MODULE: ./src/assets/highlighter_oblong1.png\n/* harmony default export */ const highlighter_oblong1 = (__webpack_require__.p + "assets/src/assets/highlighter_oblong1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style_5.js\nfunction highlighter_style_5_typeof(obj) { "@babel/helpers - typeof"; return highlighter_style_5_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_style_5_typeof(obj); }\nfunction highlighter_style_5_toConsumableArray(arr) { return highlighter_style_5_arrayWithoutHoles(arr) || highlighter_style_5_iterableToArray(arr) || highlighter_style_5_unsupportedIterableToArray(arr) || highlighter_style_5_nonIterableSpread(); }\nfunction highlighter_style_5_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction highlighter_style_5_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return highlighter_style_5_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return highlighter_style_5_arrayLikeToArray(o, minLen); }\nfunction highlighter_style_5_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction highlighter_style_5_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return highlighter_style_5_arrayLikeToArray(arr); }\nfunction highlighter_style_5_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_style_5_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_5_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_5_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_5_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_style_5_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_5_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_style_5_setPrototypeOf(subClass, superClass); }\nfunction highlighter_style_5_setPrototypeOf(o, p) { highlighter_style_5_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_style_5_setPrototypeOf(o, p); }\nfunction highlighter_style_5_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_style_5_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_style_5_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_style_5_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_style_5_possibleConstructorReturn(this, result); }; }\nfunction highlighter_style_5_possibleConstructorReturn(self, call) { if (call && (highlighter_style_5_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_style_5_assertThisInitialized(self); }\nfunction highlighter_style_5_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_style_5_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_style_5_getPrototypeOf(o) { highlighter_style_5_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_style_5_getPrototypeOf(o); }\n\n\n\nvar HighlighterStyle5 = /*#__PURE__*/function (_HighlighterStyle) {\n  highlighter_style_5_inherits(HighlighterStyle5, _HighlighterStyle);\n  var _super = highlighter_style_5_createSuper(HighlighterStyle5);\n  function HighlighterStyle5(sku, scene, width, height) {\n    highlighter_style_5_classCallCheck(this, HighlighterStyle5);\n    var patternDefaultTextures = {\n      matte: highlighter_oblong1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var PatternFactory = new HighlighterPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, highlighter_style_5_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return highlighter_style_5_createClass(HighlighterStyle5);\n}(HighlighterStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/highlighter-style /highlighter_style_factory.js\nfunction highlighter_style_factory_typeof(obj) { "@babel/helpers - typeof"; return highlighter_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, highlighter_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction highlighter_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction highlighter_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction highlighter_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) highlighter_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) highlighter_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction highlighter_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) highlighter_style_factory_setPrototypeOf(subClass, superClass); }\nfunction highlighter_style_factory_setPrototypeOf(o, p) { highlighter_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return highlighter_style_factory_setPrototypeOf(o, p); }\nfunction highlighter_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = highlighter_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = highlighter_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = highlighter_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return highlighter_style_factory_possibleConstructorReturn(this, result); }; }\nfunction highlighter_style_factory_possibleConstructorReturn(self, call) { if (call && (highlighter_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return highlighter_style_factory_assertThisInitialized(self); }\nfunction highlighter_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction highlighter_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction highlighter_style_factory_getPrototypeOf(o) { highlighter_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return highlighter_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\nvar HighlighterStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  highlighter_style_factory_inherits(HighlighterStyleFactory, _StyleFactory);\n  var _super = highlighter_style_factory_createSuper(HighlighterStyleFactory);\n  function HighlighterStyleFactory() {\n    var _this;\n    highlighter_style_factory_classCallCheck(this, HighlighterStyleFactory);\n    _this = _super.call(this);\n    _this.highlighterStyles = {\n      heartface1: HighlighterStyle1,\n      heartface2: HighlighterStyle2,\n      invtriangle1: HighlighterStyle3,\n      invtriangle2: HighlighterStyle4,\n      oblong1: HighlighterStyle5\n    };\n    return _this;\n  }\n  highlighter_style_factory_createClass(HighlighterStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.highlighterStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported highlighter style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return HighlighterStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/utils/FlickerSmoother.js\n\nfunction FlickerSmoother_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction FlickerSmoother_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction FlickerSmoother_createClass(Constructor, protoProps, staticProps) { if (protoProps) FlickerSmoother_defineProperties(Constructor.prototype, protoProps); if (staticProps) FlickerSmoother_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n//import { GUI } from "dat.gui";\nvar FlickerSmoother = /*#__PURE__*/function () {\n  function FlickerSmoother() {\n    FlickerSmoother_classCallCheck(this, FlickerSmoother);\n    this.currentvector = new three_module/* Vector3 */.Pq0(0.0004, 0.0003, 0.003);\n    this.params = {\n      floatValue: 0.5 // Initial float value\n    };\n    // const gui = new GUI();\n\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", 0, 5).step(0.0001);\n    // vectorFolder2.add(this.currentvector, "y", 0, 0.01).step(0.0001);\n    // vectorFolder2.add(this.currentvector, "z", 0, 0.01).step(0.0001);\n  }\n  FlickerSmoother_createClass(FlickerSmoother, [{\n    key: "smoothAndFilterLandmarks",\n    value: function smoothAndFilterLandmarks(previousLandmarks, currentLandmarks) {\n      var smoothedPosition = new three_module/* Vector3 */.Pq0();\n      smoothedPosition.lerpVectors(previousLandmarks, currentLandmarks, this.params.floatValue);\n      var distance = currentLandmarks.distanceTo(smoothedPosition);\n      var threshold = this.currentvector.z;\n      if (distance > threshold) {\n        smoothedPosition.copy(currentLandmarks);\n      } else {}\n      return smoothedPosition;\n    }\n  }, {\n    key: "smoothAndFilterLandmarksAll",\n    value: function smoothAndFilterLandmarksAll(previousLandmarks, currentLandmarks) {\n      var smoothedLandmarks = [];\n      for (var i = 0; i < currentLandmarks.length; i++) {\n        var previousLandmark = new three_module/* Vector3 */.Pq0(previousLandmarks[i].x, previousLandmarks[i].y, previousLandmarks[i].z);\n        var currentLandmark = new three_module/* Vector3 */.Pq0(currentLandmarks[i].x, currentLandmarks[i].y, currentLandmarks[i].z);\n        var smoothedPosition = new three_module/* Vector3 */.Pq0();\n        smoothedPosition.lerpVectors(previousLandmark, currentLandmark, this.params.floatValue);\n        var distance = currentLandmark.distanceTo(smoothedPosition);\n        var threshold = this.currentvector.z;\n        if (distance > threshold) {\n          smoothedLandmarks.push({\n            x: currentLandmark.x,\n            y: currentLandmark.y,\n            z: currentLandmark.z\n          });\n        } else {\n          // smoothedLandmarks.push({\n          //   x: smoothedPosition.x,\n          //   y: smoothedPosition.y,\n          //   z: smoothedPosition.z,\n          // });\n\n          var previousLandmark1 = new three_module/* Vector3 */.Pq0(currentLandmarks[i].x, currentLandmarks[i].y, currentLandmarks[i].z);\n          var currentLandmark1 = new three_module/* Vector3 */.Pq0(smoothedPosition.x, smoothedPosition.y, smoothedPosition.z);\n          var smoothedPosition1 = new three_module/* Vector3 */.Pq0();\n          smoothedPosition1.lerpVectors(previousLandmark1, currentLandmark1, this.params.floatValue);\n          var distance1 = currentLandmark1.distanceTo(smoothedPosition1);\n          var threshold1 = this.currentvector.y;\n          // console.log(distance1, threshold1);\n          if (distance1 > threshold1) {\n            smoothedLandmarks.push({\n              x: smoothedPosition.x,\n              y: smoothedPosition.y,\n              z: smoothedPosition.z\n            });\n          } else {\n            smoothedLandmarks.push({\n              x: smoothedPosition1.x,\n              y: smoothedPosition1.y,\n              z: smoothedPosition1.z\n            });\n          }\n        }\n      }\n      // }\n\n      return smoothedLandmarks;\n    }\n  }]);\n  return FlickerSmoother;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/lipliner-style/lipliner_style.js\n\n\n\nfunction lipliner_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lipliner_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lipliner_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) lipliner_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) lipliner_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n\nvar LiplinerStyle = /*#__PURE__*/function () {\n  function LiplinerStyle(sku, scene, width, height, materials) {\n    lipliner_style_classCallCheck(this, LiplinerStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.flickerSmoother = new FlickerSmoother();\n    this.Prevlandmark;\n    this.PrevlandmarkBase;\n    this.colorIntensity = 1;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.liplinerPattern = sku.styleVariant.toLowerCase();\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  lipliner_style_createClass(LiplinerStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        var landmarks = void 0;\n        landmarks = this.landmarks;\n        this.Prevlandmark = this.landmarks;\n        makeGeometry(landmarks, this.geometry, "lipliner", this.liplinerPattern);\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width);\n      }\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.uniforms._Opacity.value = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.uniforms._Opacity.value = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return LiplinerStyle;\n}();\n;// CONCATENATED MODULE: ./src/assets/lipliner.png\n/* harmony default export */ const lipliner = (__webpack_require__.p + "assets/src/assets/lipliner.png");\n;// CONCATENATED MODULE: ./src/assets/lipliner_mask.png\n/* harmony default export */ const lipliner_mask = (__webpack_require__.p + "assets/src/assets/lipliner_mask.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/lipliner-style/matte_lipliner_mask.js\n\nfunction matte_lipliner_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_lipliner_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_lipliner_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_lipliner_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_lipliner_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\nvar MatteLiplinerMask = /*#__PURE__*/function () {\n  function MatteLiplinerMask(_pattern, _texture) {\n    matte_lipliner_mask_classCallCheck(this, MatteLiplinerMask);\n    var color = _pattern.colors[0];\n    var maskColor = ColorUtils.hexToVector4(color);\n    // let threeColor = new THREE.Color(newColor);\n    // let maskColor = new THREE.Vector4(\n    //   threeColor.r,\n    //   threeColor.g,\n    //   threeColor.b,\n    //   1.0\n    // );\n\n    //let maskColor = new THREE.Vector4(0.4667, 0.0941, 0.2157, 1.0);\n\n    var vertexShader = "\\nvarying vec2 vUv;\\nvoid main() {\\n    vUv = uv;\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n";\n    var fragmentShader = "\\n        uniform sampler2D map;\\n    uniform sampler2D alphaMap;\\n    uniform vec4 _MainColor;\\n    uniform float _Threshold;\\n    uniform float _Smoothness; // Controls the intensity of the smooth blending\\n    uniform float _Opacity; // Controls the intensity of the smooth blending\\n    varying vec2 vUv;\\n\\n    void main() {\\n        vec4 mainCol = texture2D(map, vUv);\\n        vec4 maskCol = texture2D(alphaMap, vUv);\\n        float mask = maskCol.a;\\n\\n       // vec4 maincolalpha = vec4(mainCol.r,mainCol.g,mainCol.b,0.5);\\n\\n        // Apply a simple blur to the mask\\n        // float blurRadius = 0.0;\\n        float sum = 0.0;\\n        for (int x = -2; x <= 2; x++) {\\n            for (int y = -2; y <= 2; y++) {\\n                //vec2 offset = vec2(x, y) * blurRadius;\\n                sum += texture2D(alphaMap, vUv).a;\\n            }\\n        }\\n        float blurredMask = sum/3.0;\\n\\n        vec4 mainColor = _MainColor * mainCol;\\n        vec4 col = mix(mainCol, mix(mainCol, maskCol, blurredMask), smoothstep(_Threshold - _Smoothness, _Threshold + _Smoothness,mask));\\n\\n          // if (mask < _Threshold) {\\n          //     col = _MainColor;\\n          //   }\\n\\n          float cola = col.a *_Opacity;\\n        gl_FragColor = vec4(_MainColor.r,_MainColor.g,_MainColor.b,cola);\\n    }\\n     ";\n\n    // Load the textures\n    var texture = new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    var alphaMap = new three_module/* TextureLoader */.Tap().load(lipliner_mask, function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    var material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        map: {\n          value: texture\n        },\n        alphaMap: {\n          value: alphaMap\n        },\n        _Threshold: {\n          value: 0.2\n        },\n        _Smoothness: {\n          value: 0.2\n        },\n        _Opacity: {\n          value: 0.8\n        },\n        _MainColor: {\n          value: maskColor\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5\n    });\n    this.MaterialArray = [material];\n  }\n  matte_lipliner_mask_createClass(MatteLiplinerMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteLiplinerMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/lipliner-style/lipliner_pattern_factory.js\nfunction lipliner_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return lipliner_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lipliner_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction lipliner_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lipliner_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lipliner_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) lipliner_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) lipliner_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lipliner_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lipliner_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction lipliner_pattern_factory_setPrototypeOf(o, p) { lipliner_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lipliner_pattern_factory_setPrototypeOf(o, p); }\nfunction lipliner_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = lipliner_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lipliner_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lipliner_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lipliner_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction lipliner_pattern_factory_possibleConstructorReturn(self, call) { if (call && (lipliner_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lipliner_pattern_factory_assertThisInitialized(self); }\nfunction lipliner_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lipliner_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lipliner_pattern_factory_getPrototypeOf(o) { lipliner_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lipliner_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar LiplinerPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  lipliner_pattern_factory_inherits(LiplinerPatternFactory, _PatternFactory);\n  var _super = lipliner_pattern_factory_createSuper(LiplinerPatternFactory);\n  function LiplinerPatternFactory() {\n    var _this;\n    lipliner_pattern_factory_classCallCheck(this, LiplinerPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteLiplinerMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  lipliner_pattern_factory_createClass(LiplinerPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      //console.log(this.patternClass.MaterialArray);\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return LiplinerPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/lipliner-style/lipliner_style_1.js\nfunction lipliner_style_1_typeof(obj) { "@babel/helpers - typeof"; return lipliner_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lipliner_style_1_typeof(obj); }\nfunction lipliner_style_1_toConsumableArray(arr) { return lipliner_style_1_arrayWithoutHoles(arr) || lipliner_style_1_iterableToArray(arr) || lipliner_style_1_unsupportedIterableToArray(arr) || lipliner_style_1_nonIterableSpread(); }\nfunction lipliner_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction lipliner_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return lipliner_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lipliner_style_1_arrayLikeToArray(o, minLen); }\nfunction lipliner_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction lipliner_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return lipliner_style_1_arrayLikeToArray(arr); }\nfunction lipliner_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction lipliner_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lipliner_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) lipliner_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) lipliner_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lipliner_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lipliner_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lipliner_style_1_setPrototypeOf(subClass, superClass); }\nfunction lipliner_style_1_setPrototypeOf(o, p) { lipliner_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lipliner_style_1_setPrototypeOf(o, p); }\nfunction lipliner_style_1_createSuper(Derived) { var hasNativeReflectConstruct = lipliner_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lipliner_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lipliner_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lipliner_style_1_possibleConstructorReturn(this, result); }; }\nfunction lipliner_style_1_possibleConstructorReturn(self, call) { if (call && (lipliner_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lipliner_style_1_assertThisInitialized(self); }\nfunction lipliner_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lipliner_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lipliner_style_1_getPrototypeOf(o) { lipliner_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lipliner_style_1_getPrototypeOf(o); }\n\n\n\n\nvar LiplinerStyle1 = /*#__PURE__*/function (_LiplinerStyle) {\n  lipliner_style_1_inherits(LiplinerStyle1, _LiplinerStyle);\n  var _super = lipliner_style_1_createSuper(LiplinerStyle1);\n  function LiplinerStyle1(sku, scene, width, height) {\n    lipliner_style_1_classCallCheck(this, LiplinerStyle1);\n    var patternDefaultTextures = {\n      matte: lipliner\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var lipsPatternFactory = new LiplinerPatternFactory();\n      var pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, lipliner_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return lipliner_style_1_createClass(LiplinerStyle1);\n}(LiplinerStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/lipliner-style/lipliner_style_factory.js\nfunction lipliner_style_factory_typeof(obj) { "@babel/helpers - typeof"; return lipliner_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lipliner_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction lipliner_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lipliner_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lipliner_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) lipliner_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) lipliner_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lipliner_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lipliner_style_factory_setPrototypeOf(subClass, superClass); }\nfunction lipliner_style_factory_setPrototypeOf(o, p) { lipliner_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lipliner_style_factory_setPrototypeOf(o, p); }\nfunction lipliner_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = lipliner_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lipliner_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lipliner_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lipliner_style_factory_possibleConstructorReturn(this, result); }; }\nfunction lipliner_style_factory_possibleConstructorReturn(self, call) { if (call && (lipliner_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lipliner_style_factory_assertThisInitialized(self); }\nfunction lipliner_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lipliner_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lipliner_style_factory_getPrototypeOf(o) { lipliner_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lipliner_style_factory_getPrototypeOf(o); }\n\n// import { MatteFaceMask } from "./matte_lipliner_mask";\n\n\n\n\nvar LiplinerStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  lipliner_style_factory_inherits(LiplinerStyleFactory, _StyleFactory);\n  var _super = lipliner_style_factory_createSuper(LiplinerStyleFactory);\n  function LiplinerStyleFactory() {\n    var _this;\n    lipliner_style_factory_classCallCheck(this, LiplinerStyleFactory);\n    _this = _super.call(this);\n    _this.lipStyles = {\n      natural: LiplinerStyle1,\n      small: LiplinerStyle1,\n      wide: LiplinerStyle1,\n      rosebud: LiplinerStyle1,\n      largeandfull: LiplinerStyle1,\n      largeupper: LiplinerStyle1,\n      largelower: LiplinerStyle1\n    };\n    return _this;\n  }\n  lipliner_style_factory_createClass(LiplinerStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var LipStyleClass = this.lipStyles[styleType.toLowerCase()];\n      if (!LipStyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported lipliner style");\n      }\n      return new LipStyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return LiplinerStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/glossy_face_mask.js\n\nfunction glossy_face_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glossy_face_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glossy_face_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glossy_face_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glossy_face_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar GlossyFaceMask = /*#__PURE__*/function () {\n  function GlossyFaceMask(_pattern, _texture) {\n    glossy_face_mask_classCallCheck(this, GlossyFaceMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 1,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      clearcoat: 0.8,\n      clearcoatRoughness: 0.2,\n      // envMap: new THREE.TextureLoader().load(_texture, function (texture) {\n      //   // texture.premultiplyAlpha = true;\n      //   texture.flipY = false;\n      // }),\n      color: threeColor\n    });\n    this.MaterialArray = [material];\n  }\n  glossy_face_mask_createClass(GlossyFaceMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return GlossyFaceMask;\n}();\n;// CONCATENATED MODULE: ./src/assets/Lips_Shimmer_2.png\n/* harmony default export */ const Lips_Shimmer_2 = (__webpack_require__.p + "assets/src/assets/Lips_Shimmer_2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/shimmer_face_mask.js\n\nfunction shimmer_face_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shimmer_face_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction shimmer_face_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) shimmer_face_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) shimmer_face_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\nvar ShimmerFaceMask = /*#__PURE__*/function () {\n  function ShimmerFaceMask(_pattern, _texture) {\n    shimmer_face_mask_classCallCheck(this, ShimmerFaceMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor1 = null;\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    if (_pattern.colors.length > 1) {\n      var color1 = _pattern.colors[1];\n      var newColor1 = ColorUtils.getColorWithIntensity(color1, 100);\n      threeColor1 = new three_module/* Color */.Q1f(newColor1);\n    } else {\n      threeColor1 = new three_module/* Color */.Q1f("0xffffff");\n    }\n    var material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[0], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 0.3,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      clearcoat: 1,\n      clearcoatRoughness: 0.2,\n      specularIntensity: 1,\n      specularColor: threeColor,\n      color: threeColor\n    });\n    var material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 0.24,\n      metalness: 0,\n      envMapIntensity: 0,\n      specularIntensity: 0.6,\n      specularColor: threeColor,\n      color: threeColor1\n    });\n    this.MaterialArray = [material, material1];\n  }\n  shimmer_face_mask_createClass(ShimmerFaceMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return ShimmerFaceMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/matte_face_mask.js\n\nfunction matte_face_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_face_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_face_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_face_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_face_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteFaceMask = /*#__PURE__*/function () {\n  function MatteFaceMask(_pattern, _texture) {\n    matte_face_mask_classCallCheck(this, MatteFaceMask);\n    // console.log(_pattern);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  matte_face_mask_createClass(MatteFaceMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteFaceMask;\n}();\n\n// export function getMatteFaceMask(_texture, _color) {\n//   const material = new THREE.MeshBasicMaterial({\n//     map: new THREE.TextureLoader().load(_texture, function (texture) {\n//       // texture.premultiplyAlpha = true;\n//       texture.flipY = false;\n//     }),\n//     transparent: true,\n//     side: THREE.DoubleSide,\n//     roughness: 1,\n//     metalness: 0,\n//     envMapIntensity: 0,\n//     toneMapped: false,\n//     color: _color,\n//   });\n\n//   return material;\n// }\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/lips_style.js\n\n\n\nfunction lips_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lips_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lips_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) lips_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) lips_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\nvar lips_style_LipsStyle = /*#__PURE__*/function () {\n  function LipsStyle(sku, scene, width, height, materials) {\n    lips_style_classCallCheck(this, LipsStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.flickerSmoother = new FlickerSmoother();\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.Prevlandmark;\n    this.PrevlandmarkBase;\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  lips_style_createClass(LipsStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        var landmarks = void 0;\n        landmarks = this.landmarks;\n        this.Prevlandmark = this.landmarks;\n        makeGeometry(landmarks, this.geometry, "lipstick");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width / 2);\n      }\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          // this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        //material.uniforms.opacityValue.value = getOpacitySliderValue();\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return LipsStyle;\n}();\n;// CONCATENATED MODULE: ./src/assets/Lips_4.png\n/* harmony default export */ const Lips_4 = (__webpack_require__.p + "assets/src/assets/Lips_4.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/glitter_face_mask.js\nfunction glitter_face_mask_typeof(obj) { "@babel/helpers - typeof"; return glitter_face_mask_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, glitter_face_mask_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction glitter_face_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glitter_face_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glitter_face_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glitter_face_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction glitter_face_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glitter_face_mask_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) glitter_face_mask_setPrototypeOf(subClass, superClass); }\nfunction glitter_face_mask_setPrototypeOf(o, p) { glitter_face_mask_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return glitter_face_mask_setPrototypeOf(o, p); }\nfunction glitter_face_mask_createSuper(Derived) { var hasNativeReflectConstruct = glitter_face_mask_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = glitter_face_mask_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = glitter_face_mask_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return glitter_face_mask_possibleConstructorReturn(this, result); }; }\nfunction glitter_face_mask_possibleConstructorReturn(self, call) { if (call && (glitter_face_mask_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return glitter_face_mask_assertThisInitialized(self); }\nfunction glitter_face_mask_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction glitter_face_mask_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction glitter_face_mask_getPrototypeOf(o) { glitter_face_mask_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return glitter_face_mask_getPrototypeOf(o); }\n\n // Import LipsStyle class\n\n\n\nvar glitter_face_mask_vertexShader = ["varying vec2 vUv;", "void main() {", "  vUv = uv;", "  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\nvar glitter_face_mask_fragmentShader = ["uniform sampler2D makeupTexture;",\n// The texture you want to render\n"uniform vec3 colorValue;",\n// Uniform for controlling color\n"uniform float opacityValue;",\n// Uniform for controlling opacity\n"varying vec2 vUv;", "void main() {", "  vec4 textureColor = texture2D(makeupTexture, vUv);", "  if (textureColor.a < 0.01) {", "    discard;", "  }", "  gl_FragColor = vec4(textureColor.rgb * colorValue, textureColor.a * opacityValue);",\n// Multiply texture color with the specified color and opacity\n"}"].join("\\n");\nvar GlitterFaceMask = /*#__PURE__*/(/* unused pure expression or super */ null && (function (_LipsStyle) {\n  glitter_face_mask_inherits(GlitterFaceMask, _LipsStyle);\n  var _super = glitter_face_mask_createSuper(GlitterFaceMask);\n  function GlitterFaceMask(apiResponseData, scene, width, height) {\n    glitter_face_mask_classCallCheck(this, GlitterFaceMask);\n    /*\n    const material = new THREE.ShaderMaterial({\n      vertexShader: vertexShader, // Your vertex shader code\n      fragmentShader: fragmentShader, // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new THREE.TextureLoader().load(\n            GlitterAOTexture,\n            function (texture) {\n              // texture.premultiplyAlpha = true;\n              texture.flipY = false;\n            }\n          ),\n        },\n        opacityValue: { value: 1 },\n        colorValue: { value: new THREE.Vector3(1, 1, 1) },\n      },\n       transparent: true,\n      color: 0xff0000,\n    });\n    material.uniforms.colorValue.value.set(1, 0, 0); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material.uniforms.opacityValue.value = 0.6;\n     const material1 = new THREE.ShaderMaterial({\n      vertexShader: vertexShader, // Your vertex shader code\n      fragmentShader: fragmentShader, // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new THREE.TextureLoader().load(\n            GlitterColorMaskTexture,\n            function (texture) {\n              texture.flipY = false;\n            }\n          ),\n        },\n        opacityValue: { value: 1 },\n        colorValue: { value: new THREE.Vector3(1, 1, 1) },\n      },\n       transparent: true,\n      color: 0xff0000,\n    });\n    material1.uniforms.colorValue.value.set(1, 1, 1); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material1.uniforms.opacityValue.value = 0.6;\n    material1.needsUpdate = true;\n    */\n\n    var material = new THREE.MeshPhysicalMaterial({\n      map: new THREE.TextureLoader().load(GlitterAOTexture, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n      }),\n      transparent: true,\n      side: THREE.DoubleSide,\n      roughness: 0.25,\n      metalness: 0,\n      specularIntensity: 1,\n      envMapIntensity: 0,\n      toneMapped: false\n      //shadowSide: THREE.BackSide,\n    });\n    var material1 = new THREE.MeshPhysicalMaterial({\n      map: new THREE.TextureLoader().load(GlitterColorMaskTexture, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n      }),\n      transparent: true,\n      side: THREE.DoubleSide,\n      roughness: 0.5,\n      metalness: 1,\n      envMapIntensity: 1,\n      toneMapped: false,\n      specularIntensity: 1,\n      emissiveIntensity: 1,\n      emissive: 0x00ff00\n      // envMapIntensity: 1,\n      // emissiveMap: new THREE.TextureLoader().load(\n      //   GlitterColorMaskTexture,\n      //   function (texture) {\n      //     // texture.premultiplyAlpha = true;\n      //     texture.flipY = false;\n      //   }\n      // ),\n\n      //shadowSide: THREE.BackSide,\n    });\n    var materialsArray = [material, material1];\n    return _super.call(this, apiResponseData, scene, width, height, materialsArray);\n  }\n  return glitter_face_mask_createClass(GlitterFaceMask);\n}(LipsStyle)));\n;// CONCATENATED MODULE: ./src/assets/lips_full.png\n/* harmony default export */ const lips_full = (__webpack_require__.p + "assets/src/assets/lips_full.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/lips_pattern_factory.js\nfunction lips_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return lips_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lips_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction lips_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lips_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lips_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) lips_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) lips_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lips_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lips_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction lips_pattern_factory_setPrototypeOf(o, p) { lips_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lips_pattern_factory_setPrototypeOf(o, p); }\nfunction lips_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = lips_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lips_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lips_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lips_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction lips_pattern_factory_possibleConstructorReturn(self, call) { if (call && (lips_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lips_pattern_factory_assertThisInitialized(self); }\nfunction lips_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lips_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lips_pattern_factory_getPrototypeOf(o) { lips_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lips_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\nvar LipsPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  lips_pattern_factory_inherits(LipsPatternFactory, _PatternFactory);\n  var _super = lips_pattern_factory_createSuper(LipsPatternFactory);\n  function LipsPatternFactory() {\n    var _this;\n    lips_pattern_factory_classCallCheck(this, LipsPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteFaceMask,\n      glossy: GlossyFaceMask,\n      shimmer: ShimmerFaceMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  lips_pattern_factory_createClass(LipsPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      //console.log(this.patternClass.MaterialArray);\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return LipsPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/lips_single_tone.js\nfunction lips_single_tone_typeof(obj) { "@babel/helpers - typeof"; return lips_single_tone_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lips_single_tone_typeof(obj); }\nfunction lips_single_tone_toConsumableArray(arr) { return lips_single_tone_arrayWithoutHoles(arr) || lips_single_tone_iterableToArray(arr) || lips_single_tone_unsupportedIterableToArray(arr) || lips_single_tone_nonIterableSpread(); }\nfunction lips_single_tone_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction lips_single_tone_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return lips_single_tone_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lips_single_tone_arrayLikeToArray(o, minLen); }\nfunction lips_single_tone_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction lips_single_tone_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return lips_single_tone_arrayLikeToArray(arr); }\nfunction lips_single_tone_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction lips_single_tone_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lips_single_tone_createClass(Constructor, protoProps, staticProps) { if (protoProps) lips_single_tone_defineProperties(Constructor.prototype, protoProps); if (staticProps) lips_single_tone_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lips_single_tone_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lips_single_tone_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lips_single_tone_setPrototypeOf(subClass, superClass); }\nfunction lips_single_tone_setPrototypeOf(o, p) { lips_single_tone_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lips_single_tone_setPrototypeOf(o, p); }\nfunction lips_single_tone_createSuper(Derived) { var hasNativeReflectConstruct = lips_single_tone_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lips_single_tone_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lips_single_tone_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lips_single_tone_possibleConstructorReturn(this, result); }; }\nfunction lips_single_tone_possibleConstructorReturn(self, call) { if (call && (lips_single_tone_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lips_single_tone_assertThisInitialized(self); }\nfunction lips_single_tone_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lips_single_tone_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lips_single_tone_getPrototypeOf(o) { lips_single_tone_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lips_single_tone_getPrototypeOf(o); }\n\n // Import LipsStyle class\n\n//import MatteAOTexture from "../../assets/lips_6.png";\n\n\n\n\nvar LipsSingleTone = /*#__PURE__*/function (_LipsStyle) {\n  lips_single_tone_inherits(LipsSingleTone, _LipsStyle);\n  var _super = lips_single_tone_createSuper(LipsSingleTone);\n  function LipsSingleTone(sku, scene, width, height) {\n    lips_single_tone_classCallCheck(this, LipsSingleTone);\n    var patternDefaultTextures = {\n      matte: lips_full,\n      glossy: lips_full,\n      shimmer: [lips_full, Lips_Shimmer_2]\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var lipsPatternFactory = new LipsPatternFactory();\n      var pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, lips_single_tone_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return lips_single_tone_createClass(LipsSingleTone);\n}(lips_style_LipsStyle);\n;// CONCATENATED MODULE: ./src/assets/Lips_Matte_Top.png\n/* harmony default export */ const Lips_Matte_Top = (__webpack_require__.p + "assets/src/assets/Lips_Matte_Top.png");\n;// CONCATENATED MODULE: ./src/assets/Lips_Matte_Lower.png\n/* harmony default export */ const Lips_Matte_Lower = (__webpack_require__.p + "assets/src/assets/Lips_Matte_Lower.png");\n;// CONCATENATED MODULE: ./src/assets/lips_bottom_shimmer.png\n/* harmony default export */ const lips_bottom_shimmer = (__webpack_require__.p + "assets/src/assets/lips_bottom_shimmer.png");\n;// CONCATENATED MODULE: ./src/assets/lips_top_shimmer.png\n/* harmony default export */ const lips_top_shimmer = (__webpack_require__.p + "assets/src/assets/lips_top_shimmer.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/lips_two_tone.js\nfunction lips_two_tone_typeof(obj) { "@babel/helpers - typeof"; return lips_two_tone_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lips_two_tone_typeof(obj); }\nfunction lips_two_tone_toConsumableArray(arr) { return lips_two_tone_arrayWithoutHoles(arr) || lips_two_tone_iterableToArray(arr) || lips_two_tone_unsupportedIterableToArray(arr) || lips_two_tone_nonIterableSpread(); }\nfunction lips_two_tone_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction lips_two_tone_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return lips_two_tone_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return lips_two_tone_arrayLikeToArray(o, minLen); }\nfunction lips_two_tone_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction lips_two_tone_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return lips_two_tone_arrayLikeToArray(arr); }\nfunction lips_two_tone_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction lips_two_tone_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lips_two_tone_createClass(Constructor, protoProps, staticProps) { if (protoProps) lips_two_tone_defineProperties(Constructor.prototype, protoProps); if (staticProps) lips_two_tone_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lips_two_tone_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lips_two_tone_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lips_two_tone_setPrototypeOf(subClass, superClass); }\nfunction lips_two_tone_setPrototypeOf(o, p) { lips_two_tone_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lips_two_tone_setPrototypeOf(o, p); }\nfunction lips_two_tone_createSuper(Derived) { var hasNativeReflectConstruct = lips_two_tone_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lips_two_tone_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lips_two_tone_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lips_two_tone_possibleConstructorReturn(this, result); }; }\nfunction lips_two_tone_possibleConstructorReturn(self, call) { if (call && (lips_two_tone_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lips_two_tone_assertThisInitialized(self); }\nfunction lips_two_tone_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lips_two_tone_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lips_two_tone_getPrototypeOf(o) { lips_two_tone_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lips_two_tone_getPrototypeOf(o); }\n\n // Import LipsStyle class\n\n\n\n\n\n\n\nvar LipsTwoTone = /*#__PURE__*/function (_LipsStyle) {\n  lips_two_tone_inherits(LipsTwoTone, _LipsStyle);\n  var _super = lips_two_tone_createSuper(LipsTwoTone);\n  function LipsTwoTone(sku, scene, width, height) {\n    lips_two_tone_classCallCheck(this, LipsTwoTone);\n    var patternDefaultTexturesU = {\n      matte: Lips_Matte_Top,\n      glossy: Lips_Matte_Top,\n      shimmer: [Lips_Matte_Top, lips_top_shimmer]\n    };\n    var patternDefaultTexturesL = {\n      matte: Lips_Matte_Lower,\n      glossy: Lips_Matte_Lower,\n      shimmer: [Lips_Matte_Lower, lips_bottom_shimmer]\n    };\n    var materialsArray = [];\n    // console.log(sku.attributes.patterns);\n    for (var i = 0; i < sku.attributes.length; i++) {\n      var lipsPatternFactory = new LipsPatternFactory();\n      if (i === 0) {\n        var pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTexturesU[sku.attributes[i].name.toLowerCase()] //need to change with link data\n        );\n        materialsArray.push.apply(materialsArray, lips_two_tone_toConsumableArray(pattern.getMaterials()));\n      } else if (i === 1) {\n        var _pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTexturesL[sku.attributes[i].name.toLowerCase()] //need to change with link data\n        );\n        materialsArray.push.apply(materialsArray, lips_two_tone_toConsumableArray(_pattern.getMaterials()));\n      }\n      //materialsArray.push(...pattern.getMaterials());\n    }\n    //console.log("asfasf" + materialsArray.length);\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n  return lips_two_tone_createClass(LipsTwoTone);\n}(lips_style_LipsStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/lips-style/lips_style_factory.js\nfunction lips_style_factory_typeof(obj) { "@babel/helpers - typeof"; return lips_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, lips_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction lips_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction lips_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction lips_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) lips_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) lips_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction lips_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) lips_style_factory_setPrototypeOf(subClass, superClass); }\nfunction lips_style_factory_setPrototypeOf(o, p) { lips_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return lips_style_factory_setPrototypeOf(o, p); }\nfunction lips_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = lips_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = lips_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = lips_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return lips_style_factory_possibleConstructorReturn(this, result); }; }\nfunction lips_style_factory_possibleConstructorReturn(self, call) { if (call && (lips_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return lips_style_factory_assertThisInitialized(self); }\nfunction lips_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction lips_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction lips_style_factory_getPrototypeOf(o) { lips_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return lips_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\nvar LipsStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  lips_style_factory_inherits(LipsStyleFactory, _StyleFactory);\n  var _super = lips_style_factory_createSuper(LipsStyleFactory);\n  function LipsStyleFactory() {\n    var _this;\n    lips_style_factory_classCallCheck(this, LipsStyleFactory);\n    _this = _super.call(this);\n    _this.lipStyles = {\n      single: LipsSingleTone,\n      dual: LipsTwoTone\n    };\n    return _this;\n  }\n  lips_style_factory_createClass(LipsStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var LipStyleClass = this.lipStyles[styleType.toLowerCase()];\n      if (!LipStyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported lips style");\n      }\n      return new LipStyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return LipsStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/matte_masacara_mask.js\n\nfunction matte_masacara_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_masacara_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_masacara_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_masacara_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_masacara_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteMasacaraMask = /*#__PURE__*/function () {\n  function MatteMasacaraMask(_pattern, _texture) {\n    matte_masacara_mask_classCallCheck(this, MatteMasacaraMask);\n    var color = _pattern.colors[0];\n    var newColor = ColorUtils.getColorWithIntensity(color, 100);\n    var threeColor = new three_module/* Color */.Q1f(newColor);\n    var material = new three_module/* MeshStandardMaterial */._4j({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      envMapIntensity: 1,\n      toneMapped: false,\n      color: threeColor,\n      fog: false,\n      envMap: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n      })\n    });\n    this.MaterialArray = [material];\n  }\n  matte_masacara_mask_createClass(MatteMasacaraMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteMasacaraMask;\n}();\n;// CONCATENATED MODULE: ./src/assets/mascara_natural1.png\n/* harmony default export */ const mascara_natural1 = (__webpack_require__.p + "assets/src/assets/mascara_natural1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style.js\n\n\n\nfunction masacara_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\nvar MasacaraStyle = /*#__PURE__*/function () {\n  function MasacaraStyle(sku, scene, width, height, materials) {\n    masacara_style_classCallCheck(this, MasacaraStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  masacara_style_createClass(MasacaraStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "addFaces",\n    value: function addFaces() {\n      for (var i = 0; i < this.materialArray.length; i++) {\n        makeGeometry(this.landmarks, this.geometry, "eyelash");\n        if (!this.faces || this.faces.length <= i) {\n          var tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n          this.faces.push(tempface);\n          this.scene.add(tempface);\n          this.faces[i].receiveShadow = false; // Disable receiving shadows\n          this.faces[i].castShadow = false; // Disable casting shadows\n          this.faces[i].position.set(0, 0, 0);\n          this.faces[i].name = "makeup";\n        } else {\n          this.faces[i].geometry = this.geometry;\n          this.faces[i].material = this.materialArray[i];\n        }\n        this.faces[i].scale.set(this.width, this.height, this.width);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.scene.remove(this.faces);\n      while (!!this.scene.getObjectByName("makeup")) {\n        this.scene.remove(this.scene.getObjectByName("makeup"));\n      }\n      this.faces = [];\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      this.materialArray.forEach(function (material) {\n        if (material.visible !== state) {\n          material.visible = state;\n        }\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        if (this.faces != null) {\n          //this.removeFaces();\n        }\n        if (this.landmarks != null) {\n          this.addFaces();\n        }\n        this.needsUpdate = false;\n      }\n      if (this.faces != null && this.landmarks != null) {\n        this.updateOpacity();\n      }\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.opacity = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.opacity = intensity;\n        material.needsUpdate = true;\n        //if (material.emissive) material.emissive.setHex(newColorValue);\n      });\n    }\n  }]);\n  return MasacaraStyle;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_pattern_factory.js\nfunction masacara_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return masacara_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction masacara_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction masacara_pattern_factory_setPrototypeOf(o, p) { masacara_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_pattern_factory_setPrototypeOf(o, p); }\nfunction masacara_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = masacara_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction masacara_pattern_factory_possibleConstructorReturn(self, call) { if (call && (masacara_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_pattern_factory_assertThisInitialized(self); }\nfunction masacara_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_pattern_factory_getPrototypeOf(o) { masacara_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar MasacaraPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  masacara_pattern_factory_inherits(MasacaraPatternFactory, _PatternFactory);\n  var _super = masacara_pattern_factory_createSuper(MasacaraPatternFactory);\n  function MasacaraPatternFactory() {\n    var _this;\n    masacara_pattern_factory_classCallCheck(this, MasacaraPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteMasacaraMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  masacara_pattern_factory_createClass(MasacaraPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return MasacaraPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style_1.js\nfunction masacara_style_1_typeof(obj) { "@babel/helpers - typeof"; return masacara_style_1_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_style_1_typeof(obj); }\nfunction masacara_style_1_toConsumableArray(arr) { return masacara_style_1_arrayWithoutHoles(arr) || masacara_style_1_iterableToArray(arr) || masacara_style_1_unsupportedIterableToArray(arr) || masacara_style_1_nonIterableSpread(); }\nfunction masacara_style_1_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction masacara_style_1_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return masacara_style_1_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return masacara_style_1_arrayLikeToArray(o, minLen); }\nfunction masacara_style_1_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction masacara_style_1_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return masacara_style_1_arrayLikeToArray(arr); }\nfunction masacara_style_1_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction masacara_style_1_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_1_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_1_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_1_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_style_1_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_1_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_style_1_setPrototypeOf(subClass, superClass); }\nfunction masacara_style_1_setPrototypeOf(o, p) { masacara_style_1_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_style_1_setPrototypeOf(o, p); }\nfunction masacara_style_1_createSuper(Derived) { var hasNativeReflectConstruct = masacara_style_1_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_style_1_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_style_1_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_style_1_possibleConstructorReturn(this, result); }; }\nfunction masacara_style_1_possibleConstructorReturn(self, call) { if (call && (masacara_style_1_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_style_1_assertThisInitialized(self); }\nfunction masacara_style_1_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_style_1_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_style_1_getPrototypeOf(o) { masacara_style_1_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_style_1_getPrototypeOf(o); }\n\n\n\n\nvar MasacaraStyle1 = /*#__PURE__*/function (_MasacaraStyle) {\n  masacara_style_1_inherits(MasacaraStyle1, _MasacaraStyle);\n  var _super = masacara_style_1_createSuper(MasacaraStyle1);\n  function MasacaraStyle1(sku, scene, width, height) {\n    masacara_style_1_classCallCheck(this, MasacaraStyle1);\n    var patternDefaultTextures = {\n      matte: mascara_natural1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      var PatternFactory = new MasacaraPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, masacara_style_1_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return masacara_style_1_createClass(MasacaraStyle1);\n}(MasacaraStyle);\n;// CONCATENATED MODULE: ./src/assets/mascara_natural2.png\n/* harmony default export */ const mascara_natural2 = (__webpack_require__.p + "assets/src/assets/mascara_natural2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style_2.js\nfunction masacara_style_2_typeof(obj) { "@babel/helpers - typeof"; return masacara_style_2_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_style_2_typeof(obj); }\nfunction masacara_style_2_toConsumableArray(arr) { return masacara_style_2_arrayWithoutHoles(arr) || masacara_style_2_iterableToArray(arr) || masacara_style_2_unsupportedIterableToArray(arr) || masacara_style_2_nonIterableSpread(); }\nfunction masacara_style_2_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction masacara_style_2_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return masacara_style_2_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return masacara_style_2_arrayLikeToArray(o, minLen); }\nfunction masacara_style_2_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction masacara_style_2_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return masacara_style_2_arrayLikeToArray(arr); }\nfunction masacara_style_2_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction masacara_style_2_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_2_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_2_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_2_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_style_2_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_2_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_style_2_setPrototypeOf(subClass, superClass); }\nfunction masacara_style_2_setPrototypeOf(o, p) { masacara_style_2_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_style_2_setPrototypeOf(o, p); }\nfunction masacara_style_2_createSuper(Derived) { var hasNativeReflectConstruct = masacara_style_2_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_style_2_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_style_2_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_style_2_possibleConstructorReturn(this, result); }; }\nfunction masacara_style_2_possibleConstructorReturn(self, call) { if (call && (masacara_style_2_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_style_2_assertThisInitialized(self); }\nfunction masacara_style_2_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_style_2_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_style_2_getPrototypeOf(o) { masacara_style_2_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_style_2_getPrototypeOf(o); }\n\n\n\n\nvar MasacaraStyle2 = /*#__PURE__*/function (_MasacaraStyle) {\n  masacara_style_2_inherits(MasacaraStyle2, _MasacaraStyle);\n  var _super = masacara_style_2_createSuper(MasacaraStyle2);\n  function MasacaraStyle2(sku, scene, width, height) {\n    masacara_style_2_classCallCheck(this, MasacaraStyle2);\n    var patternDefaultTextures = {\n      matte: mascara_natural2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new MasacaraPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, masacara_style_2_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return masacara_style_2_createClass(MasacaraStyle2);\n}(MasacaraStyle);\n;// CONCATENATED MODULE: ./src/assets/mascara_natural3.png\n/* harmony default export */ const mascara_natural3 = (__webpack_require__.p + "assets/src/assets/mascara_natural3.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style_3.js\nfunction masacara_style_3_typeof(obj) { "@babel/helpers - typeof"; return masacara_style_3_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_style_3_typeof(obj); }\nfunction masacara_style_3_toConsumableArray(arr) { return masacara_style_3_arrayWithoutHoles(arr) || masacara_style_3_iterableToArray(arr) || masacara_style_3_unsupportedIterableToArray(arr) || masacara_style_3_nonIterableSpread(); }\nfunction masacara_style_3_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction masacara_style_3_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return masacara_style_3_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return masacara_style_3_arrayLikeToArray(o, minLen); }\nfunction masacara_style_3_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction masacara_style_3_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return masacara_style_3_arrayLikeToArray(arr); }\nfunction masacara_style_3_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction masacara_style_3_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_3_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_3_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_3_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_style_3_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_3_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_style_3_setPrototypeOf(subClass, superClass); }\nfunction masacara_style_3_setPrototypeOf(o, p) { masacara_style_3_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_style_3_setPrototypeOf(o, p); }\nfunction masacara_style_3_createSuper(Derived) { var hasNativeReflectConstruct = masacara_style_3_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_style_3_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_style_3_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_style_3_possibleConstructorReturn(this, result); }; }\nfunction masacara_style_3_possibleConstructorReturn(self, call) { if (call && (masacara_style_3_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_style_3_assertThisInitialized(self); }\nfunction masacara_style_3_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_style_3_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_style_3_getPrototypeOf(o) { masacara_style_3_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_style_3_getPrototypeOf(o); }\n\n\n\n\nvar MasacaraStyle3 = /*#__PURE__*/function (_MasacaraStyle) {\n  masacara_style_3_inherits(MasacaraStyle3, _MasacaraStyle);\n  var _super = masacara_style_3_createSuper(MasacaraStyle3);\n  function MasacaraStyle3(sku, scene, width, height) {\n    masacara_style_3_classCallCheck(this, MasacaraStyle3);\n    var patternDefaultTextures = {\n      matte: mascara_natural3\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new MasacaraPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, masacara_style_3_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return masacara_style_3_createClass(MasacaraStyle3);\n}(MasacaraStyle);\n;// CONCATENATED MODULE: ./src/assets/mascara_upperlower1.png\n/* harmony default export */ const mascara_upperlower1 = (__webpack_require__.p + "assets/src/assets/mascara_upperlower1.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style_4.js\nfunction masacara_style_4_typeof(obj) { "@babel/helpers - typeof"; return masacara_style_4_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_style_4_typeof(obj); }\nfunction masacara_style_4_toConsumableArray(arr) { return masacara_style_4_arrayWithoutHoles(arr) || masacara_style_4_iterableToArray(arr) || masacara_style_4_unsupportedIterableToArray(arr) || masacara_style_4_nonIterableSpread(); }\nfunction masacara_style_4_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction masacara_style_4_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return masacara_style_4_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return masacara_style_4_arrayLikeToArray(o, minLen); }\nfunction masacara_style_4_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction masacara_style_4_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return masacara_style_4_arrayLikeToArray(arr); }\nfunction masacara_style_4_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction masacara_style_4_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_4_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_4_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_4_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_style_4_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_4_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_style_4_setPrototypeOf(subClass, superClass); }\nfunction masacara_style_4_setPrototypeOf(o, p) { masacara_style_4_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_style_4_setPrototypeOf(o, p); }\nfunction masacara_style_4_createSuper(Derived) { var hasNativeReflectConstruct = masacara_style_4_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_style_4_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_style_4_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_style_4_possibleConstructorReturn(this, result); }; }\nfunction masacara_style_4_possibleConstructorReturn(self, call) { if (call && (masacara_style_4_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_style_4_assertThisInitialized(self); }\nfunction masacara_style_4_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_style_4_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_style_4_getPrototypeOf(o) { masacara_style_4_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_style_4_getPrototypeOf(o); }\n\n\n\n\nvar MasacaraStyle4 = /*#__PURE__*/function (_MasacaraStyle) {\n  masacara_style_4_inherits(MasacaraStyle4, _MasacaraStyle);\n  var _super = masacara_style_4_createSuper(MasacaraStyle4);\n  function MasacaraStyle4(sku, scene, width, height) {\n    masacara_style_4_classCallCheck(this, MasacaraStyle4);\n    var patternDefaultTextures = {\n      matte: mascara_upperlower1\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new MasacaraPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, masacara_style_4_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return masacara_style_4_createClass(MasacaraStyle4);\n}(MasacaraStyle);\n;// CONCATENATED MODULE: ./src/assets/mascara_upperlower2.png\n/* harmony default export */ const mascara_upperlower2 = (__webpack_require__.p + "assets/src/assets/mascara_upperlower2.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style_5.js\nfunction masacara_style_5_typeof(obj) { "@babel/helpers - typeof"; return masacara_style_5_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_style_5_typeof(obj); }\nfunction masacara_style_5_toConsumableArray(arr) { return masacara_style_5_arrayWithoutHoles(arr) || masacara_style_5_iterableToArray(arr) || masacara_style_5_unsupportedIterableToArray(arr) || masacara_style_5_nonIterableSpread(); }\nfunction masacara_style_5_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction masacara_style_5_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return masacara_style_5_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return masacara_style_5_arrayLikeToArray(o, minLen); }\nfunction masacara_style_5_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction masacara_style_5_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return masacara_style_5_arrayLikeToArray(arr); }\nfunction masacara_style_5_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction masacara_style_5_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_5_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_5_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_5_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_style_5_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_5_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_style_5_setPrototypeOf(subClass, superClass); }\nfunction masacara_style_5_setPrototypeOf(o, p) { masacara_style_5_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_style_5_setPrototypeOf(o, p); }\nfunction masacara_style_5_createSuper(Derived) { var hasNativeReflectConstruct = masacara_style_5_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_style_5_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_style_5_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_style_5_possibleConstructorReturn(this, result); }; }\nfunction masacara_style_5_possibleConstructorReturn(self, call) { if (call && (masacara_style_5_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_style_5_assertThisInitialized(self); }\nfunction masacara_style_5_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_style_5_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_style_5_getPrototypeOf(o) { masacara_style_5_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_style_5_getPrototypeOf(o); }\n\n\n//import MatteAOTexture from "../../assets/eyelash_12.png";\n\n\nvar MasacaraStyle5 = /*#__PURE__*/function (_MasacaraStyle) {\n  masacara_style_5_inherits(MasacaraStyle5, _MasacaraStyle);\n  var _super = masacara_style_5_createSuper(MasacaraStyle5);\n  function MasacaraStyle5(sku, scene, width, height) {\n    masacara_style_5_classCallCheck(this, MasacaraStyle5);\n    var patternDefaultTextures = {\n      matte: mascara_upperlower2\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      var PatternFactory = new MasacaraPatternFactory();\n      var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push.apply(materialsArray, masacara_style_5_toConsumableArray(pattern.getMaterials()));\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return masacara_style_5_createClass(MasacaraStyle5);\n}(MasacaraStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/masacara-style/masacara_style_factory.js\nfunction masacara_style_factory_typeof(obj) { "@babel/helpers - typeof"; return masacara_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, masacara_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction masacara_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction masacara_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction masacara_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) masacara_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) masacara_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction masacara_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) masacara_style_factory_setPrototypeOf(subClass, superClass); }\nfunction masacara_style_factory_setPrototypeOf(o, p) { masacara_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return masacara_style_factory_setPrototypeOf(o, p); }\nfunction masacara_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = masacara_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = masacara_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = masacara_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return masacara_style_factory_possibleConstructorReturn(this, result); }; }\nfunction masacara_style_factory_possibleConstructorReturn(self, call) { if (call && (masacara_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return masacara_style_factory_assertThisInitialized(self); }\nfunction masacara_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction masacara_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction masacara_style_factory_getPrototypeOf(o) { masacara_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return masacara_style_factory_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\nvar MasacaraStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  masacara_style_factory_inherits(MasacaraStyleFactory, _StyleFactory);\n  var _super = masacara_style_factory_createSuper(MasacaraStyleFactory);\n  function MasacaraStyleFactory() {\n    var _this;\n    masacara_style_factory_classCallCheck(this, MasacaraStyleFactory);\n    _this = _super.call(this);\n    _this.eyeShadowStyles = {\n      natural1: MasacaraStyle1,\n      natural2: MasacaraStyle2,\n      natural3: MasacaraStyle3,\n      upperlower1: MasacaraStyle4,\n      upperlower2: MasacaraStyle5\n    };\n    return _this;\n  }\n  masacara_style_factory_createClass(MasacaraStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.eyeShadowStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported masacara style");\n      }\n      return new StyleClass(apiResponseData.sku, scene, width, height);\n    }\n  }]);\n  return MasacaraStyleFactory;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/assets/shine_12.png\n/* harmony default export */ const shine_12 = (__webpack_require__.p + "assets/src/assets/shine_12.png");\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/nailResponse.js\n\nfunction nailResponse_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction nailResponse_createClass(Constructor, protoProps, staticProps) { if (protoProps) nailResponse_defineProperties(Constructor.prototype, protoProps); if (staticProps) nailResponse_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction nailResponse_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nvar nailResponseData = /*#__PURE__*/nailResponse_createClass(function nailResponseData(_image, _mask, _x_cord, _y_cord, _x2_cord, _y2_cord, _angle, _isVideo) {\n  nailResponse_classCallCheck(this, nailResponseData);\n  this.image = _image;\n  this.maskData = _mask;\n  this.x_cord = _x_cord;\n  this.y_cord = _y_cord;\n  this.x2_cord = _x2_cord;\n  this.y2_cord = _y2_cord;\n  this.angle = _angle;\n  this.isVideo = _isVideo;\n});\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/nail_style.js\n\n\n\n\nfunction nail_style_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction nail_style_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction nail_style_createClass(Constructor, protoProps, staticProps) { if (protoProps) nail_style_defineProperties(Constructor.prototype, protoProps); if (staticProps) nail_style_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n//import { GUI } from "dat.gui";\n\nvar NailStyle = /*#__PURE__*/function () {\n  function NailStyle(sku, scene, width, height, materials) {\n    nail_style_classCallCheck(this, NailStyle);\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.imageCanvas;\n    this.ctx;\n    this.nailData;\n    this.maskTexture = null;\n    this.angle = null;\n    this.x_cord = null;\n    this.y_cord = null;\n    this.x2_cord = null;\n    this.y2_cord = null;\n    this.maskMesh = [null, null, null, null, null, null, null, null, null, null];\n    this.faces = null;\n    this.isVideo = true;\n    this.combinecall = false;\n    this.maskCanvas = document.createElement("canvas");\n    var contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.maskCanvas.getContext("2d", contextAttributes);\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n\n    // const gui = new GUI();\n\n    // this.currentvector = new THREE.Vector3(0, 0, 0);\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", -100, 100).step(0.01);\n    // vectorFolder2.add(this.currentvector, "y", -100, 100).step(0.01);\n    // vectorFolder2.add(this.currentvector, "z", -100, 100).step(0.01);\n  }\n  nail_style_createClass(NailStyle, [{\n    key: "updateDimensions",\n    value: function updateDimensions(width, height, offset) {\n      this.width = width;\n      this.height = height;\n      this.offset = offset;\n      if (this.isVideo) this.updateTransforms();\n\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      // this.needsUpdate = true;\n    }\n  }, {\n    key: "setNeedUpdateTrue",\n    value: function setNeedUpdateTrue() {\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateMask",\n    value: function updateMask(imageCanvas, mask, x_cord, y_cord, x2_cord, y2_cord, angle, isVideo) {\n      // console.log("inside updateMask called",combinecall);\n      //this.imageCanvas = imageCanvas;\n      var contextAttributes = {\n        willReadFrequently: true\n      };\n      this.ctx = this.maskCanvas.getContext("2d", contextAttributes);\n      //  console.error("Called  updateMask angle :: ", angle);\n      this.angle = angle;\n      this.maskTexture = mask;\n      this.x_cord = x_cord;\n      this.y_cord = y_cord;\n      this.x2_cord = x2_cord;\n      this.y2_cord = y2_cord;\n      this.needsUpdate = true;\n      this.isVideo = isVideo;\n      this.nailData = new nailResponseData(imageCanvas, mask, x_cord, y_cord, x2_cord, y2_cord, angle, isVideo);\n    }\n  }, {\n    key: "getNailData",\n    value: function getNailData() {\n      return this.nailData;\n    }\n  }, {\n    key: "clearNailData",\n    value: function clearNailData() {\n      this.nailData = null;\n    }\n  }, {\n    key: "setNailData",\n    value: function setNailData(_nailData) {\n      this.nailData = _nailData;\n      var contextAttributes = {\n        willReadFrequently: true\n      };\n      this.ctx = this.maskCanvas.getContext("2d", contextAttributes);\n      // console.log(this.angle);\n      this.angle = _nailData.angle;\n      // console.log(this.angle);\n\n      this.maskTexture = _nailData.maskData;\n      this.x_cord = _nailData.x_cord;\n      this.y_cord = _nailData.y_cord;\n      this.x2_cord = _nailData.x2_cord;\n      this.y2_cord = _nailData.y2_cord;\n      this.isVideo = _nailData.isVideo;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "flipImageData",\n    value: function flipImageData(data, width, height) {\n      var flippedData = new Uint8Array(data.length);\n      var rowSize = width * 4; // Assuming 4 channels (RGBA)\n\n      for (var row = 0; row < height; row++) {\n        var srcOffset = row * rowSize;\n        var destOffset = (height - row - 1) * rowSize;\n        flippedData.set(data.subarray(srcOffset, srcOffset + rowSize), destOffset);\n      }\n      return flippedData;\n    }\n  }, {\n    key: "degreesToRadians",\n    value: function degreesToRadians(degrees) {\n      return degrees * (-Math.PI / 180);\n    }\n  }, {\n    key: "addrendring",\n    value: function addrendring() {\n      if (!this.maskTexture || !this.materialArray || this.materialArray.length <= 0) return;\n      //console.log(this.angle);\n      var anglesInRadians = this.angle.map(this.degreesToRadians);\n      for (var z = 0; z < this.maskTexture.length; z++) {\n        var sx = void 0;\n        var sy = void 0;\n        if (this.isVideo) {\n          var _getVideoEl, _getVideoEl2;\n          sx = this.x_cord[z] + this.x2_cord[z] / 2 - ((_getVideoEl = getVideoEl()) === null || _getVideoEl === void 0 ? void 0 : _getVideoEl.videoWidth) / 2 + 1.7;\n          sy = ((_getVideoEl2 = getVideoEl()) === null || _getVideoEl2 === void 0 ? void 0 : _getVideoEl2.videoHeight) / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n        } else {\n          sx = this.x_cord[z] + this.x2_cord[z] / 2 - this.width / 2 + 1.7;\n          sy = this.height / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n        }\n        var sh = this.y2_cord[z] * 1.08;\n        var sw = this.x2_cord[z] * 1.08;\n        var maskImageTexture = this.maskTexture[z];\n        var newColor = new three_module/* Color */.Q1f(0xb76e79); // Green color\n\n        maskImageTexture.generateMipmaps = true;\n        maskImageTexture.magFilter = three_module/* LinearFilter */.k6q; // For smoother magnification\n        maskImageTexture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n        maskImageTexture.color = newColor;\n        maskImageTexture.opacity = 0.5;\n        maskImageTexture.needsUpdate = true;\n        var maskGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n        if (this.isVideo) {\n          this.materialArray[z].vertexShader = nail_style_vertexShader;\n        } else {\n          this.materialArray[z].vertexShader = nail_style_vertexShader;\n        }\n        this.materialArray[z].uniforms._MaskTex.value = maskImageTexture;\n        this.materialArray[z].uniforms._RotationAngle.value = anglesInRadians[z];\n\n        // this.materialArray[z].uniforms._numMaskTextures.value = 1; //this.mask.length;\n        this.materialArray[z].uniforms._Threshold.value = 0.2;\n        this.materialArray[z].needsUpdate = true;\n        this.maskMesh[z] = new three_module/* Mesh */.eaF(maskGeometry, this.materialArray[z]);\n        this.maskMesh[z].position.set(sx / this.offset, sy / this.offset, 0);\n        this.maskMesh[z].scale.set(sw / this.offset, sh / this.offset, 1);\n        this.scene.add(this.maskMesh[z]);\n      }\n    }\n  }, {\n    key: "updateTransforms",\n    value: function updateTransforms() {\n      if (!this.maskTexture || !this.maskMesh || this.maskMesh.length <= 0 || this.maskMesh.length > 1 && !this.maskMesh[0]) return;\n      for (var z = 0; z < this.maskTexture.length; z++) {\n        var sx = void 0;\n        var sy = void 0;\n        if (this.isVideo) {\n          var _getVideoEl3, _getVideoEl4;\n          sx = this.x_cord[z] + this.x2_cord[z] / 2 - ((_getVideoEl3 = getVideoEl()) === null || _getVideoEl3 === void 0 ? void 0 : _getVideoEl3.videoWidth) / 2 + 1.7;\n          sy = ((_getVideoEl4 = getVideoEl()) === null || _getVideoEl4 === void 0 ? void 0 : _getVideoEl4.videoHeight) / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n        } else {\n          sx = this.x_cord[z] + this.x2_cord[z] / 2 - this.width / 2 + 1.7;\n          sy = this.height / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n        }\n        var sh = this.y2_cord[z] * 1.08;\n        var sw = this.x2_cord[z] * 1.08;\n\n        // console.log(this.maskMesh);\n\n        this.maskMesh[z].position.set(sx / this.offset, sy / this.offset, 0);\n        this.maskMesh[z].scale.set(sw / this.offset, sh / this.offset, 1);\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      //this.scene.remove(this.faces);\n      if (this.maskTexture) {\n        for (var z = 0; z < this.maskTexture.length; z++) {\n          this.scene.remove(this.maskMesh[z]);\n        }\n      }\n    }\n  }, {\n    key: "setOpacity",\n    value: function setOpacity(intensity) {\n      this.materialArray.forEach(function (material) {\n        material.uniforms.opacity.value = intensity;\n      });\n    }\n  }, {\n    key: "updateOpacity",\n    value: function updateOpacity() {\n      this.materialArray.forEach(function (material) {\n        material.uniforms.opacity.value = getOpacitySliderValue();\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      // console.log(this.needsUpdate, this.maskTexture);\n      if (this.needsUpdate) {\n        // console.log("update called 218");//&& !this.combinecall\n        if (this.maskMesh != null) {\n          // if(this.combinecall =="false"){\n          this.removeFaces();\n          //console.log("removeFaces called 2",this.combinecall);\n          // }\n        }\n        if (this.maskTexture != null) {\n          this.addrendring();\n          // this.addMaskColor();\n        } else {\n          // console.log("addMaskColor not called");\n        }\n        this.needsUpdate = false;\n      }\n      if (this.maskMesh != null && this.maskTexture != null) {\n        // console.log("nail update");\n        this.updateOpacity();\n      }\n\n      // if (this.faces != null && this.pointLight != null) {\n      //     this.pointLight.position.copy(this.faces.position);\n      // }\n    }\n  }]);\n  return NailStyle;\n}();\nvar vertexShaderFlipped = ["varying vec2 vUv;", "void main() {", "  vUv = vec2(1.0 - uv.x, uv.y);",\n// Flip the texture coordinates horizontally\n"  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\nvar nail_style_vertexShader = ["varying vec2 vUv;", "void main() {", "  vUv = uv;", "  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/glossy_nail_mask.js\n\nfunction glossy_nail_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glossy_nail_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glossy_nail_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) glossy_nail_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) glossy_nail_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar GlossyNailMask = /*#__PURE__*/function () {\n  function GlossyNailMask(_pattern, _texture, index) {\n    glossy_nail_mask_classCallCheck(this, GlossyNailMask);\n    var color = _pattern.colors[0];\n    var maskColor = ColorUtils.hexToVector4(color, 100);\n    // let threeColor = new THREE.Color(newColor);\n    // let maskColor = new THREE.Vector4(\n    //   threeColor.r,\n    //   threeColor.g,\n    //   threeColor.b,\n    //   1\n    // );\n\n    var aomap = new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    var vertexShader = "\\n      varying vec2 vUv;\\n      void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n      }\\n    ";\n    var fragmentShader = "\\n  uniform sampler2D _MaskTex;\\n  uniform sampler2D aoTex;\\n  uniform vec4 newColorValue;\\n  uniform float _RotationAngle;\\n  uniform float opacity;\\n  varying vec2 vUv;\\n\\n  // Function to compute a simple box blur (you can adjust the radius for more or less blur)\\n  float smoothMask(vec2 uv, float radius) {\\n    float sum = 0.0;\\n    float count = 0.0;\\n    vec2 offset = vec2(radius / 512.0, radius / 512.0); // Adjust the 512.0 for your texture resolution\\n\\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\\n      for (float y = -1.0; y <= 1.0; y += 1.0) {\\n        vec2 texCoord = uv + vec2(x, y) * offset;\\n        vec4 color = texture2D(_MaskTex, texCoord);\\n        sum += color.r;\\n        count += 1.0;\\n      }\\n    }\\n    return sum / count;\\n  }\\n\\n  void main() {\\n    float blurRadius = 10.0; // Adjust this value for more or less blur\\n    float alpha = smoothMask(vUv, blurRadius);\\n\\n    // Sample the aoTex and apply the mask\\n    vec2 rotatedUV = vec2(\\n      cos(_RotationAngle) * (vUv.x - 0.5) + sin(_RotationAngle) * (vUv.y - 0.5) + 0.5,\\n      cos(_RotationAngle) * (vUv.y - 0.5) - sin(_RotationAngle) * (vUv.x - 0.5) + 0.5\\n    );\\n  \\n    vec4 aoColor = texture2D(aoTex, rotatedUV);\\n    vec4 baseColor = vec4(newColorValue.rgb, alpha);\\n\\n    // Apply the mask to aoTex\\n    vec4 maskedAoColor = vec4(aoColor.rgb, aoColor.a * alpha);\\n\\n    // Mix baseColor and maskedAoColor\\n    vec4 result = mix(baseColor, maskedAoColor, maskedAoColor.a);\\n\\n    // Apply the final opacity to the result\\n    gl_FragColor = vec4(result.rgb, result.a * opacity);\\n  }\\n";\n    var material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        _MaskTex: {\n          value: null\n        },\n        aoTex: {\n          value: aomap\n        },\n        _Threshold: {\n          value: 0.2\n        },\n        newColorValue: {\n          value: maskColor\n        },\n        opacity: {\n          value: 0.2\n        },\n        _RotationAngle: {\n          value: 0.0\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5\n    });\n    this.MaterialArray = [material];\n  }\n  glossy_nail_mask_createClass(GlossyNailMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return GlossyNailMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/matte_nail_mask.js\n\nfunction matte_nail_mask_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction matte_nail_mask_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction matte_nail_mask_createClass(Constructor, protoProps, staticProps) { if (protoProps) matte_nail_mask_defineProperties(Constructor.prototype, protoProps); if (staticProps) matte_nail_mask_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\nvar MatteNailMask = /*#__PURE__*/function () {\n  function MatteNailMask(_pattern, _texture, index) {\n    matte_nail_mask_classCallCheck(this, MatteNailMask);\n    var color = _pattern.colors[0];\n    var maskColor = ColorUtils.hexToVector4(color, 100);\n    // let threeColor = new THREE.Color(newColor);\n    // let maskColor = new THREE.Vector4(\n    //   threeColor.r,\n    //   threeColor.g,\n    //   threeColor.b,\n    //   1\n    // );\n\n    var aomap = new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    var vertexShader = "\\n      varying vec2 vUv;\\n      void main() {\\n          vUv = uv;\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n      }\\n    ";\n    var fragmentShader = "\\n  uniform sampler2D _MaskTex;\\n  uniform vec4 newColorValue;\\n  uniform float opacity;\\n  uniform float _RotationAngle;\\n  varying vec2 vUv;\\n\\n  // Function to compute a simple box blur (you can adjust the radius for more or less blur)\\n  float smoothMask(vec2 uv, float radius) {\\n    float sum = 0.0;\\n    float count = 0.0;\\n    vec2 offset = vec2(radius / 512.0, radius / 512.0); // Adjust the 512.0 for your texture resolution\\n\\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\\n      for (float y = -1.0; y <= 1.0; y += 1.0) {\\n        vec2 texCoord = uv + vec2(x, y) * offset;\\n        vec4 color = texture2D(_MaskTex, texCoord);\\n        sum += color.r;\\n        count += 1.0;\\n      }\\n    }\\n    return sum / count;\\n  }\\n\\n  void main() {\\n    \\n    float blurRadius = 10.0; // Adjust this value for more or less blur\\n    float alpha = smoothMask(vUv, blurRadius);\\n    gl_FragColor = vec4(newColorValue.rgb, alpha * opacity);\\n  }\\n";\n    var material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        _MaskTex: {\n          value: null\n        },\n        _Threshold: {\n          value: 0.2\n        },\n        newColorValue: {\n          value: maskColor\n        },\n        opacity: {\n          value: 0.2\n        },\n        _RotationAngle: {\n          value: 0.0\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5\n    });\n    this.MaterialArray = [material];\n  }\n  matte_nail_mask_createClass(MatteNailMask, [{\n    key: "getMaterials",\n    value: function getMaterials() {\n      return this.MaterialArray;\n    }\n  }]);\n  return MatteNailMask;\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/nail_pattern_factory.js\nfunction nail_pattern_factory_typeof(obj) { "@babel/helpers - typeof"; return nail_pattern_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, nail_pattern_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\n\nfunction nail_pattern_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction nail_pattern_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction nail_pattern_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) nail_pattern_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) nail_pattern_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction nail_pattern_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) nail_pattern_factory_setPrototypeOf(subClass, superClass); }\nfunction nail_pattern_factory_setPrototypeOf(o, p) { nail_pattern_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return nail_pattern_factory_setPrototypeOf(o, p); }\nfunction nail_pattern_factory_createSuper(Derived) { var hasNativeReflectConstruct = nail_pattern_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = nail_pattern_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = nail_pattern_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return nail_pattern_factory_possibleConstructorReturn(this, result); }; }\nfunction nail_pattern_factory_possibleConstructorReturn(self, call) { if (call && (nail_pattern_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return nail_pattern_factory_assertThisInitialized(self); }\nfunction nail_pattern_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction nail_pattern_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction nail_pattern_factory_getPrototypeOf(o) { nail_pattern_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return nail_pattern_factory_getPrototypeOf(o); }\n\n\n\n\n\n\nvar NailPatternFactory = /*#__PURE__*/function (_PatternFactory) {\n  nail_pattern_factory_inherits(NailPatternFactory, _PatternFactory);\n  var _super = nail_pattern_factory_createSuper(NailPatternFactory);\n  function NailPatternFactory() {\n    var _this;\n    nail_pattern_factory_classCallCheck(this, NailPatternFactory);\n    _this = _super.call(this);\n    _this.pattern = {\n      matte: MatteNailMask,\n      glossy: GlossyNailMask\n    };\n    _this.patternClass = null;\n    return _this;\n  }\n  nail_pattern_factory_createClass(NailPatternFactory, [{\n    key: "createPattern",\n    value: function createPattern(_pattern, _texture) {\n      // console.log(_pattern.type);\n      var patternType = _pattern.name;\n      this.patternClass = this.pattern[patternType.toLowerCase()];\n      if (!this.patternClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported pattern" + patternType);\n      }\n      return new this.patternClass(_pattern, _texture);\n    }\n  }, {\n    key: "getPatternMaterials",\n    value: function getPatternMaterials() {\n      //console.log(this.patternClass.MaterialArray);\n      return this.patternClass["this"].getMaterials();\n    }\n  }]);\n  return NailPatternFactory;\n}(PatternFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/nail_single_color.js\nfunction nail_single_color_typeof(obj) { "@babel/helpers - typeof"; return nail_single_color_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, nail_single_color_typeof(obj); }\nfunction nail_single_color_toConsumableArray(arr) { return nail_single_color_arrayWithoutHoles(arr) || nail_single_color_iterableToArray(arr) || nail_single_color_unsupportedIterableToArray(arr) || nail_single_color_nonIterableSpread(); }\nfunction nail_single_color_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction nail_single_color_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return nail_single_color_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return nail_single_color_arrayLikeToArray(o, minLen); }\nfunction nail_single_color_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction nail_single_color_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return nail_single_color_arrayLikeToArray(arr); }\nfunction nail_single_color_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction nail_single_color_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction nail_single_color_createClass(Constructor, protoProps, staticProps) { if (protoProps) nail_single_color_defineProperties(Constructor.prototype, protoProps); if (staticProps) nail_single_color_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction nail_single_color_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction nail_single_color_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) nail_single_color_setPrototypeOf(subClass, superClass); }\nfunction nail_single_color_setPrototypeOf(o, p) { nail_single_color_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return nail_single_color_setPrototypeOf(o, p); }\nfunction nail_single_color_createSuper(Derived) { var hasNativeReflectConstruct = nail_single_color_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = nail_single_color_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = nail_single_color_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return nail_single_color_possibleConstructorReturn(this, result); }; }\nfunction nail_single_color_possibleConstructorReturn(self, call) { if (call && (nail_single_color_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return nail_single_color_assertThisInitialized(self); }\nfunction nail_single_color_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction nail_single_color_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction nail_single_color_getPrototypeOf(o) { nail_single_color_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return nail_single_color_getPrototypeOf(o); }\n\n\n\n\nvar NailSingleTone = /*#__PURE__*/function (_NailStyle) {\n  nail_single_color_inherits(NailSingleTone, _NailStyle);\n  var _super = nail_single_color_createSuper(NailSingleTone);\n  function NailSingleTone(sku, scene, width, height) {\n    nail_single_color_classCallCheck(this, NailSingleTone);\n    var patternDefaultTextures = {\n      matte: [null, shine_12],\n      glossy: [null, shine_12],\n      shimmer: null\n    };\n    var materialsArray = [];\n    for (var i = 0; i < sku.attributes.length; i++) {\n      for (var j = 0; j < 10; j++) {\n        var PatternFactory = new NailPatternFactory();\n        var pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n        );\n        materialsArray.push.apply(materialsArray, nail_single_color_toConsumableArray(pattern.getMaterials()));\n      }\n    }\n    return _super.call(this, sku, scene, width, height, materialsArray);\n  }\n  return nail_single_color_createClass(NailSingleTone);\n}(NailStyle);\n;// CONCATENATED MODULE: ./src/makeupVTOs/nail-style/nail_style_factory.js\nfunction nail_style_factory_typeof(obj) { "@babel/helpers - typeof"; return nail_style_factory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, nail_style_factory_typeof(obj); }\n\n\n\n\n\n\n\n\n\n\nfunction nail_style_factory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction nail_style_factory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction nail_style_factory_createClass(Constructor, protoProps, staticProps) { if (protoProps) nail_style_factory_defineProperties(Constructor.prototype, protoProps); if (staticProps) nail_style_factory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction nail_style_factory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) nail_style_factory_setPrototypeOf(subClass, superClass); }\nfunction nail_style_factory_setPrototypeOf(o, p) { nail_style_factory_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return nail_style_factory_setPrototypeOf(o, p); }\nfunction nail_style_factory_createSuper(Derived) { var hasNativeReflectConstruct = nail_style_factory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = nail_style_factory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = nail_style_factory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return nail_style_factory_possibleConstructorReturn(this, result); }; }\nfunction nail_style_factory_possibleConstructorReturn(self, call) { if (call && (nail_style_factory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return nail_style_factory_assertThisInitialized(self); }\nfunction nail_style_factory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction nail_style_factory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction nail_style_factory_getPrototypeOf(o) { nail_style_factory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return nail_style_factory_getPrototypeOf(o); }\n\n\n\n\n\nvar NailStyleFactory = /*#__PURE__*/function (_StyleFactory) {\n  nail_style_factory_inherits(NailStyleFactory, _StyleFactory);\n  var _super = nail_style_factory_createSuper(NailStyleFactory);\n  function NailStyleFactory() {\n    var _this;\n    nail_style_factory_classCallCheck(this, NailStyleFactory);\n    _this = _super.call(this);\n    _this.nailStyles = {\n      single: NailSingleTone\n    };\n    return _this;\n  }\n  nail_style_factory_createClass(NailStyleFactory, [{\n    key: "createStyle",\n    value: function createStyle(apiResponseData, scene, width, height) {\n      var styleType = apiResponseData.sku.styleVariant;\n      var StyleClass = this.nailStyles[styleType.toLowerCase()];\n      if (!StyleClass) {\n        // showSnackbar().then(() => {\n        //   setTimeout(() => {\n        //     emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n        throw new Error("Unsupported hair style");\n      }\n      var styleInstance = new StyleClass(apiResponseData.sku, scene, width, height);\n      styleInstance.isNailStyleFactoryInstance = true;\n      return styleInstance;\n    }\n  }]);\n  return NailStyleFactory;\n}(StyleFactory);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.fill.js\nvar es6_array_fill = __webpack_require__(7762);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/GLTFLoader.js + 1 modules\nvar GLTFLoader = __webpack_require__(4092);\n;// CONCATENATED MODULE: ./src/utils/assetsCache.js\nvar globalCache = {};\nfunction assetsCache_addToGlobalCache(key, value) {\n  if (!globalCache[key]) {\n    globalCache[key] = value;\n    //console.log(`Added to cache: ${key}`);\n  } else {\n    //console.log(`Key ${key} already exists in the cache.`);\n  }\n}\nfunction assetsCache_hasGlobalAssetKey(key) {\n  return !!globalCache[key];\n}\nfunction assetsCache_getGlobalCacheAsset(key) {\n  if (assetsCache_hasGlobalAssetKey(key)) {\n    //console.log(`Retrieved value for key ${key}`);\n    return globalCache[key];\n  } else {\n    //console.log(`Key ${key} does not exist in the cache.`);\n    return null;\n  }\n}\n;// CONCATENATED MODULE: ./src/assets/svg/watch_n.svg\n/* harmony default export */ const watch_n = (__webpack_require__.p + "assets/src/assets/svg/watch_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/ring_n.svg\n/* harmony default export */ const ring_n = (__webpack_require__.p + "assets/src/assets/svg/ring_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/bracelet_n.svg\n/* harmony default export */ const bracelet_n = (__webpack_require__.p + "assets/src/assets/svg/bracelet_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/earring_n.svg\n/* harmony default export */ const earring_n = (__webpack_require__.p + "assets/src/assets/svg/earring_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/necklace_n.svg\n/* harmony default export */ const necklace_n = (__webpack_require__.p + "assets/src/assets/svg/necklace_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/glasses_n.svg\n/* harmony default export */ const glasses_n = (__webpack_require__.p + "assets/src/assets/svg/glasses_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/cap_n.svg\n/* harmony default export */ const cap_n = (__webpack_require__.p + "assets/src/assets/svg/cap_n.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/mangtika_n.svg\n/* harmony default export */ const mangtika_n = (__webpack_require__.p + "assets/src/assets/svg/mangtika_n.svg");\n;// CONCATENATED MODULE: ./src/htmlService/loadingModelPanel.js\n\n\n\n\n\n\n\n\n//import mangtika from "../assets/svg/mangtika_n.svg";\n\nvar loadingModelPanel = null;\nvar imgElementCache = null;\nfunction getIcon(name) {\n  switch (name) {\n    case "watch":\n      return watch_n;\n    case "ring":\n      return ring_n;\n    case "bracelet":\n      return bracelet_n;\n    case "earring":\n      return earring_n;\n    case "necklace":\n      return necklace_n;\n    case "glasses":\n      return glasses_n;\n    case "cap":\n      return cap_n;\n    case "mangtika":\n      return mangtika_n;\n  }\n}\nfunction setTrackingMsg(message) {\n  loadingModelPanel.innerHTML = message;\n}\nfunction hideLoadingModelPanel() {\n  loadingModelPanel.style.display = "none";\n}\nfunction showLoadingModelPanel(name) {\n  imgElementCache.src = getIcon(name);\n  loadingModelPanel.style.display = "flex";\n}\nfunction setLoadingModelPanelElement(type) {\n  loadingModelPanel = document.querySelector(".loading-model-Panel");\n  var imgElement = document.querySelector(".loading-model-icon");\n  // imgElement.style.position = "absolute";\n  // imgElement.style.top = "20%";\n  imgElement.style.height = "96px";\n  imgElement.style.width = "96px";\n\n  // loadingModelPanel.appendChild(imgElement);\n  imgElementCache = imgElement;\n}\n;// CONCATENATED MODULE: ./src/utils/LerpingAndFlickerManager.js\n\n\nfunction LerpingAndFlickerManager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction LerpingAndFlickerManager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction LerpingAndFlickerManager_createClass(Constructor, protoProps, staticProps) { if (protoProps) LerpingAndFlickerManager_defineProperties(Constructor.prototype, protoProps); if (staticProps) LerpingAndFlickerManager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\nvar LerpingAndFlickerManager = /*#__PURE__*/function () {\n  function LerpingAndFlickerManager(glasseRef) {\n    LerpingAndFlickerManager_classCallCheck(this, LerpingAndFlickerManager);\n    this.glassRef = glasseRef;\n    this.clock = new three_module/* Clock */.zD7();\n    this.scaleSmoothing = new Vector3ExponentialSmoothing(0.4);\n    this.positionSmoothing = new Vector3ExponentialSmoothing(0.7);\n    this.rotationSmoothing = new QuaternionExponentialSmoothing(0.4);\n    this.lastSetScale = null;\n    this.targetScale = null;\n    this.scaleLerpFactor = 0.4;\n    this.lasSetPosition = null;\n    this.targetPosition = null;\n    this.positionLerpFactor = 1;\n    this.lasSetRotation = null;\n    this.targetRotation = null;\n    this.rotationLerpFactor = 0.7;\n  }\n\n  //#region Scale Functions\n  LerpingAndFlickerManager_createClass(LerpingAndFlickerManager, [{\n    key: "setTargetScale",\n    value: function setTargetScale(newScale) {\n      var scaleVector = new three_module/* Vector3 */.Pq0(newScale, newScale, newScale);\n      this.targetScale = this.scaleSmoothing.update(scaleVector);\n      // console.log(`SET Scale: ${scaleVector.toArray().join(", ")}`);\n      if (!this.lastSetScale) {\n        // console.log("## Set intital Scale");\n        this.lastSetScale = scaleVector.clone();\n        this.glassRef.scale.copy(this.lastSetScale);\n        return;\n      }\n    }\n  }, {\n    key: "updateScaleSmoothly",\n    value: function updateScaleSmoothly(lFactor) {\n      if (this.targetScale && this.lastSetScale) {\n        var closeEnoughThreshold = 0.02;\n        if (this.lastSetScale.distanceTo(this.targetScale) < closeEnoughThreshold) {\n          this.lastSetScale.copy(this.targetScale);\n          this.glassRef.scale.copy(this.targetScale);\n          // console.log("## Reached target Scale");\n          return;\n        }\n        this.lastSetScale.lerp(this.targetScale, lFactor);\n        this.glassRef.scale.copy(this.lastSetScale);\n      }\n    }\n    //#endregion\n\n    //#region Position Functions\n  }, {\n    key: "setTargetPosition",\n    value: function setTargetPosition(position) {\n      var x = position.x,\n        y = position.y,\n        z = position.z;\n      var tPosition = new three_module/* Vector3 */.Pq0(x, y, z);\n      this.targetPosition = this.positionSmoothing.update(tPosition);\n      // console.log(`SET Scale: ${scaleVector.toArray().join(", ")}`);\n      if (!this.lasSetPosition) {\n        // console.log("## Set intital Scale");\n        this.lasSetPosition = tPosition.clone();\n        this.glassRef.position.copy(this.lasSetPosition);\n        return;\n      }\n    }\n  }, {\n    key: "updatePositionSmoothly",\n    value: function updatePositionSmoothly(lFactor) {\n      if (this.targetPosition && this.lasSetPosition) {\n        var closeEnoughThreshold = 0.2;\n        if (this.lasSetPosition.distanceTo(this.targetPosition) < closeEnoughThreshold) {\n          this.lasSetPosition.copy(this.targetPosition);\n          this.glassRef.position.copy(this.targetPosition);\n          // console.log("## Reached target Scale");\n          return;\n        }\n        this.lasSetPosition.lerp(this.targetPosition, lFactor);\n        this.glassRef.position.copy(this.lasSetPosition);\n      }\n    }\n    //#endregion\n\n    //#region Rotation Functions\n  }, {\n    key: "setTargetRotation",\n    value: function setTargetRotation(rotation) {\n      this.targetRotation = this.rotationSmoothing.update(rotation);\n      if (!this.lasSetRotation) {\n        // console.log("## Set intital Rotation");\n        this.lasSetRotation = rotation;\n        this.glassRef.quaternion.copy(this.lasSetRotation);\n        return;\n      }\n    }\n  }, {\n    key: "updateRotationSmoothly",\n    value: function updateRotationSmoothly(lFactor) {\n      if (this.targetRotation && this.lasSetRotation) {\n        var closeEnoughThreshold = 0.99999;\n        // console.log(`Current Quaternion: ${this.lasSetRotation.toArray().join(", ")}`);\n        // console.log(`Target Quaternion: ${this.targetRotation.toArray().join(", ")}`);\n        // console.log("DOT ", this.lasSetRotation.dot(this.targetRotation));\n        // console.log("--------------");\n        if (this.lasSetRotation.dot(this.targetRotation) > closeEnoughThreshold) {\n          // console.log("END OF SET ROTATION");\n          this.lasSetRotation.copy(this.targetRotation);\n          this.glassRef.quaternion.copy(this.targetRotation);\n          // console.log("## Reached target Rotation");\n          return;\n        }\n        this.lasSetRotation.slerp(this.targetRotation, lFactor);\n        this.glassRef.quaternion.copy(this.lasSetRotation);\n        // console.log("SETTING ROTATION");\n      }\n    }\n    //#endregion\n  }, {\n    key: "update",\n    value: function update(dt) {\n      var speed = 30;\n      this.updateScaleSmoothly(this.scaleLerpFactor * dt * speed);\n      this.updatePositionSmoothly(this.positionLerpFactor * dt * speed);\n      this.updateRotationSmoothly(this.rotationLerpFactor * dt * speed);\n    }\n  }, {\n    key: "animate",\n    value: function animate() {\n      requestAnimationFrame(this.animate.bind(this));\n      var deltaTime = this.clock.getDelta();\n      this.update(deltaTime);\n    }\n  }]);\n  return LerpingAndFlickerManager;\n}();\nvar Vector3ExponentialSmoothing = /*#__PURE__*/function () {\n  function Vector3ExponentialSmoothing(alpha) {\n    LerpingAndFlickerManager_classCallCheck(this, Vector3ExponentialSmoothing);\n    this.alpha = alpha;\n    this.lastOutput = new three_module/* Vector3 */.Pq0();\n  }\n  LerpingAndFlickerManager_createClass(Vector3ExponentialSmoothing, [{\n    key: "update",\n    value: function update(value) {\n      if (this.lastOutput.equals(new three_module/* Vector3 */.Pq0())) {\n        this.lastOutput.copy(value);\n      } else {\n        this.lastOutput.lerp(value, this.alpha);\n      }\n      this.lastOutput.x = Math.round(this.lastOutput.x * 100) / 100;\n      this.lastOutput.y = Math.round(this.lastOutput.y * 100) / 100;\n      this.lastOutput.z = Math.round(this.lastOutput.z * 100) / 100;\n      return this.lastOutput;\n    }\n  }]);\n  return Vector3ExponentialSmoothing;\n}();\nvar QuaternionExponentialSmoothing = /*#__PURE__*/function () {\n  function QuaternionExponentialSmoothing(alpha) {\n    LerpingAndFlickerManager_classCallCheck(this, QuaternionExponentialSmoothing);\n    this.alpha = alpha;\n    this.lastOutput = new three_module/* Quaternion */.PTz();\n  }\n  LerpingAndFlickerManager_createClass(QuaternionExponentialSmoothing, [{\n    key: "update",\n    value: function update(value) {\n      if (this.lastOutput.equals(new three_module/* Quaternion */.PTz())) {\n        this.lastOutput.copy(value);\n      } else {\n        // Correctly interpolate between the lastOutput and the new value\n        this.lastOutput.slerpQuaternions(this.lastOutput, value, this.alpha);\n      }\n      return this.lastOutput;\n    }\n  }]);\n  return QuaternionExponentialSmoothing;\n}();\n;// CONCATENATED MODULE: ./src/virtualTryOns/glasses.js\nfunction glasses_typeof(obj) { "@babel/helpers - typeof"; return glasses_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, glasses_typeof(obj); }\n\nfunction glasses_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction glasses_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { glasses_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { glasses_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction glasses_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction glasses_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction glasses_createClass(Constructor, protoProps, staticProps) { if (protoProps) glasses_defineProperties(Constructor.prototype, protoProps); if (staticProps) glasses_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction glasses_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) glasses_setPrototypeOf(subClass, superClass); }\nfunction glasses_setPrototypeOf(o, p) { glasses_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return glasses_setPrototypeOf(o, p); }\nfunction glasses_createSuper(Derived) { var hasNativeReflectConstruct = glasses_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = glasses_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = glasses_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return glasses_possibleConstructorReturn(this, result); }; }\nfunction glasses_possibleConstructorReturn(self, call) { if (call && (glasses_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return glasses_assertThisInitialized(self); }\nfunction glasses_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction glasses_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction glasses_getPrototypeOf(o) { glasses_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return glasses_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import {\n//   hideLoadingModelPanel,\n//   showLoadingModelPanel,\n// } from "../utils/loadingModelPanel";\n\n// import {\n//   hideDistanceMessagePanel,\n//   setDistanceMsg,\n//   showDistanceMessagePanel,\n// } from "../utils/distanceMessage";\n\n\n\n\n\n\n\nfunction loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n      assetsCache_addToGlobalCache(file, gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar customShaderMaterial = new three_module/* ShaderMaterial */.BKk({\n  uniforms: {\n    obj1Position: {\n      value: new three_module/* Vector3 */.Pq0()\n    },\n    // Stores obj1\'s world position\n    obj1Radius: {\n      value: 150.0\n    },\n    // obj1\'s radius\n    blendDistance: {\n      value: 50.0\n    } // Distance over which blending occurs\n  },\n  vertexShader: "\\n      varying vec3 vWorldPosition;\\n      void main() {\\n          vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz; // Compute world position of obj2 vertices\\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n      }\\n  ",\n  fragmentShader: "\\n      uniform vec3 obj1Position; // obj1\'s world position\\n      uniform float obj1Radius;  // obj1\'s radius\\n      uniform float blendDistance; // Distance over which transparency should blend\\n      varying vec3 vWorldPosition; // obj2\'s world position\\n\\n      void main() {\\n          // Compute distance from obj2\'s fragment to obj1\'s center\\n          float distanceToObj1 = distance(vWorldPosition, obj1Position);\\n\\n          // If the fragment is within blending range, calculate the transparency factor\\n          float blendFactor = smoothstep(obj1Radius - blendDistance, obj1Radius, distanceToObj1);\\n\\n          // Set the color with blended transparency\\n          gl_FragColor = vec4(1.0, 1.0, 1.0, blendFactor); // Blend opacity\\n      }\\n  ",\n  transparent: true // Enable transparency\n});\nvar Glasses = /*#__PURE__*/function (_StyleFactory) {\n  glasses_inherits(Glasses, _StyleFactory);\n  var _super = glasses_createSuper(Glasses);\n  function Glasses() {\n    glasses_classCallCheck(this, Glasses);\n    return _super.call(this);\n  }\n  glasses_createClass(Glasses, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        opacity: 0\n      });\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.fill;\n      this.nose;\n      this.nosepoint;\n      this.planeMesh;\n      this.imagewidth;\n      this.imageheight;\n      this.planeMesh1;\n      this.planeMesh2;\n      this.planeMesh3;\n      this.planeMesh4;\n      this.planeMesh5;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.is2d = true;\n      if (getIsVideo()) {\n        this.smoothObejct = new LerpingAndFlickerManager(this.root);\n        this.smoothObejct.animate();\n      }\n      this.previousLandmarks = [];\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/glasses/01.gltf");\n      this.localURL2d = ["".concat(PUBLIC_PATH, "/3d/glasses/01_1.png"), "".concat(PUBLIC_PATH, "/3d/glasses/01_2.png"), "".concat(PUBLIC_PATH, "/3d/glasses/01_3.png"), "".concat(PUBLIC_PATH, "/3d/glasses/01_4.png"), "".concat(PUBLIC_PATH, "/3d/glasses/01_5.png"), "".concat(PUBLIC_PATH, "/3d/glasses/01_6.png")];\n      this.URL = ["".concat(PUBLIC_PATH, "/3d/glasses/01.gltf")];\n      //this.loadGlasses();\n\n      this.flickerSmoother = new FlickerSmoother();\n      // this.flickerSmoother.currentvector.y = 1.5;\n      this.filter = 0;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.distanceState = -1;\n      this.prevdistanceState = -1;\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n\n      // let geometry = new THREE.SphereGeometry(100);\n      // let material = new THREE.MeshBasicMaterial({\n      //   color: 0xff0000,\n      //   transparent: true,\n      //   opacity: 0.1,\n      // });\n      // this.obj1 = new THREE.Mesh(geometry, material);\n      // this.obj1.position.set(50, 0, 500);\n      // this.obj1.material.colorWrite = false;\n\n      // let geometry1 = new THREE.SphereGeometry(100);\n      // this.obj2 = new THREE.Mesh(geometry1, customShaderMaterial);\n      // this.scene.add(this.obj1);\n      // this.scene.add(this.obj2);\n\n      // this.obj2.position.set(-50, 0, 500);\n\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = glasses_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // AssetURL = null;\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("glasses");\n                this.glasses = null;\n                this.planeMesh = null;\n                this.scale2d = 200;\n                clearTimeout(this.timeoutId);\n                this.timeoutId = setTimeout(/*#__PURE__*/glasses_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadGlasses(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 13:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "test",\n    value: function test(texture) {\n      // customShaderMaterial.uniforms.obj1Position.value.copy(this.obj1.position);\n    }\n  }, {\n    key: "loadGlasses",\n    value: function () {\n      var _loadGlasses = glasses_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture6, imageTexture5, imageTexture4, imageTexture3, imageTexture2, imageTexture1, imageTexture, width5, height5, material2d5, planeGeometry5, width6, height6, material2d6, planeGeometry6, width1, height1, material2d1, planeGeometry1, width2, height2, material2d2, planeGeometry2, material2d3, planeGeometry3, material2d, planeGeometry, bbox, size, geometry, material, geometryHead, materialHead, geometryEarLeft, materialEarLeft, geometryEarRight, materialEarRight, geometryHair, materialHair, geometrynose, materialnose;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 132;\n                  break;\n                }\n                this.scaleFactor = 5.3;\n                imageTexture6 = null;\n                imageTexture5 = null;\n                imageTexture4 = null;\n                imageTexture3 = null;\n                imageTexture2 = null;\n                imageTexture1 = null;\n                imageTexture = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL[4])) {\n                  _context3.next = 16;\n                  break;\n                }\n                _context3.next = 12;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL[4], resolve);\n                });\n              case 12:\n                imageTexture5 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL[4], imageTexture5);\n                _context3.next = 17;\n                break;\n              case 16:\n                imageTexture5 = assetsCache_getGlobalCacheAsset(this.URL[4]);\n              case 17:\n                width5 = imageTexture5.image.width;\n                height5 = imageTexture5.image.height;\n                imageTexture5.generateMipmaps = false;\n                imageTexture5.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture5.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture5.colorSpace = three_module/* SRGBColorSpace */.er$;\n                material2d5 = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture5,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB,\n                  // Make the material visible from both sides of the plane (if needed)\n                  toneMapped: false\n                });\n                material2d5.depthWrite = false;\n                material2d5.needsUpdate = true;\n                planeGeometry5 = new three_module/* PlaneGeometry */.bdM(-width5 / this.scale2d, height5 / this.scale2d);\n                this.planeMesh4 = new three_module/* Mesh */.eaF(planeGeometry5, material2d5);\n                this.planeMesh4.renderOrder = 2;\n                if (assetsCache_hasGlobalAssetKey(this.URL[5])) {\n                  _context3.next = 36;\n                  break;\n                }\n                _context3.next = 32;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL[5], resolve);\n                });\n              case 32:\n                imageTexture6 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL[5], imageTexture6);\n                _context3.next = 37;\n                break;\n              case 36:\n                imageTexture6 = assetsCache_getGlobalCacheAsset(this.URL[5]);\n              case 37:\n                width6 = imageTexture6.image.width;\n                height6 = imageTexture6.image.height; // imageTexture.minFilter = THREE.LinearFilter;\n                imageTexture6.generateMipmaps = false;\n                imageTexture6.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture6.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture6.colorSpace = three_module/* SRGBColorSpace */.er$;\n                material2d6 = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture6,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB,\n                  // Make the material visible from both sides of the plane (if needed)\n                  toneMapped: false\n                });\n                material2d6.depthWrite = false;\n                material2d6.needsUpdate = true;\n                planeGeometry6 = new three_module/* PlaneGeometry */.bdM(width6 / this.scale2d, height6 / this.scale2d);\n                this.planeMesh5 = new three_module/* Mesh */.eaF(planeGeometry6, material2d6);\n                this.planeMesh5.renderOrder = 2;\n                if (assetsCache_hasGlobalAssetKey(this.URL[2])) {\n                  _context3.next = 56;\n                  break;\n                }\n                _context3.next = 52;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL[2], resolve);\n                });\n              case 52:\n                imageTexture1 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL[2], imageTexture1);\n                _context3.next = 57;\n                break;\n              case 56:\n                imageTexture1 = assetsCache_getGlobalCacheAsset(this.URL[2]);\n              case 57:\n                width1 = imageTexture1.image.width;\n                height1 = imageTexture1.image.height;\n                imageTexture1.generateMipmaps = false;\n                imageTexture1.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture1.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture1.colorSpace = three_module/* SRGBColorSpace */.er$;\n                material2d1 = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture1,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB,\n                  // Make the material visible from both sides of the plane (if needed)\n                  toneMapped: false\n                });\n                material2d1.depthWrite = false;\n                material2d1.needsUpdate = true;\n                planeGeometry1 = new three_module/* PlaneGeometry */.bdM(-width1 / this.scale2d, height1 / this.scale2d);\n                if (assetsCache_hasGlobalAssetKey(this.URL[3])) {\n                  _context3.next = 74;\n                  break;\n                }\n                _context3.next = 70;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL[3], resolve);\n                });\n              case 70:\n                imageTexture2 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL[3], imageTexture2);\n                _context3.next = 75;\n                break;\n              case 74:\n                imageTexture2 = assetsCache_getGlobalCacheAsset(this.URL[3]);\n              case 75:\n                width2 = imageTexture2.image.width;\n                height2 = imageTexture2.image.height;\n                imageTexture2.generateMipmaps = false;\n                imageTexture2.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture2.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture2.colorSpace = three_module/* SRGBColorSpace */.er$;\n                material2d2 = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture2,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB,\n                  // Make the material visible from both sides of the plane (if needed)\n                  toneMapped: false\n                });\n                material2d2.depthWrite = false;\n                material2d2.needsUpdate = true;\n                planeGeometry2 = new three_module/* PlaneGeometry */.bdM(width2 / this.scale2d, height2 / this.scale2d);\n                this.planeMesh1 = new three_module/* Mesh */.eaF(planeGeometry1, material2d1);\n                this.planeMesh1.renderOrder = 2;\n                this.planeMesh2 = new three_module/* Mesh */.eaF(planeGeometry2, material2d2);\n                this.planeMesh2.renderOrder = 2;\n                if (assetsCache_hasGlobalAssetKey(this.URL[0])) {\n                  _context3.next = 96;\n                  break;\n                }\n                _context3.next = 92;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL[0], resolve);\n                });\n              case 92:\n                imageTexture3 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL[0], imageTexture3);\n                _context3.next = 97;\n                break;\n              case 96:\n                imageTexture3 = assetsCache_getGlobalCacheAsset(this.URL[0]);\n              case 97:\n                imageTexture3.generateMipmaps = false;\n                imageTexture3.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture3.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture3.colorSpace = three_module/* SRGBColorSpace */.er$;\n                this.imagewidth3 = imageTexture3.image.width;\n                this.imageheight3 = imageTexture3.image.height;\n                material2d3 = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture3,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB,\n                  // Make the material visible from both sides of the plane (if needed)\n                  toneMapped: false\n                });\n                material2d3.metalness = 1;\n                material2d3.envMapIntensity = 1;\n                material2d3.needsUpdate = true;\n                planeGeometry3 = new three_module/* PlaneGeometry */.bdM(this.imagewidth3 / this.scale2d, this.imageheight3 / this.scale2d, this.imagewidth3 / this.scale2d);\n                this.planeMesh3 = new three_module/* Mesh */.eaF(planeGeometry3, material2d3);\n                this.planeMesh3.renderOrder = 2;\n                if (assetsCache_hasGlobalAssetKey(this.URL[1])) {\n                  _context3.next = 117;\n                  break;\n                }\n                _context3.next = 113;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL[1], resolve);\n                });\n              case 113:\n                imageTexture = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL[1], imageTexture);\n                _context3.next = 118;\n                break;\n              case 117:\n                imageTexture = assetsCache_getGlobalCacheAsset(this.URL[1]);\n              case 118:\n                imageTexture.generateMipmaps = false;\n                imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n                this.imagewidth = imageTexture.image.width;\n                this.imageheight = imageTexture.image.height;\n                material2d = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB,\n                  // Make the material visible from both sides of the plane (if needed)\n                  toneMapped: false\n                });\n                material2d.needsUpdate = true;\n                planeGeometry = new three_module/* PlaneGeometry */.bdM(this.imagewidth / this.scale2d, this.imageheight / this.scale2d, this.imagewidth / this.scale2d);\n                this.planeMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n                this.planeMesh.renderOrder = 2;\n                this.planeMesh.name = "glasses";\n                _context3.next = 144;\n                break;\n              case 132:\n                if (assetsCache_hasGlobalAssetKey(this.URL[0])) {\n                  _context3.next = 138;\n                  break;\n                }\n                _context3.next = 135;\n                return loadModel(this.URL[0]);\n              case 135:\n                this.glasses = _context3.sent;\n                _context3.next = 139;\n                break;\n              case 138:\n                this.glasses = assetsCache_getGlobalCacheAsset(this.URL[0]);\n              case 139:\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.glasses);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = 5.4;\n                this.glasses.name = "glasses";\n                this.glasses.traverse(function (child) {\n                  if (child.isMesh) {\n                    child.renderOrder = 2;\n                  }\n                });\n\n                // this.fill.material.colorWrite = false;\n              case 144:\n                geometry = new three_module/* SphereGeometry */.Gu$(0.1);\n                material = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0xff0000,\n                  colorWrite: false\n                });\n                this.fill = new three_module/* Mesh */.eaF(geometry, material);\n                this.fill.renderOrder = 1;\n                geometryHead = new three_module/* CapsuleGeometry */.qU7(2.9, 1.5, 4, 16);\n                materialHead = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0xff0000,\n                  colorWrite: false\n                });\n                this.head = new three_module/* Mesh */.eaF(geometryHead, materialHead);\n                this.head.renderOrder = 1;\n                geometryEarLeft = new three_module/* SphereGeometry */.Gu$(1);\n                materialEarLeft = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0x00ff00,\n                  colorWrite: false\n                });\n                this.earLeft = new three_module/* Mesh */.eaF(geometryEarLeft, materialEarLeft);\n                this.earLeft.renderOrder = 1;\n                geometryEarRight = new three_module/* SphereGeometry */.Gu$(1);\n                materialEarRight = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0x0000ff,\n                  colorWrite: false\n                });\n                this.earRight = new three_module/* Mesh */.eaF(geometryEarRight, materialEarRight);\n                this.earRight.renderOrder = 1;\n                geometryHair = new three_module/* SphereGeometry */.Gu$(1);\n                materialHair = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0x0000ff,\n                  colorWrite: false\n                });\n                this.hair = new three_module/* Mesh */.eaF(geometryHair, materialHair);\n                this.hair.renderOrder = 1;\n                geometrynose = new three_module/* CapsuleGeometry */.qU7(0.5, 1.9, 4, 16);\n                materialnose = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0x00ff00,\n                  colorWrite: false\n                });\n                this.nose = new three_module/* Mesh */.eaF(geometrynose, materialnose);\n                this.nose.renderOrder = 1;\n                this.nose.scale.set(0.1, 1, 0.8);\n                this.nose.rotation.set(0.9, 0, 0);\n                this.nose.position.set(-0.15, -0.29, 4.73);\n                this.head.add(this.earLeft);\n                this.head.add(this.earRight);\n                this.head.add(this.hair);\n                this.head.add(this.nose);\n                // this.nose.material.colorWrite = false;\n\n                // let geometrynosepoint = new THREE.SphereGeometry(1.5);\n                // let materialnosepoint = new THREE.MeshBasicMaterial({\n                //   color: 0x00ff00,\n                // });\n                // this.nosepoint = new THREE.Mesh(geometrynosepoint, materialnosepoint);\n                // this.nosepoint.renderOrder = 1;\n                // this.nosepoint.scale.set(1, 1, 0.2);\n\n                // this.nosepoint.position.set(0.45, 0, 0.9);\n                // this.nosepoint.material.colorWrite = false;\n                //this.nose.add(this.nosepoint);\n\n                // if (this.sceneManager.isVideo) {\n                //   this.flickerSmoother.currentvector.y = 1.5;\n                // } else {\n                //   this.flickerSmoother.currentvector.y = 10;\n                // }\n                hideLoadingModelPanel();\n                emitSKUApplied();\n              case 177:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadGlasses(_x3) {\n        return _loadGlasses.apply(this, arguments);\n      }\n      return loadGlasses;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateGlasses",\n    value: function updateGlasses() {\n      // Points for reference\n      // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n\n      // if (this.filter < this.flickerSmoother.currentvector.x) {\n      //   this.filter += 1;\n      //   return;\n      // }\n      // this.filter = 0;\n      if (!this.landmarks) return;\n      var distanceOffset = 0;\n      if (this.sceneManager) {\n        this.flickerSmoother.params.floatValue = 1;\n        if (getIsVideo()) {\n          distanceOffset = 0.4;\n        } else {\n          distanceOffset = 0;\n        }\n      }\n      if (this.sceneManager.shouldForceHideTryons()) {\n        this.calculateDistance(scaleLandmark(this.landmarks[300], this.width, this.height).x, scaleLandmark(this.landmarks[70], this.width, this.height).x);\n      } else {\n        this.distanceState = -1;\n        this.prevdistanceState = -1;\n      }\n      var smoothedLandkmarks = null;\n      // if (!this.previousLandmarks.length) {\n      //   this.previousLandmarks = this.landmarks;\n      //   smoothedLandkmarks = this.landmarks;\n      // } else {\n      //   smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n      // }\n\n      smoothedLandkmarks = this.landmarks;\n      var midEyes = scaleLandmark(smoothedLandkmarks[168], this.width, this.height);\n      var midEyes5 = scaleLandmark(smoothedLandkmarks[197], this.width, this.height);\n      var rightEyeInnerCorner5 = scaleLandmark(smoothedLandkmarks[196], this.width, this.height);\n      var noseBottom5 = scaleLandmark(smoothedLandkmarks[195], this.width, this.height);\n\n      // These points seem appropriate 446, 265, 372, 264\n      var leftEyeUpper1 = scaleLandmark(smoothedLandkmarks[264], this.width, this.height);\n      // These points seem appropriate 226, 35, 143, 34\n      var rightEyeUpper1 = scaleLandmark(smoothedLandkmarks[34], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes5.x, midEyes5.y, midEyes5.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n        if (!this.is2d && this.glasses || this.is2d && this.planeMesh) {\n          if (this.sceneManager.shouldForceHideTryons()) {\n            this.hide();\n          } else {\n            this.show();\n          }\n\n          // let tempbase = new THREE.Vector3(midEyes5.x, midEyes5.y, midEyes5.z);\n          // let tempmid1 = new THREE.Vector3(rightEyeInnerCorner5.x, rightEyeInnerCorner5.y, rightEyeInnerCorner5.z);\n          // let tempmid2 = new THREE.Vector3(noseBottom5.x, noseBottom5.y, noseBottom5.z);\n\n          // midEyes5 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          // rightEyeInnerCorner5 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          // noseBottom5 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n\n          // this.prevbase = tempbase;\n          // this.prevmid = tempmid1;\n          // this.prevmid2 = tempmid2;\n\n          var eyeDist = Math.sqrt(Math.pow(leftEyeUpper1.x - rightEyeUpper1.x, 2) + Math.pow(leftEyeUpper1.y - rightEyeUpper1.y, 2) + Math.pow(leftEyeUpper1.z - rightEyeUpper1.z, 2));\n          var scale = eyeDist / this.scaleFactor * getScaleSliderValue();\n          // this.root.scale.set(scale, scale, scale);\n\n          var targetPosition = new three_module/* Vector3 */.Pq0(midEyes.x + 1.5 / scale + getXSliderValue() * 0.7 * scale, midEyes.y - getYSliderValue() * 0.7 * scale, midEyes.z);\n          // this.root.position.set(\n          //   midEyes.x + 1.5 / scale + getXSliderValue() * 0.7 * scale,\n          //   midEyes.y - getYSliderValue() * 0.7 * scale,\n          //   midEyes.z\n          // );\n\n          var forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(noseBottom5, midEyes5);\n          var rightDirection = new three_module/* Vector3 */.Pq0().subVectors(rightEyeInnerCorner5, midEyes5);\n          var upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          var quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          // if (rightDirection.z < -8 || rightDirection.z > 4) {\n          //   let temp = quaternion.clone();\n\n          //   quaternion = new THREE.Quaternion(\n          //     temp.x - 0.1,\n          //     temp.y + 0.05,\n          //     temp.z,\n          //     temp.w\n          //   );\n\n          //   console.log("after", temp, quaternion);\n          // }\n\n          // const euler = new THREE.Euler().setFromQuaternion(quaternion, "XYZ");\n\n          // const xDegrees = THREE.MathUtils.radToDeg(euler.x);\n          // const yDegrees = THREE.MathUtils.radToDeg(euler.y);\n          // const zDegrees = THREE.MathUtils.radToDeg(euler.z);\n          // quaternion.setFromEuler(euler);\n          //TODO ROTATION IS THE ISSUE\n\n          if (getIsVideo() && this.smoothObejct != null) {\n            this.smoothObejct.setTargetScale(scale);\n            this.smoothObejct.setTargetPosition(targetPosition);\n            this.smoothObejct.setTargetRotation(quaternion);\n          } else {\n            this.root.position.copy(targetPosition);\n            this.root.quaternion.copy(quaternion);\n            var scaleVector = new three_module/* Vector3 */.Pq0(scale, scale, scale);\n            this.root.scale.copy(scaleVector);\n          }\n\n          // if (rightDirection.z < -12 || rightDirection.z > 8) {\n          //   setAlignMsg("Turn on your camera and keep your face align to it.");\n          //   setAlignIcon("face");\n          //   showAlignMessagePanel();\n\n          //   if (!this.is2d) this.glasses.visible = false;\n          //   else this.planeMesh.visible = false;\n          // } else {\n          hideAlignMessagePanel();\n          if (!this.is2d) this.glasses.visible = true;else this.planeMesh.visible = true;\n          // }\n\n          if (this.is2d) {\n            this.planeMesh.position.set(0.02, 0.15, 0.4);\n            this.planeMesh.rotation.set(0.85, -0.26, 2.92);\n            this.planeMesh1.rotation.set(0, -1.56, 0);\n            this.planeMesh1.position.set(2.75, 0, -2.81);\n            this.planeMesh2.position.set(-2.72, 0, -2.8);\n            this.planeMesh2.rotation.set(0, -1.6, 0);\n            this.planeMesh4.rotation.set(0, -1.56, 0);\n            this.planeMesh4.position.set(2.74, 0, -2.81);\n            this.planeMesh5.position.set(-2.71, 0, -2.8);\n            this.planeMesh5.rotation.set(0, -1.6, 0);\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          this.previousLandmarks = smoothedLandkmarks;\n          this.PrevScale = getScaleSliderValue();\n          this.PrevXValue = getXSliderValue();\n          this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "addGlasses",\n    value: function addGlasses() {\n      if (this.planeMesh) {\n        this.scene.add(this.root);\n        this.root.add(this.planeMesh);\n        this.planeMesh.add(this.planeMesh1);\n        this.planeMesh.add(this.planeMesh2);\n        this.planeMesh.add(this.planeMesh3);\n        this.planeMesh.add(this.planeMesh4);\n        this.planeMesh.add(this.planeMesh5);\n        this.root.position.set(0, 0, -999);\n      }\n      if (this.glasses) {\n        this.scene.add(this.fill);\n        this.scene.add(this.root);\n        this.root.add(this.glasses);\n        this.root.add(this.head);\n        this.glasses.rotation.set(0.84, -0.25, 2.93);\n        this.head.position.set(1.2, 3.7, -2.3);\n        this.head.rotation.set(0.8, -0.2, -0.2);\n        this.head.scale.set(1, 1, 1);\n        this.earLeft.scale.set(0.05, 1.5, 1);\n        this.earLeft.position.set(-3, -0.2, -0.5);\n        this.earLeft.rotation.set(-1, 0.3, 0);\n        this.earRight.scale.set(0.05, 1.5, 1);\n        this.earRight.position.set(2.9, -0.2, -0.5);\n        this.earRight.rotation.set(-1, -0.3, 0);\n        this.hair.scale.set(4, 1, 3.8);\n        this.hair.position.set(0, -2, 0);\n        this.hair.rotation.set(0, 0, 0);\n      }\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      //console.log("removing");\n      if (this.is2d) {\n        //console.log("removing 2d");\n        if (this.planeMesh) {\n          // console.log(this.planeMesh.children.length);\n          this.planeMesh.remove(this.planeMesh1);\n          this.planeMesh.remove(this.planeMesh2);\n          this.planeMesh.remove(this.planeMesh3);\n          this.planeMesh.remove(this.planeMesh4);\n          this.planeMesh.remove(this.planeMesh5);\n          //console.log("removing root");\n\n          this.root.remove(this.planeMesh);\n          this.scene.remove(this.root);\n        }\n      } else {\n        if (this.glasses) {\n          while (this.root.children.length > 0) {\n            this.root.remove(this.root.children[0]);\n          }\n          this.scene.remove(this.root);\n          this.scene.remove(this.fill);\n        }\n      }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.root) {\n        this.root.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.root) {\n        this.root.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("glasses");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateGlasses() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addGlasses();\n            this.updateGlasses();\n          }\n        }\n      }\n    }\n  }, {\n    key: "focalLength",\n    value: function focalLength(depthToFace, eyeToEye, eyeToEyeInPixel) {\n      return eyeToEyeInPixel * depthToFace / eyeToEye;\n    }\n\n    // Function to find distance based on focal length, eye-to-eye in pixels, and width calculated\n  }, {\n    key: "distanceFinder",\n    value: function distanceFinder(focalLength, eyeToEyeInPixel, widthCalculated) {\n      var distance = eyeToEyeInPixel * focalLength / widthCalculated;\n      return distance - 6;\n    }\n\n    // Function to categorize depth based on distance\n  }, {\n    key: "categorizeDepth",\n    value: function categorizeDepth(distance) {\n      var smallThreshold = 70;\n      var mediumThreshold = 110;\n      var msg = null;\n      if (distance < smallThreshold) {\n        this.distanceState = 0;\n        msg = "TOO_CLOSE";\n      } else if (distance > mediumThreshold) {\n        this.distanceState = 1;\n        msg = "TOO_FAR";\n      } else {\n        this.distanceState = 2;\n        msg = "PERFECT";\n      }\n      if (this.distanceState !== this.prevdistanceState) {\n        if (msg) {\n          (0,event_namespaceObject.emitRecognizationDistanceAlert)(msg);\n        }\n        this.prevdistanceState = this.distanceState;\n      }\n      return distance > smallThreshold && distance < mediumThreshold ? false : true;\n    }\n  }, {\n    key: "calculateDistance",\n    value: function calculateDistance(lefteye, righteyes) {\n      var eyeToEye = 13.0;\n      var depthToFace = 48.0;\n      var eyeToEyeInPixel = 384.5;\n\n      // Calculate focal length\n      var calculatedFocalLength = this.focalLength(depthToFace, eyeToEye, eyeToEyeInPixel);\n\n      // Calculate eye measurement (assuming x_300 and x_70 are defined)\n      var x_300 = lefteye;\n      var x_70 = righteyes;\n      var eyeMeasurement = Math.abs(x_300 - x_70);\n\n      // Calculate distance\n      var calculatedDistance = this.distanceFinder(calculatedFocalLength, eyeToEye, eyeMeasurement);\n\n      // Categorize depth based on distance\n      var categorizedDepth = this.categorizeDepth(calculatedDistance);\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }]);\n  return Glasses;\n}(StyleFactory);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.constructor.js\nvar es6_number_constructor = __webpack_require__(4509);\n;// CONCATENATED MODULE: ./src/virtualTryOns/watch.js\nfunction watch_typeof(obj) { "@babel/helpers - typeof"; return watch_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, watch_typeof(obj); }\n\nfunction watch_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction watch_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { watch_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { watch_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction watch_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction watch_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction watch_createClass(Constructor, protoProps, staticProps) { if (protoProps) watch_defineProperties(Constructor.prototype, protoProps); if (staticProps) watch_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction watch_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) watch_setPrototypeOf(subClass, superClass); }\nfunction watch_setPrototypeOf(o, p) { watch_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return watch_setPrototypeOf(o, p); }\nfunction watch_createSuper(Derived) { var hasNativeReflectConstruct = watch_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = watch_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = watch_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return watch_possibleConstructorReturn(this, result); }; }\nfunction watch_possibleConstructorReturn(self, call) { if (call && (watch_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return watch_assertThisInitialized(self); }\nfunction watch_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction watch_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction watch_getPrototypeOf(o) { watch_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return watch_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import {\n//   hideLoadingModelPanel,\n//   showLoadingModelPanel,\n// } from "../utils/loadingModelPanel";\n\n\n\n\n\n\n\nfunction watch_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n      assetsCache_addToGlobalCache(file, gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Watch = /*#__PURE__*/function (_StyleFactory) {\n  watch_inherits(Watch, _StyleFactory);\n  var _super = watch_createSuper(Watch);\n  function Watch() {\n    watch_classCallCheck(this, Watch);\n    return _super.call(this);\n  }\n  watch_createClass(Watch, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.handedness = null;\n      this.flickerSmoother = new FlickerSmoother();\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/watches/01.glb");\n      this.localURL2d = "".concat(PUBLIC_PATH, "/3d/watches/01.png");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/watches/01.glb");\n      this.geometry = new three_module/* SphereGeometry */.Gu$(5); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        // Enable transparency\n        opacity: 0 // Set the opacity level (0.0 - fully transparent, 1.0 - fully opaque)\n      });\n      this.root;\n      this.fill;\n      this.refobj;\n      this.spheres = [];\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.refobj = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.refobj.position.set(1, 1, 1);\n      this.filter = 0.0;\n      this.Prevlandmark;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.SpriteMesh = null;\n      this.Posetest1 = null;\n      this.imageWidth = null;\n      this.imageHeight = null;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.is2d = true;\n\n      //const gui = new GUI();\n\n      // this.currentvector = new THREE.Vector3(0.1, 0.1, 1);\n      // const vectorFolder2 = gui.addFolder(\'Vector Controls\');\n      // vectorFolder2.add(this.currentvector, \'x\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'y\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'z\', -Math.PI, Math.PI).step(0.001);\n\n      // // Add a controller to the GUI\n      // const smooth = gui.add(this.flickerSmoother.params, \'floatValue\', -1, 1).step(0.001);\n\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = watch_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //AssetURL = null;\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("watch");\n                this.Posetest = null;\n                this.SpriteMesh = null;\n                this.filter = Number.MAX_VALUE;\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/watch_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadPosetest(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 13:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadPosetest",\n    value: function () {\n      var _loadPosetest = watch_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture, material2d, planeGeometry, bbox, size, radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, cylinderGeometry, material;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 30;\n                  break;\n                }\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                imageTexture = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 9;\n                  break;\n                }\n                _context3.next = 5;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL, resolve);\n                });\n              case 5:\n                imageTexture = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL, imageTexture);\n                _context3.next = 10;\n                break;\n              case 9:\n                imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n              case 10:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                this.scaleFactor = 0.0385;\n                imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n                imageTexture.needsUpdate = true;\n                //imageTexture.generateMipmaps = false;\n                this.imageWidth = imageTexture.image.width;\n                this.imageHeight = imageTexture.image.height;\n                material2d = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n                });\n                material2d.metalness = 1;\n                material2d.envMapIntensity = 1;\n                material2d.needsUpdate = true;\n                material2d.toneMapped = false;\n                planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n                this.SpriteMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n                this.SpriteMesh.renderOrder = 2;\n                this.SpriteMesh.name = "Posetest";\n                _context3.next = 58;\n                break;\n              case 30:\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.Posetest = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 37;\n                  break;\n                }\n                _context3.next = 34;\n                return watch_loadModel(this.URL);\n              case 34:\n                this.Posetest = _context3.sent;\n                _context3.next = 38;\n                break;\n              case 37:\n                this.Posetest = assetsCache_getGlobalCacheAsset(this.URL);\n              case 38:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Posetest);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = 0.0385;\n                this.Posetest.name = "Posetest";\n                this.Posetest.traverse(function (child) {\n                  if (child.isMesh) {\n                    // Check if the material has metallicness property\n                    if (child.material) {\n                      // if (child.material.metalness > 1) child.material.metalness = 1;\n                      //child.material.envMapIntensity = 1;\n                      child.renderOrder = 2;\n                    }\n                  }\n                });\n                radiusTop = 0.022; // Adjust the top radius\n                radiusBottom = 0.022; // Adjust the bottom radius\n                height = 0.1; // Adjust the height\n                radialSegments = 16; // Adjust the number of radial segments\n                heightSegments = 1; // Adjust the number of height segments\n                openEnded = false; // Set to true for an open-ended cylinder\n                cylinderGeometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded); // let geometry = new THREE.SphereGeometry(0.03); // Adjust the size of the sphere as needed\n                material = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0xff0000\n                });\n                this.fill = new three_module/* Mesh */.eaF(cylinderGeometry, material);\n                this.fill.renderOrder = 1;\n                this.fill.receiveShadow = true;\n                this.fill.envMapIntensity = 1;\n                this.fill.material.colorWrite = false;\n              case 58:\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 6;\n                } else {\n                  this.flickerSmoother.currentvector.y = 0;\n                }\n              case 59:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadPosetest(_x3) {\n        return _loadPosetest.apply(this, arguments);\n      }\n      return loadPosetest;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks, handedness) {\n      this.landmarks = landmarks;\n      if (handedness.length > 0) this.handedness = handedness[0];\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updatePosetest",\n    value: function updatePosetest() {\n      //this.trackingmsg.style.display = "none";\n      //this.flickerSmoother.currentvector.x = 4;\n      var isVideo;\n      if (this.sceneManager) {\n        if (this.sceneManager.isVideo) {\n          isVideo = this.sceneManager.isVideo;\n          this.flickerSmoother.currentvector.y = 8;\n          this.flickerSmoother.currentvector.x = 0;\n        } else {\n          this.flickerSmoother.currentvector.y = 10;\n          this.flickerSmoother.currentvector.x = 15;\n        }\n      }\n      //this.flickerSmoother.currentvector.z = 5;\n      // if (this.filter < this.flickerSmoother.currentvector.x) {\n      //   this.filter += 1;\n      //   return;\n      // }\n      // this.filter = 0;\n\n      if (!this.landmarks) return;\n\n      // Points for reference\n      // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n      var base = scaleLandmark(this.landmarks[0], this.width, this.height);\n      var base1 = scaleLandmark(this.landmarks[10], this.width, this.height);\n      var indexbase = scaleLandmark(this.landmarks[9], this.width, this.height);\n      var middlebase = scaleLandmark(this.landmarks[13], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > 0 || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n        if (this.Posetest || this.SpriteMesh) {\n          this.show();\n          if (isVideo) {\n            var tempbase = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n            var tempmid1 = new three_module/* Vector3 */.Pq0(indexbase.x, indexbase.y, indexbase.z);\n            var tempmid2 = new three_module/* Vector3 */.Pq0(middlebase.x, middlebase.y, middlebase.z);\n            base = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n            indexbase = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n            middlebase = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n            this.prevbase = tempbase;\n            this.prevmid = tempmid1;\n            this.prevmid2 = tempmid2;\n          }\n          var shoulderDist = Math.sqrt(Math.pow(base.x - indexbase.x, 2) + Math.pow(base.y - indexbase.y, 2) + Math.pow(base.z - indexbase.z, 2));\n          var shoulderDist2 = Math.sqrt(Math.pow(middlebase.x - base.x, 2) + Math.pow(middlebase.y - base.y, 2) + Math.pow(middlebase.z - base.z, 2));\n          if (this.is2d) {\n            shoulderDist = Math.sqrt(Math.pow(base.x - indexbase.x, 2) + Math.pow(base.y - indexbase.y, 2) + 0);\n            shoulderDist2 = Math.sqrt(Math.pow(middlebase.x - base.x, 2) + Math.pow(middlebase.y - base.y, 2) + 0);\n          }\n          var val = base.z - this.refobj.position.z;\n          var val2 = indexbase.z - this.refobj.position.z;\n          var avg2;\n          var avg2offset;\n\n          // if (val > val2)\n          avg2 = (val + val2) / 2;\n          avg2offset = avg2 / 10;\n          // else\n          //   avg2 = ((val + val2) / 2) / 10;\n\n          var avg = (shoulderDist2 + shoulderDist) / 2;\n          var prescale = avg / this.scaleFactor / 130 + avg2offset;\n          var rotThresold = prescale / 1.2;\n          var handRotation = rotThresold;\n          var xdistnace = 0;\n          var ydistnace = 0;\n          var handorientation = indexbase.y - base.y;\n          if (this.is2d) {\n            if (this.handedness[0].categoryName === "Left") {\n              if (handorientation > 0) xdistnace = indexbase.x - middlebase.x;else {\n                xdistnace = middlebase.x - indexbase.x;\n              }\n            } else {\n              if (handorientation > 0) xdistnace = middlebase.x - indexbase.x;else {\n                xdistnace = indexbase.x - middlebase.x;\n              }\n            }\n            ydistnace = indexbase.y - middlebase.y;\n            if (Math.abs(xdistnace) >= Math.abs(ydistnace)) {\n              handRotation = xdistnace;\n            } else {\n              handRotation = ydistnace;\n            }\n            if (handRotation > rotThresold) {\n              handRotation = rotThresold;\n            }\n            if (handRotation < 0) {\n              handRotation = 0;\n            }\n            base.z = 0;\n            indexbase.z = 0;\n            middlebase.z = 0;\n          }\n          var scale;\n          if (this.is2d) {\n            scale = (avg / this.scaleFactor / 130 + avg2offset) * 0.0059 * (handRotation / rotThresold) * getScaleSliderValue();\n            this.root.scale.set(scale, scale, scale);\n            this.root.position.set(base.x + getXSliderValue() * 300 * scale, base.y - getYSliderValue() * 300 * scale, 0);\n          } else {\n            scale = avg / (this.scaleFactor / 0.52) *\n            //(handRotation / rotThresold) *\n            getScaleSliderValue();\n            this.root.scale.set(scale, scale, scale);\n            this.root.position.set(base.x + getXSliderValue() * 0.02 * scale, base.y - getYSliderValue() * 0.02 * scale, base.z);\n          }\n          var forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(indexbase, base);\n          var rightDirection = new three_module/* Vector3 */.Pq0().subVectors(middlebase, base);\n          var upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          var quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          this.root.quaternion.copy(quaternion);\n          if (!this.is2d) {\n            this.fill.position.set(0, 0.0, -0.003);\n            this.fill.rotation.set(0, 0, -1.57);\n            this.fill.scale.set(1.39, 1, 0.86);\n          }\n          if (this.handedness[0].categoryName === "Left") {\n            if (!this.is2d) {\n              this.Posetest.rotation.set(-1.4, 0, -1.55);\n              //this.Posetest1.rotation.set(-1.4, 0, -1.5);\n            } else {\n              this.SpriteMesh.rotation.set(1.57, 0, 0);\n            }\n            if (!this.is2d) {\n              this.Posetest.position.set(0, 0.004, -0.01);\n              //this.Posetest1.position.set(0, 0.004, -0.01);\n            }\n          } else {\n            if (!this.is2d) {\n              this.Posetest.rotation.set(1.4, 0, -1.6);\n              //this.Posetest1.rotation.set(1.4, 0, -1.7);\n            } else {\n              this.SpriteMesh.rotation.set(1.57, 0, 0);\n            }\n            if (!this.is2d) {\n              this.Posetest.position.set(0, -0.004, -0.01);\n              // this.Posetest1.position.set(0, -0.004, -0.01);\n            }\n          }\n          if (this.is2d) {\n            if (this.handedness[0].categoryName === "Left") {\n              this.SpriteMesh.position.set(-20, 0, -250);\n            } else {\n              this.SpriteMesh.position.set(20, 0, -250);\n            }\n          }\n          var forwardDirectionNormalized = new three_module/* Vector3 */.Pq0();\n          forwardDirectionNormalized.copy(forwardDirection).normalize();\n\n          /*if (this.sceneManager.shouldForceHideTryons()) {\n            if (!this.is2d) this.Posetest.visible = false;\n            else this.SpriteMesh.visible = false;\n          } else*/\n          if (forwardDirectionNormalized.z > 0.65 || forwardDirectionNormalized.z < -0.5 || this.is2d && handRotation < 2) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n            // setTrackingMsg("Tracking lost. <br>Point your hand towards camera.");\n            // showTrackingMsg();\n            if (!this.is2d) this.Posetest.visible = false;else this.SpriteMesh.visible = false;\n          } else {\n            hideAlignMessagePanel();\n            if (!this.is2d) this.Posetest.visible = true;else this.SpriteMesh.visible = true;\n          }\n          // if (this.Posetest1) this.Posetest1.visible = false;\n          var s = scale / 1000;\n          if (this.is2d) {\n            this.SpriteMesh.scale.set(this.imageWidth + s, this.imageHeight + s, 1);\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          this.PrevScale = getScaleSliderValue();\n          this.PrevXValue = getXSliderValue();\n          this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "addPosetest",\n    value: function addPosetest() {\n      if (this.is2d) {\n        if (this.SpriteMesh) {\n          this.scene.add(this.root);\n          this.root.add(this.SpriteMesh);\n          this.SpriteMesh.position.set(0, 0, 0);\n        }\n      } else {\n        if (this.Posetest) {\n          this.scene.add(this.root);\n          this.root.add(this.Posetest);\n          // this.root.add(this.Posetest1);\n          // this.root.add(this.SpriteMesh);\n          this.Posetest.add(this.fill);\n\n          // this.Posetest.rotation.set(1.5, 0, -1.57);\n          // this.Posetest.position.set(0, 0.005, -0.01);\n\n          this.fill.position.set(0, 0.0005, -0.001);\n          this.fill.rotation.set(0, 0, -1.57);\n          this.fill.scale.set(1.35, 1, 1);\n        }\n      }\n    }\n  }, {\n    key: "clamp",\n    value: function clamp(num, min, max) {\n      return num <= min ? min : num >= max ? max : num;\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      //if (this.is2d) {\n      if (this.SpriteMesh) {\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        this.scene.remove(this.root);\n      }\n      // } else {\n      if (this.Posetest) {\n        this.Posetest.remove(this.fill);\n        this.root.remove(this.Posetest);\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        //this.root.remove(this.SpriteMesh);\n        this.scene.remove(this.root);\n      }\n      // }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = false;\n      }\n      if (this.Posetest) {\n        this.Posetest.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = true;\n      }\n      if (this.Posetest) {\n        this.Posetest.visible = true;\n      }\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Posetest");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updatePosetest() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addPosetest();\n            this.updatePosetest();\n          }\n        }\n      }\n    }\n  }, {\n    key: "updateMask",\n    value: function updateMask() {}\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }]);\n  return Watch;\n}(StyleFactory);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.int32-array.js\nvar es6_typed_int32_array = __webpack_require__(8066);\n;// CONCATENATED MODULE: ./src/MLModelProviders/hand_landmarks_helpers.js\nfunction hand_landmarks_helpers_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction hand_landmarks_helpers_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? hand_landmarks_helpers_ownKeys(Object(source), !0).forEach(function (key) { hand_landmarks_helpers_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : hand_landmarks_helpers_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction hand_landmarks_helpers_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n//import { FACE_MESH_INDEX_BUFFER, FACE_MESH_UV } from "./face_geom.js";\n\n/**\n * Mediapipe uses different convention for axis\n * than three js. This function adapts mediapipe\n * landmarks for three js.\n * @param {*} landmarks\n */\nvar hand_landmarks_helpers_transformLandmarks = function transformLandmarks(landmarks) {\n  // console.log(landmarks);\n  if (!landmarks) {\n    return landmarks;\n  }\n  var hasVisiblity = !!landmarks.find(function (l) {\n    return l.visibility;\n  });\n  var minZ = 1e-4;\n\n  //console.log(hasVisiblity);\n  // currently mediapipe facemesh js\n  // has visibility set to undefined\n  // so we use a heuristic to set z position of facemesh\n  if (hasVisiblity) {\n    landmarks.forEach(function (landmark) {\n      var z = landmark.z,\n        visibility = landmark.visibility;\n      z = -z;\n      if (z < minZ && visibility) {\n        minZ = z;\n      }\n    });\n  } else {\n    if (landmarks && landmarks[5] !== undefined && landmarks[5].z !== undefined) minZ = Math.max(-landmarks[5].z, -landmarks[17].z);\n  }\n  return landmarks.map(function (landmark) {\n    var x = landmark.x,\n      y = landmark.y,\n      z = landmark.z;\n    return {\n      x: -0.5 + x,\n      y: 0.5 - y,\n      z: -z - minZ,\n      visibility: landmark.visibility\n    };\n  });\n};\n\n/**\n * Scales landmark by width and height\n * @param {*} landmark\n * @param {*} width\n * @param {*} height\n */\nvar hand_landmarks_helpers_scaleLandmark = function scaleLandmark(landmark, width, height) {\n  if (landmark) {\n    var x = landmark.x,\n      y = landmark.y,\n      z = landmark.z;\n    return hand_landmarks_helpers_objectSpread(hand_landmarks_helpers_objectSpread({}, landmark), {}, {\n      x: x * width,\n      y: y * height,\n      z: z * width\n    });\n  } else {\n    // Handle the case where \'landmark\' is undefined by returning default values\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    }; // Adjust default values as needed\n  }\n};\n\n/**\n * makes buffer geometry from facemesh landmarks\n * @param {*} landmarks\n */\nvar hand_landmarks_helpers_makeGeometry = function makeGeometry(landmarks) {\n  // const { x, y, z } = landmarks; // Extract the X, Y, Z coordinates of the pose landmark\n  // // Create a Three.js object to represent the pose landmark (e.g., a sphere)\n  // const geometry = new THREE.SphereGeometry(0.05); // Adjust the size of the sphere as needed\n  // const material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Adjust the color as needed\n  // const sphere = new THREE.Mesh(geometry, material);\n  // // Set the position of the sphere based on the pose landmark coordinates\n  // sphere.position.set(x, y, z);\n  // // Add the sphere to the Three.js scene\n  // scene.add(sphere);\n  //return geometry;\n};\n// EXTERNAL MODULE: ./node_modules/three.meshline/src/THREE.MeshLine.js\nvar THREE_MeshLine = __webpack_require__(9304);\n;// CONCATENATED MODULE: ./src/virtualTryOns/Ring.js\n\nfunction Ring_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction Ring_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Ring_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Ring_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction Ring_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Ring_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction Ring_createClass(Constructor, protoProps, staticProps) { if (protoProps) Ring_defineProperties(Constructor.prototype, protoProps); if (staticProps) Ring_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction Ring_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n      assetsCache_addToGlobalCache(file, gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Ring = /*#__PURE__*/function () {\n  function Ring() {\n    Ring_classCallCheck(this, Ring);\n  }\n  Ring_createClass(Ring, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.handedness = null;\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/rings/01.png");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/rings/01.png");\n      this.sceneManager = sceneManager;\n      //this.loadRing();\n\n      this.geometry = new three_module/* SphereGeometry */.Gu$(0.001); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        opacity: 0 // Set opacity to 0 (completely transparent)\n      });\n      this.root;\n      this.fill;\n      this.SpriteMesh = null;\n      this.imageWidth = null;\n      this.imageHeight = null;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.is2d = true;\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.flickerSmoother = new FlickerSmoother();\n      this.flickerSmoother.currentvector.y = 3;\n      this.filter = 0;\n      this.Prevlandmark;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.geom = new three_module/* BufferGeometry */.LoY();\n      this.linemesh;\n      this.ringFing = new Int32Array([17, 18, 19, 20]);\n      this.line = new THREE_MeshLine.MeshLine();\n      this.timeoutId;\n      this.fingerIndex = 2;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = Ring_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // AssetURL = null;\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("ring");\n\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n                this.SpriteMesh = null;\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/Ring_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadRing(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 11:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadRing",\n    value: function () {\n      var _loadRing = Ring_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture, material2d, planeGeometry, bbox, size, radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, cylinderGeometry, material, linemat;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 30;\n                  break;\n                }\n                imageTexture = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 9;\n                  break;\n                }\n                _context3.next = 5;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL, resolve);\n                });\n              case 5:\n                imageTexture = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL, imageTexture);\n                _context3.next = 10;\n                break;\n              case 9:\n                imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n              case 10:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                this.scaleFactor = 0.041;\n                imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n                imageTexture.needsUpdate = true;\n                //imageTexture.generateMipmaps = false;\n                this.imageWidth = imageTexture.image.width;\n                this.imageHeight = imageTexture.image.height;\n                material2d = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n                });\n                material2d.metalness = 1;\n                material2d.envMapIntensity = 1;\n                material2d.needsUpdate = true;\n                material2d.toneMapped = false;\n                planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n                this.SpriteMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n                this.SpriteMesh.renderOrder = 2;\n                this.SpriteMesh.name = "Ring";\n                _context3.next = 61;\n                break;\n              case 30:\n                if (AssetURL) this.URL = AssetURL;else this.URL = this.localURL;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 37;\n                  break;\n                }\n                _context3.next = 34;\n                return Ring_loadModel(this.URL);\n              case 34:\n                this.Ring = _context3.sent;\n                _context3.next = 38;\n                break;\n              case 37:\n                this.Ring = assetsCache_getGlobalCacheAsset(this.URL);\n              case 38:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Ring);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = 0.041;\n                this.Ring.name = "Ring";\n                this.Ring.traverse(function (child) {\n                  if (child.isMesh) {\n                    if (child.material.metalness > 1) child.material.metalness = 1;\n                    child.material.envMapIntensity = 1;\n                    child.renderOrder = 3;\n                  }\n                });\n                radiusTop = 0.029; // Adjust the top radius\n                radiusBottom = 0.029; // Adjust the bottom radius\n                height = 0.1; // Adjust the height\n                radialSegments = 16; // Adjust the number of radial segments\n                heightSegments = 1; // Adjust the number of height segments\n                openEnded = false; // Set to true for an open-ended cylinder\n                cylinderGeometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded); // let geometry = new THREE.SphereGeometry(0.03); // Adjust the size of the sphere as needed\n                material = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0xff0000\n                });\n                this.fill = new three_module/* Mesh */.eaF(cylinderGeometry, material);\n                this.fill.renderOrder = 2;\n                this.fill.material.colorWrite = false;\n\n                // this.line.setPoints(vertices);\n                linemat = new THREE_MeshLine.MeshLineMaterial({\n                  color: 0xff0000,\n                  // Line color\n                  lineWidth: 30 // Line thickness\n                });\n                this.linemesh = new three_module/* Mesh */.eaF(this.line.geometry, linemat);\n                // Scale the line as needed\n                this.linemesh.scale.set(this.width, this.height, this.width);\n                this.linemesh.renderOrder = 1;\n                this.linemesh.material.colorWrite = false;\n              case 61:\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 5;\n                } else {\n                  this.flickerSmoother.currentvector.y = 10;\n                }\n              case 62:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadRing(_x3) {\n        return _loadRing.apply(this, arguments);\n      }\n      return loadRing;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks, handedness) {\n      this.landmarks = landmarks;\n      if (handedness.length > 0) this.handedness = handedness[0];\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateRing",\n    value: function updateRing() {\n      // if (this.filter < this.flickerSmoother.currentvector.x) {\n      //   this.filter += 1;\n      //   return;\n      // }\n      // this.filter = 0;\n\n      if (!this.landmarks) return;\n      if (this.sceneManager) {\n        if (this.sceneManager.isVideo) {\n          this.flickerSmoother.currentvector.y = 5;\n        } else {\n          this.flickerSmoother.currentvector.y = 0;\n        }\n      }\n      this.fingerIndex = getRingIndex();\n      var base = hand_landmarks_helpers_scaleLandmark(this.landmarks[fingerConfig[this.fingerIndex].base], this.width, this.height);\n      var indexbase = hand_landmarks_helpers_scaleLandmark(this.landmarks[fingerConfig[this.fingerIndex].index], this.width, this.height);\n      var middlebase = hand_landmarks_helpers_scaleLandmark(this.landmarks[fingerConfig[this.fingerIndex].middle], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > this.flickerSmoother.currentvector.y || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n        if (this.Ring || this.SpriteMesh) {\n          this.show();\n          var tempbase = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n          var tempmid1 = new three_module/* Vector3 */.Pq0(indexbase.x, indexbase.y, indexbase.z);\n          var tempmid2 = new three_module/* Vector3 */.Pq0(middlebase.x, middlebase.y, middlebase.z);\n          base = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          indexbase = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          middlebase = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n          this.prevbase = tempbase;\n          this.prevmid = tempmid1;\n          this.prevmid2 = tempmid2;\n          var shoulderDist = Math.sqrt(Math.pow(base.x - indexbase.x, 2) + Math.pow(base.y - indexbase.y, 2) + Math.pow(base.z - indexbase.z, 2));\n          var shoulderDist2 = Math.sqrt(Math.pow(middlebase.x - base.x, 2) + Math.pow(middlebase.y - base.y, 2) + Math.pow(middlebase.z - base.z, 2));\n          var avg = (shoulderDist2 + shoulderDist) / 2;\n          var prescale = avg / this.scaleFactor / 3.2;\n          var rotThresold = prescale / 24;\n          var handRotation = rotThresold;\n          var xdistnace = 0;\n          var ydistnace = 0;\n          var handorientation = base.y - indexbase.y;\n          if (this.is2d) {\n            if (this.handedness[0].categoryName === "Left") {\n              if (handorientation > 0) xdistnace = indexbase.x - middlebase.x;else {\n                xdistnace = middlebase.x - indexbase.x;\n              }\n            } else {\n              if (handorientation > 0) xdistnace = middlebase.x - indexbase.x;else {\n                xdistnace = indexbase.x - middlebase.x;\n              }\n            }\n            ydistnace = indexbase.y - middlebase.y;\n            if (Math.abs(xdistnace) >= Math.abs(ydistnace)) {\n              handRotation = xdistnace;\n            } else {\n              handRotation = ydistnace;\n            }\n            if (handRotation > rotThresold) {\n              handRotation = rotThresold;\n            }\n            if (handRotation < 0) {\n              handRotation = 0;\n            }\n            base.z = 0;\n            indexbase.z = 0;\n            middlebase.z = 0;\n          }\n          var scale = avg / this.scaleFactor / 3.2 * 0.00008 * (handRotation / rotThresold) * fingerConfig[this.fingerIndex].scaleAdjust * getScaleSliderValue();\n          var forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(base, indexbase);\n          var rightDirection = new three_module/* Vector3 */.Pq0().subVectors(base, middlebase);\n          var upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          var quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          this.root.quaternion.copy(quaternion);\n          this.root.scale.set(scale, scale, scale);\n          this.root.position.set(base.x + getXSliderValue() * 500 * scale, base.y - getYSliderValue() * 500 * scale, 0);\n          var vertices = [];\n          if (this.is2d) {\n            this.SpriteMesh.rotation.set(1.57, 0, fingerConfig[this.fingerIndex].zRot);\n          }\n          if (!this.is2d) {\n            if (this.handedness[0].categoryName === "Left") {\n              this.Ring.rotation.set(Math.PI / 2, 0, -(Math.PI / 2));\n              // let mappedPosition = this.mapRange(this.root.rotation.z, -Math.PI, Math.PI, 0.001, -0.001);\n              // let mappedPositionx = this.mapRange(this.root.rotation.z, -Math.PI, Math.PI, 0.01, -0.01);\n              // this.Ring.position.set(mappedPositionx, mappedPosition, -0.03);\n\n              if (this.root.rotation.z > Math.PI / 2 || this.root.rotation.z < -(Math.PI / 2)) {\n                if (this.root.rotation.x < 0) {\n                  this.Ring.position.set(-0.005, -0.001, -0.03);\n                  for (var i = 0; i < this.ringFing.length; i++) {\n                    var _this$landmarks$this$ = this.landmarks[this.ringFing[i]],\n                      x = _this$landmarks$this$.x,\n                      y = _this$landmarks$this$.y,\n                      z = _this$landmarks$this$.z;\n                    var vertex = [x, y, z + 1];\n                    vertices.push.apply(vertices, vertex);\n                  }\n                } else {\n                  this.Ring.position.set(0.005, -0.001, -0.03);\n                  for (var _i = 0; _i < this.ringFing.length; _i++) {\n                    var _this$landmarks$this$2 = this.landmarks[this.ringFing[_i]],\n                      _x4 = _this$landmarks$this$2.x,\n                      _y = _this$landmarks$this$2.y,\n                      _z = _this$landmarks$this$2.z;\n                    var _vertex = [_x4, _y, _z - 1];\n                    vertices.push.apply(vertices, _vertex);\n                  }\n                }\n              } else {\n                if (this.root.rotation.x < 0) {\n                  this.Ring.position.set(0.005, 0.001, -0.03);\n                  for (var _i2 = 0; _i2 < this.ringFing.length; _i2++) {\n                    var _this$landmarks$this$3 = this.landmarks[this.ringFing[_i2]],\n                      _x5 = _this$landmarks$this$3.x,\n                      _y2 = _this$landmarks$this$3.y,\n                      _z2 = _this$landmarks$this$3.z;\n                    var _vertex2 = [_x5, _y2, _z2 + 1];\n                    vertices.push.apply(vertices, _vertex2);\n                  }\n                } else {\n                  this.Ring.position.set(-0.005, 0.001, -0.03);\n                  for (var _i3 = 0; _i3 < this.ringFing.length; _i3++) {\n                    var _this$landmarks$this$4 = this.landmarks[this.ringFing[_i3]],\n                      _x6 = _this$landmarks$this$4.x,\n                      _y3 = _this$landmarks$this$4.y,\n                      _z3 = _this$landmarks$this$4.z;\n                    var _vertex3 = [_x6, _y3, _z3 - 1];\n                    vertices.push.apply(vertices, _vertex3);\n                  }\n                }\n              }\n            } else {\n              this.Ring.rotation.set(-(Math.PI / 2), 0, -(Math.PI / 2));\n              if (this.root.rotation.z >= Math.PI / 2 || this.root.rotation.z < -(Math.PI / 2)) {\n                if (this.root.rotation.x < 0) {\n                  this.Ring.position.set(-0.005, -0.001, -0.03);\n                  for (var _i4 = 0; _i4 < this.ringFing.length; _i4++) {\n                    var _this$landmarks$this$5 = this.landmarks[this.ringFing[_i4]],\n                      _x7 = _this$landmarks$this$5.x,\n                      _y4 = _this$landmarks$this$5.y,\n                      _z4 = _this$landmarks$this$5.z;\n                    var _vertex4 = [_x7, _y4, _z4 + 1];\n                    vertices.push.apply(vertices, _vertex4);\n                  }\n                } else {\n                  this.Ring.position.set(0.005, -0.001, -0.03);\n                  for (var _i5 = 0; _i5 < this.ringFing.length; _i5++) {\n                    var _this$landmarks$this$6 = this.landmarks[this.ringFing[_i5]],\n                      _x8 = _this$landmarks$this$6.x,\n                      _y5 = _this$landmarks$this$6.y,\n                      _z5 = _this$landmarks$this$6.z;\n                    var _vertex5 = [_x8, _y5, _z5 - 1];\n                    vertices.push.apply(vertices, _vertex5);\n                  }\n                }\n              } else {\n                if (this.root.rotation.x < 0) {\n                  this.Ring.position.set(0.005, 0.001, -0.03);\n                  for (var _i6 = 0; _i6 < this.ringFing.length; _i6++) {\n                    var _this$landmarks$this$7 = this.landmarks[this.ringFing[_i6]],\n                      _x9 = _this$landmarks$this$7.x,\n                      _y6 = _this$landmarks$this$7.y,\n                      _z6 = _this$landmarks$this$7.z;\n                    var _vertex6 = [_x9, _y6, _z6 + 1];\n                    vertices.push.apply(vertices, _vertex6);\n                  }\n                } else {\n                  this.Ring.position.set(-0.005, 0.001, -0.03);\n                  for (var _i7 = 0; _i7 < this.ringFing.length; _i7++) {\n                    var _this$landmarks$this$8 = this.landmarks[this.ringFing[_i7]],\n                      _x10 = _this$landmarks$this$8.x,\n                      _y7 = _this$landmarks$this$8.y,\n                      _z7 = _this$landmarks$this$8.z;\n                    var _vertex7 = [_x10, _y7, _z7 - 1];\n                    vertices.push.apply(vertices, _vertex7);\n                  }\n                }\n              }\n            }\n            this.fill.position.set(0, 0, 0);\n            this.fill.rotation.set(0, 0, -(Math.PI / 2));\n          } else {\n            if (this.handedness[0].categoryName === "Left") {\n              this.SpriteMesh.position.set(fingerConfig[this.fingerIndex].xPosRight, 0, fingerConfig[this.fingerIndex].zPosRight);\n            } else {\n              this.SpriteMesh.position.set(fingerConfig[this.fingerIndex].xPosLeft, 0, fingerConfig[this.fingerIndex].zPosLeft);\n            }\n          }\n          var forwardDirectionNormalized = new three_module/* Vector3 */.Pq0();\n          forwardDirectionNormalized.copy(forwardDirection).normalize();\n          if (forwardDirectionNormalized.z > 0.65 || forwardDirectionNormalized.z < -0.5 || this.is2d && handRotation < 2) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n            if (!this.is2d) this.Ring.visible = false;else this.SpriteMesh.visible = false;\n          } else {\n            hideAlignMessagePanel();\n            if (!this.is2d) this.Ring.visible = true;else this.SpriteMesh.visible = true;\n          }\n          var s = scale / 1000;\n          if (this.is2d) {\n            this.SpriteMesh.scale.set(this.imageWidth + s, this.imageHeight + s, 1);\n          }\n          if (!this.is2d) this.line.setPoints(vertices, function (p) {\n            return 1 - p / 2;\n          });\n          this.Prevlandmark = tempPrevlandmark;\n          this.PrevScale = getScaleSliderValue();\n          this.PrevXValue = getXSliderValue();\n          this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "mapRange",\n    value: function mapRange(value, fromMin, fromMax, toMin, toMax) {\n      return (value - fromMin) * (toMax - toMin) / (fromMax - fromMin) + toMin;\n    }\n  }, {\n    key: "addRing",\n    value: function addRing() {\n      if (this.is2d) {\n        if (this.SpriteMesh) {\n          this.scene.add(this.root);\n          this.root.add(this.SpriteMesh);\n          this.SpriteMesh.position.set(fingerConfig[this.fingerIndex].xPosLeft, 0, fingerConfig[this.fingerIndex].zPosLeft);\n        }\n      } else {\n        if (this.Ring) {\n          this.scene.add(this.root);\n          this.root.add(this.Ring);\n          this.Ring.add(this.fill);\n          this.scene.add(this.linemesh);\n        }\n      }\n    }\n  }, {\n    key: "clamp",\n    value: function clamp(num, min, max) {\n      return num <= min ? min : num >= max ? max : num;\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      if (this.is2d) {\n        if (this.SpriteMesh) {\n          while (this.root.children.length > 0) {\n            this.root.remove(this.root.children[0]);\n          }\n          this.scene.remove(this.root);\n        }\n      } else {\n        if (this.Ring) {\n          this.Ring.remove(this.fill);\n          while (this.root.children.length > 0) {\n            this.root.remove(this.root.children[0]);\n          }\n          this.scene.remove(this.root);\n          this.scene.remove(this.linemesh);\n        }\n      }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n      // this.SpriteMesh = null;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = false;\n      }\n      if (this.Ring) {\n        this.Ring.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = true;\n      }\n      if (this.Ring) {\n        this.Ring.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Ring");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateRing() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addRing();\n            this.updateRing();\n          }\n        }\n      }\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }, {\n    key: "updateMask",\n    value: function updateMask() {}\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }]);\n  return Ring;\n}();\nvar fingerConfig = [{\n  base: 6,\n  index: 5,\n  middle: 9,\n  zRot: 0,\n  xPosRight: 20,\n  xPosLeft: -20,\n  zPosLeft: -700,\n  zPosRight: -700,\n  scaleAdjust: 1\n}, {\n  base: 10,\n  index: 9,\n  middle: 13,\n  zRot: 0,\n  xPosRight: 0,\n  xPosLeft: -20,\n  zPosLeft: -750,\n  zPosRight: -750,\n  scaleAdjust: 0.98\n}, {\n  base: 14,\n  index: 13,\n  middle: 17,\n  zRot: 0.07,\n  xPosRight: 20,\n  xPosLeft: -20,\n  zPosLeft: -630,\n  zPosRight: -630,\n  scaleAdjust: 1\n}, {\n  base: 18,\n  index: 13,\n  middle: 17,\n  zRot: -0.45,\n  xPosRight: -280,\n  xPosLeft: -350,\n  zPosLeft: -550,\n  zPosRight: -520,\n  scaleAdjust: 1.2\n}];\n;// CONCATENATED MODULE: ./src/virtualTryOns/bracelet.js\nfunction bracelet_typeof(obj) { "@babel/helpers - typeof"; return bracelet_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, bracelet_typeof(obj); }\n\nfunction bracelet_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction bracelet_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { bracelet_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { bracelet_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction bracelet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction bracelet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction bracelet_createClass(Constructor, protoProps, staticProps) { if (protoProps) bracelet_defineProperties(Constructor.prototype, protoProps); if (staticProps) bracelet_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction bracelet_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) bracelet_setPrototypeOf(subClass, superClass); }\nfunction bracelet_setPrototypeOf(o, p) { bracelet_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return bracelet_setPrototypeOf(o, p); }\nfunction bracelet_createSuper(Derived) { var hasNativeReflectConstruct = bracelet_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = bracelet_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = bracelet_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return bracelet_possibleConstructorReturn(this, result); }; }\nfunction bracelet_possibleConstructorReturn(self, call) { if (call && (bracelet_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return bracelet_assertThisInitialized(self); }\nfunction bracelet_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction bracelet_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction bracelet_getPrototypeOf(o) { bracelet_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return bracelet_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction bracelet_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Bracelet = /*#__PURE__*/function (_StyleFactory) {\n  bracelet_inherits(Bracelet, _StyleFactory);\n  var _super = bracelet_createSuper(Bracelet);\n  function Bracelet() {\n    bracelet_classCallCheck(this, Bracelet);\n    return _super.call(this);\n  }\n  bracelet_createClass(Bracelet, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.handedness = null;\n      this.flickerSmoother = new FlickerSmoother();\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/bracelets/01.png");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/bracelets/01.png");\n      // this.worldLandmarks = null;\n      //this.loadBracelet();\n\n      this.geometry = new three_module/* SphereGeometry */.Gu$(5); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        // Enable transparency\n        opacity: 0 // Set the opacity level (0.0 - fully transparent, 1.0 - fully opaque)\n      });\n      // this.material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Adjust the color as needed\n\n      // this.sphere = new THREE.Mesh(this.geometry, this.material);\n      //this.scene.add(this.sphere);\n      this.root;\n      this.fill;\n      this.refobj;\n      this.spheres = [];\n      // for (let i = 0; i < 21; i++) {\n      //   const sphere = new THREE.Mesh(this.geometry, this.material);\n      //   this.scene.add(sphere);\n      //   this.spheres.push(sphere);\n      // }\n\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.refobj = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.refobj.position.set(1, 1, 1);\n\n      // // Set the position of the sphere based on the pose landmark coordinates\n      // sphere.position.set(x, y, z);\n\n      this.filter = 0.0;\n      this.Prevlandmark;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.SpriteMesh = null;\n      this.imageWidth = null;\n      this.imageHeight = null;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.is2d = true;\n\n      //const gui = new GUI();\n\n      // this.currentvector = new THREE.Vector3(0.1, 0.1, 1);\n      // const vectorFolder2 = gui.addFolder(\'Vector Controls\');\n      // vectorFolder2.add(this.currentvector, \'x\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'y\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'z\', -Math.PI, Math.PI).step(0.001);\n\n      // // Add a controller to the GUI\n      // const smooth = gui.add(this.flickerSmoother.params, \'floatValue\', -1, 1).step(0.001);\n\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = bracelet_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //AssetURL = null;\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("bracelet");\n                this.SpriteMesh = null;\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/bracelet_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadBracelet(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 11:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadBracelet",\n    value: function () {\n      var _loadBracelet = bracelet_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture, material2d, planeGeometry, bbox, size, radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, cylinderGeometry, material;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 30;\n                  break;\n                }\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                imageTexture = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 9;\n                  break;\n                }\n                _context3.next = 5;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL, resolve);\n                });\n              case 5:\n                imageTexture = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL, imageTexture);\n                _context3.next = 10;\n                break;\n              case 9:\n                imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n              case 10:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                this.scaleFactor = 0.0371;\n                imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n                imageTexture.needsUpdate = true;\n                //imageTexture.generateMipmaps = false;\n                this.imageWidth = imageTexture.image.width;\n                this.imageHeight = imageTexture.image.height;\n                material2d = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n                });\n                material2d.metalness = 1;\n                material2d.envMapIntensity = 1;\n                material2d.needsUpdate = true;\n                material2d.toneMapped = false;\n                planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n                this.SpriteMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n                this.SpriteMesh.renderOrder = 2;\n                this.SpriteMesh.name = "Bracelet";\n                _context3.next = 54;\n                break;\n              case 30:\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.Bracelet = null;\n                _context3.next = 33;\n                return bracelet_loadModel(this.URL);\n              case 33:\n                this.Bracelet = _context3.sent;\n                hideLoadingModelPanel();\n                emitSKUApplied();\n\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Bracelet);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = 100;\n                this.Bracelet.name = "Bracelet";\n                this.Bracelet.traverse(function (child) {\n                  if (child.isMesh) {\n                    // Check if the material has metallicness property\n                    if (child.material) {\n                      if (child.material.metalness > 1) child.material.metalness = 1;\n                      child.material.envMapIntensity = 1;\n                      child.renderOrder = 2;\n                    }\n                  }\n                });\n                radiusTop = 0.023; // Adjust the top radius\n                radiusBottom = 0.023; // Adjust the bottom radius\n                height = 0.1; // Adjust the height\n                radialSegments = 16; // Adjust the number of radial segments\n                heightSegments = 1; // Adjust the number of height segments\n                openEnded = false; // Set to true for an open-ended cylinder\n                cylinderGeometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded); // let geometry = new THREE.SphereGeometry(0.03); // Adjust the size of the sphere as needed\n                material = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0xff0000\n                });\n                this.fill = new three_module/* Mesh */.eaF(cylinderGeometry, material);\n                this.fill.renderOrder = 1;\n                this.fill.receiveShadow = true;\n                this.fill.envMapIntensity = 1;\n                this.fill.material.colorWrite = false;\n              case 54:\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 6;\n                } else {\n                  this.flickerSmoother.currentvector.y = 12;\n                }\n                this.Prevlandmark = new three_module/* Vector3 */.Pq0(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n                this.PrevScale = 1;\n              case 57:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadBracelet(_x3) {\n        return _loadBracelet.apply(this, arguments);\n      }\n      return loadBracelet;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      // this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks, handedness) {\n      this.landmarks = landmarks;\n      if (handedness.length > 0) this.handedness = handedness[0];\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateBracelet",\n    value: function updateBracelet() {\n      //this.trackingmsg.style.display = "none";\n      // if (this.filter < this.flickerSmoother.currentvector.x) {\n      //   this.filter += 1;\n      //   return;\n      // }\n      // this.filter = 0;\n      if (!this.landmarks) return;\n      if (this.sceneManager) {\n        if (this.sceneManager.isVideo) {\n          this.flickerSmoother.currentvector.y = 8;\n        } else {\n          this.flickerSmoother.currentvector.y = 0;\n        }\n      }\n      // Points for reference\n      // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n      var base = hand_landmarks_helpers_scaleLandmark(this.landmarks[0], this.width, this.height);\n      var indexbase = hand_landmarks_helpers_scaleLandmark(this.landmarks[9], this.width, this.height);\n      var middlebase = hand_landmarks_helpers_scaleLandmark(this.landmarks[13], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > this.flickerSmoother.currentvector.y || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n        if (this.Bracelet || this.SpriteMesh) {\n          console.log("bracelet update 1");\n          this.show();\n          var tempbase = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n          var tempmid1 = new three_module/* Vector3 */.Pq0(indexbase.x, indexbase.y, indexbase.z);\n          var tempmid2 = new three_module/* Vector3 */.Pq0(middlebase.x, middlebase.y, middlebase.z);\n          base = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          indexbase = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          middlebase = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n          this.prevbase = tempbase;\n          this.prevmid = tempmid1;\n          this.prevmid2 = tempmid2;\n          var shoulderDist;\n          var shoulderDist2;\n          shoulderDist = Math.sqrt(Math.pow(base.x - indexbase.x, 2) + Math.pow(base.y - indexbase.y, 2) + Math.pow(base.z - indexbase.z, 2));\n          shoulderDist2 = Math.sqrt(Math.pow(middlebase.x - base.x, 2) + Math.pow(middlebase.y - base.y, 2) + Math.pow(middlebase.z - base.z, 2));\n          if (this.is2d) {\n            shoulderDist = Math.sqrt(Math.pow(base.x - indexbase.x, 2) + Math.pow(base.y - indexbase.y, 2) + 0);\n            shoulderDist2 = Math.sqrt(Math.pow(middlebase.x - base.x, 2) + Math.pow(middlebase.y - base.y, 2) + 0);\n          }\n          var val = base.z - this.refobj.position.z;\n          var val2 = indexbase.z - this.refobj.position.z;\n          var avg2;\n          var avg2offset;\n\n          // if (val > val2)\n          avg2 = (val + val2) / 2;\n          avg2offset = avg2 / 10;\n          if (this.is2d) {\n            // avg2offset = 0;\n          }\n          // else\n          //   avg2 = ((val + val2) / 2) / 10;\n\n          var avg = (shoulderDist2 + shoulderDist) / 2;\n          var prescale = avg / this.scaleFactor / 130 + avg2offset;\n\n          //let rotThresold = (prescale / 10) * 2000;\n          var rotThresold = prescale / 1.2;\n          var handRotation = rotThresold;\n          var xdistnace = 0;\n          var ydistnace = 0;\n          var handorientation = indexbase.y - base.y;\n          // handorientation = handorientation - handorientation / 2;\n          if (this.is2d) {\n            if (this.handedness[0].categoryName === "Left") {\n              if (handorientation > 0) xdistnace = indexbase.x - middlebase.x;else {\n                xdistnace = middlebase.x - indexbase.x;\n              }\n            } else {\n              if (handorientation > 0) xdistnace = middlebase.x - indexbase.x;else {\n                xdistnace = indexbase.x - middlebase.x;\n              }\n            }\n            ydistnace = indexbase.y - middlebase.y;\n            if (Math.abs(xdistnace) >= Math.abs(ydistnace)) {\n              handRotation = xdistnace;\n            } else {\n              handRotation = ydistnace;\n            }\n            if (handRotation > rotThresold) {\n              handRotation = rotThresold;\n            }\n            if (handRotation < 0) {\n              handRotation = 0;\n            }\n            base.z = 0;\n            indexbase.z = 0;\n            middlebase.z = 0;\n          }\n          var scale = (avg / this.scaleFactor / 130 + avg2offset) * 0.0059 * (handRotation / rotThresold) * getScaleSliderValue();\n          this.root.scale.set(scale, scale, scale);\n          this.root.position.set(base.x + getXSliderValue() * 300 * scale, base.y - getYSliderValue() * 300 * scale, 0);\n          var forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(indexbase, base);\n          var rightDirection = new three_module/* Vector3 */.Pq0().subVectors(middlebase, base);\n          var upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          var quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          this.root.quaternion.copy(quaternion);\n          if (!this.is2d) {\n            this.fill.position.set(0, 0.0005, -0.001);\n            this.fill.rotation.set(0, 0, -1.57);\n            this.fill.scale.set(1.35, 1, 1);\n          }\n          if (this.handedness[0].categoryName === "Left") {\n            if (!this.is2d) this.Bracelet.rotation.set(-1.5, 0, -1.57);else this.SpriteMesh.rotation.set(1.57, 0, -0.05);\n            if (!this.is2d) {\n              if (this.root.rotation.z > 1.57 || this.root.rotation.z < -1.57) {\n                if (this.root.rotation.x < 0) {\n                  this.Bracelet.position.set(0, 0.005, -0.01);\n                } else {\n                  this.Bracelet.position.set(0, 0.005, -0.01);\n                }\n              } else {\n                if (this.root.rotation.x < 0) {\n                  this.Bracelet.position.set(0, 0.005, -0.01);\n                } else {\n                  this.Bracelet.position.set(0, 0.005, -0.01);\n                }\n              }\n            }\n          } else {\n            if (this.is2d) {\n              this.SpriteMesh.rotation.set(1.57, 0, 0.05);\n            } else {\n              this.Bracelet.rotation.set(1.5, 0, -1.57);\n            }\n            if (!this.is2d) {\n              if (this.root.rotation.z > 1.57 || this.root.rotation.z < -1.57) {\n                if (this.root.rotation.x < 0) {\n                  this.Bracelet.position.set(0, -0.005, -0.01);\n                } else {\n                  this.Bracelet.position.set(0, -0.005, -0.01);\n                }\n              } else {\n                if (this.root.rotation.x < 0) {\n                  this.Bracelet.position.set(0, -0.005, -0.01);\n                } else {\n                  this.Bracelet.position.set(0, -0.005, -0.01);\n                }\n              }\n            }\n          }\n          if (this.is2d) {\n            if (this.handedness[0].categoryName === "Left") {\n              this.SpriteMesh.position.set(0, 0, -150);\n            } else {\n              this.SpriteMesh.position.set(20, 0, -250);\n            }\n          }\n          var forwardDirectionNormalized = new three_module/* Vector3 */.Pq0();\n          forwardDirectionNormalized.copy(forwardDirection).normalize();\n          if (forwardDirectionNormalized.z > 0.65 || forwardDirectionNormalized.z < -0.5 || this.is2d && handRotation < 2) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n            if (!this.is2d) this.Bracelet.visible = false;else this.SpriteMesh.visible = false;\n          } else {\n            hideAlignMessagePanel();\n            if (!this.is2d) this.Bracelet.visible = true;else this.SpriteMesh.visible = true;\n          }\n          var s = scale / 1000;\n          if (this.is2d) {\n            this.SpriteMesh.scale.set(this.imageWidth + s, this.imageHeight + s, 1);\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          this.PrevScale = getScaleSliderValue();\n          this.PrevXValue = getXSliderValue();\n          this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "addBracelet",\n    value: function addBracelet() {\n      if (this.is2d) {\n        if (this.SpriteMesh) {\n          this.scene.add(this.root);\n          this.root.add(this.SpriteMesh);\n          this.SpriteMesh.position.set(0, 0, 0);\n        }\n      } else {\n        if (this.Bracelet) {\n          this.scene.add(this.root);\n          this.root.add(this.Bracelet);\n          // this.root.add(this.SpriteMesh);\n          this.Bracelet.add(this.fill);\n          this.Bracelet.rotation.set(1.5, 0, -1.57);\n          this.Bracelet.position.set(0, 0.005, -0.01);\n          this.fill.position.set(0, 0.0005, -0.001);\n          this.fill.rotation.set(0, 0, -1.57);\n          this.fill.scale.set(1.35, 1, 1);\n        }\n      }\n    }\n  }, {\n    key: "clamp",\n    value: function clamp(num, min, max) {\n      return num <= min ? min : num >= max ? max : num;\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      if (this.is2d) {\n        if (this.SpriteMesh) {\n          while (this.root.children.length > 0) {\n            this.root.remove(this.root.children[0]);\n          }\n          this.scene.remove(this.root);\n        }\n      } else {\n        if (this.Bracelet) {\n          this.Bracelet.remove(this.fill);\n          this.root.remove(this.Bracelet);\n          while (this.root.children.length > 0) {\n            this.root.remove(this.root.children[0]);\n          }\n          //this.root.remove(this.SpriteMesh);\n          this.scene.remove(this.root);\n        }\n      }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n      // this.SpriteMesh = null;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = false;\n      }\n      if (this.Bracelet) {\n        this.Bracelet.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = true;\n      }\n      if (this.Bracelet) {\n        this.Bracelet.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Bracelet");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateBracelet() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addBracelet();\n            this.updateBracelet();\n          }\n        }\n      }\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }, {\n    key: "updateMask",\n    value: function updateMask() {}\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }]);\n  return Bracelet;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/virtualTryOns/earrings.js\nfunction earrings_typeof(obj) { "@babel/helpers - typeof"; return earrings_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, earrings_typeof(obj); }\n\nfunction earrings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction earrings_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { earrings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { earrings_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction earrings_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction earrings_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction earrings_createClass(Constructor, protoProps, staticProps) { if (protoProps) earrings_defineProperties(Constructor.prototype, protoProps); if (staticProps) earrings_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction earrings_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) earrings_setPrototypeOf(subClass, superClass); }\nfunction earrings_setPrototypeOf(o, p) { earrings_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return earrings_setPrototypeOf(o, p); }\nfunction earrings_createSuper(Derived) { var hasNativeReflectConstruct = earrings_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = earrings_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = earrings_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return earrings_possibleConstructorReturn(this, result); }; }\nfunction earrings_possibleConstructorReturn(self, call) { if (call && (earrings_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return earrings_assertThisInitialized(self); }\nfunction earrings_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction earrings_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction earrings_getPrototypeOf(o) { earrings_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return earrings_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction earrings_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Earrings = /*#__PURE__*/function (_StyleFactory) {\n  earrings_inherits(Earrings, _StyleFactory);\n  var _super = earrings_createSuper(Earrings);\n  function Earrings() {\n    earrings_classCallCheck(this, Earrings);\n    return _super.call(this);\n  }\n  earrings_createClass(Earrings, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        opacity: 0\n      });\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.flickerSmoother = new FlickerSmoother();\n      this.flickerSmoother.currentvector.y = 1;\n      // if (AssetURL)\n      //   this.URL = AssetURL;\n      // else\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/earrings/01.png");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/earrings/01.png");\n      this.Prevlandmark;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid3 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid4 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid5 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.SpriteMeshLeft = null;\n      this.SpriteMeshRight = null;\n      this.imageWidthLeft = null;\n      this.imageHeightleft = null;\n      this.is2d = true;\n      this.Scale = 1;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = earrings_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("earring");\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n                this.SpriteMeshLeft = null;\n                this.SpriteMeshRight = null;\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/earrings_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadEarrings(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 12:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadEarrings",\n    value: function () {\n      var _loadEarrings = earrings_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture1, materialSprite1, bbox, size;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 35;\n                  break;\n                }\n                // if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.scaleFactor = 2.4;\n                imageTexture1 = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 10;\n                  break;\n                }\n                _context3.next = 6;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL, resolve);\n                });\n              case 6:\n                imageTexture1 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL, imageTexture1);\n                _context3.next = 11;\n                break;\n              case 10:\n                imageTexture1 = assetsCache_getGlobalCacheAsset(this.URL);\n              case 11:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                imageTexture1.generateMipmaps = false;\n                //imageTexture1.minFilter = THREE.LinearMipMapNearestFilter;\n                imageTexture1.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture1.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture1.colorSpace = three_module/* SRGBColorSpace */.er$;\n                imageTexture1.needsUpdate = true;\n\n                //imageTexture.generateMipmaps = false;\n                this.imageWidthLeft = imageTexture1.image.width;\n                this.imageHeightLeft = imageTexture1.image.height;\n                //imageTexture.colorSpace = THREE.SRGBColorSpace;\n                materialSprite1 = new three_module/* SpriteMaterial */.RoJ({\n                  map: imageTexture1,\n                  transparent: true,\n                  side: three_module/* DoubleSide */.$EB\n                });\n                materialSprite1.precision = "highp";\n                materialSprite1.depthWrite = false;\n                materialSprite1.needsUpdate = true;\n                materialSprite1.toneMapped = false;\n\n                // Create a sprite and set its material\n                this.SpriteMeshLeft = new three_module/* Sprite */.kxk(materialSprite1);\n                this.SpriteMeshLeft.scale.set(this.imageWidthLeft, this.imageHeightLeft, 1); // Set the sprite\'s size\n                this.SpriteMeshLeft.position.set(0, 0, 0); // Set the sprite\'s position in the scene\n\n                // Create a sprite and set its material\n                this.SpriteMeshRight = new three_module/* Sprite */.kxk(materialSprite1);\n                this.SpriteMeshRight.scale.set(this.imageWidthLeft, this.imageHeightLeft, 1); // Set the sprite\'s size\n                this.SpriteMeshRight.position.set(0, 0, 0); // Set the sprite\'s position in the scene\n\n                this.SpriteMeshRight.name = "Earrings";\n                this.SpriteMeshLeft.name = "Earrings";\n                _context3.next = 44;\n                break;\n              case 35:\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.Earrings = null;\n                _context3.next = 38;\n                return earrings_loadModel(this.URL);\n              case 38:\n                this.Earrings = _context3.sent;\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Earrings);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = size.x;\n                this.Earrings.name = "Earrings";\n                this.Earrings.traverse(function (child) {\n                  if (child.isMesh) {\n                    // Check if the material has metallicness property\n                    if (child.material) {\n                      if (child.material.metalness > 1) child.material.metalness = 1;\n                      child.material.envMapIntensity = 1;\n                    }\n                  }\n                });\n              case 44:\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 1.5;\n                } else {\n                  this.flickerSmoother.currentvector.y = 6;\n                }\n              case 45:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadEarrings(_x3) {\n        return _loadEarrings.apply(this, arguments);\n      }\n      return loadEarrings;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateEarrings",\n    value: function updateEarrings() {\n      // Points for reference\n      // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n      if (!this.landmarks) return;\n      if (this.sceneManager) {\n        if (this.sceneManager.isVideo) {\n          this.flickerSmoother.currentvector.y = 1.5;\n        } else {\n          this.flickerSmoother.currentvector.y = 0;\n        }\n      }\n      var midEyes = scaleLandmark(this.landmarks[168], this.width, this.height);\n      var chin = scaleLandmark(this.landmarks[152], this.width, this.height);\n      var Leftear = scaleLandmark(this.landmarks[454], this.width, this.height);\n      var rightear = scaleLandmark(this.landmarks[234], this.width, this.height);\n      var leftEyeInnerCorner = scaleLandmark(this.landmarks[463], this.width, this.height);\n      var rightEyeInnerCorner = scaleLandmark(this.landmarks[243], this.width, this.height);\n      var noseBottom = scaleLandmark(this.landmarks[2], this.width, this.height);\n\n      // // These points seem appropriate 446, 265, 372, 264\n      var leftEyeUpper1 = scaleLandmark(this.landmarks[264], this.width, this.height);\n      // These points seem appropriate 226, 35, 143, 34\n      var rightEyeUpper1 = scaleLandmark(this.landmarks[34], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > this.flickerSmoother.currentvector.y || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n        if (this.Earrings || this.SpriteMeshRight) {\n          this.show();\n          var tempbase = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n          var tempmid1 = new three_module/* Vector3 */.Pq0(chin.x, chin.y, chin.z);\n          var tempmid2 = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x, leftEyeInnerCorner.y, leftEyeInnerCorner.z);\n          var tempmid3 = new three_module/* Vector3 */.Pq0(rightEyeInnerCorner.x, rightEyeInnerCorner.y, rightEyeInnerCorner.z);\n          var tempmid4 = new three_module/* Vector3 */.Pq0(leftEyeUpper1.x, leftEyeUpper1.y, leftEyeUpper1.z);\n          var tempmid5 = new three_module/* Vector3 */.Pq0(rightEyeUpper1.x, rightEyeUpper1.y, rightEyeUpper1.z);\n          midEyes = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          chin = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          leftEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n          rightEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid3, tempmid3);\n          leftEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid4, tempmid4);\n          rightEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid5, tempmid5);\n          this.prevbase = tempbase;\n          this.prevmid = tempmid1;\n          this.prevmid2 = tempmid2;\n          this.prevmid3 = tempmid3;\n          this.prevmid4 = tempmid4;\n          this.prevmid5 = tempmid5;\n          var eyeDist = Math.sqrt(Math.pow(leftEyeUpper1.x - rightEyeUpper1.x, 2) + Math.pow(leftEyeUpper1.y - rightEyeUpper1.y, 2) + Math.pow(leftEyeUpper1.z - rightEyeUpper1.z, 2));\n          this.Scale = eyeDist / this.scaleFactor / 1.2 * getScaleSliderValue();\n          if (!this.is2d) {\n            this.Earrings.scale.set(this.Scale, this.Scale, this.Scale);\n          } else {\n            this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n            this.SpriteMeshRight.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n          }\n          var upVector = new three_module/* Vector3 */.Pq0(midEyes.x - chin.x, midEyes.y - chin.y, midEyes.z - chin.z).normalize();\n          var sideVector = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x - rightEyeInnerCorner.x, leftEyeInnerCorner.y - rightEyeInnerCorner.y, leftEyeInnerCorner.z - rightEyeInnerCorner.z).normalize();\n          var zRot = new three_module/* Vector3 */.Pq0(1, 0, 0).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1))) - Math.PI / 2;\n          var xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n          var yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n          // console.log("xrot" + xRot + "   yrot" + yRot + "   zrot" + zRot);\n\n          // let xpos;\n          // let offset = ((10 + scale) - ((10 + scale / 2) * yRot));\n          // // console.log(offset);\n          // xpos = (chin.x) - ((10 + scale) - offset);\n\n          var clampedYRot = this.clamp(yRot, -0.5, 0.5);\n          var clampedZRot = this.clamp(zRot, -0.1, 0.1);\n          if (!this.is2d) this.Earrings.rotation.set(-0.3, clampedYRot, clampedZRot);\n          //this.planeMesh.rotation.set(-0.3, clampedYRot, clampedZRot);\n          var ypos;\n          //console.log(5 + (scale / 1.1));\n          ypos = chin.y + (5 + this.Scale / 1.1 + (5 + this.Scale / 1.1) * xRot);\n          // position\n\n          if (!this.is2d) {\n            this.Earrings.position.set(chin.x - (20 + this.Scale) * yRot + (10 - this.Scale) * zRot, ypos - this.Scale / 2, 0);\n          } else {\n            this.SpriteMeshLeft.position.set(Leftear.x - (0.3 - zRot / 2) * this.Scale * yRot + 0.5 * this.Scale * zRot + this.Scale * 0.05 + getXSliderValue() * 0.7 * this.Scale, Leftear.y + 0.4 * this.Scale * xRot + 0.1 * this.Scale * yRot - this.Scale / 1.45 - getYSliderValue() * 0.7 * this.Scale, -110);\n            this.SpriteMeshRight.position.set(rightear.x - (0.3 + zRot / 2) * this.Scale * yRot + 0.5 * this.Scale * zRot - this.Scale * 0.05 + getXSliderValue() * 0.7 * this.Scale, rightear.y + 0.4 * this.Scale * xRot - 0.2 * this.Scale * yRot - this.Scale / 1.45 - getYSliderValue() * 0.7 * this.Scale, -110);\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          this.PrevScale = getScaleSliderValue();\n          this.PrevXValue = getXSliderValue();\n          this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "addEarrings",\n    value: function addEarrings() {\n      if (this.Earrings) {\n        //this.scene.add(this.root);\n        this.scene.add(this.Earrings);\n        // this.scene.add(this.planeMesh);\n      } else if (this.SpriteMeshRight) {\n        this.scene.add(this.SpriteMeshLeft);\n        this.scene.add(this.SpriteMeshRight);\n        this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n        this.SpriteMeshRight.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n      }\n    }\n  }, {\n    key: "clamp",\n    value: function clamp(num, min, max) {\n      return num <= min ? min : num >= max ? max : num;\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      if (this.Earrings) {\n        this.scene.remove(this.Earrings);\n        // this.scene.remove(this.planeMesh);\n      } else if (this.SpriteMeshRight || this.SpriteMeshLeft) {\n        while (!!this.scene.getObjectByName("Earrings")) {\n          this.scene.remove(this.scene.getObjectByName("Earrings"));\n        }\n        //this.scene.remove(this.SpriteMeshLeft);\n        //this.scene.remove(this.SpriteMeshRight);\n      }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n      // this.SpriteMeshRight = null;\n      // this.SpriteMeshLeft = null;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = false;\n      }\n      if (this.Earrings) {\n        this.Earrings.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = true;\n      }\n      if (this.Earrings) {\n        this.Earrings.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Earrings");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateEarrings() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addEarrings();\n            this.updateEarrings();\n          }\n        }\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }]);\n  return Earrings;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/virtualTryOns/headwear.js\nfunction headwear_typeof(obj) { "@babel/helpers - typeof"; return headwear_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, headwear_typeof(obj); }\n\nfunction headwear_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction headwear_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { headwear_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { headwear_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction headwear_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction headwear_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction headwear_createClass(Constructor, protoProps, staticProps) { if (protoProps) headwear_defineProperties(Constructor.prototype, protoProps); if (staticProps) headwear_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction headwear_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) headwear_setPrototypeOf(subClass, superClass); }\nfunction headwear_setPrototypeOf(o, p) { headwear_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return headwear_setPrototypeOf(o, p); }\nfunction headwear_createSuper(Derived) { var hasNativeReflectConstruct = headwear_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = headwear_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = headwear_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return headwear_possibleConstructorReturn(this, result); }; }\nfunction headwear_possibleConstructorReturn(self, call) { if (call && (headwear_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return headwear_assertThisInitialized(self); }\nfunction headwear_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction headwear_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction headwear_getPrototypeOf(o) { headwear_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return headwear_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction headwear_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n      assetsCache_addToGlobalCache(file, gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Headwear = /*#__PURE__*/function (_StyleFactory) {\n  headwear_inherits(Headwear, _StyleFactory);\n  var _super = headwear_createSuper(Headwear);\n  function Headwear(scene, width, height, sceneManager) {\n    headwear_classCallCheck(this, Headwear);\n    return _super.call(this);\n  }\n  headwear_createClass(Headwear, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        opacity: 0\n      });\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.fill;\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/caps/01.gltf");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/caps/01.gltf");\n      //this.loadHeadwear();\n      this.flickerSmoother = new FlickerSmoother();\n      //this.flickerSmoother.currentvector.y = 4;\n      this.filter = 0;\n      this.Prevlandmark;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      // const gui = new GUI();\n\n      // this.currentvector = new THREE.Vector3(0.9, -0.29, 2.94);\n      // const vectorFolder2 = gui.addFolder(\'Vector Controls\');\n      // vectorFolder2.add(this.currentvector, \'x\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'y\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'z\', -Math.PI, Math.PI).step(0.001);\n\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = headwear_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!AssetURL) {\n                  _context2.next = 4;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 6;\n                break;\n              case 4:\n                return _context2.abrupt("return");\n              case 6:\n                showLoadingModelPanel("cap");\n                this.Headwear = null;\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/headwear_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadHeadwear(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 10:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadHeadwear",\n    value: function () {\n      var _loadHeadwear = headwear_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var bbox, size, radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, geometry, material;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 6;\n                  break;\n                }\n                _context3.next = 3;\n                return headwear_loadModel(this.URL);\n              case 3:\n                this.Headwear = _context3.sent;\n                _context3.next = 7;\n                break;\n              case 6:\n                this.Headwear = assetsCache_getGlobalCacheAsset(this.URL);\n              case 7:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Headwear);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = 2;\n                this.Headwear.name = "Headwear";\n                this.Headwear.traverse(function (child) {\n                  if (child.isMesh) {\n                    // Check if the material has metallicness property\n                    if (child.material) {\n                      // if (child.material.metalness > 1)\n                      //   child.material.metalness = 1; // Set metallicness to 0\n                      // if (child.material.metalness > 1) child.material.metalness = 1;\n                      // child.material.envMapIntensity = 1;\n                      child.renderOrder = 2;\n\n                      // if (child.material.normalMap) {\n                      //   // Adjust other normal map properties if needed\n                      //   child.material.normalScale.set(5, 5); // Adjust the strength of the normals\n                      // }\n                    }\n                  }\n                });\n                radiusTop = 0.029; // Adjust the top radius\n                radiusBottom = 0.029; // Adjust the bottom radius\n                height = 0.1; // Adjust the height\n                radialSegments = 16; // Adjust the number of radial segments\n                heightSegments = 1; // Adjust the number of height segments\n                openEnded = false; // Set to true for an open-ended cylinder\n                geometry = new three_module/* SphereGeometry */.Gu$(1);\n                material = new three_module/* MeshBasicMaterial */.V9B({\n                  color: 0xff0000\n                });\n                this.fill = new three_module/* Mesh */.eaF(geometry, material);\n                this.fill.renderOrder = 1;\n                this.fill.material.colorWrite = false;\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 6;\n                } else {\n                  this.flickerSmoother.currentvector.y = 6;\n                }\n              case 26:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadHeadwear(_x2) {\n        return _loadHeadwear.apply(this, arguments);\n      }\n      return loadHeadwear;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateHeadwear",\n    value: function updateHeadwear() {\n      if (!this.landmarks) return;\n      if (this.sceneManager) {\n        if (this.sceneManager.isVideo) {\n          this.flickerSmoother.currentvector.y = 6;\n        } else {\n          this.flickerSmoother.currentvector.y = 0;\n        }\n      }\n      this.flickerSmoother.currentvector.z = 100;\n      var midEyes = scaleLandmark(this.landmarks[168], this.width, this.height);\n\n      // These points seem appropriate 446, 265, 372, 264\n      var leftEyeUpper1 = scaleLandmark(this.landmarks[264], this.width, this.height);\n      // These points seem appropriate 226, 35, 143, 34\n      var rightEyeUpper1 = scaleLandmark(this.landmarks[34], this.width, this.height);\n      var midEyes5 = scaleLandmark(this.landmarks[197], this.width, this.height);\n      var rightEyeInnerCorner5 = scaleLandmark(this.landmarks[196], this.width, this.height);\n      var noseBottom5 = scaleLandmark(this.landmarks[195], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes5.x, midEyes5.y, midEyes5.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > 0 //||\n      // this.PrevScale !== getScaleSliderValue() ||\n      // this.PrevXValue !== getXSliderValue() ||\n      // this.PrevYValue !== getYSliderValue()\n      ) {\n        if (this.Headwear) {\n          this.show();\n          var tempbase = new three_module/* Vector3 */.Pq0(midEyes5.x, midEyes5.y, midEyes5.z);\n          var tempmid1 = new three_module/* Vector3 */.Pq0(rightEyeInnerCorner5.x, rightEyeInnerCorner5.y, rightEyeInnerCorner5.z);\n          var tempmid2 = new three_module/* Vector3 */.Pq0(noseBottom5.x, noseBottom5.y, noseBottom5.z);\n          midEyes5 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          rightEyeInnerCorner5 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          noseBottom5 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n          this.prevbase = tempbase;\n          this.prevmid = tempmid1;\n          this.prevmid2 = tempmid2;\n          var eyeDist = Math.sqrt(Math.pow(leftEyeUpper1.x - rightEyeUpper1.x, 2) + Math.pow(leftEyeUpper1.y - rightEyeUpper1.y, 2) + Math.pow(leftEyeUpper1.z - rightEyeUpper1.z, 2));\n          // const scale =\n          //   (eyeDist / this.scaleFactor) * 1.2 * getScaleSliderValue();\n          var scale = eyeDist / this.scaleFactor * 1.2 * 1;\n          this.root.scale.set(scale, scale, scale);\n\n          // this.root.position.set(\n          //   midEyes.x + getXSliderValue() * 1.2 * scale,\n          //   midEyes.y - getYSliderValue() * 1.2 * scale,\n          //   midEyes.z\n          // );\n\n          this.root.position.set(midEyes.x + 0 * 1.2 * scale, midEyes.y - 0 * 1.2 * scale, midEyes.z);\n\n          // this.fill.position.set(0.02, 0.3, -0.95);\n          // this.fill.rotation.set(0, 0, 0);\n          // this.fill.scale.set(0.95, 1.2, 1.2);\n\n          var forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(noseBottom5, midEyes5);\n          var rightDirection = new three_module/* Vector3 */.Pq0().subVectors(rightEyeInnerCorner5, midEyes5);\n          var upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          var quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          // quaternion.set(quaternion.x, quaternion.y, quaternion.z);\n\n          //const finalrot = new THREE.Quaternion().slerp(rotateRoot.quaternion, quaternion, animationCurve.evaluate(speedcal * time.deltaTime));\n          this.root.quaternion.copy(quaternion);\n          if (rightDirection.z < -13.5 || rightDirection.z > 8) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n            // setTrackingMsg("Tracking lost. <br>Point your hand towards camera.");\n            // showTrackingMsg();\n            if (!this.is2d) this.Headwear.visible = false;\n            //else this.planeMesh.visible = false;\n          } else {\n            hideAlignMessagePanel();\n            if (!this.is2d) this.Headwear.visible = true;\n            //else this.planeMesh.visible = true;\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          // this.PrevScale = getScaleSliderValue();\n          // this.PrevXValue = getXSliderValue();\n          // this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "addHeadwear",\n    value: function addHeadwear() {\n      if (this.Headwear) {\n        this.scene.add(this.root);\n        this.root.add(this.Headwear);\n        this.Headwear.add(this.fill);\n        this.Headwear.rotation.set(1, -0.29, 2.95);\n        this.Headwear.position.set(0.08, 0.24, -0.17);\n        this.fill.position.set(0.02, 0.3, -0.95);\n        this.fill.rotation.set(0, 0, 0);\n        this.fill.scale.set(0.95, 1.2, 1.2);\n      }\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      if (this.Headwear) {\n        this.Headwear.remove(this.fill);\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        this.scene.remove(this.root);\n        this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n        this.PrevScale = 1;\n      }\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.root) {\n        this.root.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.root) {\n        this.root.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Headwear");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateHeadwear() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addHeadwear();\n            this.updateHeadwear();\n          }\n        }\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }]);\n  return Headwear;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/virtualTryOns/mangtika.js\nfunction mangtika_typeof(obj) { "@babel/helpers - typeof"; return mangtika_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, mangtika_typeof(obj); }\n\nfunction mangtika_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction mangtika_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { mangtika_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { mangtika_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction mangtika_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction mangtika_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction mangtika_createClass(Constructor, protoProps, staticProps) { if (protoProps) mangtika_defineProperties(Constructor.prototype, protoProps); if (staticProps) mangtika_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction mangtika_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) mangtika_setPrototypeOf(subClass, superClass); }\nfunction mangtika_setPrototypeOf(o, p) { mangtika_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return mangtika_setPrototypeOf(o, p); }\nfunction mangtika_createSuper(Derived) { var hasNativeReflectConstruct = mangtika_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = mangtika_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = mangtika_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return mangtika_possibleConstructorReturn(this, result); }; }\nfunction mangtika_possibleConstructorReturn(self, call) { if (call && (mangtika_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return mangtika_assertThisInitialized(self); }\nfunction mangtika_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction mangtika_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction mangtika_getPrototypeOf(o) { mangtika_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return mangtika_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction mangtika_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Mangtika = /*#__PURE__*/function (_StyleFactory) {\n  mangtika_inherits(Mangtika, _StyleFactory);\n  var _super = mangtika_createSuper(Mangtika);\n  function Mangtika() {\n    mangtika_classCallCheck(this, Mangtika);\n    return _super.call(this);\n  }\n  mangtika_createClass(Mangtika, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        opacity: 0\n      });\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.flickerSmoother = new FlickerSmoother();\n      this.flickerSmoother.currentvector.y = 1;\n      // if (AssetURL)\n      //   this.URL = AssetURL;\n      // else\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/mangtika/01.png");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/mangtika/01.png");\n      this.Prevlandmark;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid3 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid4 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid5 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.SpriteMeshLeft = null;\n      this.imageWidthLeft = null;\n      this.imageHeightleft = null;\n      this.is2d = true;\n      this.Scale = 1;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = mangtika_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("mangtika");\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n                this.SpriteMeshLeft = null;\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/mangtika_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadEarrings(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 11:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadEarrings",\n    value: function () {\n      var _loadEarrings = mangtika_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture1, material2d, planeGeometry, bbox, size;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 31;\n                  break;\n                }\n                // if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.scaleFactor = 0.5;\n                imageTexture1 = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 10;\n                  break;\n                }\n                _context3.next = 6;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL, resolve);\n                });\n              case 6:\n                imageTexture1 = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL, imageTexture1);\n                _context3.next = 11;\n                break;\n              case 10:\n                imageTexture1 = assetsCache_getGlobalCacheAsset(this.URL);\n              case 11:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                imageTexture1.generateMipmaps = false;\n                //imageTexture1.minFilter = THREE.LinearMipMapNearestFilter;\n                imageTexture1.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture1.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture1.colorSpace = three_module/* SRGBColorSpace */.er$;\n                imageTexture1.needsUpdate = true;\n\n                //imageTexture.generateMipmaps = false;\n                this.imageWidthLeft = imageTexture1.image.width;\n                this.imageHeightLeft = imageTexture1.image.height;\n                //imageTexture.colorSpace = THREE.SRGBColorSpace;\n                material2d = new three_module/* MeshBasicMaterial */.V9B({\n                  map: imageTexture1,\n                  // Assign the loaded texture\n                  transparent: true,\n                  // Enable transparency\n                  side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n                });\n                material2d.metalness = 1;\n                material2d.envMapIntensity = 1;\n                material2d.needsUpdate = true;\n                material2d.toneMapped = false;\n                planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n                this.SpriteMeshLeft = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n                this.SpriteMeshLeft.renderOrder = 2;\n                this.SpriteMeshLeft.name = "Mangtika";\n                _context3.next = 40;\n                break;\n              case 31:\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.Mangtika = null;\n                _context3.next = 34;\n                return mangtika_loadModel(this.URL);\n              case 34:\n                this.Mangtika = _context3.sent;\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Mangtika);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = size.x;\n                this.Mangtika.name = "Mangtika";\n                this.Mangtika.traverse(function (child) {\n                  if (child.isMesh) {\n                    // Check if the material has metallicness property\n                    if (child.material) {\n                      if (child.material.metalness > 1) child.material.metalness = 1;\n                      child.material.envMapIntensity = 1;\n                    }\n                  }\n                });\n              case 40:\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 1.5;\n                } else {\n                  this.flickerSmoother.currentvector.y = 6;\n                }\n              case 41:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadEarrings(_x3) {\n        return _loadEarrings.apply(this, arguments);\n      }\n      return loadEarrings;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      //this.needsUpdate = true;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateEarrings",\n    value: function updateEarrings() {\n      // Points for reference\n      // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n      if (!this.landmarks) return;\n      if (this.sceneManager) {\n        if (this.sceneManager.isVideo) {\n          this.flickerSmoother.currentvector.y = 2;\n        } else {\n          this.flickerSmoother.currentvector.y = 0;\n        }\n      }\n      var midEyes = scaleLandmark(this.landmarks[10], this.width, this.height);\n      var chin = scaleLandmark(this.landmarks[152], this.width, this.height);\n      var leftEyeInnerCorner = scaleLandmark(this.landmarks[463], this.width, this.height);\n      var rightEyeInnerCorner = scaleLandmark(this.landmarks[243], this.width, this.height);\n      var noseBottom = scaleLandmark(this.landmarks[2], this.width, this.height);\n\n      // // These points seem appropriate 446, 265, 372, 264\n      var leftEyeUpper1 = scaleLandmark(this.landmarks[264], this.width, this.height);\n      // These points seem appropriate 226, 35, 143, 34\n      var rightEyeUpper1 = scaleLandmark(this.landmarks[34], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > this.flickerSmoother.currentvector.y || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n        if (this.Mangtika || this.SpriteMeshLeft) {\n          this.show();\n          var tempbase = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n          var tempmid1 = new three_module/* Vector3 */.Pq0(chin.x, chin.y, chin.z);\n          var tempmid2 = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x, leftEyeInnerCorner.y, leftEyeInnerCorner.z);\n          var tempmid3 = new three_module/* Vector3 */.Pq0(rightEyeInnerCorner.x, rightEyeInnerCorner.y, rightEyeInnerCorner.z);\n          var tempmid4 = new three_module/* Vector3 */.Pq0(leftEyeUpper1.x, leftEyeUpper1.y, leftEyeUpper1.z);\n          var tempmid5 = new three_module/* Vector3 */.Pq0(rightEyeUpper1.x, rightEyeUpper1.y, rightEyeUpper1.z);\n          midEyes = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          chin = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          leftEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n          rightEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid3, tempmid3);\n          leftEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid4, tempmid4);\n          rightEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid5, tempmid5);\n          this.prevbase = tempbase;\n          this.prevmid = tempmid1;\n          this.prevmid2 = tempmid2;\n          this.prevmid3 = tempmid3;\n          this.prevmid4 = tempmid4;\n          this.prevmid5 = tempmid5;\n          var eyeDist = Math.sqrt(Math.pow(leftEyeUpper1.x - rightEyeUpper1.x, 2) + Math.pow(leftEyeUpper1.y - rightEyeUpper1.y, 2) + Math.pow(leftEyeUpper1.z - rightEyeUpper1.z, 2));\n          var upVector = new three_module/* Vector3 */.Pq0(midEyes.x - chin.x, midEyes.y - chin.y, midEyes.z - chin.z).normalize();\n          var sideVector = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x - rightEyeInnerCorner.x, leftEyeInnerCorner.y - rightEyeInnerCorner.y, leftEyeInnerCorner.z - rightEyeInnerCorner.z).normalize();\n          var zRot = new three_module/* Vector3 */.Pq0(1, 0, 0).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1))) - Math.PI / 2;\n          var xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n          var yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n          this.Scale = eyeDist / this.scaleFactor / 1.2 * getScaleSliderValue() * (Math.PI / 3 - Math.abs(yRot / 1.7));\n          if (!this.is2d) {\n            this.Mangtika.scale.set(this.Scale, this.Scale, this.Scale);\n          } else {\n            this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n          }\n          if (Math.abs(yRot) > 0.5) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n            this.SpriteMeshLeft.visible = false;\n          } else {\n            hideAlignMessagePanel();\n            this.SpriteMeshLeft.visible = true;\n          }\n          var clampedYRot = this.clamp(yRot, -0.5, 0.5);\n          var clampedZRot = this.clamp(zRot, -0.1, 0.1);\n          if (!this.is2d) this.Mangtika.rotation.set(-0.3, clampedYRot, clampedZRot);\n          this.SpriteMeshLeft.rotation.set(0, 0, zRot);\n          var ypos;\n          //console.log(5 + (scale / 1.1));\n          ypos = chin.y + (5 + this.Scale / 1.1 + (5 + this.Scale / 1.1) * xRot);\n          // position\n\n          if (!this.is2d) {\n            this.Mangtika.position.set(chin.x - (20 + this.Scale) * yRot + (10 - this.Scale) * zRot, ypos - this.Scale / 2, 0);\n          } else {\n            this.SpriteMeshLeft.position.set(midEyes.x -\n            // -(0.3 - zRot / 2) * this.Scale * yRot +\n            0.07 * this.Scale * zRot +\n            //this.Scale * 0.05\n            getXSliderValue() * 0.1 * this.Scale, midEyes.y +\n            //0.4 * this.Scale * xRot +\n            //0.4 * this.Scale * yRot -\n            -0.1 * this.Scale * Math.abs(zRot) + this.Scale / 14 - getYSliderValue() * 0.1 * this.Scale, 0);\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          this.PrevScale = getScaleSliderValue();\n          this.PrevXValue = getXSliderValue();\n          this.PrevYValue = getYSliderValue();\n          //*/\n        }\n      }\n    }\n  }, {\n    key: "addEarrings",\n    value: function addEarrings() {\n      if (this.Mangtika) {\n        //this.scene.add(this.root);\n        this.scene.add(this.Mangtika);\n        // this.scene.add(this.planeMesh);\n      } else if (this.SpriteMeshLeft) {\n        this.scene.add(this.SpriteMeshLeft);\n        this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n      }\n    }\n  }, {\n    key: "clamp",\n    value: function clamp(num, min, max) {\n      return num <= min ? min : num >= max ? max : num;\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      if (this.Mangtika) {\n        this.scene.remove(this.Mangtika);\n        // this.scene.remove(this.planeMesh);\n      } else if (this.SpriteMeshLeft) {\n        while (!!this.scene.getObjectByName("Mangtika")) {\n          this.scene.remove(this.scene.getObjectByName("Mangtika"));\n        }\n        //this.scene.remove(this.SpriteMeshLeft);\n      }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n      // this.SpriteMeshLeft = null;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = false;\n      }\n      if (this.Mangtika) {\n        this.Mangtika.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = true;\n      }\n      if (this.Mangtika) {\n        this.Mangtika.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Mangtika");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateEarrings() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addEarrings();\n            this.updateEarrings();\n          }\n        }\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }]);\n  return Mangtika;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/virtualTryOns/necklace.js\nfunction necklace_typeof(obj) { "@babel/helpers - typeof"; return necklace_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, necklace_typeof(obj); }\n\nfunction necklace_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction necklace_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { necklace_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { necklace_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction necklace_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction necklace_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction necklace_createClass(Constructor, protoProps, staticProps) { if (protoProps) necklace_defineProperties(Constructor.prototype, protoProps); if (staticProps) necklace_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction necklace_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) necklace_setPrototypeOf(subClass, superClass); }\nfunction necklace_setPrototypeOf(o, p) { necklace_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return necklace_setPrototypeOf(o, p); }\nfunction necklace_createSuper(Derived) { var hasNativeReflectConstruct = necklace_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = necklace_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = necklace_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return necklace_possibleConstructorReturn(this, result); }; }\nfunction necklace_possibleConstructorReturn(self, call) { if (call && (necklace_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return necklace_assertThisInitialized(self); }\nfunction necklace_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction necklace_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction necklace_getPrototypeOf(o) { necklace_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return necklace_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction necklace_loadModel(file) {\n  return new Promise(function (res, rej) {\n    var loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nvar Necklace = /*#__PURE__*/function (_StyleFactory) {\n  necklace_inherits(Necklace, _StyleFactory);\n  var _super = necklace_createSuper(Necklace);\n  function Necklace() {\n    necklace_classCallCheck(this, Necklace);\n    return _super.call(this);\n  }\n  necklace_createClass(Necklace, [{\n    key: "createStyle",\n    value: function createStyle(response, scene, width, height, sceneManager) {\n      this.sceneManager = sceneManager;\n      this.scene = scene;\n      this.width = width;\n      this.height = height;\n      this.needsUpdate = false;\n      this.landmarks = null;\n      this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n      this.material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000,\n        transparent: true,\n        opacity: 0\n      });\n      this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.flickerSmoother = new FlickerSmoother();\n      this.flickerSmoother.currentvector.y = 1;\n      // if (AssetURL)\n      //   this.URL = AssetURL;\n      // else\n      this.localURL = "".concat(PUBLIC_PATH, "/3d/necklace/01.png");\n      this.URL = "".concat(PUBLIC_PATH, "/3d/necklace/01.png");\n      this.Prevlandmark;\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid3 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid4 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.prevmid5 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.planeMesh = null;\n      this.SpriteMesh = null;\n      // this.SpriteMeshLeft = null;\n      // this.SpriteMeshRight = null;\n      this.imageWidth = null;\n      this.imageHeight = null;\n      this.imageWidthLeft = null;\n      this.imageHeightleft = null;\n      this.is2d = true;\n      this.Scale = 1;\n      this.PrevScale = 1;\n      this.PrevXValue = 0;\n      this.PrevYValue = 0;\n      //this.loadNecklace(this.URL);\n\n      // const gui = new GUI();\n\n      // this.currentvector = new THREE.Vector3(1, -0.3, 3);\n      // const vectorFolder2 = gui.addFolder(\'Vector Controls\');\n      // vectorFolder2.add(this.currentvector, \'x\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'y\', -Math.PI, Math.PI).step(0.001);\n      // vectorFolder2.add(this.currentvector, \'z\', -Math.PI, Math.PI).step(0.001);\n\n      // Add a controller to the GUI\n\n      this.timeoutId;\n      this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n      return this;\n    }\n  }, {\n    key: "debounceLoad",\n    value: function () {\n      var _debounceLoad = necklace_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(AssetURL, is2d) {\n        var _this = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                //AssetURL = null;\n                if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n                if (!AssetURL) {\n                  _context2.next = 5;\n                  break;\n                }\n                this.URL = AssetURL;\n                _context2.next = 7;\n                break;\n              case 5:\n                return _context2.abrupt("return");\n              case 7:\n                showLoadingModelPanel("necklace");\n                // Clear the previous timeout (if any) to cancel the previous call\n                clearTimeout(this.timeoutId);\n                this.SpriteMesh = null;\n                // Set a new timeout to trigger the function after a delay\n                this.timeoutId = setTimeout(/*#__PURE__*/necklace_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _this.loadNecklace(AssetURL);\n                        case 2:\n                          _this.update();\n                        case 3:\n                        case "end":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n              case 11:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function debounceLoad(_x, _x2) {\n        return _debounceLoad.apply(this, arguments);\n      }\n      return debounceLoad;\n    }()\n  }, {\n    key: "loadNecklace",\n    value: function () {\n      var _loadNecklace = necklace_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(AssetURL) {\n        var _this2 = this;\n        var imageTexture, materialSprite, bbox, size;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.is2d) {\n                  _context3.next = 30;\n                  break;\n                }\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                imageTexture = null;\n                if (assetsCache_hasGlobalAssetKey(this.URL)) {\n                  _context3.next = 9;\n                  break;\n                }\n                _context3.next = 5;\n                return new Promise(function (resolve) {\n                  new three_module/* TextureLoader */.Tap().load(_this2.URL, resolve);\n                });\n              case 5:\n                imageTexture = _context3.sent;\n                assetsCache_addToGlobalCache(this.URL, imageTexture);\n                _context3.next = 10;\n                break;\n              case 9:\n                imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n              case 10:\n                hideLoadingModelPanel();\n                emitSKUApplied();\n                imageTexture.generateMipmaps = false;\n                imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n                imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n                imageTexture.needsUpdate = true;\n                //imageTexture.generateMipmaps = false;\n                this.imageWidth = imageTexture.image.width;\n                this.imageHeight = imageTexture.image.height;\n                this.scaleFactor = 1.8;\n\n                //imageTexture.colorSpace = THREE.SRGBColorSpace;\n                materialSprite = new three_module/* SpriteMaterial */.RoJ({\n                  map: imageTexture,\n                  transparent: true,\n                  side: three_module/* DoubleSide */.$EB\n                }); // materialSprite.precision = \'highp\';\n                materialSprite.depthWrite = false;\n                materialSprite.needsUpdate = true;\n                materialSprite.toneMapped = false;\n\n                // Create a sprite and set its material\n                this.SpriteMesh = new three_module/* Sprite */.kxk(materialSprite);\n                this.SpriteMesh.scale.set(this.imageWidth, this.imageHeight, 1); // Set the sprite\'s size\n                this.SpriteMesh.position.set(0, 0, 0); // Set the sprite\'s position in the scene\n\n                this.SpriteMesh.name = "Necklace";\n                _context3.next = 39;\n                break;\n              case 30:\n                //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n                this.Necklace = null;\n                _context3.next = 33;\n                return necklace_loadModel(this.URL);\n              case 33:\n                this.Necklace = _context3.sent;\n                // scale glasses\n                bbox = new three_module/* Box3 */.NRn().setFromObject(this.Necklace);\n                size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n                this.scaleFactor = size.x;\n                this.Necklace.name = "Necklace";\n                this.Necklace.traverse(function (child) {\n                  if (child.isMesh) {\n                    // Check if the material has metallicness property\n                    if (child.material) {\n                      if (child.material.metalness > 1) child.material.metalness = 1;\n                      child.material.envMapIntensity = 1;\n                    }\n                  }\n                });\n              case 39:\n                if (this.sceneManager.isVideo) {\n                  this.flickerSmoother.currentvector.y = 1.5;\n                } else {\n                  this.flickerSmoother.currentvector.y = 1;\n                  // console.log("necklace smooth image");\n                }\n                //this.sceneManager.onConfigChange();\n              case 40:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function loadNecklace(_x3) {\n        return _loadNecklace.apply(this, arguments);\n      }\n      return loadNecklace;\n    }()\n  }, {\n    key: "updateDimensions",\n    value: function updateDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n    }\n  }, {\n    key: "updateLandmarks",\n    value: function updateLandmarks(landmarks) {\n      this.landmarks = landmarks;\n      this.needsUpdate = true;\n    }\n  }, {\n    key: "updateNecklace",\n    value: function updateNecklace() {\n      if (!this.landmarks) return;\n      if (this.sceneManager) {\n        this.flickerSmoother.params.floatValue = 0.3;\n        if (this.sceneManager.isVideo) {\n          this.flickerSmoother.currentvector.y = 3;\n        } else {\n          this.flickerSmoother.currentvector.y = 0;\n        }\n      }\n      var midEyes = scaleLandmark(this.landmarks[168], this.width, this.height);\n      var chin = scaleLandmark(this.landmarks[152], this.width, this.height);\n      var Leftear = scaleLandmark(this.landmarks[454], this.width, this.height);\n      var rightear = scaleLandmark(this.landmarks[234], this.width, this.height);\n      var leftEyeInnerCorner = scaleLandmark(this.landmarks[463], this.width, this.height);\n      var rightEyeInnerCorner = scaleLandmark(this.landmarks[243], this.width, this.height);\n      var noseBottom = scaleLandmark(this.landmarks[2], this.width, this.height);\n\n      // // These points seem appropriate 446, 265, 372, 264\n      var leftEyeUpper1 = scaleLandmark(this.landmarks[264], this.width, this.height);\n      // These points seem appropriate 226, 35, 143, 34\n      var rightEyeUpper1 = scaleLandmark(this.landmarks[34], this.width, this.height);\n      var tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n      var difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n      if (difference > this.flickerSmoother.currentvector.y //||\n      // this.PrevScale !== getScaleSliderValue() ||\n      // this.PrevXValue !== getXSliderValue() ||\n      // this.PrevYValue !== getYSliderValue()\n      // !this.sceneManager.isVideo\n      ) {\n        if (this.Necklace || this.SpriteMesh) {\n          this.show();\n          // let midEyes5 = scaleLandmark(this.landmarks[197], this.width, this.height);\n          // let rightEyeInnerCorner5 = scaleLandmark(this.landmarks[196], this.width, this.height);\n          // let noseBottom5 = scaleLandmark(this.landmarks[195], this.width, this.height);\n\n          // const eyeDist = Math.sqrt(\n          //   (leftEyeUpper1.x - rightEyeUpper1.x) ** 2 +\n          //   (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 +\n          //   (leftEyeUpper1.z - rightEyeUpper1.z) ** 2\n          // );\n          // const scale = (eyeDist / this.scaleFactor) / 1.2;\n          // this.Necklace.scale.set(scale, scale, scale);\n          // const forwardDirection = new THREE.Vector3().subVectors(noseBottom5, midEyes5);\n          // const rightDirection = new THREE.Vector3().subVectors(rightEyeInnerCorner5, midEyes5);\n          // //let forwardDirectionRot =\n          // const upDirection = new THREE.Vector3().crossVectors(forwardDirection, rightDirection).normalize();\n\n          // forwardDirection.x = this.clamp(forwardDirection.x, -0.5, 0.5);\n          // forwardDirection.y = this.clamp(forwardDirection.y, -7, -6);\n          // rightDirection.y = this.clamp(rightDirection.y, -1.6, -1.3);\n          // console.log(forwardDirection);\n\n          // let quaternion = new THREE.Quaternion();\n          // quaternion.setFromRotationMatrix(\n          //   new THREE.Matrix4().lookAt(forwardDirection, new THREE.Vector3(0, 0, 0), upDirection)\n          // );\n\n          // this.root.quaternion.copy(quaternion);\n\n          // let forwardDirectionNormalized = new THREE.Vector3();\n          // forwardDirectionNormalized.copy(forwardDirection).normalize();\n          // let rightDirectionnorm = new THREE.Vector3();\n          // rightDirectionnorm.copy(rightDirection).normalize();\n\n          // this.Necklace.rotation.set(this.currentvector.x, this.currentvector.y, this.currentvector.z);\n          // this.Necklace.position.set(0, 0, -100);\n          // this.root.position.set(\n          //   //(rightDirectionnorm.y * (scale * 1)),\n          //   chin.x - (forwardDirectionNormalized.y * (scale * 0.2)) - (rightDirectionnorm.y * (scale * 1)) - (forwardDirectionNormalized.x * (scale * 1.8)) - (0.36 * scale),\n          //   chin.y - ((forwardDirectionNormalized.y * (scale * 1.5)) + (0.5 * scale)),\n          //   chin.z - 20,\n          // )\n\n          ///*____old_______\n          var tempbase = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n          var tempmid1 = new three_module/* Vector3 */.Pq0(chin.x, chin.y, chin.z);\n          var tempmid2 = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x, leftEyeInnerCorner.y, leftEyeInnerCorner.z);\n          var tempmid3 = new three_module/* Vector3 */.Pq0(rightEyeInnerCorner.x, rightEyeInnerCorner.y, rightEyeInnerCorner.z);\n          var tempmid4 = new three_module/* Vector3 */.Pq0(leftEyeUpper1.x, leftEyeUpper1.y, leftEyeUpper1.z);\n          var tempmid5 = new three_module/* Vector3 */.Pq0(rightEyeUpper1.x, rightEyeUpper1.y, rightEyeUpper1.z);\n          midEyes = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n          chin = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n          leftEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n          rightEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid3, tempmid3);\n          leftEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid4, tempmid4);\n          rightEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid5, tempmid5);\n          this.prevbase = tempbase;\n          this.prevmid = tempmid1;\n          this.prevmid2 = tempmid2;\n          this.prevmid3 = tempmid3;\n          this.prevmid4 = tempmid4;\n          this.prevmid5 = tempmid5;\n          var eyeDist = Math.sqrt(Math.pow(leftEyeUpper1.x - rightEyeUpper1.x, 2) + Math.pow(leftEyeUpper1.y - rightEyeUpper1.y, 2) + Math.pow(leftEyeUpper1.z - rightEyeUpper1.z, 2));\n          // this.Scale =\n          //   (eyeDist / (this.scaleFactor / 0.83)) * getScaleSliderValue();\n          this.Scale = eyeDist / (this.scaleFactor / 0.83) * 1;\n          if (!this.is2d) {\n            this.Necklace.scale.set(this.Scale, this.Scale, this.Scale);\n          } else {\n            this.SpriteMesh.scale.set(this.imageWidth / 460 * this.Scale, this.imageHeight / 460 * this.Scale, 1);\n          }\n          var upVector = new three_module/* Vector3 */.Pq0(midEyes.x - chin.x, midEyes.y - chin.y, midEyes.z - chin.z).normalize();\n          var sideVector = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x - rightEyeInnerCorner.x, leftEyeInnerCorner.y - rightEyeInnerCorner.y, leftEyeInnerCorner.z - rightEyeInnerCorner.z).normalize();\n          var zRot = new three_module/* Vector3 */.Pq0(1, 0, 0).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1))) - Math.PI / 2;\n          var xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n          var yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n          // console.log("xrot" + xRot + "   yrot" + yRot + "   zrot" + zRot);\n\n          // let xpos;\n          // let offset = ((10 + scale) - ((10 + scale / 2) * yRot));\n          // // console.log(offset);\n          // xpos = (chin.x) - ((10 + scale) - offset);\n\n          var clampedYRot = this.clamp(yRot, -0.5, 0.5);\n          var clampedZRot = this.clamp(zRot, -0.1, 0.1);\n          if (!this.is2d) this.Necklace.rotation.set(-0.3, clampedYRot, clampedZRot);\n          //this.planeMesh.rotation.set(-0.3, clampedYRot, clampedZRot);\n          var ypos;\n          //console.log(5 + (scale / 1.1));\n          ypos = chin.y + (5 + this.Scale / 1.1 + (5 + this.Scale / 1.1) * xRot);\n          // position\n\n          if (!this.is2d) {\n            this.Necklace.position.set(chin.x - (20 + this.Scale) * yRot + (10 - this.Scale) * zRot, ypos - this.Scale / 2, 0);\n          } else {\n            // this.SpriteMesh.position.set(\n            //   chin.x -\n            //     (1.42 + zRot / 2.5) * this.Scale * yRot -\n            //     0.4 * this.Scale * zRot -\n            //     this.Scale * 0.01 +\n            //     getXSliderValue() * 0.7 * this.Scale,\n            //   chin.y +\n            //     1.5 * this.Scale * xRot -\n            //     0.05 * this.Scale * yRot -\n            //     0.01 * this.Scale * zRot -\n            //     this.Scale / 0.75 -\n            //     getYSliderValue() * 0.7 * this.Scale,\n            //   2000\n            // );\n            this.SpriteMesh.position.set(chin.x - (1.42 + zRot / 2.5) * this.Scale * yRot - 0.4 * this.Scale * zRot - this.Scale * 0.01 + 0 * 0.7 * this.Scale, chin.y + 1.5 * this.Scale * xRot - 0.05 * this.Scale * yRot - 0.01 * this.Scale * zRot - this.Scale / 0.75 - 0 * 0.7 * this.Scale, 2000);\n          }\n          this.Prevlandmark = tempPrevlandmark;\n          // this.PrevScale = getScaleSliderValue();\n          // this.PrevXValue = getXSliderValue();\n          // this.PrevYValue = getYSliderValue();\n        }\n      }\n    }\n  }, {\n    key: "addNecklace",\n    value: function addNecklace() {\n      if (this.Necklace) {\n        //this.scene.add(this.root);\n        this.scene.add(this.Necklace);\n        // this.scene.add(this.planeMesh);\n      } else if (this.SpriteMesh) {\n        this.scene.add(this.SpriteMesh);\n        this.SpriteMesh.scale.set(this.imageWidth / 460 * this.Scale, this.imageHeight / 460 * this.Scale, 1);\n      }\n    }\n  }, {\n    key: "clamp",\n    value: function clamp(num, min, max) {\n      return num <= min ? min : num >= max ? max : num;\n    }\n  }, {\n    key: "remove",\n    value: function remove() {\n      if (this.Necklace) {\n        this.scene.remove(this.Necklace);\n      } else if (this.SpriteMesh) {\n        while (!!this.scene.getObjectByName("Necklace")) {\n          this.scene.remove(this.scene.getObjectByName("Necklace"));\n        }\n      }\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n      // this.SpriteMesh = null;\n    }\n  }, {\n    key: "hide",\n    value: function hide() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = false;\n      }\n      if (this.Necklace) {\n        this.Necklace.visible = false;\n      }\n    }\n  }, {\n    key: "show",\n    value: function show() {\n      if (this.SpriteMesh) {\n        this.SpriteMesh.visible = true;\n      }\n      if (this.Necklace) {\n        this.Necklace.visible = true;\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      if (this.needsUpdate) {\n        var inScene = !!this.scene.getObjectByName("Necklace");\n        var shouldShow = !!this.landmarks;\n        if (inScene) {\n          shouldShow ? this.updateNecklace() : this.remove();\n        } else {\n          if (shouldShow) {\n            this.addNecklace();\n            this.updateNecklace();\n          }\n        }\n      }\n    }\n  }, {\n    key: "removeFaces",\n    value: function removeFaces() {\n      this.remove();\n    }\n  }, {\n    key: "setVisibility",\n    value: function setVisibility(state) {\n      if (state) {\n        this.show();\n      } else {\n        this.hide();\n      }\n    }\n  }]);\n  return Necklace;\n}(StyleFactory);\n;// CONCATENATED MODULE: ./src/makeupVTOs/category_factories.js\n\n\nfunction category_factories_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction category_factories_createClass(Constructor, protoProps, staticProps) { if (protoProps) category_factories_defineProperties(Constructor.prototype, protoProps); if (staticProps) category_factories_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction category_factories_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction category_factories_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar CategoryFactories = /*#__PURE__*/category_factories_createClass(function CategoryFactories() {\n  category_factories_classCallCheck(this, CategoryFactories);\n});\ncategory_factories_defineProperty(CategoryFactories, "lips", "lipstick");\ncategory_factories_defineProperty(CategoryFactories, "blush", "blush");\ncategory_factories_defineProperty(CategoryFactories, "eyeshadow", "eyeshadow");\ncategory_factories_defineProperty(CategoryFactories, "eyeliner", "eyeliner");\ncategory_factories_defineProperty(CategoryFactories, "masacara", "mascara");\ncategory_factories_defineProperty(CategoryFactories, "lipliner", "lipliner");\ncategory_factories_defineProperty(CategoryFactories, "hair", "hair");\ncategory_factories_defineProperty(CategoryFactories, "nailcolor", "nailcolor");\ncategory_factories_defineProperty(CategoryFactories, "faceanalysis", "faceanalysis");\ncategory_factories_defineProperty(CategoryFactories, "eyebrows", "eyebrows");\ncategory_factories_defineProperty(CategoryFactories, "eyelashes", "eyelashes");\ncategory_factories_defineProperty(CategoryFactories, "foundation", "foundation");\ncategory_factories_defineProperty(CategoryFactories, "highlighter", "highlighter");\ncategory_factories_defineProperty(CategoryFactories, "glasses", "glasses");\ncategory_factories_defineProperty(CategoryFactories, "watch", "watch");\ncategory_factories_defineProperty(CategoryFactories, "ring", "ring");\ncategory_factories_defineProperty(CategoryFactories, "earring", "earring");\ncategory_factories_defineProperty(CategoryFactories, "necklace", "necklace");\ncategory_factories_defineProperty(CategoryFactories, "mangtika", "mangtika");\ncategory_factories_defineProperty(CategoryFactories, "cap", "cap");\ncategory_factories_defineProperty(CategoryFactories, "bracelet", "bracelet");\nvar MLCategory = /*#__PURE__*/category_factories_createClass(function MLCategory() {\n  category_factories_classCallCheck(this, MLCategory);\n});\ncategory_factories_defineProperty(MLCategory, "face", 1);\ncategory_factories_defineProperty(MLCategory, "hair", 2);\ncategory_factories_defineProperty(MLCategory, "nail", 3);\ncategory_factories_defineProperty(MLCategory, "hand", 4);\nvar TrackingMode = /*#__PURE__*/category_factories_createClass(function TrackingMode() {\n  category_factories_classCallCheck(this, TrackingMode);\n});\ncategory_factories_defineProperty(TrackingMode, "None", "none");\ncategory_factories_defineProperty(TrackingMode, "Face", "face");\ncategory_factories_defineProperty(TrackingMode, "Hand", "hand");\ncategory_factories_defineProperty(TrackingMode, "Hair", "hair");\nvar CategoryFactoriesConfig = [{\n  id: CategoryFactories.lips,\n  category: "beauty",\n  subCategory: "lipstick",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new LipsStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.blush,\n  category: "beauty",\n  subCategory: "blush",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new BlushStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.eyeshadow,\n  category: "beauty",\n  subCategory: "eyeShadow",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyeShadowStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.eyeliner,\n  category: "beauty",\n  subCategory: "eyeliner",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyeLinerStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.eyebrows,\n  category: "beauty",\n  subCategory: "eyeBrows",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyebrowsStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.lipliner,\n  category: "beauty",\n  subCategory: "lipLiner",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new LiplinerStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.masacara,\n  category: "beauty",\n  subCategory: "mascara",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new MasacaraStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.eyelashes,\n  category: "beauty",\n  subCategory: "eyelashes",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyelashesStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.foundation,\n  category: "beauty",\n  subCategory: "foundation",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new FoundationStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.highlighter,\n  category: "beauty",\n  subCategory: "highlighter",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "lipstick",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new HighlighterStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.hair,\n  category: "beauty",\n  subCategory: "hair",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "hair",\n  MLModelInUse: TrackingMode.Hair,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "hair",\n  factoryClass: new HairStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.nailcolor,\n  category: "beauty",\n  subCategory: "nailColor",\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "nailColor",\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: true,\n  ConfigUIType: ["opacity"],\n  categoryKey: "nailColor",\n  factoryClass: new NailStyleFactory(),\n  useHDR: false,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveHand,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidHandUpload\n}, {\n  id: CategoryFactories.glasses,\n  category: "glasses",\n  subCategory: "2d/3d",\n  supports: ["2d", "3d"],\n  modelCategory: "glasses",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "glasses",\n  factoryClass: new Glasses(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.earring,\n  category: "earring",\n  subCategory: "2d/3d",\n  supports: ["2d"],\n  modelCategory: "earring",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "earring",\n  factoryClass: new Earrings(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.cap,\n  category: "cap",\n  subCategory: "2d/3d",\n  supports: ["3d"],\n  modelCategory: "cap",\n  modelSubCategory: "3d",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "cap",\n  factoryClass: new Headwear(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.earring,\n  category: "earring",\n  subCategory: "2d/3d",\n  supports: ["2d"],\n  modelCategory: "earring",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "earring",\n  factoryClass: new Earrings(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.mangtika,\n  category: "mangtika",\n  subCategory: "2d/3d",\n  supports: ["2d"],\n  modelCategory: "mangtika",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "mangtika",\n  factoryClass: new Mangtika(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.necklace,\n  category: "necklace",\n  subCategory: "2d/3d",\n  supports: ["2d"],\n  modelCategory: "necklace",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "necklace",\n  factoryClass: new Necklace(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveFace,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidFaceUpload\n}, {\n  id: CategoryFactories.watch,\n  category: "watch",\n  subCategory: "2d/3d",\n  supports: ["2d", "3d"],\n  modelCategory: "watch",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "watch",\n  factoryClass: new Watch(),\n  useHDR: true,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveHand,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidHandUpload\n}, {\n  id: CategoryFactories.ring,\n  category: "ring",\n  subCategory: "2d/3d",\n  supports: ["2d"],\n  modelCategory: "ring",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "ring",\n  factoryClass: new Ring(),\n  useHDR: true,\n  alignIcon: "ring",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveRing,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidRingUpload\n}, {\n  id: CategoryFactories.bracelet,\n  category: "bracelet",\n  subCategory: "2d/3d",\n  supports: ["2d"],\n  modelCategory: "bracelet",\n  modelSubCategory: "2d",\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "bracelet",\n  factoryClass: new Bracelet(),\n  useHDR: true,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables/* errorMessages */.xc.invisbileLiveHand,\n  alignMessageUpload: globalVariables/* errorMessages */.xc.invalidHandUpload\n}];\nfunction getCategoryFactorybyID(id_) {\n  return CategoryFactoriesConfig.find(function (x) {\n    return x.id === id_;\n  });\n}\nfunction getCategoryFactorybyIndex(index) {\n  return CategoryFactoriesConfig[index];\n}\n;// CONCATENATED MODULE: ./src/threeComponents/scene_manager.js\nfunction scene_manager_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction scene_manager_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? scene_manager_ownKeys(Object(source), !0).forEach(function (key) { scene_manager_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : scene_manager_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction scene_manager_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\nfunction scene_manager_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction scene_manager_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction scene_manager_createClass(Constructor, protoProps, staticProps) { if (protoProps) scene_manager_defineProperties(Constructor.prototype, protoProps); if (staticProps) scene_manager_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar cameraDistance = function cameraDistance(height, fov) {\n  return height / 2 / Math.tan(fov / 2 * Math.PI / 180);\n};\nvar response = null;\nvar SceneManager = /*#__PURE__*/function () {\n  function SceneManager(canvas) {\n    var _this = this;\n    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var useOrtho = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    scene_manager_classCallCheck(this, SceneManager);\n    this.canvas = canvas;\n    this.scene = new three_module/* Scene */.Z58();\n    this.ambientLight;\n    this.directionalLight;\n    //0xfdf3c6\n    this.ambientLight = new three_module/* AmbientLight */.$p8(0xffffff, 0.7);\n    this.ambientLight.castShadow = false;\n    this.scene.add(this.ambientLight);\n    this.directionalLight = new three_module/* DirectionalLight */.ZyN(0xffffff, 1);\n    this.directionalLight.position.set(0, 5, 500);\n    this.directionalLight.castShadow = false;\n    this.scene.add(this.directionalLight);\n    this.scene.fog = null;\n    this.debug = debug;\n    this.useOrtho = useOrtho;\n    this.renderer = new three_module/* WebGLRenderer */.JeP({\n      canvas: this.canvas,\n      devicePixelRation: window.devicePixelRatio || 1,\n      antialias: true,\n      // antialiasSampleCount: 8,\n      preserveDrawingBuffer: true\n    });\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setClearColor(0xfefefe);\n    this.renderer.shadowMap.enabled = false;\n    this.pmremGenerator = new three_module/* PMREMGenerator */.BdL(this.renderer);\n    this.roomEnvironment = new RoomEnvironment/* RoomEnvironment */.l(this.renderer);\n\n    // this.pmremGenerator = new THREE.PMREMGenerator(this.renderer);\n    this.ligtingEnv = this.pmremGenerator.fromScene(this.roomEnvironment, 10, 0, 2000).texture;\n    this.loader = new RGBELoader/* RGBELoader */.Y();\n    this.loader.load(assets_env, function (texture) {\n      texture.mapping = three_module/* EquirectangularReflectionMapping */.wfO;\n      _this.envMap = _this.pmremGenerator.fromEquirectangular(texture).texture;\n      texture.needsUpdate = true;\n      _this.scene.background = _this.envMap;\n      _this.scene.environment = _this.envMap;\n      //this.scene.environmentIntensity = 0.8;\n      //this.scene.environmentRotation = new THREE.Euler(0, -0.1, 0);\n      //envtexture = texture;\n      texture.dispose();\n      _this.pmremGenerator.dispose();\n      _this.scene.remove(_this.ambientLight);\n      _this.scene.remove(_this.directionalLight);\n    });\n    this.renderer.toneMapping = three_module/* ACESFilmicToneMapping */.FV;\n    this.renderer.toneMappingExposure = 1;\n    this.CurrentTryon = "";\n    this.fov = 63;\n    this.videoBg = null;\n    this.styles = [];\n    this.factories = [];\n    this.modelsData = [];\n    this.lastLandmarks;\n    this.lastOGFaceLandmarks;\n    this.lastHairMask;\n    this.lastNailMask;\n    this.lastImageFrame;\n    this.buildCamera();\n    this.buildControls();\n    this.buildVideoBg();\n    this.isVideo = true;\n    this.trueVideoWidth = 640;\n    this.trueVideoHeight = 480;\n    this.calculatedWidth = 640;\n    this.calculatedHeight = 480;\n    this.calculatedOffset = 0;\n    this.cameraZoom = 1;\n    this.cameraZoomFactor = 0.1;\n    this.cameraZoomMax = 1.3;\n    this.modelsMap = {};\n    this.currentML = null;\n    this.buildFaceMask();\n    this.faceMask.hide();\n\n    // this.scene.fog = new THREE.Fog(0xffffff, -150, 100);\n    // this.depthRenderTarget = new THREE.WebGLRenderTarget(\n    //   window.innerWidth,\n    //   window.innerHeight,\n    //   {\n    //     format: THREE.RGBAFormat,\n    //     type: THREE.FloatType, // Use FloatType for depth precision\n    //   }\n    // );\n  }\n  scene_manager_createClass(SceneManager, [{\n    key: "buildFaceMask",\n    value: function buildFaceMask() {\n      // this component draws faces\n      this.faceMask = new FaceMask(this.scene, this.renderer.domElement.width / 2, this.renderer.domElement.height / 2);\n    }\n  }, {\n    key: "takeScreenShot",\n    value: function takeScreenShot() {\n      // console.log("take shot being taken");\n      this.renderer.render(this.scene, this.camera);\n      var screenshotDataURL = this.renderer.domElement.toDataURL("image/jpeg");\n      return screenshotDataURL;\n    }\n  }, {\n    key: "setAPIResponse",\n    value: function setAPIResponse(apiResponse) {\n      response = apiResponse;\n      if (response && response.sku.subCategory) {\n        var categoryName = response.sku.category.toLowerCase();\n        this.buildStyles();\n      } else {\n        errorPanel_showErrorPermissionPanel();\n        emitModuleClosed();\n      }\n    }\n  }, {\n    key: "setModelAPIResponse",\n    value: function setModelAPIResponse(apiResponse) {\n      response = apiResponse;\n      if (response && response.length > 0) {\n        this.buildModels(response);\n      } else {}\n    }\n  }, {\n    key: "mapConfigData",\n    value: function mapConfigData(apiResponse) {}\n  }, {\n    key: "buildVideoBg",\n    value: function buildVideoBg() {\n      this.videoBg = new VideoBackground(this.scene, this.renderer.domElement.width / 2, this.renderer.domElement.height / 2);\n    }\n  }, {\n    key: "buildControls",\n    value: function buildControls() {\n      if (this.debug) {\n        this.controls = new OrbitControls/* OrbitControls */.N(this.camera, this.renderer.domElement);\n        this.controls.enableDamping = true;\n        this.controls.update();\n      }\n    }\n  }, {\n    key: "buildCamera",\n    value: function buildCamera() {\n      this.useOrtho ? this.buildOrthoCamera() : this.buildPerspectiveCamera();\n    }\n  }, {\n    key: "buildOrthoCamera",\n    value: function buildOrthoCamera() {\n      var aspect = window.innerWidth / window.innerHeight;\n      this.camera = new three_module/* OrthographicCamera */.qUd(1 * aspect / -2, 1 * aspect / 2, 1 / 2, 1 / -2, -2000, 2000);\n      this.camera.position.z = 1;\n    }\n  }, {\n    key: "buildPerspectiveCamera",\n    value: function buildPerspectiveCamera() {\n      this.camera = new three_module/* PerspectiveCamera */.ubm(this.fov, this.renderer.domElement.width / this.renderer.domElement.height, 1.0,\n      // near\n      10000 // far\n      );\n      this.camera.position.z = cameraDistance(this.renderer.domElement.height, this.fov);\n    }\n  }, {\n    key: "buildStyles",\n    value: function buildStyles() {\n      var _this2 = this;\n      var naildata;\n      if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n        this.styles.forEach(function (style) {\n          if (style.classType.isNailStyleFactoryInstance) {\n            naildata = style.classType.getNailData();\n          }\n        });\n      }\n\n      //if (getCurrentTryon().MLModelInUse !== this.currentML) {\n      this.styles.forEach(function (style) {\n        style.classType.removeFaces();\n      });\n      this.styles = [];\n      this.faceMask.hide();\n      // }\n\n      this.currentML = getCurrentTryon().MLModelInUse;\n      if (getCurrentTryon().useHDR) {\n        this.scene.remove(this.directionalLight);\n        this.scene.remove(this.ambientLight);\n        this.scene.environment = this.envMap;\n        this.renderer.toneMapping = three_module/* ACESFilmicToneMapping */.FV;\n      } else {\n        this.scene.add(this.directionalLight);\n        this.scene.add(this.ambientLight);\n        this.scene.environment = this.ligtingEnv;\n        this.renderer.toneMapping = three_module/* NoToneMapping */.y_p;\n      }\n      var factory = {\n        MLType: getCurrentTryon().MLModelInUse,\n        classType: getCurrentTryon().factoryClass.createStyle(response, this.scene, this.renderer.domElement.width / 2, this.renderer.domElement.height / 2, this)\n      };\n      this.styles.push(factory);\n      if (getCurrentTryon().usesFaceMaskOcclusion) {\n        this.faceMask.show();\n        this.faceMask.setConfigOffset(getCurrentTryon().faceMaskOffset);\n      } else {\n        this.faceMask.hide();\n      }\n      if (naildata) {\n        console.log(naildata, this.styles);\n        this.styles.forEach(function (style) {\n          style.classType.setNailData(naildata);\n          style.classType.addrendring();\n          if (_this2.isVideo) {\n            style.classType.updateDimensions(_this2.calculatedWidth, _this2.calculatedHeight, _this2.calculatedOffset);\n          } else {\n            style.classType.updateDimensions(_this2.videoWidth, _this2.videoHeight, 1);\n          }\n          style.classType.update();\n        });\n      }\n      if (!this.isVideo) {\n        if (getCurrentTryon().MLModelInUse === TrackingMode.Hair) {\n          this.onHairSegment(this.lastImageFrame, this.lastHairMask, false);\n        } else if (getCurrentTryon().MLModelInUse === TrackingMode.Face) {\n          this.onLandmarks(null, this.lastLandmarks, this.lastOGFaceLandmarks, this.isVideo);\n        } else if (getCurrentTryon().MLModelInUse === TrackingMode.Hand) {\n          if (getCurrentTryon().id !== CategoryFactories.nailcolor) {\n            this.onHandsLandmarks(this.lastImageFrame, this.lastHandLandmarks, this.lastHandedness, this.isVideo, this.lastNailMask);\n          }\n        }\n        this.setImageTryonSettings(this.videoWidth, this.videoHeight);\n      }\n      emitSKUApplied();\n    }\n  }, {\n    key: "buildModels",\n    value: function buildModels(_models) {\n      var _this3 = this;\n      _models.forEach(function (modelElements, idx) {\n        var modelAssets = modelElements.items;\n        modelAssets.forEach(function (itemsElements) {\n          var provider = new modelDataProvider(itemsElements);\n          _this3.modelsData.push(scene_manager_objectSpread({}, provider));\n        });\n      });\n    }\n  }, {\n    key: "getModelData",\n    value: function getModelData() {\n      console.log(this.modelsData, getCurrentTryon().modelCategory, getCurrentTryon().modelSubCategory);\n      return this.modelsData.filter(function (model) {\n        return model.category === getCurrentTryon().modelCategory && model.subCategory === getCurrentTryon().modelSubCategory;\n      });\n    }\n  }, {\n    key: "updateCamera",\n    value: function updateCamera() {\n      var aspect = window.innerWidth / window.innerHeight;\n      var width, height;\n      var scale;\n      if (this.trueVideoHeight < this.trueVideoWidth) scale = this.trueVideoHeight;else scale = this.trueVideoWidth;\n      if (window.innerWidth > window.innerHeight) {\n        width = scale / 2;\n        height = scale / aspect / 2;\n      } else {\n        width = scale * aspect / 2;\n        height = scale / 2;\n      }\n\n      // Orthographic\'s way\n      this.camera.right = width;\n      this.camera.left = -width;\n      this.camera.top = height;\n      this.camera.bottom = -height;\n    }\n  }, {\n    key: "updateCameraZoom",\n    value: function updateCameraZoom(state) {\n      var video = getVideo();\n      var img = sdkEngine_getInputImage();\n      var isVideoMode = getIsVideo();\n      var _getHtmlElements = getHtmlElements(),\n        canvas = _getHtmlElements.canvas;\n      if (state === "up") {\n        var _ref;\n        var currenZoom = this.cameraZoom;\n        var total = parseFloat((_ref = currenZoom + this.cameraZoomFactor) === null || _ref === void 0 ? void 0 : _ref.toPrecision(2));\n        if (total <= this.cameraZoomMax) {\n          enableSettingIcon("zoomOut");\n          if (total === this.cameraZoomMax) {\n            disableSettingIcon("zoomIn");\n          }\n          if (isVideoMode) {\n            video.style.transform = "scale(".concat(total, ")");\n            canvas.style.transform = "scaleX(-1) scale(".concat(total, ")");\n            this.cameraZoom = total;\n          } else {\n            img.style.transform = "scale(".concat(total, ")");\n            canvas.style.transform = "scaleX(1) scale(".concat(total, ")");\n            this.cameraZoom = total;\n          }\n        } else {\n          disableSettingIcon("zoomIn");\n        }\n      } else if (state === "down") {\n        var _ref2;\n        var _currenZoom = this.cameraZoom;\n        var _total = parseFloat((_ref2 = _currenZoom - this.cameraZoomFactor) === null || _ref2 === void 0 ? void 0 : _ref2.toPrecision(2));\n        if (_total >= 1) {\n          enableSettingIcon("zoomIn");\n          if (_total === 1) {\n            disableSettingIcon("zoomOut");\n          }\n          if (isVideoMode) {\n            video.style.transform = "scale(".concat(_total, ")");\n            canvas.style.transform = "scaleX(-1) scale(".concat(_total, ")");\n            this.cameraZoom = _total;\n          } else {\n            img.style.transform = "scale(".concat(_total, ")");\n            canvas.style.transform = "scaleX(1) scale(".concat(_total, ")");\n            this.cameraZoom = _total;\n          }\n        } else {\n          disableSettingIcon("zoomOut");\n        }\n      }\n    }\n  }, {\n    key: "resetZoomChanges",\n    value: function resetZoomChanges() {\n      this.camera.zoom = 1;\n      this.cameraZoom = this.camera.zoom;\n      this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: "updateCameraForImage",\n    value: function updateCameraForImage() {\n      if (!this.videoWidth || !this.videoHeight) return;\n      this.camera.aspect = this.videoWidth / this.videoHeight;\n      if (this.camera.type === "OrthographicCamera") {\n        this.camera.top = this.videoHeight / 2;\n        this.camera.bottom = -this.videoHeight / 2;\n        this.camera.left = -this.videoWidth / 2;\n        this.camera.right = this.videoWidth / 2;\n      } else {\n        this.camera.position.z = cameraDistance(this.videoHeight, this.fov);\n      }\n      // this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: "animate",\n    value: function animate(isVideo) {\n      this.isVideo = isVideo;\n      if (!isVideo) this.updateCameraForImage();\n      if (this.scene && this.camera) {\n        // this.renderer.setRenderTarget(this.depthRenderTarget);\n        // this.renderer.clear();\n        // this.renderer.render(this.scene, this.camera);\n\n        // this.styles.forEach((style) => {\n        //   style.classType.test();\n        // });\n\n        // this.renderer.setRenderTarget(null); // Render to the screen\n        // this.renderer.clear();\n        this.renderer.render(this.scene, this.camera);\n      }\n      if (this.controls) {\n        this.controls.update();\n      }\n    }\n  }, {\n    key: "Clear",\n    value: function Clear() {\n      this.styles.forEach(function (style) {\n        style.classType.removeFaces();\n      });\n      if (getCurrentTryon().id !== CategoryFactories.nailcolor) {\n        this.styles = [];\n      }\n      if (getCurrentTryon().usesFaceMaskOcclusion) this.faceMask.hide();\n    }\n  }, {\n    key: "forceUpdateCurrentStyle",\n    value: function forceUpdateCurrentStyle() {\n      this.styles.forEach(function (style) {\n        style.classType.update();\n      });\n      if (getCurrentTryon().usesFaceMaskOcclusion) this.faceMask.forceUpdate();\n    }\n  }, {\n    key: "setForceHideTryons",\n    value: function setForceHideTryons(state) {\n      this.isForceHideTryon = state;\n      if (state === true) {\n        if (this.styles !== undefined && this.styles.length > 0) {\n          this.styles.forEach(function (style) {\n            style.classType.hide();\n          });\n        }\n      } else if (state === false) {\n        this.styles.forEach(function (style) {\n          style.classType.show();\n        });\n      }\n    }\n  }, {\n    key: "shouldForceHideTryons",\n    value: function shouldForceHideTryons() {\n      return this.isForceHideTryon;\n    }\n  }, {\n    key: "createNewPlane",\n    value: function createNewPlane(video) {\n      this.videoBg.createNewPlane(video);\n      this.videoBg.update();\n    }\n  }, {\n    key: "updatePlaneWithImage",\n    value: function updatePlaneWithImage(texture) {\n      this.videoBg.updatePlaneWithImage(texture);\n      this.videoBg.updateDimensions(this.videoWidth, this.videoHeight);\n      if (this.scene && this.camera) this.camera.updateProjectionMatrix();\n      this.renderer.render(this.scene, this.camera);\n    }\n  }, {\n    key: "resize",\n    value: function resize(videoWidth, videoHeight) {\n      this.videoWidth = videoWidth;\n      this.videoHeight = videoHeight;\n    }\n  }, {\n    key: "onLandmarks",\n    value: function onLandmarks(image, landmarks, ogLandmarks, isvideo) {\n      var _this4 = this;\n      this.isVideo = isvideo;\n      if (landmarks) {\n        this.lastLandmarks = landmarks;\n        this.lastOGFaceLandmarks = ogLandmarks;\n        if (this.faceMask) {\n          if (getCurrentTryon().usesFaceMaskOcclusion) {\n            this.faceMask.updateLandmarks(landmarks);\n            if (isvideo) this.faceMask.updateDimensions(this.calculatedWidth, this.calculatedHeight);else this.faceMask.updateDimensions(this.videoWidth, this.videoHeight);\n            this.faceMask.update();\n            this.faceMask.show();\n            this.faceMask.setConfigOffset(getCurrentTryon().faceMaskOffset);\n          } else {\n            this.faceMask.hide();\n          }\n        }\n        this.styles.forEach(function (style) {\n          style.classType.updateLandmarks(landmarks, ogLandmarks);\n          style.classType.setVisibility(true);\n          if (isvideo) style.classType.updateDimensions(_this4.calculatedWidth, _this4.calculatedHeight);else style.classType.updateDimensions(_this4.videoWidth, _this4.videoHeight);\n          style.classType.update();\n        });\n        hideAlignMessagePanel();\n        // this.postest.updateLandmarks(landmarks);\n      } else {\n        //if (image) this.videoBg.setImage(image, isvideo);\n        this.styles.forEach(function (style) {\n          style.classType.setVisibility(false);\n        });\n        if (isvideo) {\n          updateAlignUI("face", globalVariables/* errorMessages */.xc.invisbileLiveFace);\n          showAlignMessagePanel();\n          event_emitError(globalVariables/* errorMessages */.xc.invisbileLiveFace);\n        } else {\n          updateAlignUI("face", globalVariables/* errorMessages */.xc.invalidFaceUpload);\n          showAlignMessagePanel();\n          event_emitError(globalVariables/* errorMessages */.xc.invalidFaceUpload);\n        }\n      }\n    }\n  }, {\n    key: "onImageFrame",\n    value: function onImageFrame(image, isvideo) {\n      if (image) {\n        this.styles.forEach(function (style) {\n          style.classType.removeFaces();\n        });\n        this.videoBg.setImage(image, isvideo);\n      }\n    }\n  }, {\n    key: "onHairSegment",\n    value: function onHairSegment(image, maskData, isvideo) {\n      var _this5 = this;\n      this.isVideo = isvideo;\n      if (maskData) {\n        // this.videoBg.setImage(image, true, isvideo);\n        if (maskData) {\n          this.lastHairMask = maskData;\n          this.lastImageFrame = image;\n          console.log(this.styles);\n          this.styles.forEach(function (style) {\n            style.classType.updateMask(image, maskData, isvideo);\n            style.classType.setVisibility(true);\n            if (isvideo) style.classType.updateDimensions(_this5.calculatedWidth, _this5.calculatedHeight);else style.classType.updateDimensions(_this5.videoWidth, _this5.videoHeight);\n            style.classType.update();\n          });\n          hideAlignMessagePanel();\n        } else {\n          this.styles.forEach(function (style) {\n            style.classType.setVisibility(false);\n          });\n          if (isvideo) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n          } else {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageUpload);\n            showAlignMessagePanel();\n          }\n        }\n      }\n    }\n  }, {\n    key: "onHandsLandmarks",\n    value: function onHandsLandmarks(image, landmarks, handedness, isVideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle) {\n      var _this6 = this;\n      this.isVideo = isVideo;\n      if (landmarks && maskData) {\n        this.lastNailMask = maskData;\n        this.lastImageFrame = image;\n        this.lastHandLandmarks = landmarks;\n        this.lastHandedness = handedness;\n        if (getCurrentTryon().id === CategoryFactories.watch) hideAlignMessagePanel();\n        this.styles.forEach(function (style) {\n          style.classType.updateLandmarks(landmarks, handedness);\n          style.classType.updateMask(image, maskData, x_cord, y_cord, x2_cord, y2_cord, angle, _this6.isVideo);\n          if (isVideo) style.classType.updateDimensions(_this6.calculatedWidth, _this6.calculatedHeight, _this6.calculatedOffset);else {\n            style.classType.updateDimensions(_this6.videoWidth, _this6.videoHeight, 1);\n          }\n          style.classType.update();\n        });\n      } else {\n        if (getCurrentTryon().id !== CategoryFactories.nailcolor) {\n          if (this.styles !== undefined && this.styles.length > 0) {\n            this.styles.forEach(function (style) {\n              style.classType.setVisibility(false);\n            });\n          }\n          if (isVideo) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n          } else {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageUpload);\n            showAlignMessagePanel();\n          }\n        }\n      }\n    }\n  }, {\n    key: "downloadSnap",\n    value: function downloadSnap() {\n      this.styles.forEach(function (style) {\n        style.classType.downloadSnap();\n      });\n    }\n  }, {\n    key: "resetHandLandmark",\n    value: function resetHandLandmark() {\n      this.resetTryons();\n    }\n  }, {\n    key: "resetTryons",\n    value: function resetTryons() {\n      this.styles.forEach(function (style) {\n        style.classType.removeFaces();\n      });\n    }\n  }, {\n    key: "resetNailData",\n    value: function resetNailData() {\n      this.styles.forEach(function (style) {\n        style.classType.clearNailData();\n      });\n    }\n  }, {\n    key: "setImageTryonSettings",\n    value: function setImageTryonSettings(width, height) {\n      this.videoWidth = width;\n      this.videoHeight = height;\n      this.calculatedWidth = width;\n      this.calculatedHeight = width;\n      this.styles.forEach(function (style) {\n        style.classType.updateDimensions(width, height);\n      });\n      if (this.faceMask) this.faceMask.updateDimensions(width, height);\n      this.updateCameraForImage();\n      this.renderer.setSize(width, height);\n      this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: "clearSceneCanvas",\n    value: function clearSceneCanvas() {\n      this.videoBg.removePlaneFromScene();\n    }\n  }, {\n    key: "setVideoTryonSettings",\n    value: function setVideoTryonSettings(width, height) {\n      var _this7 = this;\n      this.trueVideoWidth = width;\n      this.trueVideoHeight = height;\n      this.videoWidth = window.innerWidth;\n      this.videoHeight = window.innerHeight;\n      this.updateCamera();\n      this.calculatedVidoeDimensions();\n      this.styles.forEach(function (style) {\n        style.classType.updateDimensions(_this7.calculatedWidth, _this7.calculatedHeight);\n      });\n      this.camera.updateProjectionMatrix();\n      this.videoBg.update(this.calculatedWidth, this.calculatedHeight);\n      this.renderer.setSize(window.innerWidth, window.innerHeight, true);\n    }\n  }, {\n    key: "resizeCamera",\n    value: function resizeCamera() {\n      var _this8 = this;\n      if (this.isVideo) {\n        this.videoWidth = window.innerWidth;\n        this.videoHeight = window.innerHeight;\n        this.updateCamera();\n        this.calculatedVidoeDimensions();\n        this.styles.forEach(function (style) {\n          style.classType.updateDimensions(_this8.calculatedWidth, _this8.calculatedHeight, _this8.calculatedOffset);\n        });\n        this.camera.updateProjectionMatrix();\n        this.videoBg.update(this.calculatedWidth, this.calculatedHeight);\n        this.renderer.setSize(window.innerWidth, window.innerHeight, true);\n      }\n    }\n  }, {\n    key: "calculatedVidoeDimensions",\n    value: function calculatedVidoeDimensions() {\n      var _getHtmlElements2 = getHtmlElements(),\n        log = _getHtmlElements2.log;\n      this.log = log;\n      var windowAspect;\n      var mql = window.matchMedia("(orientation: portrait)");\n      var cw = this.trueVideoWidth;\n      var ch = this.trueVideoHeight;\n      var videoAspect;\n      if (mql.matches && (0,globalVariables/* isMobileDevice */.Xb)()) {\n        windowAspect = window.innerHeight / window.innerWidth;\n        videoAspect = ch / cw;\n      } else {\n        windowAspect = window.innerWidth / window.innerHeight;\n        videoAspect = cw / ch;\n      }\n      // videoAspect = ch / cw;\n      var offset = 1;\n      var diff = 0;\n      if (mql.matches && (0,globalVariables/* isMobileDevice */.Xb)()) {\n        offset = videoAspect;\n        if (videoAspect > windowAspect) {\n          offset = windowAspect;\n        }\n      } else {\n        if (windowAspect < videoAspect) {\n          diff = videoAspect - windowAspect;\n          offset = videoAspect - diff;\n          if (windowAspect < 1) offset = 1;\n        } else {\n          offset = videoAspect;\n        }\n      }\n      this.log.innerHTML = "v31+".concat(windowAspect, " + ").concat(videoAspect, " + ").concat(offset, "\\n    + ").concat(this.trueVideoWidth, "+ ").concat(this.trueVideoHeight, " +").concat(window.innerWidth, "+").concat(window.innerHeight, "\\n    +").concat(mql.matches, "+").concat(diff, "+").concat((0,globalVariables/* isMobileDevice */.Xb)());\n      this.calculatedWidth = cw / offset;\n      this.calculatedHeight = ch / offset;\n      this.calculatedOffset = offset;\n    }\n  }]);\n  return SceneManager;\n}();\n;// CONCATENATED MODULE: ./src/htmlService/modelService.js\nfunction modelService_slicedToArray(arr, i) { return modelService_arrayWithHoles(arr) || modelService_iterableToArrayLimit(arr, i) || modelService_unsupportedIterableToArray(arr, i) || modelService_nonIterableRest(); }\nfunction modelService_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction modelService_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction modelService_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction modelService_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = modelService_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction modelService_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return modelService_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return modelService_arrayLikeToArray(o, minLen); }\nfunction modelService_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\nvar models;\nvar isPortrait = false;\nvar modelsContainerDiv = null;\nvar modelsElementsList = (/* unused pure expression or super */ null && ([]));\nvar modelsElementsSelectedList = (/* unused pure expression or super */ null && ([]));\nvar modelsElementsDiv = (/* unused pure expression or super */ null && ([]));\nvar initModelContainer = function initModelContainer(container) {\n  modelsContainerDiv = container;\n};\nvar createModels = function createModels(modelsList, handler) {\n  var mql = window.matchMedia("(orientation: portrait)");\n  isPortrait = mql.matches;\n  modelsContainerDiv.innerHTML = "";\n  models = modelsList;\n  var _iterator = modelService_createForOfIteratorHelper(modelsList.entries()),\n    _step;\n  try {\n    var _loop = function _loop() {\n      var _step$value = modelService_slicedToArray(_step.value, 2),\n        index = _step$value[0],\n        value = _step$value[1];\n      var modelIconDiv = document.createElement("div");\n      if (isPortrait) {\n        modelIconDiv.style.width = "50px";\n        modelIconDiv.style.height = "65.5px";\n      } else {\n        modelIconDiv.style.width = "70px";\n        modelIconDiv.style.height = "92px";\n      }\n      modelsContainerDiv.appendChild(modelIconDiv);\n      var imgElement = document.createElement("img");\n      imgElement.id = "model" + index.toString();\n      imgElement.style.width = "100%";\n      imgElement.style.height = "100%";\n      if (hasGlobalAssetKey(value.imageUrl)) {\n        var cachedImgsrc = getGlobalCacheAsset(value.imageUrl);\n        imgElement.src = cachedImgsrc;\n      } else {\n        imgElement.src = value.imageUrl;\n        addToGlobalCache(value.imageUrl, imgElement.src);\n        // document.body.appendChild(imgElement);\n      }\n      modelIconDiv.appendChild(imgElement);\n      var imgEyeElement = document.createElement("img");\n      imgEyeElement.style.position = "relative";\n      imgEyeElement.style.top = "-75%";\n      imgEyeElement.style.left = "25%";\n      imgEyeElement.style.width = "50%";\n      imgEyeElement.style.height = "50%";\n      imgEyeElement.src = modelSelectionIcons.selected;\n      modelIconDiv.appendChild(imgEyeElement);\n      imgEyeElement.style.display = "none";\n      imgElement.addEventListener("click", function () {\n        handleClickEvent(value, index, handler);\n        //handler(value);\n      });\n      modelsElementsDiv.push(modelIconDiv);\n      modelsElementsList.push(imgElement);\n      modelsElementsSelectedList.push(imgEyeElement);\n    };\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\nvar handleClickEvent = function handleClickEvent(value, index, handler) {\n  toggleModelsSelectedImage(index);\n  handler(value);\n};\nvar toggleModelsSelectedImage = function toggleModelsSelectedImage(index) {\n  //  console.log("index" + index);\n  modelsElementsSelectedList[index].style.display = "block";\n  modelsElementsList[index].style.filter = "brightness(0.5)";\n  models.forEach(function (each, idx) {\n    if (index !== idx) {\n      modelsElementsSelectedList[idx].style.display = "none";\n      modelsElementsList[idx].style.filter = "none";\n    }\n  });\n};\nvar modelService_setVisibilityOfModels = function setVisibilityOfModels(modelsList, type) {\n  for (var i = 0; i < modelsList.length; i++) {\n    if (modelsList[i].subCategory === type) {\n      //let model = document.getElementById(`model${i}`);\n      var model = modelsElementsDiv[i];\n      if (model) model.style.display = "block";\n    } else {\n      var _model = modelsElementsDiv[i];\n      //let model = document.getElementById(`model${i}`);\n      if (_model) _model.style.display = "none";\n    }\n  }\n};\nvar imageTrackingWithDefaultModel = function imageTrackingWithDefaultModel(modelsList, type) {\n  if (modelsList.length > 0) {\n    for (var i = 0; i < modelsList.length; i++) {\n      if (modelsList[i].subCategory === type) {\n        toggleModelsSelectedImage(i);\n        return modelsList[i].imageUrl;\n      }\n    }\n  }\n};\nvar showModelContainer = function showModelContainer() {\n  if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) return;\n  if (modelsContainerDiv) modelsContainerDiv.style.display = "flex";\n};\nvar hideModelContainer = function hideModelContainer() {\n  if (modelsContainerDiv) modelsContainerDiv.style.display = "none";\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.typed.uint8-clamped-array.js\nvar es6_typed_uint8_clamped_array = __webpack_require__(333);\n;// CONCATENATED MODULE: ./src/MLModels/selfie_multiclass_256x256.tflite\n/* harmony default export */ const selfie_multiclass_256x256_tflite = (__webpack_require__.p + "assets/src/MLModels/selfie_multiclass_256x256.tflite");\n;// CONCATENATED MODULE: ./src/MLModels/hair_segmenter.tflite\n/* harmony default export */ const hair_segmenter_tflite = (__webpack_require__.p + "assets/src/MLModels/hair_segmenter.tflite");\n;// CONCATENATED MODULE: ./src/MLModelProviders/hair_segment_provider.js\n\n\n\n\n\n\nfunction hair_segment_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction hair_segment_provider_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { hair_segment_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { hair_segment_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction hair_segment_provider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction hair_segment_provider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction hair_segment_provider_createClass(Constructor, protoProps, staticProps) { if (protoProps) hair_segment_provider_defineProperties(Constructor.prototype, protoProps); if (staticProps) hair_segment_provider_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction hair_segment_provider_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nvar hair_segment_provider_require = __webpack_require__(9848),\n  ImageSegmenter = hair_segment_provider_require.ImageSegmenter,\n  SegmentationMask = hair_segment_provider_require.SegmentationMask,\n  FilesetResolver = hair_segment_provider_require.FilesetResolver;\n\n\n\n\nvar legendColors = [[0, 0, 0, 0],\n// Vivid Yellow\n[0, 255, 0, 255],\n// Strong Purple\n[0, 0, 0, 0],\n// Vivid Orange\n[0, 0, 0, 0],\n// Very Light Blue\n[0, 0, 0, 0],\n// Vivid Red\n[0, 0, 0, 0] // Grayish Yellow\n];\nvar HairSegmentProvider = /*#__PURE__*/function () {\n  function HairSegmentProvider(callback) {\n    hair_segment_provider_classCallCheck(this, HairSegmentProvider);\n    hair_segment_provider_defineProperty(this, "canvas", void 0);\n    hair_segment_provider_defineProperty(this, "maskCanvas", void 0);\n    hair_segment_provider_defineProperty(this, "canvasCtx", void 0);\n    hair_segment_provider_defineProperty(this, "maskcanvasCtx", void 0);\n    hair_segment_provider_defineProperty(this, "video", void 0);\n    hair_segment_provider_defineProperty(this, "callback", void 0);\n    hair_segment_provider_defineProperty(this, "imageSegmenter", void 0);\n    hair_segment_provider_defineProperty(this, "labels", void 0);\n    hair_segment_provider_defineProperty(this, "image", void 0);\n    hair_segment_provider_defineProperty(this, "runningMode", "VIDEO");\n    this.callback = callback;\n    this.canvas = document.createElement("canvas");\n    this.maskCanvas = document.createElement("canvas");\n    this.canvasCtx = this.canvas.getContext("2d", {\n      willReadFrequently: true\n    });\n    this.maskcanvasCtx = this.maskCanvas.getContext("2d", {\n      willReadFrequently: true\n    });\n\n    // Ensure that the required properties are available\n    if (!this.canvas || !this.maskCanvas || !this.canvasCtx || !this.maskcanvasCtx) {\n      throw new Error("Canvas or context creation failed.");\n    }\n  }\n  hair_segment_provider_createClass(HairSegmentProvider, [{\n    key: "callbackForVideo",\n    value: function () {\n      var _callbackForVideo = hair_segment_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(result) {\n        var imageData, uint8ArrayInput, dataNewInput, mask, j, i, maskVal, index, legendColor, uint8Array, dataNew;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                try {\n                  imageData = this.canvasCtx.getImageData(0, 0, this.video.videoWidth, this.video.videoHeight).data;\n                  uint8ArrayInput = new Uint8ClampedArray(imageData);\n                  dataNewInput = new ImageData(uint8ArrayInput, this.video.videoWidth, this.video.videoHeight);\n                  this.canvasCtx.putImageData(dataNewInput, 0, 0);\n                  mask = result.categoryMask.getAsFloat32Array();\n                  j = 0; //console.log("mask", mask);\n                  for (i = 0; i < mask.length; ++i) {\n                    maskVal = Math.round(mask[i] * 255.0);\n                    index = maskVal % legendColors.length;\n                    legendColor = legendColors[index];\n                    imageData[j] = legendColor[0];\n                    imageData[j + 1] = legendColor[1];\n                    imageData[j + 2] = legendColor[2];\n                    imageData[j + 3] = legendColor[3];\n                    j += 4;\n                  }\n                  uint8Array = new Uint8ClampedArray(imageData.buffer);\n                  dataNew = new ImageData(uint8Array, this.video.videoWidth, this.video.videoHeight);\n                  this.callback(this.canvas, dataNew, true);\n                } catch (error) {\n                  // console.error("Callback processing failed:", error);\n                }\n              case 1:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function callbackForVideo(_x) {\n        return _callbackForVideo.apply(this, arguments);\n      }\n      return callbackForVideo;\n    }()\n  }, {\n    key: "callbackForImage",\n    value: function () {\n      var _callbackForImage = hair_segment_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(result) {\n        var imageData, mask, j, i, maskVal, index, legendColor, uint8Array, dataNew;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                try {\n                  imageData = this.canvasCtx.getImageData(0, 0, this.video.width, this.video.height).data; // let uint8ArrayInput = new Uint8ClampedArray(imageData);\n                  // let dataNewInput = new ImageData(\n                  //   uint8ArrayInput,\n                  //   this.video.width,\n                  //   this.video.height\n                  // );\n                  // this.canvasCtx.putImageData(dataNewInput, 0, 0);\n                  mask = result.categoryMask.getAsFloat32Array();\n                  j = 0;\n                  for (i = 0; i < mask.length; ++i) {\n                    maskVal = Math.round(mask[i] * 255.0);\n                    index = maskVal % legendColors.length;\n                    legendColor = legendColors[index];\n                    imageData[j] = legendColor[0];\n                    imageData[j + 1] = legendColor[1];\n                    imageData[j + 2] = legendColor[2];\n                    imageData[j + 3] = legendColor[3];\n                    j += 4;\n                  }\n                  uint8Array = new Uint8ClampedArray(imageData.buffer);\n                  dataNew = new ImageData(uint8Array, this.video.width, this.video.height);\n                  this.callback(this.canvas, dataNew, false);\n                } catch (error) {\n                  // console.error("Callback processing failed:", error);\n                }\n              case 1:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function callbackForImage(_x2) {\n        return _callbackForImage.apply(this, arguments);\n      }\n      return callbackForImage;\n    }()\n  }, {\n    key: "send",\n    value: function () {\n      var _send = hair_segment_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3(video, isVideo) {\n        var startTimeMs, imageData;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                if (!video) {\n                  _context3.next = 21;\n                  break;\n                }\n                if (!isVideo) {\n                  _context3.next = 14;\n                  break;\n                }\n                this.video = video;\n                if (this.video) {\n                  _context3.next = 6;\n                  break;\n                }\n                throw new Error("Video element is not provided.");\n              case 6:\n                this.canvas.width = video.videoWidth;\n                this.canvas.height = video.videoHeight;\n                this.canvasCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n                startTimeMs = performance.now();\n                _context3.next = 12;\n                return this.imageSegmenter.segmentForVideo(video, startTimeMs, this.callbackForVideo.bind(this));\n              case 12:\n                _context3.next = 21;\n                break;\n              case 14:\n                this.video = video;\n                this.canvas.width = this.video.width;\n                this.canvas.height = this.video.height;\n                this.canvasCtx.drawImage(this.video, 0, 0, this.video.width, this.video.height);\n\n                // Get ImageData from the canvas\n                imageData = this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n                _context3.next = 21;\n                return this.imageSegmenter.segment(imageData, this.callbackForImage.bind(this));\n              case 21:\n                _context3.next = 25;\n                break;\n              case 23:\n                _context3.prev = 23;\n                _context3.t0 = _context3["catch"](0);\n              case 25:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 23]]);\n      }));\n      function send(_x3, _x4) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: "createImageSegmenter",\n    value: function () {\n      var _createImageSegmenter = hair_segment_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var response, details, regexp, isMobileDevice, hairModel, vision;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                details = navigator.userAgent;\n                regexp = /android|iphone|kindle|ipad|webOS|iPod|BlackBerry|Windows Phone/i;\n                isMobileDevice = regexp.test(details);\n                if (!isMobileDevice) {\n                  _context4.next = 10;\n                  break;\n                }\n                _context4.next = 7;\n                return fetch("".concat(env/* default */.A.GlamAR_CDN, "original/glamar-ml-models/hair_segmenter.tflite"));\n              case 7:\n                response = _context4.sent;\n                _context4.next = 13;\n                break;\n              case 10:\n                _context4.next = 12;\n                return fetch("".concat(env/* default */.A.GlamAR_CDN, "original/glamar-ml-models/selfie_multiclass_256x256.tflite"));\n              case 12:\n                response = _context4.sent;\n              case 13:\n                if (response.ok) {\n                  _context4.next = 16;\n                  break;\n                }\n                throw new Error("Failed to fetch the model file from CDN");\n              case 16:\n                _context4.next = 18;\n                return FilesetResolver.forVisionTasks("".concat(PUBLIC_PATH, "/mediapipe/task-vision/wasm"));\n              case 18:\n                vision = _context4.sent;\n                _context4.next = 21;\n                return ImageSegmenter.createFromOptions(vision, {\n                  baseOptions: {\n                    modelAssetPath: response.url,\n                    delegate: "GPU"\n                  },\n                  outputCategoryMask: true,\n                  outputConfidenceMasks: false,\n                  runningMode: this.runningMode\n                });\n              case 21:\n                this.imageSegmenter = _context4.sent;\n                this.labels = this.imageSegmenter.getLabels();\n                this.init = true;\n                _context4.next = 30;\n                break;\n              case 26:\n                _context4.prev = 26;\n                _context4.t0 = _context4["catch"](0);\n                showErrorPermissionPanel();\n                this.init = false;\n                // Handle errors here\n                // console.error("Error in createImageSegmenter:", error);\n                // You might want to throw the error again to propagate it to the caller\n                //throw error;\n              case 30:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 26]]);\n      }));\n      function createImageSegmenter() {\n        return _createImageSegmenter.apply(this, arguments);\n      }\n      return createImageSegmenter;\n    }()\n  }, {\n    key: "initialize",\n    value: function () {\n      var _initialize = hair_segment_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.createImageSegmenter();\n              case 2:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: "IsInit",\n    value: function IsInit() {\n      return this.init;\n    }\n  }, {\n    key: "setSelfieMode",\n    value: function () {\n      var _setSelfieMode = hair_segment_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6(state) {\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (this.IsInit()) {\n                  _context6.next = 2;\n                  break;\n                }\n                return _context6.abrupt("return");\n              case 2:\n                if (!this.imageSegmenter) {\n                  _context6.next = 8;\n                  break;\n                }\n                if (!(this.getState() === state)) {\n                  _context6.next = 5;\n                  break;\n                }\n                return _context6.abrupt("return");\n              case 5:\n                if (state) this.runningMode = "VIDEO";else this.runningMode = "IMAGE";\n                _context6.next = 8;\n                return this.imageSegmenter.setOptions({\n                  runningMode: this.runningMode\n                });\n              case 8:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function setSelfieMode(_x5) {\n        return _setSelfieMode.apply(this, arguments);\n      }\n      return setSelfieMode;\n    }()\n  }, {\n    key: "getState",\n    value: function getState() {\n      if (this.runningMode === "IMAGE") return false;else return true;\n    }\n  }, {\n    key: "isSelfieMode",\n    value: function isSelfieMode() {\n      if (this.runningMode === "IMAGE") return true;else return false;\n    }\n  }, {\n    key: "setMode",\n    value: function setMode(state) {\n      if (!state) this.runningMode = "IMAGE";else this.runningMode = "VIDEO";\n    }\n  }]);\n  return HairSegmentProvider;\n}();\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(341);\n// EXTERNAL MODULE: ./node_modules/@mediapipe/hands/hands.js\nvar hands = __webpack_require__(8554);\n;// CONCATENATED MODULE: ./src/apiService/api-nail.js\n\n\n\nvar APINail = axios_default().create({\n  baseURL: env/* default */.A.GOKU_URL,\n  // baseURL: `https://3fae-125-22-237-50.ngrok-free.app`,\n  headers: {}\n});\nvar api_nail_setAuthorization = function setAuthorization() {\n  APINail.defaults.headers["Authorization"] = getAPIKey();\n};\nvar getNailSegmentation = function getNailSegmentation(imageFile, stringAngle, stringX, stringY) {\n  var formData = new FormData();\n  formData.append("image", imageFile);\n  var headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  return APINail.post("/api/v1/predict/allImage", formData, {\n    headers: headers\n  }).then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    throw error;\n  });\n};\nvar checkHelth = function checkHelth() {\n  return APINail.get("/_healthz").then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    throw error;\n  });\n};\nvar sendMeta = function sendMeta(requestId, tryOnType) {\n  return APINail.post("/meta", null, {\n    headers: {\n      "x-request-id": requestId,\n      "x-try-on-type": tryOnType\n    }\n  })["catch"]();\n};\nvar getSKUData = function getSKUData(id, apiKey) {\n  return APINail.get("/sku?id=".concat(id)).then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    throw error;\n  });\n};\n;// CONCATENATED MODULE: ./src/MLModels/hand_landmarker.task\n/* harmony default export */ const hand_landmarker = (__webpack_require__.p + "assets/src/MLModels/hand_landmarker.task");\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/chooseTryOn.css\nvar chooseTryOn = __webpack_require__(1510);\n;// CONCATENATED MODULE: ./src/htmlService/styles/chooseTryOn.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar chooseTryOn_options = {};\n\nchooseTryOn_options.styleTagTransform = (styleTagTransform_default());\nchooseTryOn_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      chooseTryOn_options.insert = insertBySelector_default().bind(null, "head");\n    \nchooseTryOn_options.domAPI = (styleDomAPI_default());\nchooseTryOn_options.insertStyleElement = (insertStyleElement_default());\n\nvar chooseTryOn_update = injectStylesIntoStyleTag_default()(chooseTryOn/* default */.A, chooseTryOn_options);\n\n\n\n\n       /* harmony default export */ const styles_chooseTryOn = (chooseTryOn/* default */.A && chooseTryOn/* default */.A.locals ? chooseTryOn/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./src/assets/svg/powered_by.svg\nvar powered_by = __webpack_require__(6509);\n;// CONCATENATED MODULE: ./src/htmlService/ChooseTryOn.js\n\n\n\n\n\nvar chooseTryOnConfig = {\n  tryOnScreen: {\n    hideTryOnScreen: false,\n    mode: "light",\n    tryOnTypeConfig: {\n      hideLiveCamera: false,\n      hideModelTryOn: false,\n      hideUploadMode: false\n    }\n  }\n};\nfunction overrideChooseTryOnConfig(config) {\n  chooseTryOnConfig = config;\n}\nfunction getChooseTryOnConfig() {\n  return chooseTryOnConfig;\n}\nvar ModelsList = [{\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}];\nvar modeMap = {\n  dark: "dark",\n  light: "light"\n};\nvar themeStyles = {\n  dark: {\n    heading_text: "#fff",\n    heading_subtext: "#DBDBDB",\n    live_tryon: "#404141",\n    live_tryon_left_text: "#DBDBDB",\n    arrow_right: "white",\n    choose_model_heading: "#fff",\n    model_tryon_upload: "#343536",\n    model_tryon_upload_icon: "#E7E7E7",\n    model_tryon_text: "#B7B8B8",\n    model_tryon_upload_border: "0.6px dashed #707071",\n    upload_image: "#404141",\n    upload_image_left_text: "#DBDBDB"\n  },\n  light: {\n    heading_text: "#101112",\n    heading_subtext: "#888889",\n    live_tryon: "#F1F1F1",\n    live_tryon_left_text: "#4C4D4D",\n    arrow_right: "#4C4D4D",\n    choose_model_heading: "#101112",\n    model_tryon_upload: "#E7E7E7",\n    model_tryon_upload_icon: "#4C4D4D",\n    model_tryon_text: "#888889",\n    model_tryon_upload_border: "1px dashed #9FA0A0",\n    upload_image: "#F1F1F1",\n    upload_image_left_text: "#4C4D4D"\n  },\n  "default": {\n    heading_text: "#101112",\n    heading_subtext: "#888889",\n    live_tryon: "#F1F1F1",\n    live_tryon_left_text: "#4C4D4D",\n    arrow_right: "#4C4D4D",\n    choose_model_heading: "#101112",\n    model_tryon_upload: "#E7E7E7",\n    model_tryon_upload_icon: "#4C4D4D",\n    model_tryon_text: "#888889",\n    model_tryon_upload_border: "1px dashed #9FA0A0",\n    upload_image: "#F1F1F1",\n    upload_image_left_text: "#4C4D4D"\n  }\n};\nfunction getLiveTryOnHtml(mode) {\n  var _themeStyles, _themeStyles2, _themeStyles3;\n  return "<div style=\\"background:".concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles = themeStyles[mode || "default"]) === null || _themeStyles === void 0 ? void 0 : _themeStyles.live_tryon, ";\\" class=\\"tryon_container_live_tryon\\">\\n            <div class=\\"tryon_container_live_tryon_left\\">\\n                <div class=\\"tryon_container_live_tryon_left_camera\\">\\n                    <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"25\\" viewBox=\\"0 0 24 25\\" fill=\\"none\\">\\n                        <path d=\\"M19 6.99994H17.72L17.4 5.99994C17.1926 5.41317 16.8077 4.90544 16.2989 4.5471C15.7901 4.18876 15.1824 3.99754 14.56 3.99994H9.44C8.81155 4.00111 8.19933 4.19962 7.68977 4.56744C7.1802 4.93527 6.79901 5.45383 6.6 6.04994L6.28 7.04994H5C4.20435 7.04994 3.44129 7.36601 2.87868 7.92862C2.31607 8.49123 2 9.25429 2 10.0499V18.0499C2 18.8456 2.31607 19.6087 2.87868 20.1713C3.44129 20.7339 4.20435 21.0499 5 21.0499H19C19.7956 21.0499 20.5587 20.7339 21.1213 20.1713C21.6839 19.6087 22 18.8456 22 18.0499V10.0499C22.0066 9.65179 21.9339 9.2563 21.7862 8.88653C21.6384 8.51676 21.4184 8.18011 21.1392 7.89622C20.86 7.61233 20.527 7.38687 20.1597 7.23299C19.7924 7.07911 19.3982 6.99988 19 6.99994ZM20 17.9999C20 18.2652 19.8946 18.5195 19.7071 18.707C19.5196 18.8946 19.2652 18.9999 19 18.9999H5C4.73478 18.9999 4.48043 18.8946 4.29289 18.707C4.10536 18.5195 4 18.2652 4 17.9999V9.99994C4 9.73472 4.10536 9.48037 4.29289 9.29283C4.48043 9.1053 4.73478 8.99994 5 8.99994H7C7.21807 9.01132 7.43386 8.95101 7.61443 8.82822C7.795 8.70544 7.93042 8.52692 8 8.31994L8.54 6.67994C8.60709 6.48132 8.7349 6.3088 8.90537 6.18678C9.07584 6.06476 9.28036 5.9994 9.49 5.99994H14.61C14.8196 5.9994 15.0242 6.06476 15.1946 6.18678C15.3651 6.3088 15.4929 6.48132 15.56 6.67994L16.1 8.31994C16.1642 8.51068 16.2844 8.67763 16.445 8.79895C16.6055 8.92027 16.799 8.99032 17 8.99994H19C19.2652 8.99994 19.5196 9.1053 19.7071 9.29283C19.8946 9.48037 20 9.73472 20 9.99994V17.9999ZM12 8.99994C11.2089 8.99994 10.4355 9.23453 9.77772 9.67406C9.11992 10.1136 8.60723 10.7383 8.30448 11.4692C8.00173 12.2001 7.92252 13.0044 8.07686 13.7803C8.2312 14.5562 8.61216 15.269 9.17157 15.8284C9.73098 16.3878 10.4437 16.7687 11.2196 16.9231C11.9956 17.0774 12.7998 16.9982 13.5307 16.6955C14.2616 16.3927 14.8864 15.88 15.3259 15.2222C15.7654 14.5644 16 13.7911 16 12.9999C16 11.9391 15.5786 10.9217 14.8284 10.1715C14.0783 9.42137 13.0609 8.99994 12 8.99994ZM12 14.9999C11.6044 14.9999 11.2178 14.8826 10.8889 14.6629C10.56 14.4431 10.3036 14.1308 10.1522 13.7653C10.0009 13.3999 9.96126 12.9977 10.0384 12.6098C10.1156 12.2218 10.3061 11.8654 10.5858 11.5857C10.8655 11.306 11.2219 11.1155 11.6098 11.0384C11.9978 10.9612 12.3999 11.0008 12.7654 11.1522C13.1308 11.3036 13.4432 11.5599 13.6629 11.8888C13.8827 12.2177 14 12.6044 14 12.9999C14 13.5304 13.7893 14.0391 13.4142 14.4142C13.0391 14.7892 12.5304 14.9999 12 14.9999Z\\" fill=\\"#DA0E64\\"/>\\n                    </svg>\\n                </div>\\n                <div style=\\"color:").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles2 = themeStyles[mode || "default"]) === null || _themeStyles2 === void 0 ? void 0 : _themeStyles2.live_tryon_left_text, ";\\" class=\\"tryon_container_live_tryon_left_text\\">\\n                     Live Camera\\n                </div>\\n            </div>\\n            <div class=\\"tryon_container_live_tryon_right\\">\\n                <svg width=\\"24\\" height=\\"25\\" viewBox=\\"0 0 24 25\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                    <g clip-path=\\"url(#clip0_10465_112862)\\">\\n                    <path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M14.7071 13.207C15.0976 12.8165 15.0976 12.1833 14.7071 11.7928L9.70711 6.79278C9.31658 6.40225 8.68342 6.40225 8.29289 6.79278C7.90237 7.1833 7.90237 7.81647 8.29289 8.20699L12.5858 12.4999L8.29289 16.7928C7.90237 17.1833 7.90237 17.8165 8.29289 18.207C8.68342 18.5975 9.31658 18.5975 9.70711 18.207L14.7071 13.207Z\\" fill=").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles3 = themeStyles[mode || "default"]) === null || _themeStyles3 === void 0 ? void 0 : _themeStyles3.arrow_right, " />\\n                    </g>\\n                    <defs>\\n                    <clipPath id=\\"clip0_10465_112862\\">\\n                    <rect width=\\"24\\" height=\\"24\\" fill=\\"white\\" transform=\\"translate(0 0.499939)\\"/>\\n                    </clipPath>\\n                    </defs>\\n                </svg>\\n            </div>\\n          </div>");\n}\nfunction getModelTryOnHtml(models, hideUploadTryOn, mode) {\n  var _themeStyles4, _themeStyles5, _themeStyles6, _themeStyles7, _themeStyles8;\n  var ModelsHtml = "<div>\\n            <div style=\\"color:".concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles4 = themeStyles[mode || "default"]) === null || _themeStyles4 === void 0 ? void 0 : _themeStyles4.choose_model_heading, ";\\" class=\\"tryon_container_choose_model_heading\\">\\n                Choose A Model\\n            </div>\\n            <div class=\\"tryon_container_model_tryon\\">\\n                        ").concat(models === null || models === void 0 ? void 0 : models.map(function (eachModel, index) {\n    return "\\n                                    ".concat(eachModel !== null && eachModel !== void 0 && eachModel.isActive ? "<div class=\\"tryon_container_model_tryon_container\\" \\">\\n                                                <img class=\\"tryon_container_model_tryon_image\\" id=\\"".concat(index, "\\" src=\\"").concat(eachModel === null || eachModel === void 0 ? void 0 : eachModel.imageUrl, "\\" />\\n                                           </div>") : null, "\\n                                ");\n  }).filter(function (eachModel) {\n    return Boolean(eachModel);\n  }).join(""), "\\n                        ").concat(!hideUploadTryOn ? "\\n                                <div style=\\"\\n                                    background:".concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles5 = themeStyles[mode || "default"]) === null || _themeStyles5 === void 0 ? void 0 : _themeStyles5.model_tryon_upload, ";\\n                                    border:").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles6 = themeStyles[mode || "default"]) === null || _themeStyles6 === void 0 ? void 0 : _themeStyles6.model_tryon_upload_border, ";\\" id=\\"tryon_container_model_tryon_upload\\" class=\\"tryon_container_model_tryon_upload\\">\\n                                    <div>\\n                                        <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"24\\" viewBox=\\"0 0 24 24\\" fill=\\"none\\">\\n                                        <path d=\\"M8.71 7.71L11 5.41V15C11 15.2652 11.1054 15.5196 11.2929 15.7071C11.4804 15.8946 11.7348 16 12 16C12.2652 16 12.5196 15.8946 12.7071 15.7071C12.8946 15.5196 13 15.2652 13 15V5.41L15.29 7.71C15.383 7.80372 15.4936 7.87812 15.6154 7.92889C15.7373 7.97966 15.868 8.00579 16 8.00579C16.132 8.00579 16.2627 7.97966 16.3846 7.92889C16.5064 7.87812 16.617 7.80372 16.71 7.71C16.8037 7.61703 16.8781 7.50643 16.9289 7.38457C16.9797 7.26271 17.0058 7.13201 17.0058 7C17.0058 6.86798 16.9797 6.73728 16.9289 6.61542C16.8781 6.49356 16.8037 6.38296 16.71 6.29L12.71 2.29C12.6149 2.19895 12.5028 2.12759 12.38 2.08C12.1365 1.97998 11.8635 1.97998 11.62 2.08C11.4972 2.12759 11.3851 2.19895 11.29 2.29L7.29 6.29C7.19676 6.38323 7.1228 6.49392 7.07234 6.61575C7.02188 6.73757 6.99591 6.86814 6.99591 7C6.99591 7.13186 7.02188 7.26242 7.07234 7.38424C7.1228 7.50607 7.19676 7.61676 7.29 7.71C7.38324 7.80323 7.49393 7.87719 7.61575 7.92766C7.73757 7.97812 7.86814 8.00409 8 8.00409C8.13186 8.00409 8.26243 7.97812 8.38425 7.92766C8.50607 7.87719 8.61676 7.80323 8.71 7.71ZM21 14C20.7348 14 20.4804 14.1054 20.2929 14.2929C20.1054 14.4804 20 14.7348 20 15V19C20 19.2652 19.8946 19.5196 19.7071 19.7071C19.5196 19.8946 19.2652 20 19 20H5C4.73478 20 4.48043 19.8946 4.29289 19.7071C4.10536 19.5196 4 19.2652 4 19V15C4 14.7348 3.89464 14.4804 3.70711 14.2929C3.51957 14.1054 3.26522 14 3 14C2.73478 14 2.48043 14.1054 2.29289 14.2929C2.10536 14.4804 2 14.7348 2 15V19C2 19.7956 2.31607 20.5587 2.87868 21.1213C3.44129 21.6839 4.20435 22 5 22H19C19.7957 22 20.5587 21.6839 21.1213 21.1213C21.6839 20.5587 22 19.7956 22 19V15C22 14.7348 21.8946 14.4804 21.7071 14.2929C21.5196 14.1054 21.2652 14 21 14Z\\" fill=").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles7 = themeStyles[mode || "default"]) === null || _themeStyles7 === void 0 ? void 0 : _themeStyles7.model_tryon_upload_icon, " />\\n                                        </svg>\\n                                        </div>\\n                                    <div style=\\"color:").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles8 = themeStyles[mode || "default"]) === null || _themeStyles8 === void 0 ? void 0 : _themeStyles8.model_tryon_text, ";\\">\\n                                        Upload Image\\n                                    </div>\\n                                </div>\\n                            ") : "", "\\n            </div>\\n        </div>\\n        ");\n  return ModelsHtml;\n}\nfunction getUploadTryOnHtml(mode) {\n  var _themeStyles9, _themeStyles10, _themeStyles11;\n  return "<div style=\\"background:".concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles9 = themeStyles[mode || "default"]) === null || _themeStyles9 === void 0 ? void 0 : _themeStyles9.upload_image, ";\\" class=\\"tryon_container_upload_tryon\\">\\n            <div class=\\"tryon_container_upload_tryon_left\\">\\n                <div class=\\"tryon_container_upload_tryon_left_camera\\">\\n                    <svg xmlns=\\"http://www.w3.org/2000/svg\\" width=\\"24\\" height=\\"25\\" viewBox=\\"0 0 24 25\\" fill=\\"none\\">\\n                        <path d=\\"M19 6.99994H17.72L17.4 5.99994C17.1926 5.41317 16.8077 4.90544 16.2989 4.5471C15.7901 4.18876 15.1824 3.99754 14.56 3.99994H9.44C8.81155 4.00111 8.19933 4.19962 7.68977 4.56744C7.1802 4.93527 6.79901 5.45383 6.6 6.04994L6.28 7.04994H5C4.20435 7.04994 3.44129 7.36601 2.87868 7.92862C2.31607 8.49123 2 9.25429 2 10.0499V18.0499C2 18.8456 2.31607 19.6087 2.87868 20.1713C3.44129 20.7339 4.20435 21.0499 5 21.0499H19C19.7956 21.0499 20.5587 20.7339 21.1213 20.1713C21.6839 19.6087 22 18.8456 22 18.0499V10.0499C22.0066 9.65179 21.9339 9.2563 21.7862 8.88653C21.6384 8.51676 21.4184 8.18011 21.1392 7.89622C20.86 7.61233 20.527 7.38687 20.1597 7.23299C19.7924 7.07911 19.3982 6.99988 19 6.99994ZM20 17.9999C20 18.2652 19.8946 18.5195 19.7071 18.707C19.5196 18.8946 19.2652 18.9999 19 18.9999H5C4.73478 18.9999 4.48043 18.8946 4.29289 18.707C4.10536 18.5195 4 18.2652 4 17.9999V9.99994C4 9.73472 4.10536 9.48037 4.29289 9.29283C4.48043 9.1053 4.73478 8.99994 5 8.99994H7C7.21807 9.01132 7.43386 8.95101 7.61443 8.82822C7.795 8.70544 7.93042 8.52692 8 8.31994L8.54 6.67994C8.60709 6.48132 8.7349 6.3088 8.90537 6.18678C9.07584 6.06476 9.28036 5.9994 9.49 5.99994H14.61C14.8196 5.9994 15.0242 6.06476 15.1946 6.18678C15.3651 6.3088 15.4929 6.48132 15.56 6.67994L16.1 8.31994C16.1642 8.51068 16.2844 8.67763 16.445 8.79895C16.6055 8.92027 16.799 8.99032 17 8.99994H19C19.2652 8.99994 19.5196 9.1053 19.7071 9.29283C19.8946 9.48037 20 9.73472 20 9.99994V17.9999ZM12 8.99994C11.2089 8.99994 10.4355 9.23453 9.77772 9.67406C9.11992 10.1136 8.60723 10.7383 8.30448 11.4692C8.00173 12.2001 7.92252 13.0044 8.07686 13.7803C8.2312 14.5562 8.61216 15.269 9.17157 15.8284C9.73098 16.3878 10.4437 16.7687 11.2196 16.9231C11.9956 17.0774 12.7998 16.9982 13.5307 16.6955C14.2616 16.3927 14.8864 15.88 15.3259 15.2222C15.7654 14.5644 16 13.7911 16 12.9999C16 11.9391 15.5786 10.9217 14.8284 10.1715C14.0783 9.42137 13.0609 8.99994 12 8.99994ZM12 14.9999C11.6044 14.9999 11.2178 14.8826 10.8889 14.6629C10.56 14.4431 10.3036 14.1308 10.1522 13.7653C10.0009 13.3999 9.96126 12.9977 10.0384 12.6098C10.1156 12.2218 10.3061 11.8654 10.5858 11.5857C10.8655 11.306 11.2219 11.1155 11.6098 11.0384C11.9978 10.9612 12.3999 11.0008 12.7654 11.1522C13.1308 11.3036 13.4432 11.5599 13.6629 11.8888C13.8827 12.2177 14 12.6044 14 12.9999C14 13.5304 13.7893 14.0391 13.4142 14.4142C13.0391 14.7892 12.5304 14.9999 12 14.9999Z\\" fill=\\"#DA0E64\\"/>\\n                    </svg>\\n                </div>\\n                <div style=\\"color:").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles10 = themeStyles[mode || "default"]) === null || _themeStyles10 === void 0 ? void 0 : _themeStyles10.upload_image_left_text, ";\\" class=\\"tryon_container_upload_tryon_left_text\\">\\n                     Upload Image\\n                </div>\\n            </div>\\n            <div class=\\"tryon_container_upload_tryon_right\\">\\n                <svg width=\\"24\\" height=\\"25\\" viewBox=\\"0 0 24 25\\" fill=\\"none\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n                    <g clip-path=\\"url(#clip0_10465_112862)\\">\\n                    <path fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\" d=\\"M14.7071 13.207C15.0976 12.8165 15.0976 12.1833 14.7071 11.7928L9.70711 6.79278C9.31658 6.40225 8.68342 6.40225 8.29289 6.79278C7.90237 7.1833 7.90237 7.81647 8.29289 8.20699L12.5858 12.4999L8.29289 16.7928C7.90237 17.1833 7.90237 17.8165 8.29289 18.207C8.68342 18.5975 9.31658 18.5975 9.70711 18.207L14.7071 13.207Z\\" fill=").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles11 = themeStyles[mode || "default"]) === null || _themeStyles11 === void 0 ? void 0 : _themeStyles11.arrow_right, " />\\n                    </g>\\n                    <defs>\\n                    <clipPath id=\\"clip0_10465_112862\\">\\n                    <rect width=\\"24\\" height=\\"24\\" fill=\\"white\\" transform=\\"translate(0 0.499939)\\"/>\\n                    </clipPath>\\n                    </defs>\\n                </svg>\\n            </div>\\n          </div>");\n}\nfunction buildTryOnScreen(handler) {\n  var _getHtmlElements = getHtmlElements(),\n    tryOnScreen = _getHtmlElements.tryOnScreen;\n  var hideTryOnScreen = chooseTryOnConfig.tryOnScreen.hideTryOnScreen;\n  var hideLiveTryOn = chooseTryOnConfig.tryOnScreen.tryOnTypeConfig.hideLiveCamera;\n  var hideModelTryOn = chooseTryOnConfig.tryOnScreen.tryOnTypeConfig.hideModelTryOn;\n  var hideUploadTryOn = chooseTryOnConfig.tryOnScreen.tryOnTypeConfig.hideUploadMode;\n  var mode = chooseTryOnConfig.tryOnScreen.mode === "dark" ? "dark" : "light";\n  var TryOnHtml = "";\n  tryOnScreen.classList.add("tryon_screen_".concat(modeMap[mode || "light"]));\n  if (!hideTryOnScreen) {\n    var _themeStyles12, _themeStyles13;\n    TryOnHtml = "\\n            <div class=\\"tryon_container\\">\\n                <div class=\\"tryon_container_heading\\">\\n                    <div style=\\"color:".concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles12 = themeStyles[mode || "default"]) === null || _themeStyles12 === void 0 ? void 0 : _themeStyles12.heading_text, ";\\" class=\\"tryon_container_heading_text\\">\\n                        Choose a Try-on Mode\\n                    </div>\\n                    <div style=\\"color:").concat(themeStyles === null || themeStyles === void 0 ? void 0 : (_themeStyles13 = themeStyles[mode || "default"]) === null || _themeStyles13 === void 0 ? void 0 : _themeStyles13.heading_subtext, ";\\" class=\\"tryon_container_heading_subtext\\">\\n                        Select and immerse yourself in personalized try-on experiences with ease.\\n                    </div>\\n                </div>\\n                ").concat(!hideLiveTryOn ? getLiveTryOnHtml(mode) : "", "\\n                ").concat(!hideModelTryOn ? getModelTryOnHtml(ModelsList, hideUploadTryOn, mode) : "", " \\n                ").concat(hideModelTryOn ? !hideUploadTryOn ? getUploadTryOnHtml(mode) : "" : "", "\\n\\n            </div>\\n        ");\n  }\n  // add html to div\n  tryOnScreen.innerHTML += TryOnHtml;\n  // attach eventhandlers\n  var liveTryOnContainer = document.querySelector(".tryon_container_live_tryon");\n  liveTryOnContainer === null || liveTryOnContainer === void 0 ? void 0 : liveTryOnContainer.addEventListener("click", function () {\n    handler("live");\n  });\n  var modelTryOnContainer = document.querySelector(".tryon_container_model_tryon");\n  modelTryOnContainer === null || modelTryOnContainer === void 0 ? void 0 : modelTryOnContainer.addEventListener("click", function (e) {\n    var _e$target;\n    var ModelId = e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.id;\n    if (!ModelId) return;\n    if (ModelId !== "tryon_container_model_tryon_upload") handler("modelTryOn", ModelId, null);\n  });\n  var uploadTryOnContainer = document.querySelector(".tryon_container_model_tryon_upload");\n  uploadTryOnContainer === null || uploadTryOnContainer === void 0 ? void 0 : uploadTryOnContainer.addEventListener("click", function () {\n    handler("upload");\n  });\n  var uploadTryOnContainerSeparate = document.querySelector(".tryon_container_upload_tryon");\n  uploadTryOnContainerSeparate === null || uploadTryOnContainerSeparate === void 0 ? void 0 : uploadTryOnContainerSeparate.addEventListener("click", function () {\n    handler("upload");\n  });\n}\nfunction showTryOnScreen() {\n  var _getHtmlElements2 = getHtmlElements(),\n    tryOnScreen = _getHtmlElements2.tryOnScreen;\n  tryOnScreen.style.display = "flex";\n}\nfunction hideTryOnScreen() {\n  var _getHtmlElements3 = getHtmlElements(),\n    tryOnScreen = _getHtmlElements3.tryOnScreen;\n  tryOnScreen.style.display = "none";\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/statusPill.css\nvar styles_statusPill = __webpack_require__(3412);\n;// CONCATENATED MODULE: ./src/htmlService/styles/statusPill.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar statusPill_options = {};\n\nstatusPill_options.styleTagTransform = (styleTagTransform_default());\nstatusPill_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      statusPill_options.insert = insertBySelector_default().bind(null, "head");\n    \nstatusPill_options.domAPI = (styleDomAPI_default());\nstatusPill_options.insertStyleElement = (insertStyleElement_default());\n\nvar statusPill_update = injectStylesIntoStyleTag_default()(styles_statusPill/* default */.A, statusPill_options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_statusPill = (styles_statusPill/* default */.A && styles_statusPill/* default */.A.locals ? styles_statusPill/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/htmlService/statusPill.js\nvar _ref, _ref2, _ref3;\n\n\nfunction statusPill_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar StatusPills = {\n  pillTypes: [(_ref = {\n    type: "lighting",\n    index: 0\n  }, statusPill_defineProperty(_ref, "type", {\n    "default": {\n      text: "Lighting"\n    }\n  }), statusPill_defineProperty(_ref, "status", {\n    good: {\n      text: "Good",\n      color: "#06F93B",\n      tag: "good",\n      lightModeColor: "#00DF80"\n    },\n    avg: {\n      text: "Not Good",\n      color: "#FFC122",\n      tag: "avg",\n      lightModeColor: "#FFD21E"\n    },\n    bad: {\n      text: "Bad",\n      color: "#FF1A1A",\n      tag: "bad",\n      lightModeColor: "#F04248"\n    }\n  }), _ref), (_ref2 = {\n    type: "position",\n    index: 1\n  }, statusPill_defineProperty(_ref2, "type", {\n    "default": {\n      text: "Hand Position"\n    },\n    face: {\n      text: "Face Position"\n    },\n    hand: {\n      text: "Hand Position"\n    },\n    nail: {\n      text: "Hand Position"\n    }\n  }), statusPill_defineProperty(_ref2, "status", {\n    PERFECT: {\n      text: "Perfect",\n      color: "#06F93B",\n      tag: "PERFECT",\n      lightModeColor: "#00DF80"\n    },\n    avg: {\n      text: "Better",\n      color: "#FFC122",\n      tag: "avg",\n      lightModeColor: "#FFD21E"\n    },\n    OUT: {\n      text: "Align to center",\n      color: "#FF1A1A",\n      tag: "OUT",\n      lightModeColor: "#F04248"\n    }\n  }), _ref2), (_ref3 = {\n    type: "distance",\n    index: 2\n  }, statusPill_defineProperty(_ref3, "type", {\n    "default": {\n      text: "Hand Distance"\n    }\n  }), statusPill_defineProperty(_ref3, "status", {\n    PERFECT: {\n      text: "Perfect",\n      color: "#06F93B",\n      tag: "PERFECT",\n      lightModeColor: "#00DF80"\n    },\n    TOO_FAR: {\n      text: "Too Far",\n      color: "#FFC122",\n      tag: "TOO_FAR",\n      lightModeColor: "#FFD21E"\n    },\n    TOO_CLOSE: {\n      text: "Too Close",\n      color: "#FF1A1A",\n      tag: "TOO_CLOSE",\n      lightModeColor: "#F04248"\n    }\n  }), _ref3)]\n};\nvar statusPill_ElementsList = [];\nfunction createStatusPill() {\n  var _getHtmlElements = getHtmlElements(),\n    statusPill = _getHtmlElements.statusPill;\n  StatusPills.pillTypes.forEach(function (statusPillType) {\n    var ContainerDiv = document.createElement("div");\n    ContainerDiv.style.display = "none";\n    ContainerDiv.classList.add("pill-container");\n    var PillTextDiv = document.createElement("div");\n    PillTextDiv.classList.add("pill-text");\n    var PillStatusTextDiv = document.createElement("div");\n    PillStatusTextDiv.classList.add("pill-status-text");\n    ContainerDiv.appendChild(PillTextDiv);\n    ContainerDiv.appendChild(PillStatusTextDiv);\n    statusPill_ElementsList.push({\n      container: ContainerDiv,\n      pillText: PillTextDiv,\n      statusText: PillStatusTextDiv\n    });\n    statusPill.appendChild(ContainerDiv);\n  });\n}\nfunction showPills(pills) {\n  pills === null || pills === void 0 ? void 0 : pills.forEach(function (_ref4) {\n    var _StatusPills$pillType, _StatusPills$pillType2, _StatusPills$pillType3, _getChooseTryOnConfig, _getChooseTryOnConfig2;\n    var pillId = _ref4.pillId,\n      pillType = _ref4.pillType;\n    statusPill_ElementsList[pillId].container.style.display = "flex";\n    statusPill_ElementsList[pillId].pillText.innerText = ((_StatusPills$pillType = StatusPills.pillTypes[pillId]) === null || _StatusPills$pillType === void 0 ? void 0 : (_StatusPills$pillType2 = _StatusPills$pillType.type) === null || _StatusPills$pillType2 === void 0 ? void 0 : (_StatusPills$pillType3 = _StatusPills$pillType2[pillType]) === null || _StatusPills$pillType3 === void 0 ? void 0 : _StatusPills$pillType3.text) || StatusPills.pillTypes[pillId].type["default"].text;\n    statusPill_ElementsList[pillId].statusText.innerText = StatusPills.pillTypes[pillId].status.PERFECT.text;\n    if (((_getChooseTryOnConfig = getChooseTryOnConfig()) === null || _getChooseTryOnConfig === void 0 ? void 0 : (_getChooseTryOnConfig2 = _getChooseTryOnConfig.tryOnScreen) === null || _getChooseTryOnConfig2 === void 0 ? void 0 : _getChooseTryOnConfig2.mode) === "light") {\n      setLightModeStyle(pillId);\n    } else {\n      setDarkModeStyle(pillId);\n    }\n  });\n}\nfunction hideAllPills() {\n  statusPill_ElementsList === null || statusPill_ElementsList === void 0 ? void 0 : statusPill_ElementsList.forEach(function (eachPill) {\n    if (eachPill !== null && eachPill !== void 0 && eachPill.container) {\n      eachPill.container.style.display = "none";\n    }\n  });\n}\nfunction changeStatusOfPill(pillId, pillStatus) {\n  var _StatusPills$pillType4, _getChooseTryOnConfig3, _getChooseTryOnConfig4;\n  statusPill_ElementsList[pillId].statusText.innerText = (_StatusPills$pillType4 = StatusPills.pillTypes[pillId].status) === null || _StatusPills$pillType4 === void 0 ? void 0 : _StatusPills$pillType4[pillStatus].text;\n  if (((_getChooseTryOnConfig3 = getChooseTryOnConfig()) === null || _getChooseTryOnConfig3 === void 0 ? void 0 : (_getChooseTryOnConfig4 = _getChooseTryOnConfig3.tryOnScreen) === null || _getChooseTryOnConfig4 === void 0 ? void 0 : _getChooseTryOnConfig4.mode) === "light") {\n    setLightModeStyle(pillId, pillStatus);\n  } else {\n    setDarkModeStyle(pillId, pillStatus);\n  }\n}\nfunction setLightModeStyle(pillId, pillStatus) {\n  if (!pillStatus) {\n    var _StatusPills$pillType5;\n    statusPill_ElementsList[pillId].container.style.background = "".concat((_StatusPills$pillType5 = StatusPills.pillTypes[pillId].status) === null || _StatusPills$pillType5 === void 0 ? void 0 : _StatusPills$pillType5.PERFECT.lightModeColor);\n  } else {\n    var _StatusPills$pillType6;\n    statusPill_ElementsList[pillId].container.style.background = "".concat((_StatusPills$pillType6 = StatusPills.pillTypes[pillId].status) === null || _StatusPills$pillType6 === void 0 ? void 0 : _StatusPills$pillType6[pillStatus].lightModeColor);\n  }\n}\nfunction setDarkModeStyle(pillId, pillStatus) {\n  if (!pillStatus) {\n    statusPill_ElementsList[pillId].container.style.border = "1px solid ".concat(StatusPills.pillTypes[pillId].status.PERFECT.color);\n    statusPill_ElementsList[pillId].statusText.style.color = "".concat(StatusPills.pillTypes[pillId].status.PERFECT.color);\n  } else {\n    var _StatusPills$pillType7, _StatusPills$pillType8;\n    statusPill_ElementsList[pillId].container.style.border = "1px solid ".concat((_StatusPills$pillType7 = StatusPills.pillTypes[pillId].status) === null || _StatusPills$pillType7 === void 0 ? void 0 : _StatusPills$pillType7[pillStatus].color);\n    statusPill_ElementsList[pillId].statusText.style.color = "".concat((_StatusPills$pillType8 = StatusPills.pillTypes[pillId].status) === null || _StatusPills$pillType8 === void 0 ? void 0 : _StatusPills$pillType8[pillStatus].color);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/captureTimer.css\nvar styles_captureTimer = __webpack_require__(6062);\n;// CONCATENATED MODULE: ./src/htmlService/styles/captureTimer.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar captureTimer_options = {};\n\ncaptureTimer_options.styleTagTransform = (styleTagTransform_default());\ncaptureTimer_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      captureTimer_options.insert = insertBySelector_default().bind(null, "head");\n    \ncaptureTimer_options.domAPI = (styleDomAPI_default());\ncaptureTimer_options.insertStyleElement = (insertStyleElement_default());\n\nvar captureTimer_update = injectStylesIntoStyleTag_default()(styles_captureTimer/* default */.A, captureTimer_options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_captureTimer = (styles_captureTimer/* default */.A && styles_captureTimer/* default */.A.locals ? styles_captureTimer/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/htmlService/captureTimer.js\n\n\nvar captureTimerDiv = null;\nvar timerDiv = null;\nvar intervalId = null;\nfunction initCaptureTimer() {\n  var _getHtmlElements = getHtmlElements(),\n    captureTimer = _getHtmlElements.captureTimer;\n  captureTimerDiv = captureTimer;\n  var captureTimerHeading = document.createElement("div");\n  captureTimerHeading.classList.add("capture-timer-heading");\n  captureTimerHeading.innerText = "Taking Picture in";\n  timerDiv = document.createElement("div");\n  timerDiv.innerText = 3;\n  timerDiv.classList.add("capture-timer-div");\n  captureTimerDiv.appendChild(captureTimerHeading);\n  captureTimerDiv.appendChild(timerDiv);\n}\n\n// export let showCaptureTimer = debounce(nativeShowCaptureTimer, 0);\n\nfunction nativeShowCaptureTimer(callback) {\n  if (intervalId) return;\n  if (!captureTimerDiv) {\n    initCaptureTimer();\n  }\n  captureTimerDiv.style.display = "flex";\n  runTimerDiv(callback, 3);\n}\nfunction hideCaptureTimer() {\n  resetTimer();\n  if (captureTimerDiv) captureTimerDiv.style.display = "none";\n}\nfunction runTimerDiv(callback, delay) {\n  var count = 0;\n  console.log("show timer called 1", intervalId);\n  clearInterval(intervalId);\n  timerDiv.innerText = delay;\n  intervalId = setInterval(function () {\n    count++;\n    timerDiv.innerText = delay - count;\n    if (count === delay) {\n      callback();\n      clearInterval(intervalId);\n    }\n  }, 1000);\n}\nfunction captureTimer_debounce(func, delay) {\n  var timerId;\n  return function () {\n    var _this = this;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(function () {\n      return func.apply(_this, args);\n    }, delay);\n  };\n}\nfunction changeCaptureTimerStatus(state, callback) {\n  debouncedChangeStatus(state, callback);\n}\nvar debouncedChangeStatus = captureTimer_debounce(function (state, callback) {\n  if (state) nativeShowCaptureTimer(callback);else hideCaptureTimer();\n}, 50);\nfunction resetTimer() {\n  if (intervalId) {\n    clearInterval(intervalId);\n    intervalId = null;\n  }\n}\n;// CONCATENATED MODULE: ./src/MLModelProviders/Hands_landmarks_provider.js\n\n\n\n\n\n\n\n\n\nfunction Hands_landmarks_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction Hands_landmarks_provider_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { Hands_landmarks_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { Hands_landmarks_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\nfunction Hands_landmarks_provider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction Hands_landmarks_provider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction Hands_landmarks_provider_createClass(Constructor, protoProps, staticProps) { if (protoProps) Hands_landmarks_provider_defineProperties(Constructor.prototype, protoProps); if (staticProps) Hands_landmarks_provider_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction Hands_landmarks_provider_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar captureTimerStatus = false;\nvar HandsLandmarkProvider = /*#__PURE__*/function () {\n  function HandsLandmarkProvider(callback) {\n    var _this = this;\n    Hands_landmarks_provider_classCallCheck(this, HandsLandmarkProvider);\n    Hands_landmarks_provider_defineProperty(this, "canvas", void 0);\n    Hands_landmarks_provider_defineProperty(this, "maskCanvas", void 0);\n    Hands_landmarks_provider_defineProperty(this, "canvasCtx", void 0);\n    Hands_landmarks_provider_defineProperty(this, "maskcanvasCtx", void 0);\n    Hands_landmarks_provider_defineProperty(this, "video", void 0);\n    Hands_landmarks_provider_defineProperty(this, "canvasData", void 0);\n    Hands_landmarks_provider_defineProperty(this, "base64OrignalImageData", void 0);\n    Hands_landmarks_provider_defineProperty(this, "isOnce", false);\n    Hands_landmarks_provider_defineProperty(this, "image", void 0);\n    Hands_landmarks_provider_defineProperty(this, "landmarks", void 0);\n    Hands_landmarks_provider_defineProperty(this, "segmentationmask", void 0);\n    Hands_landmarks_provider_defineProperty(this, "handedness", void 0);\n    Hands_landmarks_provider_defineProperty(this, "originalWidth", void 0);\n    Hands_landmarks_provider_defineProperty(this, "originalHeight", void 0);\n    Hands_landmarks_provider_defineProperty(this, "offsetX", void 0);\n    Hands_landmarks_provider_defineProperty(this, "offsetY", void 0);\n    Hands_landmarks_provider_defineProperty(this, "clicked", false);\n    Hands_landmarks_provider_defineProperty(this, "fetchNailImage2", /*#__PURE__*/function () {\n      var _ref = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(base64ImageCropped) {\n        var canvasPngData, decodedData, binaryData, view, i, imageBlob;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                canvasPngData = base64ImageCropped; // Encodes as PNG\n                decodedData = atob(canvasPngData.split(",")[1]);\n                binaryData = new ArrayBuffer(decodedData.length);\n                view = new Uint8Array(binaryData);\n                for (i = 0; i < decodedData.length; i++) {\n                  view[i] = decodedData.charCodeAt(i);\n                }\n                imageBlob = new Blob([binaryData], {\n                  type: "image/png"\n                }); // let stringAngle = this.getAllAngles();\n                // let cordinate = this.getMiddleCordinate();\n                console.log("nail api hit");\n                _context.next = 9;\n                return getNailSegmentation(imageBlob, null, null, null).then(function (data) {\n                  try {\n                    var base64ImageData;\n                    (function () {\n                      if (data.data.image === null && data.data.statusCode === 81) {\n                        throw new Error(data.data.statusMessage);\n                      }\n                      if (data.data.isFar) {\n                        throw new Error("hand is too far");\n                      }\n                      emitNailColorEvent("result", data.data);\n                      hideAllPills();\n                      hideCaptureTimer();\n                      enableSettingIcon("reset");\n                      enableSettingIcon("capture");\n                      _this.prevHandDetection = 1;\n                      _this.prevdistanceState = -1;\n                      _this.prevPositionState = -1;\n\n                      // console.log(data.data);\n                      var repositionAngle = data.data.angle;\n                      var maskDataArray = [];\n                      var _loop = function _loop(_i) {\n                        var nailPaint = data.data.mask[_i];\n                        base64ImageData = "data:image/png;base64," + nailPaint;\n                        var img = new Image();\n                        img.onload = function () {\n                          //   let alldata =data.data.mask_b64;\n                          _this.maskcanvasCtx.drawImage(img, 0, 0, _this.width, _this.height);\n                          var dilatedMaskCanvas = _this.dilateMask(_this.maskCanvas, 30, 70); // Adjust dilation radius as needed\n\n                          //Get the image data of the dilated mask canvas\n                          var imageData = dilatedMaskCanvas.getContext("2d", {\n                            willReadFrequently: true\n                          }).getImageData(0, 0, _this.width, _this.height).data;\n\n                          // let imageData = this.maskcanvasCtx.getImageData(\n                          //   0,\n                          //   0,\n                          //   this.width,\n                          //   this.height\n                          // ).data;\n                          var uint8Array = new Uint8ClampedArray(imageData.buffer);\n                          var maskData = new ImageData(uint8Array, _this.width, _this.height);\n\n                          // console.log(maskData.width);\n                          var maskTexture = new three_module/* DataTexture */.GYF(_this.flipImageData(maskData.data, maskData.width, maskData.height), maskData.width, maskData.height, three_module/* RGBAFormat */.GWd);\n                          maskDataArray.push(maskTexture);\n                          if (maskDataArray.length == data.data.mask.length) {\n                            _this.callback(_this.image, _this.landmarks, _this.handedness, _this.isVideo, maskDataArray, data.data.x_cord, data.data.y_cord, data.data.x2_cord, data.data.y2_cord, repositionAngle);\n                          }\n                        };\n                        img.src = base64ImageData;\n                      };\n                      for (var _i = 0; _i < data.data.mask.length; _i++) {\n                        _loop(_i);\n                      }\n                    })();\n                  } catch (error) {\n                    emitNailColorEvent("error", globalVariables/* errorMessages */.xc.nailDetectionIssue);\n                    hideAllPills();\n                    hideCaptureTimer();\n                    enableSettingIcon("reset");\n                    _this.prevHandDetection = 1;\n                    errorPanel_showErrorPermissionPanel(globalVariables/* errorMessages */.xc.nailDetectionIssue + error + "api response");\n                  }\n                })["catch"](function (error) {\n                  emitNailColorEvent("error", globalVariables/* errorMessages */.xc.nailDetectionIssue);\n                  errorPanel_showErrorPermissionPanel(globalVariables/* errorMessages */.xc.nailDetectionIssue + error + "api Call");\n                });\n              case 9:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    Hands_landmarks_provider_defineProperty(this, "dilateMask", function (maskCanvas, blurRadius, threshold) {\n      if (!maskCanvas || !maskCanvas.width || !maskCanvas.height) {\n        throw new Error("Invalid mask canvas");\n      }\n      var dilatedMaskCanvas = document.createElement("canvas");\n      var dilatedMaskCtx = dilatedMaskCanvas.getContext("2d", {\n        willReadFrequently: true\n      });\n      dilatedMaskCanvas.width = maskCanvas.width;\n      dilatedMaskCanvas.height = maskCanvas.height;\n\n      // Draw the original mask onto the dilated mask canvas\n      dilatedMaskCtx.drawImage(maskCanvas, 0, 0);\n\n      // Apply Gaussian blur to smooth the mask edges\n      dilatedMaskCtx.filter = "blur(".concat(blurRadius, "px)");\n      dilatedMaskCtx.drawImage(maskCanvas, 0, 0);\n\n      // Apply threshold to enhance mask edges\n      var imageData = dilatedMaskCtx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);\n      var pixels = imageData.data;\n      for (var i = 0; i < pixels.length; i += 4) {\n        var gray = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3; // Convert to grayscale\n        pixels[i] = pixels[i + 1] = pixels[i + 2] = gray > threshold ? 255 : 0; // Apply threshold\n      }\n      dilatedMaskCtx.putImageData(imageData, 0, 0);\n\n      // Clear filter for future operations\n      dilatedMaskCtx.filter = "none";\n      return dilatedMaskCanvas;\n    });\n    this.isold = false;\n    this.callback = callback;\n    this.hands = null;\n    this.init = false;\n    this.isBeingLoaded = false;\n    this.selfieMode = false;\n    this.distanceState = -1;\n    this.prevdistanceState = -1;\n    this.positionState = -1;\n    this.prevPositionState = -1;\n    this.prevHandDetection = -1;\n    this.handDetection = -1;\n    this.isVideo = true;\n    this.runningMode = "VIDEO";\n    this.result;\n    this.lastVideoTime = -1;\n    this.canvas = document.createElement("canvas");\n    this.maskCanvas = document.createElement("canvas");\n    var contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.canvas.getContext("2d", contextAttributes);\n    this.maskcanvasCtx = this.maskCanvas.getContext("2d", contextAttributes);\n  }\n  Hands_landmarks_provider_createClass(HandsLandmarkProvider, [{\n    key: "send",\n    value: function () {\n      var _send = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(image, clicked, isVideo) {\n        var x, y, multiHandLandmarks, multiHandWorldLandmarks, multiHandedness;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.clicked = clicked;\n                this.video = image;\n                this.isVideo = isVideo;\n                if (isVideo) {\n                  this.width = this.video.videoWidth;\n                  this.height = this.video.videoHeight;\n                  this.originalWidth = this.video.videoWidth;\n                  this.originalHeight = this.video.videoHeight;\n                  x = this.width; //360;\n                  y = this.height; //640;\n                  this.offsetX = this.width; //;(this.width - x) / 2;\n                  this.offsetY = this.height; //;(this.height - y) / 2;\n                  // this.width = x;\n                  // this.height = y;\n                  this.canvas.width = this.width;\n                  this.canvas.height = this.height;\n                  if (!this.isOnce) {\n                    this.canvasCtx.drawImage(image, 0, 0, this.width, this.height);\n                    this.canvasData = this.canvasCtx.getImageData(0, 0, this.width, this.height);\n                  }\n                  if (!this.isold) {\n                    if (this.lastVideoTime !== image.currentTime) {\n                      this.lastVideoTime = image.currentTime;\n                      this.result = this.handLandmarker.detectForVideo(image, performance.now());\n                    }\n                  }\n                } else {\n                  // console.log(this.video.width, this.video.height);\n                  this.width = this.video.width;\n                  this.height = this.video.height;\n                  this.originalWidth = this.video.width;\n                  this.originalHeight = this.video.height;\n                  this.canvas.width = this.width;\n                  this.canvas.height = this.height;\n                  if (!this.isOnce) {\n                    this.canvasCtx.drawImage(image, 0, 0, this.width, this.height);\n                    this.canvasData = this.canvasCtx.getImageData(0, 0, this.width, this.height);\n                  }\n                  if (!this.isold) this.result = this.handLandmarker.detect(image);\n                }\n                this.maskCanvas.width = this.width;\n                this.maskCanvas.height = this.height;\n                if (!this.isold) {\n                  _context2.next = 10;\n                  break;\n                }\n                return _context2.abrupt("return", this.hands.send({\n                  image: image\n                }));\n              case 10:\n                multiHandLandmarks = this.result.landmarks;\n                multiHandWorldLandmarks = this.result.worldLandmarks;\n                multiHandedness = this.result.handedness;\n                this.onResults({\n                  image: image,\n                  multiHandLandmarks: multiHandLandmarks,\n                  multiHandWorldLandmarks: multiHandWorldLandmarks,\n                  multiHandedness: multiHandedness\n                });\n                return _context2.abrupt("return");\n              case 15:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function send(_x2, _x3, _x4) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: "flipImageData",\n    value: function flipImageData(data, width, height) {\n      var flippedData = new Uint8Array(data.length);\n      var rowSize = width * 4; // Assuming 4 channels (RGBA)\n\n      for (var row = 0; row < height; row++) {\n        var srcOffset = row * rowSize;\n        var destOffset = (height - row - 1) * rowSize;\n        flippedData.set(data.subarray(srcOffset, srcOffset + rowSize), destOffset);\n      }\n      return flippedData;\n    }\n  }, {\n    key: "downloadScreenshotImage",\n    value: function downloadScreenshotImage(src) {\n      var downloadLink = document.createElement("a");\n      downloadLink.href = src;\n      downloadLink.download = "screenshot.png"; // Specify the desired filename\n      downloadLink.style.display = "none"; // Hide the link\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n      document.body.removeChild(downloadLink);\n    }\n  }, {\n    key: "SnapNailImage",\n    value: function () {\n      var _SnapNailImage = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        var base64ImageOrignalData;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setClicked(true);\n                _context3.next = 3;\n                return new Promise(function (resolve) {\n                  return setTimeout(resolve, 200);\n                });\n              case 3:\n                base64ImageOrignalData = this.canvas.toDataURL("image/png"); // this.downloadScreenshotImage(base64ImageOrignalData);\n                _context3.next = 6;\n                return this.fetchNailImage2(base64ImageOrignalData);\n              case 6:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function SnapNailImage() {\n        return _SnapNailImage.apply(this, arguments);\n      }\n      return SnapNailImage;\n    }()\n  }, {\n    key: "onResults",\n    value: function onResults(_ref2) {\n      var image = _ref2.image,\n        multiHandLandmarks = _ref2.multiHandLandmarks,\n        multiHandWorldLandmarks = _ref2.multiHandWorldLandmarks,\n        multiHandedness = _ref2.multiHandedness;\n      // console.log("onResults");\n      if (getCurrentTryon().usesCaptureUI) {\n        if (this.clicked && this.landmarks) return;\n        var detectmessage;\n        if (image != null && (!multiHandLandmarks || multiHandLandmarks && !multiHandLandmarks[0])) {\n          this.handDetection = 1;\n          detectmessage = "OUT";\n          changeStatusOfPill(1, "OUT");\n          changeStatusOfPill(2, "TOO_FAR");\n        } else {\n          this.handDetection = 0;\n          detectmessage = "PERFECT";\n        }\n        if (this.prevHandDetection != this.handDetection) {\n          var json = {\n            state: this.handDetection,\n            message: detectmessage\n          };\n          emitNailColorEvent("handDetection", json);\n          this.prevHandDetection = this.handDetection;\n        }\n        if (image != null && multiHandLandmarks != null) {\n          // multiHandLandmarks = transformLandmarks(multiHandLandmarks[0]);\n\n          multiHandedness = multiHandedness;\n          this.image = image;\n          this.landmarks = multiHandLandmarks[0];\n          this.segmentationmask = multiHandWorldLandmarks;\n          this.handedness = multiHandedness;\n          this.callback(image, multiHandLandmarks[0], multiHandWorldLandmarks, multiHandedness);\n          if (this.landmarks && this.isVideo) {\n            this.calculateDistance(this.landmarks[5].x, this.landmarks[17].x, this.landmarks[5].y, this.landmarks[17].y);\n            this.categorizePosition(this.landmarks[9].x, this.landmarks[9].y);\n            //console.log(this.landmarks[9].x, this.landmarks[9].y);\n          } else {\n            this.positionState = 1;\n            var _json = {\n              state: this.positionState,\n              message: "OUT"\n            };\n            if (this.prevPositionState != this.positionState) {\n              emitNailColorEvent("position", _json);\n              this.prevPositionState = this.positionState;\n            }\n            this.distanceState = 2;\n            var json1 = {\n              state: this.distanceState,\n              message: "TOO_FAR"\n            };\n            if (this.prevdistanceState != this.distanceState) {\n              emitNailColorEvent("distance", json1);\n              this.prevdistanceState = this.distanceState;\n            }\n          }\n        }\n        if (!captureTimerStatus && this.prevHandDetection === 0 && this.prevdistanceState === 0 && this.prevPositionState === 0) {\n          captureTimerStatus = true;\n          changeCaptureTimerStatus(true, timercallback);\n        } else if (captureTimerStatus && (this.prevHandDetection !== 0 || this.prevdistanceState !== 0 || this.prevPositionState !== 0)) {\n          captureTimerStatus = false;\n          changeCaptureTimerStatus(false, timercallback);\n        }\n      } else {\n        this.landmarks = hand_landmarks_helpers_transformLandmarks(multiHandLandmarks[0]);\n        this.handedness = multiHandedness;\n        this.callback(this.image, this.landmarks, this.handedness, this.isVideo, "maskDataArray");\n      }\n    }\n  }, {\n    key: "focalLength",\n    value: function focalLength(depthToFace, eyeToEye, eyeToEyeInPixel) {\n      return eyeToEyeInPixel * depthToFace / eyeToEye;\n    }\n\n    // Function to find distance based on focal length, eye-to-eye in pixels, and width calculated\n  }, {\n    key: "distanceFinder",\n    value: function distanceFinder(focalLength, eyeToEyeInPixel, widthCalculated) {\n      var distance = eyeToEyeInPixel * focalLength / widthCalculated;\n      return distance - 6;\n    }\n\n    // Function to categorize depth based on distance\n  }, {\n    key: "categorizeDepth",\n    value: function categorizeDepth(distance) {\n      var smallThreshold;\n      var mediumThreshold;\n      smallThreshold = 80000;\n      mediumThreshold = 160000;\n      if ((0,globalVariables/* isMobileDevice */.Xb)()) {\n        smallThreshold = 50000;\n        mediumThreshold = 100000;\n      }\n      var msg = null;\n      //console.log("distance", distance);\n      if (distance < smallThreshold) {\n        this.distanceState = 1;\n        //emitRecognizationDistanceAlert("TOO_CLOSE");\n        msg = "TOO_CLOSE";\n        // showDistanceMessagePanel();\n        // setDistanceMsg("Too Close");\n      } else if (distance > mediumThreshold) {\n        this.distanceState = 2;\n        //emitRecognizationDistanceAlert("TOO_FAR");\n        msg = "TOO_FAR";\n        // showDistanceMessagePanel();\n        // setDistanceMsg("Too far");\n      } else {\n        this.distanceState = 0;\n        //emitRecognizationDistanceAlert("PERFECT");\n        msg = "PERFECT";\n        //hideDistanceMessagePanel();\n      }\n      if (this.distanceState !== this.prevdistanceState) {\n        if (msg) {\n          var json = {\n            state: this.distanceState,\n            message: msg\n          };\n          emitNailColorEvent("distance", json);\n          changeStatusOfPill(2, msg);\n          //emitRecognizationDistanceAlert(msg);\n        }\n        this.prevdistanceState = this.distanceState;\n      }\n      return distance > smallThreshold && distance < mediumThreshold ? false : true;\n    }\n  }, {\n    key: "categorizePosition",\n    value: function categorizePosition(xdist, ydist) {\n      var xMinThresold = 0.35;\n      var xMaxThresold = 0.65;\n      var yMinThresold = 0.35;\n      var yMaxThresold = 0.9;\n      var msg = null;\n      //console.log("distance", distance);\n      if (xdist > xMinThresold && xdist < xMaxThresold && ydist > yMinThresold && ydist < yMaxThresold) {\n        this.positionState = 0;\n        msg = "PERFECT";\n      } else {\n        this.positionState = 1;\n        msg = "OUT";\n      }\n      if (this.positionState !== this.prevPositionState) {\n        if (msg) {\n          var json = {\n            state: this.positionState,\n            message: msg\n          };\n          emitNailColorEvent("position", json);\n          changeStatusOfPill(1, msg);\n        }\n        this.prevPositionState = this.positionState;\n      }\n    }\n  }, {\n    key: "calculateDistance",\n    value: function calculateDistance(lefteye, righteyes, lefteyeY, righteyesY) {\n      var eyeToEye = 13.0;\n      var depthToFace = 48.0;\n      var eyeToEyeInPixel = 384.5;\n\n      // Calculate focal length\n      var calculatedFocalLength = this.focalLength(depthToFace, eyeToEye, eyeToEyeInPixel);\n\n      // Calculate eye measurement (assuming x_300 and x_70 are defined)\n      var x_300 = lefteye;\n      var x_70 = righteyes;\n      var y_300 = lefteyeY;\n      var y_70 = righteyesY;\n      var distance;\n      if (Math.abs(x_300 - x_70) > Math.abs(y_300 - y_70)) {\n        distance = Math.abs(x_300 - x_70);\n      } else {\n        distance = Math.abs(y_300 - y_70);\n      }\n      var eyeMeasurement = distance; //Math.abs(x_300 - x_70);\n\n      // Calculate distance\n      var calculatedDistance = this.distanceFinder(calculatedFocalLength, eyeToEye, eyeMeasurement);\n\n      // Categorize depth based on distance\n      var categorizedDepth = this.categorizeDepth(calculatedDistance);\n    }\n  }, {\n    key: "createHandLandmark",\n    value: function () {\n      var _createHandLandmark = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var response, vision;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return fetch("".concat(env/* default */.A.GlamAR_CDN, "original/glamar-ml-models/hand_landmarker.task"));\n              case 3:\n                response = _context4.sent;\n                if (response.ok) {\n                  _context4.next = 7;\n                  break;\n                }\n                throw new Error("Failed to fetch the model file from CDN");\n              case 7:\n                _context4.next = 9;\n                return vision_bundle/* FilesetResolver */.Ps.forVisionTasks("".concat(PUBLIC_PATH, "/mediapipe/task-vision/wasm"));\n              case 9:\n                vision = _context4.sent;\n                _context4.next = 12;\n                return vision_bundle/* HandLandmarker */.Vb.createFromOptions(vision, {\n                  baseOptions: {\n                    modelAssetPath: response.url,\n                    delegate: "GPU"\n                  },\n                  runningMode: this.runningMode,\n                  numHands: 1\n                });\n              case 12:\n                this.handLandmarker = _context4.sent;\n                this.init = true;\n                //console.log("success");\n                _context4.next = 20;\n                break;\n              case 16:\n                _context4.prev = 16;\n                _context4.t0 = _context4["catch"](0);\n                errorPanel_showErrorPermissionPanel();\n                this.init = false;\n                //console.log("error");\n                // Handle errors here\n                // console.error("Error in createImageSegmenter:", error);\n                // You might want to throw the error again to propagate it to the caller\n                //throw error;\n              case 20:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 16]]);\n      }));\n      function createHandLandmark() {\n        return _createHandLandmark.apply(this, arguments);\n      }\n      return createHandLandmark;\n    }()\n  }, {\n    key: "initialize",\n    value: function () {\n      var _initialize = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!this.isold) {\n                  _context5.next = 5;\n                  break;\n                }\n                _context5.next = 3;\n                return this.initializeOld();\n              case 3:\n                _context5.next = 7;\n                break;\n              case 5:\n                _context5.next = 7;\n                return this.createHandLandmark();\n              case 7:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: "initializeOld",\n    value: function () {\n      var _initializeOld = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n        var onResults;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.isBeingLoaded = true;\n                onResults = this.onResults.bind(this);\n                this.hands = new hands.Hands({\n                  locateFile: function locateFile(file) {\n                    // console.log(file);\n                    var url = "".concat(PUBLIC_PATH, "/mediapipe/hands/").concat(file);\n                    return url;\n                  }\n                });\n                this.hands.setOptions({\n                  selfieMode: true,\n                  maxNumHands: 1,\n                  modelComplexity: 1,\n                  minDetectionConfidence: 0.5,\n                  minTrackingConfidence: 0.5\n                });\n                this.selfieMode = true;\n                this.hands.onResults(onResults);\n                _context6.next = 8;\n                return this.hands.initialize();\n              case 8:\n                this.init = true;\n                this.isBeingLoaded = false;\n              case 10:\n              case "end":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n      function initializeOld() {\n        return _initializeOld.apply(this, arguments);\n      }\n      return initializeOld;\n    }()\n  }, {\n    key: "IsBeingLoaded",\n    value: function IsBeingLoaded() {\n      return this.isBeingLoaded;\n    }\n  }, {\n    key: "IsInit",\n    value: function IsInit() {\n      return this.init;\n    }\n  }, {\n    key: "setSelfieMode",\n    value: function () {\n      var _setSelfieMode = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee7(state) {\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this.IsInit()) {\n                  _context7.next = 2;\n                  break;\n                }\n                return _context7.abrupt("return");\n              case 2:\n                if (!this.isold) {\n                  _context7.next = 6;\n                  break;\n                }\n                this.hands.setOptions({\n                  selfieMode: state\n                });\n                _context7.next = 11;\n                break;\n              case 6:\n                if (!(this.getState() === state)) {\n                  _context7.next = 8;\n                  break;\n                }\n                return _context7.abrupt("return");\n              case 8:\n                if (state) this.runningMode = "VIDEO";else this.runningMode = "IMAGE";\n\n                // console.error(this.runningMode);\n                _context7.next = 11;\n                return this.handLandmarker.setOptions({\n                  runningMode: this.runningMode\n                });\n              case 11:\n              case "end":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n      function setSelfieMode(_x5) {\n        return _setSelfieMode.apply(this, arguments);\n      }\n      return setSelfieMode;\n    }()\n  }, {\n    key: "getState",\n    value: function getState() {\n      if (this.runningMode === "IMAGE") return false;else return true;\n    }\n  }, {\n    key: "reset",\n    value: function reset() {\n      this.hands.reset();\n    }\n  }, {\n    key: "close",\n    value: function () {\n      var _close = Hands_landmarks_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee8() {\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.hands.close();\n              case 2:\n              case "end":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n      function close() {\n        return _close.apply(this, arguments);\n      }\n      return close;\n    }()\n  }]);\n  return HandsLandmarkProvider;\n}();\n;// CONCATENATED MODULE: ./src/MLModelProviders/nailmask_provider.js\n\nfunction nailmask_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction nailmask_provider_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { nailmask_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { nailmask_provider_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n\nfunction nailmask_provider_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction nailmask_provider_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\nfunction nailmask_provider_createClass(Constructor, protoProps, staticProps) { if (protoProps) nailmask_provider_defineProperties(Constructor.prototype, protoProps); if (staticProps) nailmask_provider_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction nailmask_provider_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n// import cv from \'@techstark/opencv-js\';\n\n\n\n\nvar NailMaskProvider = /*#__PURE__*/function () {\n  function NailMaskProvider(callback) {\n    var _this = this;\n    nailmask_provider_classCallCheck(this, NailMaskProvider);\n    nailmask_provider_defineProperty(this, "canvas", void 0);\n    nailmask_provider_defineProperty(this, "maskCanvas", void 0);\n    nailmask_provider_defineProperty(this, "canvasCtx", void 0);\n    nailmask_provider_defineProperty(this, "maskcanvasCtx", void 0);\n    nailmask_provider_defineProperty(this, "video", void 0);\n    nailmask_provider_defineProperty(this, "canvasData", void 0);\n    nailmask_provider_defineProperty(this, "base64OrignalImageData", void 0);\n    nailmask_provider_defineProperty(this, "isOnce", false);\n    nailmask_provider_defineProperty(this, "imageSegmenter", void 0);\n    nailmask_provider_defineProperty(this, "labels", void 0);\n    nailmask_provider_defineProperty(this, "image", void 0);\n    nailmask_provider_defineProperty(this, "runningMode", "VIDEO");\n    nailmask_provider_defineProperty(this, "fetchHealth", function () {\n      checkHelth().then(function (data) {\n        //  console.log("done", data.data);\n      })["catch"](function (error) {\n        // showSnackbar(error).then(() => {\n        //   setTimeout(() => {\n        //     // emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel(error === null || error === void 0 ? void 0 : error.msg);\n      });\n    });\n    nailmask_provider_defineProperty(this, "fetchNailImage2", function () {\n      var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "b76e79";\n      var base64ImageOrignalData = _this.canvas.toDataURL("image/jpeg");\n      var imageBlob = new Blob([base64ImageOrignalData.replace(/^data:image\\/jpeg;base64,/, "")], {\n        type: "image/jpeg"\n      });\n      getNailSegmentation(imageBlob, color).then(function (data) {\n        try {\n          // let nailPaint = data.data.mask[0] ;\n          var nailPaint = data.data.mask_b64;\n          var base64ImageData = "data:image/png;base64," + nailPaint;\n          var img = new Image();\n          img.onload = function () {\n            _this.maskcanvasCtx.drawImage(img, 0, 0, _this.video.videoWidth, _this.video.videoHeight);\n\n            // let imageData = this.maskcanvasCtx.getImageData(\n            //   0,\n            //   0,\n            //   this.video.videoWidth,\n            //   this.video.videoHeight\n            // ).data;\n            // let uint8Array = new Uint8ClampedArray(imageData.buffer);\n            // let maskData = new ImageData(\n            //   uint8Array,\n            //   this.video.videoWidth,\n            //   this.video.videoHeight\n            // );\n\n            // this.canvasCtx.drawImage(img, 0, 0);\n            // console.log("fetch mask result");\n            _this.callback({\n              image: _this.canvas,\n              isMask: 1,\n              maskData: _this.maskCanvas\n            });\n          };\n          img.src = base64ImageData; // base64ImageData;//base64ImageOrignalData\n          // console.log("fetch mask called");\n        } catch (error) {\n          // console.error("Invalid API response data. Please enter valid JSON.");\n          return;\n        }\n      })["catch"](function (error) {\n        // showSnackbar(error).then(() => {\n        //   setTimeout(() => {\n        //     //emitModuleClosed();\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel(error === null || error === void 0 ? void 0 : error.msg);\n      });\n    });\n    this.callback = callback;\n    this.canvas = document.createElement("canvas");\n    this.maskCanvas = document.createElement("canvas");\n    var contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.canvas.getContext("2d", contextAttributes);\n    this.maskcanvasCtx = this.maskCanvas.getContext("2d", contextAttributes);\n  }\n  nailmask_provider_createClass(NailMaskProvider, [{\n    key: "callbackForVideo",\n    value: function () {\n      var _callbackForVideo = nailmask_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.callback({\n                  image: this.canvas\n                });\n              case 1:\n              case "end":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function callbackForVideo() {\n        return _callbackForVideo.apply(this, arguments);\n      }\n      return callbackForVideo;\n    }()\n  }, {\n    key: "send",\n    value: function () {\n      var _send = nailmask_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(video) {\n        var startTimeMs;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.video = video;\n                this.canvas.width = video.videoWidth;\n                this.canvas.height = video.videoHeight;\n                this.maskCanvas.width = video.videoWidth;\n                this.maskCanvas.height = video.videoHeight;\n                // console.log("width",video.videoWidth,video.videoHeight)\n                if (!this.isOnce) {\n                  this.canvasCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n                  this.canvasData = this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n                  startTimeMs = performance.now();\n                }\n\n                // this.callback({\n                //     image: this.canvas,isMask: 0\n                //   });\n              case 6:\n              case "end":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n      function send(_x) {\n        return _send.apply(this, arguments);\n      }\n      return send;\n    }()\n  }, {\n    key: "createImageSegmenter",\n    value: function () {\n      var _createImageSegmenter = nailmask_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case "end":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n      function createImageSegmenter() {\n        return _createImageSegmenter.apply(this, arguments);\n      }\n      return createImageSegmenter;\n    }()\n  }, {\n    key: "downloadSnap",\n    value: function () {\n      var _downloadSnap = nailmask_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n        var link;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // Down load image\n                // console.log("Download image");\n                link = document.createElement("a");\n                link.href = this.canvas.toDataURL();\n                link.download = "nailSnap.jpg";\n                link.click();\n              case 4:\n              case "end":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function downloadSnap() {\n        return _downloadSnap.apply(this, arguments);\n      }\n      return downloadSnap;\n    }()\n  }, {\n    key: "dataURLtoBlob",\n    value: function dataURLtoBlob(dataURL) {\n      // Split the data URL to get the MIME type and data\n      var parts = dataURL.split(";base64,");\n      var contentType = parts[0].split(":")[1];\n      var base64Data = parts[1];\n\n      // Convert the base64 data to a Uint8Array\n      var arrayBuffer = Uint8Array.from(atob(base64Data), function (c) {\n        return c.charCodeAt(0);\n      });\n\n      // Create a Blob from the Uint8Array with the specified content type\n      return new Blob([arrayBuffer], {\n        type: contentType\n      });\n    }\n  }, {\n    key: "initialize",\n    value: function () {\n      var _initialize = nailmask_provider_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.createImageSegmenter();\n              case 2:\n              case "end":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }]);\n  return NailMaskProvider;\n}();\n;// CONCATENATED MODULE: ./src/apiService/api-faceAnalysis.js\n\n\n\n\n\n\n\nvar api_faceAnalysis_APINail = axios_default().create({\n  // baseURL: `${environment.SNELLO_URL}/api/v1/core/sdk/`,\n  baseURL: "https://skin.glamarz0.de/",\n  headers: {\n    // \'Content-Type\': \'application/json\',\n    //Source: "web",\n    // "ngrok-skip-browser-warning": "your-custom-value", // for skiping the  ngrok in between page\n  }\n});\nvar api_faceAnalysis_setAuthorization = function setAuthorization() {\n  api_faceAnalysis_APINail.defaults.headers["Authorization"] = getAPIKey();\n};\nvar sendPoreSegmentation = function sendPoreSegmentation(imageFile) {\n  var formData = new FormData();\n  formData.append("image", imageFile);\n  var headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  return api_faceAnalysis_APINail.post("/pore", formData, {\n    headers: headers\n  }).then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    //console.error("Error fetching helth data:", error);\n    throw error;\n  });\n};\nvar sendAcneSegmentation = function sendAcneSegmentation(imageFile) {\n  var formData = new FormData();\n  formData.append("image", imageFile);\n  var headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  return api_faceAnalysis_APINail.post("/acne", formData, {\n    headers: headers\n  }).then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    //console.error("Error fetching helth data:", error);\n    throw error;\n  });\n};\n\n// export const sendFaceAnalysisSegmentation = (imageFile, endpoint) => {\n//   console.log("hitting api", endpoint);\n//   const formData = new FormData();\n//   formData.append("image", imageFile);\n//   console.log("hitting api with form data", formData);\n\n//   const headers = {\n//     "Content-Type": "multipart/form-data",\n//   };\n//   return APINail.post("/" + endpoint, formData, { headers: headers })\n//     .then((response) => {\n//       console.log("api success", response);\n//       return response;\n//     })\n//     .catch((error) => {\n//       console.error("Error fetching api data:", error);\n//       return error;\n//     });\n// };\n\nvar sendFaceAnalysisSegmentation = function sendFaceAnalysisSegmentation(imageFile, endpoint) {\n  // console.log("hitting api", endpoint);\n  // console.log("hitting api with file image", imageFile);\n  var formData = new FormData();\n  formData.append("image", imageFile);\n  //console.log("hitting api with form data", formData);\n\n  var headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  var timeout = 120000; // 120 seconds timeout (adjust as needed)\n\n  return api_faceAnalysis_APINail.post("/" + endpoint, formData, {\n    headers: headers,\n    timeout: timeout\n  }).then(function (response) {\n    // console.log("api success", response);\n    return response;\n  })["catch"](function (error) {\n    // Handle timeout or other errors here\n    if (axios_default().isCancel(error)) {\n      // console.error("Request timed out:", error);\n    } else {\n      // console.error("Error sending request:", error);\n    }\n    // showSnackbar(errorMessages.faceAnalysisIssue).then(() => {\n    //   setTimeout(() => {\n    //     //emitModuleClosed();\n    //     hideSnackbar();\n    //   }, 2000);\n    // });\n    errorPanel_showErrorPermissionPanel(globalVariables/* errorMessages */.xc.faceAnalysisIssue);\n    emitFaceAnalysisEvent("error", globalVariables/* errorMessages */.xc.faceAnalysisIssue);\n    throw error; // Rethrow the error to propagate it further if needed\n  });\n};\nvar api_faceAnalysis_checkHelth = function checkHelth() {\n  return api_faceAnalysis_APINail.get("/_healthz").then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    //console.error("Error fetching helth data:", error);\n    throw error;\n  });\n};\n;// CONCATENATED MODULE: ./src/assets/svg/Camera_denied.svg\n/* harmony default export */ const Camera_denied = (__webpack_require__.p + "assets/src/assets/svg/Camera_denied.svg");\n;// CONCATENATED MODULE: ./src/htmlService/cameraPermissionPanel.js\n\n\nvar cameraPermissionPanel_Panel = null;\nvar cameraPermissionPanel_msg = null;\nvar cameraPermissionPanel_img = null;\nvar cameraPermissionPanel_btn = null;\nfunction hideCameraPermissionPanel() {\n  cameraPermissionPanel_Panel.style.display = "none";\n}\nfunction showCameraPermissionPanel(url) {\n  cameraPermissionPanel_Panel.style.display = "flex";\n}\nfunction setCameraPermissionElement(handler) {\n  cameraPermissionPanel_Panel = document.querySelector(".camera-permission-panel");\n  cameraPermissionPanel_msg = document.querySelector(".camera-permission-message");\n  cameraPermissionPanel_img = document.getElementById("camera-permission-icon");\n  cameraPermissionPanel_btn = document.getElementById("camera-permission-btn");\n  cameraPermissionPanel_img.src = Camera_denied;\n  cameraPermissionPanel_msg.innerHTML = globalVariables/* errorMessages */.xc.cameraPermissionNotGranted;\n  cameraPermissionPanel_btn.addEventListener("click", function () {\n    handleCameraPermissionClickEvent(handler);\n  });\n}\nvar handleCameraPermissionClickEvent = function handleCameraPermissionClickEvent(handler) {\n  handler();\n};\n;// CONCATENATED MODULE: ./src/htmlService/billingPanel.js\n\n\nvar billingPanel_Panel = null;\nvar billingPanel_msg = null;\nvar billingPanel_img = null;\nvar billingPanel_btn = null;\nfunction hideBillingPanel() {\n  billingPanel_Panel.style.display = "none";\n}\nfunction showBillingPanel() {\n  var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : globalVariables/* errorMessages */.xc.billingIssue;\n  billingPanel_Panel.style.display = "flex";\n  billingPanel_msg.innerHTML = message;\n}\nfunction setBillingElement(handler) {\n  billingPanel_Panel = document.querySelector(".billing-panel");\n  billingPanel_msg = document.querySelector(".billing-message");\n  billingPanel_img = document.getElementById("billing-icon");\n  billingPanel_btn = document.getElementById("billing-btn");\n  billingPanel_img.src = svg_Error;\n  billingPanel_msg.innerHTML = globalVariables/* errorMessages */.xc.cameraPermissionNotGranted;\n  billingPanel_btn.addEventListener("click", function () {\n    handleBillingClickEvent(handler);\n  });\n  hideBillingPanel();\n}\nvar handleBillingClickEvent = function handleBillingClickEvent(handler) {\n  handler();\n};\n;// CONCATENATED MODULE: ./src/assets/svg/compare_icon1.svg\n/* harmony default export */ const compare_icon1 = (__webpack_require__.p + "assets/src/assets/svg/compare_icon1.svg");\n;// CONCATENATED MODULE: ./src/htmlService/comparisonSlider.js\n\n// import comparisonIcon from "../assets/svg/compare_icon.svg";\n\nvar isDragging = false;\nvar comparisonSlider_dragContainer = null;\nvar comparisonSlider_dragLineSpan = null;\nvar comparisonSlider_video_Container = null;\nvar dragBtnIcon = null;\nvar isSliderVisible = false;\nfunction addComparisonSliderEvents(video_container) {\n  comparisonSlider_dragContainer = document.querySelector(".drag-container");\n  comparisonSlider_dragLineSpan = document.querySelector(".drag-line-container");\n  dragBtnIcon = document.querySelector(".drag-btn-icon");\n  dragBtnIcon.style.backgroundImage = "url(".concat(compare_icon1, ")");\n  comparisonSlider_video_Container = video_container;\n  comparisonSlider_dragLineSpan.addEventListener("mousedown", function (e) {\n    isDragging = true;\n  });\n  comparisonSlider_dragLineSpan.addEventListener("touchstart", function (e) {\n    isDragging = true;\n  });\n  comparisonSlider_dragContainer.addEventListener("mousemove", function (e) {\n    if (isDragging) {\n      if (getIsVideo()) {\n        var _dragContainer2;\n        if ((e === null || e === void 0 ? void 0 : e.clientX) <= 64) {\n          var _dragContainer;\n          //restricting dragging in left\n          comparisonSlider_video_Container.style.clipPath = "inset(0 0 0 ".concat(((_dragContainer = comparisonSlider_dragContainer) === null || _dragContainer === void 0 ? void 0 : _dragContainer.clientWidth) - 64, "px)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(64, "px");\n        } else if ((e === null || e === void 0 ? void 0 : e.clientX) >= ((_dragContainer2 = comparisonSlider_dragContainer) === null || _dragContainer2 === void 0 ? void 0 : _dragContainer2.clientWidth) - 78) {\n          var _dragContainer3;\n          //restricting dragging in right\n          comparisonSlider_video_Container.style.clipPath = "inset(0 0 0 ".concat(78, "px)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(((_dragContainer3 = comparisonSlider_dragContainer) === null || _dragContainer3 === void 0 ? void 0 : _dragContainer3.clientWidth) - 78, "px");\n        } else {\n          var _dragContainer4;\n          comparisonSlider_video_Container.style.clipPath = "inset(0 0 0 ".concat(((_dragContainer4 = comparisonSlider_dragContainer) === null || _dragContainer4 === void 0 ? void 0 : _dragContainer4.clientWidth) - (e === null || e === void 0 ? void 0 : e.clientX), "px)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(e === null || e === void 0 ? void 0 : e.clientX, "px");\n        }\n      } else {\n        var _dragContainer6;\n        if ((e === null || e === void 0 ? void 0 : e.clientX) <= 64) {\n          var _dragContainer5;\n          //restricting dragging in left\n          comparisonSlider_video_Container.style.clipPath = "inset(0 ".concat(((_dragContainer5 = comparisonSlider_dragContainer) === null || _dragContainer5 === void 0 ? void 0 : _dragContainer5.clientWidth) - 64, "px 0 0)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(64, "px");\n        } else if ((e === null || e === void 0 ? void 0 : e.clientX) >= ((_dragContainer6 = comparisonSlider_dragContainer) === null || _dragContainer6 === void 0 ? void 0 : _dragContainer6.clientWidth) - 78) {\n          var _dragContainer7;\n          //restricting dragging in right\n          comparisonSlider_video_Container.style.clipPath = "inset(0 ".concat(78, "px 0 0)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(((_dragContainer7 = comparisonSlider_dragContainer) === null || _dragContainer7 === void 0 ? void 0 : _dragContainer7.clientWidth) - 78, "px");\n        } else {\n          var _dragContainer8;\n          comparisonSlider_video_Container.style.clipPath = "inset(0 ".concat(((_dragContainer8 = comparisonSlider_dragContainer) === null || _dragContainer8 === void 0 ? void 0 : _dragContainer8.clientWidth) - (e === null || e === void 0 ? void 0 : e.clientX), "px 0 0)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(e === null || e === void 0 ? void 0 : e.clientX, "px");\n        }\n      }\n    }\n  });\n  comparisonSlider_dragContainer.addEventListener("touchmove", function (e) {\n    if (isDragging) {\n      if (e.touches && e.touches.length) {\n        if (getIsVideo()) {\n          var _dragContainer9, _e$touches$, _e$touches$2;\n          comparisonSlider_video_Container.style.clipPath = "inset(0 0 0 ".concat(((_dragContainer9 = comparisonSlider_dragContainer) === null || _dragContainer9 === void 0 ? void 0 : _dragContainer9.clientWidth) - (e === null || e === void 0 ? void 0 : (_e$touches$ = e.touches[0]) === null || _e$touches$ === void 0 ? void 0 : _e$touches$.clientX), "px)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(e === null || e === void 0 ? void 0 : (_e$touches$2 = e.touches[0]) === null || _e$touches$2 === void 0 ? void 0 : _e$touches$2.clientX, "px");\n        } else {\n          var _dragContainer10, _e$touches$3, _e$touches$4;\n          comparisonSlider_video_Container.style.clipPath = "inset(0 ".concat(((_dragContainer10 = comparisonSlider_dragContainer) === null || _dragContainer10 === void 0 ? void 0 : _dragContainer10.clientWidth) - (e === null || e === void 0 ? void 0 : (_e$touches$3 = e.touches[0]) === null || _e$touches$3 === void 0 ? void 0 : _e$touches$3.clientX), "px 0 0)");\n          comparisonSlider_dragLineSpan.style.left = "".concat(e === null || e === void 0 ? void 0 : (_e$touches$4 = e.touches[0]) === null || _e$touches$4 === void 0 ? void 0 : _e$touches$4.clientX, "px");\n        }\n      }\n    }\n  });\n  comparisonSlider_dragContainer.addEventListener("mouseup", function (e) {\n    isDragging = false;\n  });\n  comparisonSlider_dragContainer.addEventListener("mouseleave", function (e) {\n    isDragging = false;\n  });\n  comparisonSlider_dragContainer.addEventListener("touchend", function (e) {\n    isDragging = false;\n  });\n  comparisonSlider_dragContainer.addEventListener("touchcancel", function (e) {\n    isDragging = false;\n  });\n}\nfunction showComparisonSlider() {\n  var initialSliderPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "50%";\n  var showDrag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "block";\n  isSliderVisible = true;\n  comparisonSlider_dragContainer.style.display = showDrag;\n  comparisonSlider_video_Container.style.visibility = "visible";\n  resetComparisonSlider();\n}\nfunction resetComparisonSlider() {\n  var initialSliderPos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "50%";\n  var comparisonState = arguments.length > 1 ? arguments[1] : undefined;\n  var isvideo = arguments.length > 2 ? arguments[2] : undefined;\n  //console.error("resetComparisonSlider");\n  if (comparisonState === 1) initialSliderPos = "0%";\n  if (getIsVideo()) {\n    comparisonSlider_video_Container.style.clipPath = "inset(0 0 0 ".concat(initialSliderPos, ")");\n    comparisonSlider_dragLineSpan.style.left = "".concat(initialSliderPos);\n    comparisonSlider_video_Container.style.transform = "scaleX(-1)";\n  } else {\n    comparisonSlider_video_Container.style.clipPath = "inset(0 ".concat(initialSliderPos, " 0 0)");\n    comparisonSlider_dragLineSpan.style.left = "".concat(initialSliderPos);\n    comparisonSlider_video_Container.style.transform = "scaleX(1)";\n  }\n}\nfunction toggleComparisonSlider() {\n  if (isSliderVisible) {\n    hideComparisonSlider();\n    isSliderVisible = false;\n  } else {\n    showComparisonSlider();\n    isSliderVisible = true;\n  }\n}\nfunction hideComparisonSlider() {\n  isSliderVisible = false;\n  resetComparisonSlider();\n  comparisonSlider_dragContainer.style.display = "none";\n  comparisonSlider_video_Container.style.visibility = "hidden";\n}\n;// CONCATENATED MODULE: ./src/apiService/api.js\n\n\n\n\n\nvar api_API = axios_default().create({\n  baseURL: "".concat(env/* default */.A.HIDAN_MAIN_URL),\n  headers: {\n    "Content-Type": "application/json"\n    // Source: "web",\n  }\n});\nfunction updateAPIURL() {\n  api_API.defaults.baseURL = "".concat(env/* default */.A.HIDAN_MAIN_URL);\n  api_setAuthorization();\n}\napi_API.interceptors.request.use(addSignatureFn({}));\napi_API.defaults.withCredentials = true;\nvar api_setAuthorization = function setAuthorization() {\n  if ((0,globalVariables/* getPlatformMode */.XG)() === "platform") {\n    api_API.defaults.headers["Authorization"] = "Bearer ".concat(authConstants_getAPIKey());\n    api_API.defaults.headers["Authorization"] = "Bearer ODkzZmU1ZGItZDg5ZS00Yzc3LTk2NjktYTM2OTZhZjRlNGVi";\n  } else {\n    api_API.defaults.headers["Authorization"] = "Bearer ".concat(btoa(authConstants_getAPIKey()));\n  }\n};\n\n// export const getModuleConfig = () => {\n//   return API.get("/makeup/modelconfig/");\n// };\nvar getModuleConfig = function getModuleConfig(modelType) {\n  return api_API.get("/makeup/modelconfig/".concat(modelType));\n};\nvar getModelsConfig = function getModelsConfig(categoryType, subCategoryType, platformType) {\n  return api_API.get("/models?category=".concat(categoryType, "&subCategory=").concat(subCategoryType, "&platform=").concat(platformType)).then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    // console.error("Error fetching SKU data:", error);\n    throw error;\n  });\n};\n\n// export const sendMeta = (requestId, tryOnType) => {\n//   return API.post("/meta", null, {\n//     headers: {\n//       "x-request-id": requestId,\n//       "x-try-on-type": tryOnType,\n//     },\n//   }).catch();\n// };\n\nvar api_getSKUData = function getSKUData(id, apiKey) {\n  api_setAuthorization();\n  return api_API.get("/skus/".concat(id))\n  // return API.get(`/makeup/sku/2`)\n  .then(function (response) {\n    return response;\n  })["catch"](function (error) {\n    // console.error("Error fetching SKU data:", error);\n    throw error;\n  });\n};\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.some.js\nvar es6_array_some = __webpack_require__(6511);\n;// CONCATENATED MODULE: ./src/moduleConfig/moduleConfig.js\n\n\n\n\n\n\n\n\n\nfunction moduleConfig_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction moduleConfig_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { moduleConfig_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { moduleConfig_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\nvar fetchModuleConfig = /*#__PURE__*/function () {\n  var _ref = moduleConfig_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(sceneManager) {\n    var errorOccurred, subscriptionIssueOccurred, currentmessage, modelApiArray, res, _res$find, _res$find2, _res$find2$data, errorMessage, modelsdata;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            errorOccurred = false;\n            subscriptionIssueOccurred = false;\n            console.log(getCurrentTryon());\n            modelApiArray = CategoriesTypes === null || CategoriesTypes === void 0 ? void 0 : CategoriesTypes.map(function (eachModelCategory) {\n              return getModelsConfig(getCurrentTryon().modelCategory, getCurrentTryon().modelSubCategory, "desktop")["catch"](function (error) {\n                if (error.response && error.response.status && error.response.status === 403) {\n                  emitSubscriptionIssue(error.response.data);\n                  subscriptionIssueOccurred = true;\n                } else {\n                  if (error.response && error.response.data && error.response.data.error) currentmessage = error.response.data.error;else currentmessage = error.message;\n                }\n                // emitSubscriptionIssue(error.response.data); // Emitting issue r\n\n                // showSnackbar(currentmessage).then(() => {\n                //   setTimeout(() => {\n                //     //CloseModule();\n                //     hideSnackbar();\n                //   }, 2000);\n                // });\n                errorOccurred = true; // Set flag to true indicating an error occurred\n              });\n            });\n            _context.next = 6;\n            return Promise.all(modelApiArray);\n          case 6:\n            res = _context.sent;\n            if (!errorOccurred) {\n              _context.next = 10;\n              break;\n            }\n            if (subscriptionIssueOccurred) showBillingPanel(errorMessages.billingIssue);\n            // showSnackbar(currentmessage).then(() => {\n            //   setTimeout(() => {\n            //     hideSnackbar();\n            //   }, 2000);\n            // });\n            else errorPanel_showErrorPermissionPanel(currentmessage);\n            return _context.abrupt("return");\n          case 10:\n            if (res !== null && res !== void 0 && res.some(function (response) {\n              var _response$data;\n              return (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.status) === "403";\n            })) {\n              // If any response has status code 403\n              emitInitComplete();\n              emitSubscriptionIssue((_res$find = res.find(function (response) {\n                var _response$data2;\n                return (response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.status) === "403";\n              })) === null || _res$find === void 0 ? void 0 : _res$find.data); // Emitting issue related to first occurrence of 403 status\n              errorMessage = ((_res$find2 = res.find(function (response) {\n                var _response$data3;\n                return (response === null || response === void 0 ? void 0 : (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.status) === "403";\n              })) === null || _res$find2 === void 0 ? void 0 : (_res$find2$data = _res$find2.data) === null || _res$find2$data === void 0 ? void 0 : _res$find2$data.message) || "SKU configuration failed due to an error.";\n              showBillingPanel(errorMessages.billingIssue);\n              // showSnackbar(errorMessage).then(() => {\n              //   setTimeout(() => {\n              //     //CloseModule();\n              //     hideSnackbar();\n              //   }, 2000);\n              // });\n              // You can return here or perform any other necessary actions\n            } else {\n              modelsdata = res === null || res === void 0 ? void 0 : res.map(function (eachResponse) {\n                return eachResponse === null || eachResponse === void 0 ? void 0 : eachResponse.data;\n              });\n              sceneManager.setModelAPIResponse(modelsdata);\n\n              //buildTryOnScreen(sceneManager.getModelData(), tryOnEventHandler);\n              //createModels(sceneManager.getModelData(), modelsEventHandler);\n              emitInitComplete();\n            }\n          case 11:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function fetchModuleConfig(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n;// CONCATENATED MODULE: ./src/makeupVTOs/face-analysis/faceAnalysis.js\n\n\n\n\nfunction faceAnalysis_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction faceAnalysis_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { faceAnalysis_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { faceAnalysis_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n// export async function faceAnalysisSnapShot() {\n//   if (getSceneManagerInstance()) {\n//     const ss = getSceneManagerInstance().takeScreenShot();\n//     //console.log("screenshot successfull");\n//     const imageBlob = new Blob([ss.replace(/^data:image\\/jpeg;base64,/, "")], {\n//       type: "image/jpeg",\n//     });\n//     //console.log("image capture success for face analysis");\n//     let errorOccurred;\n//     let ApiName = [\n//       "skinreport",\n//       // "pore",\n//       // "acne",\n//       // "wrinkles",\n//       // "eyebag",\n//       // "darkcircles",\n//     ];\n//     try {\n//       let modelApiArray = ApiName?.map((eachapi) => {\n//         return sendFaceAnalysisSegmentation(imageBlob, eachapi).catch(\n//           (error) => {\n//             // errorOccurred = true;\n//             // console.error("Error occurred for API:", eachapi, error);\n//           }\n//         );\n//       });\n//       setClicked(true);\n\n//       if (errorOccurred) {\n//         showSnackbar(currentmessage).then(() => {\n//           setTimeout(() => {\n//             //CloseModule();\n//             hideSnackbar();\n//           }, 2000);\n//         });\n//         return;\n//       }\n\n//       Promise.all(modelApiArray)\n//         .then((res) => {\n//           const faceAnalysisData = res?.map(\n//             (eachResponse) => eachResponse?.data\n//           );\n//           emitFaceAnalysisEvent("result", faceAnalysisData);\n//         })\n//         .catch((error) => {});\n//     } catch (error) {}\n//   }\n// }\n\nfunction faceAnalysisSnapShot() {\n  return _faceAnalysisSnapShot.apply(this, arguments);\n}\nfunction _faceAnalysisSnapShot() {\n  _faceAnalysisSnapShot = faceAnalysis_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var ss, imageBlob, errorOccurred, ApiName, res;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!getSceneManagerInstance()) {\n              _context.next = 14;\n              break;\n            }\n            ss = getSceneManagerInstance().takeScreenShot(); //console.log("screenshot successfull");\n            imageBlob = new Blob([ss.replace(/^data:image\\/jpeg;base64,/, "")], {\n              type: "image/jpeg"\n            }); //console.log("image capture success for face analysis");\n            ApiName = ["skinreport"\n            // "pore",\n            // "acne",\n            // "wrinkles",\n            // "eyebag",\n            // "darkcircles",\n            ];\n            _context.prev = 4;\n            setClicked(true);\n            _context.next = 8;\n            return sendFaceAnalysisSegmentation(imageBlob, "skinreport");\n          case 8:\n            res = _context.sent;\n            // if any error occurs that want to catch it. other wise\n            // want to take the response from above api and add it to\n            emitFaceAnalysisEvent("result", res.data);\n            _context.next = 14;\n            break;\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context["catch"](4);\n          case 14:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4, 12]]);\n  }));\n  return _faceAnalysisSnapShot.apply(this, arguments);\n}\nfunction openFaceAnalysis() {\n  return _openFaceAnalysis.apply(this, arguments);\n}\nfunction _openFaceAnalysis() {\n  _openFaceAnalysis = faceAnalysis_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var _getHtmlElements, canvas, faceanalysisapiResponse;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _getHtmlElements = getHtmlElements(), canvas = _getHtmlElements.canvas;\n            setTrackingMode(TrackingMode.Face);\n            if (!(getTrackingMode() === TrackingMode.Face)) {\n              _context2.next = 10;\n              break;\n            }\n            if (getProviders().facemeshLandmarksProvider) {\n              _context2.next = 9;\n              break;\n            }\n            setProvider("face", new FacemeshLandmarksProvider(onLandmarks, canvas));\n            _context2.next = 7;\n            return getProviders().facemeshLandmarksProvider.initialize();\n          case 7:\n            _context2.next = 10;\n            break;\n          case 9:\n            getProviders().facemeshLandmarksProvider.setSelfieMode(getIsVideo);\n          case 10:\n            onClearClick();\n            hideModelContainer();\n            // hideOptionsContainer();\n            // if (isConfigContainerActive()) toggleOptionsButton(3);\n            hideConfigContainer();\n            tryOnEventHandler("live");\n            faceanalysisapiResponse = globalVariables/* faceAnalysisSkuConfig */.XZ;\n            setCurrentTryon(faceanalysisapiResponse.sku.subCategory.toLowerCase());\n            // console.log(faceanalysisapiResponse);\n\n            if (getSceneManagerInstance()) {\n              getSceneManagerInstance().setAPIResponse(faceanalysisapiResponse);\n            }\n          case 17:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _openFaceAnalysis.apply(this, arguments);\n}\nfunction closeFaceAnalysis() {\n  return _closeFaceAnalysis.apply(this, arguments);\n}\nfunction _closeFaceAnalysis() {\n  _closeFaceAnalysis = faceAnalysis_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            onClearClick();\n            if (!(0,globalVariables/* isShouldHideInternalUI */.Fu)()) {\n              // showOptionsContainer();\n              showModelContainer();\n            }\n          case 2:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _closeFaceAnalysis.apply(this, arguments);\n}\nfunction resetFaceAnalysis() {\n  return _resetFaceAnalysis.apply(this, arguments);\n}\nfunction _resetFaceAnalysis() {\n  _resetFaceAnalysis = faceAnalysis_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            onClearClick();\n          case 1:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _resetFaceAnalysis.apply(this, arguments);\n}\n;// CONCATENATED MODULE: ./src/assets/svg/arrowLeft.svg\n/* harmony default export */ const arrowLeft = (__webpack_require__.p + "assets/src/assets/svg/arrowLeft.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/crossIcon.svg\n/* harmony default export */ const crossIcon = (__webpack_require__.p + "assets/src/assets/svg/crossIcon.svg");\n;// CONCATENATED MODULE: ./src/assets/svg/crossIconBlack.svg\n/* harmony default export */ const crossIconBlack = (__webpack_require__.p + "assets/src/assets/svg/crossIconBlack.svg");\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/navigationButtons.css\nvar navigationButtons = __webpack_require__(2262);\n;// CONCATENATED MODULE: ./src/htmlService/styles/navigationButtons.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar navigationButtons_options = {};\n\nnavigationButtons_options.styleTagTransform = (styleTagTransform_default());\nnavigationButtons_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      navigationButtons_options.insert = insertBySelector_default().bind(null, "head");\n    \nnavigationButtons_options.domAPI = (styleDomAPI_default());\nnavigationButtons_options.insertStyleElement = (insertStyleElement_default());\n\nvar navigationButtons_update = injectStylesIntoStyleTag_default()(navigationButtons/* default */.A, navigationButtons_options);\n\n\n\n\n       /* harmony default export */ const styles_navigationButtons = (navigationButtons/* default */.A && navigationButtons/* default */.A.locals ? navigationButtons/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/htmlService/navigationButtons.js\n\n\n\n\n\n\nvar LeftIconContainer = null;\nvar CrossIconContainer = null;\nvar LeftIcon = null;\nvar CrossIcon = null;\nvar disableLeftIcon = false;\nvar disableCrossIcon = false;\nfunction setPrevIconState(state) {\n  disableLeftIcon = state;\n}\nfunction setCrossIconState(state) {\n  disableCrossIcon = state;\n}\nfunction createNavigationButtons(onPrevIconClick, onCrossIconClick) {\n  var _getHtmlElements = getHtmlElements(),\n    videoContainer = _getHtmlElements.videoContainer;\n  LeftIconContainer = document.createElement("div");\n  CrossIconContainer = document.createElement("div");\n  LeftIcon = document.createElement("img");\n  CrossIcon = document.createElement("img");\n  LeftIcon.src = arrowLeft;\n  CrossIcon.src = crossIcon;\n  LeftIconContainer.appendChild(LeftIcon);\n  CrossIconContainer.appendChild(CrossIcon);\n  LeftIconContainer.addEventListener("click", onPrevIconClick);\n  CrossIconContainer.addEventListener("click", onCrossIconClick);\n  // using fragment for performance gain\n  var iconContainerFragment = document.createDocumentFragment();\n  LeftIconContainer.classList.add("left-nav-icon", "icon-blur-bg");\n  CrossIconContainer.classList.add("cross-nav-icon", "icon-blur-bg");\n  iconContainerFragment.appendChild(LeftIconContainer);\n  iconContainerFragment.appendChild(CrossIconContainer);\n  videoContainer.appendChild(iconContainerFragment);\n}\nfunction showPrevIcon() {\n  if (LeftIconContainer && !disableLeftIcon) {\n    LeftIconContainer.style.display = "flex";\n  }\n}\nfunction showCrossIcon(_ref) {\n  var _ref$blurredBg = _ref.blurredBg,\n    blurredBg = _ref$blurredBg === void 0 ? false : _ref$blurredBg,\n    _ref$blackIcon = _ref.blackIcon,\n    blackIcon = _ref$blackIcon === void 0 ? false : _ref$blackIcon;\n  if (CrossIconContainer && !disableCrossIcon) {\n    CrossIconContainer.style.display = "flex";\n    if (!blurredBg) {\n      CrossIconContainer.classList.remove("icon-blur-bg");\n    } else {\n      CrossIconContainer.classList.add("icon-blur-bg");\n    }\n    if (blackIcon) {\n      CrossIcon.src = crossIconBlack;\n    } else {\n      CrossIcon.src = crossIcon;\n    }\n  }\n}\nfunction hidePrevIcon() {\n  if (LeftIconContainer) {\n    LeftIconContainer.style.display = "none";\n  }\n}\nfunction hideCrossIcon() {\n  if (CrossIconContainer) {\n    CrossIconContainer.style.display = "none";\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/fyndStyleConfigBottomSheet.css\nvar fyndStyleConfigBottomSheet = __webpack_require__(4495);\n;// CONCATENATED MODULE: ./src/htmlService/styles/fyndStyleConfigBottomSheet.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar fyndStyleConfigBottomSheet_options = {};\n\nfyndStyleConfigBottomSheet_options.styleTagTransform = (styleTagTransform_default());\nfyndStyleConfigBottomSheet_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      fyndStyleConfigBottomSheet_options.insert = insertBySelector_default().bind(null, "head");\n    \nfyndStyleConfigBottomSheet_options.domAPI = (styleDomAPI_default());\nfyndStyleConfigBottomSheet_options.insertStyleElement = (insertStyleElement_default());\n\nvar fyndStyleConfigBottomSheet_update = injectStylesIntoStyleTag_default()(fyndStyleConfigBottomSheet/* default */.A, fyndStyleConfigBottomSheet_options);\n\n\n\n\n       /* harmony default export */ const styles_fyndStyleConfigBottomSheet = (fyndStyleConfigBottomSheet/* default */.A && fyndStyleConfigBottomSheet/* default */.A.locals ? fyndStyleConfigBottomSheet/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/htmlService/fyndStyleConfigBottomSheet.js\nfunction fyndStyleConfigBottomSheet_slicedToArray(arr, i) { return fyndStyleConfigBottomSheet_arrayWithHoles(arr) || fyndStyleConfigBottomSheet_iterableToArrayLimit(arr, i) || fyndStyleConfigBottomSheet_unsupportedIterableToArray(arr, i) || fyndStyleConfigBottomSheet_nonIterableRest(); }\nfunction fyndStyleConfigBottomSheet_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction fyndStyleConfigBottomSheet_iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\nfunction fyndStyleConfigBottomSheet_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n\n\n\n\n\n\n\n\n\n\n\nfunction fyndStyleConfigBottomSheet_createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = fyndStyleConfigBottomSheet_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }\nfunction fyndStyleConfigBottomSheet_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return fyndStyleConfigBottomSheet_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return fyndStyleConfigBottomSheet_arrayLikeToArray(o, minLen); }\nfunction fyndStyleConfigBottomSheet_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n\n\n\n\n\n\nvar configSheetHeaderElements = []; // {pillDiv,pillIcon,subComponent}\nvar ringElements = [];\nvar sliderElements = {};\nvar selectedTab = null;\nvar activeTab = null;\nvar defaultRingIndex = configContants_configBottomSheetConfig.tabs[0].subComponent[0].defaultValue;\nfunction createConfigSettings(settingsHeaderHandler, settingsContentHandler, actionsHandler) {\n  var _getHtmlElements = getHtmlElements(),\n    configSettings = _getHtmlElements.configSettings;\n  hideConfigSettingBottomSheet();\n  var configBottomSheetFragment = document.createDocumentFragment();\n  var configBottomSheetDiv = document.createElement("div");\n  var configBottomSheetHeaderDiv = document.createElement("div");\n  var configBottomSheetDividerDiv = document.createElement("div");\n  var configBottomSheetContentDiv = document.createElement("div");\n  var configBottomSheetActionsDiv = document.createElement("div");\n  configBottomSheetDiv.classList.add("config-bottom-sheet-container-fs");\n  configBottomSheetHeaderDiv.classList.add("config-bottom-sheet-header-fs");\n  configBottomSheetDividerDiv.classList.add("config-bottom-sheet-divider-fs");\n  configBottomSheetContentDiv.classList.add("config-bottom-sheet-content-fs");\n  configBottomSheetActionsDiv.classList.add("config-bottom-sheet-actions-fs");\n  var HeaderElements = fyndStyleConfigBottomSheet_getHeaderElements(settingsHeaderHandler);\n  configBottomSheetHeaderDiv.append(HeaderElements);\n  var SheetContent = fyndStyleConfigBottomSheet_getSheetTabContent(settingsContentHandler);\n  configBottomSheetContentDiv.append(SheetContent);\n  var SheetActionsElements = fyndStyleConfigBottomSheet_getSheetActionsContent(actionsHandler, settingsContentHandler);\n  configBottomSheetActionsDiv.append(SheetActionsElements);\n  configBottomSheetDiv.append(configBottomSheetHeaderDiv, configBottomSheetDividerDiv, configBottomSheetContentDiv, configBottomSheetActionsDiv);\n  configBottomSheetFragment.append(configBottomSheetDiv);\n  configSettings.appendChild(configBottomSheetFragment);\n  //to auto select the first allowed tab\n  var initialDisplayTabIndex = 0;\n  var _iterator = fyndStyleConfigBottomSheet_createForOfIteratorHelper(configContants_configBottomSheetConfig.tabs.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _config$allowedCatego;\n      var _step$value = fyndStyleConfigBottomSheet_slicedToArray(_step.value, 2),\n        index = _step$value[0],\n        config = _step$value[1];\n      if ((_config$allowedCatego = config.allowedCategory) !== null && _config$allowedCatego !== void 0 && _config$allowedCatego.includes(getCurrentTryon().category)) {\n        initialDisplayTabIndex = index;\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  activeTab = initialDisplayTabIndex;\n  configSheetHeaderElements[initialDisplayTabIndex].pillDiv.click();\n}\nfunction fyndStyleConfigBottomSheet_getHeaderElements(settingsHeaderHandler) {\n  var headerFragment = document.createDocumentFragment();\n  var _iterator2 = fyndStyleConfigBottomSheet_createForOfIteratorHelper(configContants_configBottomSheetConfig.tabs.entries()),\n    _step2;\n  try {\n    var _loop = function _loop() {\n      var _config$allowedCatego2;\n      var _step2$value = fyndStyleConfigBottomSheet_slicedToArray(_step2.value, 2),\n        index = _step2$value[0],\n        config = _step2$value[1];\n      var pillDiv = document.createElement("div");\n      pillDiv.classList.add("config-bottom-sheet-pill-fs");\n      if (!((_config$allowedCatego2 = config.allowedCategory) !== null && _config$allowedCatego2 !== void 0 && _config$allowedCatego2.includes(getCurrentTryon().category))) {\n        pillDiv.classList.add("hide-pill-fs");\n      }\n      var pillIconWrapper = document.createElement("div");\n      pillIconWrapper.classList.add("config-bottom-sheet-pill-icon-wrapper-fs");\n      var pillIcon = document.createElement("img");\n      pillIcon.src = config.unSelectedIcon;\n      pillIconWrapper.appendChild(pillIcon);\n      var pillTextDiv = document.createElement("div");\n      pillTextDiv.innerText = config.label;\n      pillTextDiv.classList.add("config-bottom-sheet-pill-text-fs");\n      pillDiv.append(pillIconWrapper, pillTextDiv);\n      pillDiv.addEventListener("click", function () {\n        pillClickHandler(index);\n        settingsHeaderHandler(index, config);\n      });\n      headerFragment.append(pillDiv);\n      configSheetHeaderElements.push({\n        pillDiv: pillDiv,\n        pillIcon: pillIcon\n      });\n    };\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return headerFragment;\n}\nfunction fyndStyleConfigBottomSheet_getSheetTabContent(handler) {\n  var sheetTabContentfrag = document.createDocumentFragment();\n  var _iterator3 = fyndStyleConfigBottomSheet_createForOfIteratorHelper(configContants_configBottomSheetConfig.tabs.entries()),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = fyndStyleConfigBottomSheet_slicedToArray(_step3.value, 2),\n        index = _step3$value[0],\n        config = _step3$value[1];\n      var subComponentElement = getSubComponent(config.subComponent, handler);\n      sheetTabContentfrag.append(subComponentElement);\n      configSheetHeaderElements[index].subComponent = subComponentElement;\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return sheetTabContentfrag;\n}\nfunction getSubComponent(subComponentConfig, handler) {\n  var subComponentDiv = document.createElement("div");\n  var _iterator4 = fyndStyleConfigBottomSheet_createForOfIteratorHelper(subComponentConfig.entries()),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _step4$value = fyndStyleConfigBottomSheet_slicedToArray(_step4.value, 2),\n        index = _step4$value[0],\n        eachSubComponentConfig = _step4$value[1];\n      switch (eachSubComponentConfig.type) {\n        case "fingers":\n          subComponentDiv.classList.add("ring-row-container-fs");\n          subComponentDiv.style.display = "none";\n          subComponentDiv.append(getRings(handler));\n          return subComponentDiv;\n        case "slider":\n          subComponentDiv.classList.add("slider-main-container-fs");\n          subComponentDiv.style.display = "none";\n          subComponentDiv.append(getSliderDiv(eachSubComponentConfig, handler));\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return subComponentDiv;\n}\nfunction getRings(handler) {\n  var ringRowContainer = document.createDocumentFragment();\n  //   ringRowContainer.classList.add("ring-row-container");\n  var _iterator5 = fyndStyleConfigBottomSheet_createForOfIteratorHelper(ringIconConfig.entries()),\n    _step5;\n  try {\n    var _loop2 = function _loop2() {\n      var _step5$value = fyndStyleConfigBottomSheet_slicedToArray(_step5.value, 2),\n        index = _step5$value[0],\n        eachRingConfig = _step5$value[1];\n      var ringDiv = document.createElement("div");\n      ringDiv.classList.add("config-bottom-sheet-ring-divs-fs");\n      var ringIconDiv = document.createElement("div");\n      ringIconDiv.classList.add("config-bottom-sheet-ringicon-divs-fs");\n      var ringIcon = document.createElement("img");\n      ringIcon.src = eachRingConfig.unSelectedIcon;\n      ringIconDiv.appendChild(ringIcon);\n      var ringLabelDiv = document.createElement("div");\n      ringLabelDiv.classList.add("config-bottom-sheet-ringicon-label-fs");\n      ringLabelDiv.innerText = eachRingConfig.label;\n      // to handle and toggle clicks and change icon\n      ringElements.push({\n        ringIconDiv: ringIconDiv,\n        ringIcon: ringIcon\n      });\n      ringIconDiv.addEventListener("click", function () {\n        return handleRingClick(index, handler);\n      });\n      ringDiv.appendChild(ringIconDiv);\n      ringDiv.appendChild(ringLabelDiv);\n      ringRowContainer.append(ringDiv);\n    };\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      _loop2();\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return ringRowContainer;\n}\nfunction handleRingClick(index, handler) {\n  ringElements.forEach(function (element, idx) {\n    element.ringIcon.src = ringIconConfig[idx].unSelectedIcon;\n    element.ringIconDiv.classList.remove("ring-selected-fs");\n  });\n  ringElements[index].ringIcon.src = ringIconConfig[index].selectedIcon;\n  ringElements[index].ringIconDiv.classList.add("ring-selected-fs");\n  handler("fingers", index);\n}\nfunction getSliderDiv(eachSubComponentConfig, handler) {\n  var sliderContainer = document.createElement("div");\n  sliderContainer.classList.add("slider-container-fs");\n  var leftText = document.createElement("div");\n  leftText.classList.add("slider-left-text-fs");\n  leftText.innerText = eachSubComponentConfig.leftText;\n  var rightText = document.createElement("div");\n  rightText.classList.add("slider-right-text-fs");\n  if (eachSubComponentConfig.rightText) {\n    rightText.innerText = eachSubComponentConfig.rightText;\n  } else {\n    rightText.innerText = formula(eachSubComponentConfig.defaultValue, eachSubComponentConfig);\n  }\n  var sliderInputDiv = document.createElement("div");\n  sliderInputDiv.classList.add("slider-input-div-fs");\n  var sliderInput = document.createElement("input");\n  sliderInput.type = "range";\n  sliderInput.defaultValue = "".concat(eachSubComponentConfig.defaultValue);\n  sliderInput.step = "".concat(eachSubComponentConfig.step);\n  sliderInput.min = "".concat(eachSubComponentConfig.min);\n  sliderInput.max = "".concat(eachSubComponentConfig.max);\n\n  // to change the slide value\n  sliderElements[eachSubComponentConfig.tag] = {\n    sliderInput: sliderInput,\n    rightText: rightText\n  };\n  sliderInput.addEventListener("input", function () {\n    if (!eachSubComponentConfig.rightText) {\n      handleSliderInput(eachSubComponentConfig.tag, sliderInput.value, eachSubComponentConfig);\n    }\n    fyndStyleConfigBottomSheet_handleSliderCss(eachSubComponentConfig.tag, sliderInput.value, eachSubComponentConfig);\n    handler(eachSubComponentConfig.tag, sliderInput.value);\n  });\n  sliderInputDiv.appendChild(sliderInput);\n  sliderContainer.append(leftText, sliderInputDiv, rightText);\n  return sliderContainer;\n}\nfunction handleSliderInput(tag, value, config) {\n  sliderElements[tag].rightText.innerText = formula(value, config);\n}\nfunction fyndStyleConfigBottomSheet_handleSliderCss(tag, value, config) {\n  var finalValue = formula(value, config);\n  sliderElements[tag].sliderInput.style.background = "linear-gradient(to right, white 0%, white ".concat(finalValue, "%, rgba(255, 255, 255, 0.4) ").concat(finalValue, "%, rgba(255, 255, 255, 0.4) 100%)");\n}\nfunction formula(value, config) {\n  var finalValue = (value - (config === null || config === void 0 ? void 0 : config.min)) / ((config === null || config === void 0 ? void 0 : config.max) - (config === null || config === void 0 ? void 0 : config.min)) * 100;\n  return parseInt(finalValue);\n}\nfunction pillClickHandler(index) {\n  activeTab = index;\n  configSheetHeaderElements.forEach(function (element, idx) {\n    element.pillDiv.classList.remove("active-config-bottom-sheet-pill-active-fs");\n    element.pillIcon.src = configContants_configBottomSheetConfig.tabs[idx].unSelectedIcon;\n  });\n  configSheetHeaderElements[index].pillDiv.classList.add("active-config-bottom-sheet-pill-active-fs");\n  var selectedTab = configContants_configBottomSheetConfig.tabs[index];\n  configSheetHeaderElements[index].pillIcon.src = configContants_configBottomSheetConfig.tabs[index].selectedIcon;\n  showSubComponent(index);\n  // ring case, click the 1st icon to select itself\n  if (index === 0) {\n    ringElements[defaultRingIndex].ringIconDiv.click();\n  }\n}\nfunction showSubComponent(index) {\n  configSheetHeaderElements.forEach(function (_ref) {\n    var subComponent = _ref.subComponent;\n    subComponent.style.display = "none";\n  });\n  configSheetHeaderElements[index].subComponent.style.display = "flex";\n}\nfunction fyndStyleConfigBottomSheet_getSheetActionsContent(actionsHandler, settingsContentHandler) {\n  var SheetActionFragment = document.createDocumentFragment();\n  var ResetIconDiv = document.createElement("div");\n  var CloseIconDiv = document.createElement("div");\n  ResetIconDiv.classList.add("config-bottom-sheet-reset-button-fs");\n  CloseIconDiv.classList.add("config-bottom-sheet-close-button-fs");\n  ResetIconDiv.addEventListener("click", function () {\n    resetSubComponent(settingsContentHandler);\n    actionsHandler("", "reset");\n  });\n  CloseIconDiv.addEventListener("click", function () {\n    actionsHandler("", "close");\n    hideConfigSettingBottomSheet();\n  });\n  var ResetIcon = document.createElement("img");\n  var CloseIcon = document.createElement("img");\n  ResetIcon.src = resetBig;\n  CloseIcon.src = Angle_Right;\n  ResetIconDiv.append(ResetIcon);\n  CloseIconDiv.append(CloseIcon);\n  SheetActionFragment.append(ResetIconDiv, CloseIconDiv);\n  return SheetActionFragment;\n}\nfunction resetSubComponent(handler, idx) {\n  var currentTabConfig = configContants_configBottomSheetConfig.tabs[idx || activeTab];\n  currentTabConfig === null || currentTabConfig === void 0 ? void 0 : currentTabConfig.subComponent.forEach(function (eachSubComponent) {\n    if (eachSubComponent.type === "fingers") {\n      resetFinger(handler);\n    } else if (eachSubComponent.type === "slider") {\n      fyndStyleConfigBottomSheet_resetSliderValues(eachSubComponent.tag, eachSubComponent.defaultValue, handler, eachSubComponent);\n    }\n  });\n}\nfunction resetFinger(handler) {\n  handleRingClick(defaultRingIndex, handler);\n}\nfunction fyndStyleConfigBottomSheet_resetSliderValues(tag, defaultValue, handler, config) {\n  sliderElements[tag].sliderInput.value = defaultValue;\n  fyndStyleConfigBottomSheet_handleSliderCss(tag, defaultValue, config);\n  if (!(config !== null && config !== void 0 && config.rightText)) {\n    handleSliderInput(tag, defaultValue, config);\n  }\n  handler(tag, defaultValue);\n}\nfunction showConfigSettingBottomSheet() {\n  var _getHtmlElements2 = getHtmlElements(),\n    configSettings = _getHtmlElements2.configSettings;\n  configSettings.classList.add("show-config-settings-fs");\n}\nfunction hideConfigSettingBottomSheet() {\n  var _getHtmlElements3 = getHtmlElements(),\n    configSettings = _getHtmlElements3.configSettings;\n  configSettings.classList.remove("show-config-settings-fs");\n}\nfunction updateConfigSettingsUi() {\n  var initialDisplayTabIndex;\n  activeTab = null;\n  var _iterator6 = fyndStyleConfigBottomSheet_createForOfIteratorHelper(configContants_configBottomSheetConfig.tabs.entries()),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _step6$value = fyndStyleConfigBottomSheet_slicedToArray(_step6.value, 2),\n        index = _step6$value[0],\n        config = _step6$value[1];\n      // setting all tabs as hidden initially so that when the category sets, we may know which one to show\n      configSheetHeaderElements[index].pillDiv.classList.add("hide-pill-fs");\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  var _iterator7 = fyndStyleConfigBottomSheet_createForOfIteratorHelper(configContants_configBottomSheetConfig.tabs.entries()),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _config$allowedCatego3;\n      var _step7$value = fyndStyleConfigBottomSheet_slicedToArray(_step7.value, 2),\n        _index = _step7$value[0],\n        _config = _step7$value[1];\n      if ((_config$allowedCatego3 = _config.allowedCategory) !== null && _config$allowedCatego3 !== void 0 && _config$allowedCatego3.includes(getCurrentTryon().category)) {\n        initialDisplayTabIndex = _index;\n        configSheetHeaderElements[_index].pillDiv.classList.remove("hide-pill-fs");\n        if (activeTab === null) {\n          activeTab = initialDisplayTabIndex;\n        }\n        // break;\n      } else {\n        configSheetHeaderElements[_index].pillDiv.classList.add("hide-pill-fs");\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  pillClickHandler(activeTab);\n}\nfunction resetEverySubComponent() {\n  var _configBottomSheetCon;\n  (_configBottomSheetCon = configBottomSheetConfig.tabs) === null || _configBottomSheetCon === void 0 ? void 0 : _configBottomSheetCon.forEach(function (eachTab, idx) {\n    resetSubComponent(function () {}, idx);\n  });\n}\n;// CONCATENATED MODULE: ./src/utils/messageEvents.js\n\n\n\n\nfunction messageEvents_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction messageEvents_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { messageEvents_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { messageEvents_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar isClosed = true;\nvar isFirstInitialize = false;\nfunction setIsClosed(value) {\n  isClosed = value;\n}\nfunction CaptureSnapShot() {\n  var _getHtmlElements = getHtmlElements(),\n    screenShotTag = _getHtmlElements.screenShotTag;\n  if (getSceneManagerInstance()) {\n    try {\n      var ss = getSceneManagerInstance().takeScreenShot();\n      var _base64Data = btoa(ss);\n      screenShotTag.href = "".concat(atob(_base64Data));\n      screenShotTag.download = "NewScreenshot.jpeg";\n      screenShotTag.click();\n      // Create a Blob object using the base64 encoded data\n      // const imageBlob = new Blob([base64Data], { type: "image/jpeg" });\n      emitPhotoLoaded(_base64Data);\n    } catch (_unused) {\n      emitPhotoLoadedFailed(base64Data);\n    }\n  }\n}\nvar methods = {\n  applyMakeupBySDK: function () {\n    var _applyMakeupBySDK = messageEvents_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(skuId) {\n      var skuConfig, errorMessage;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return api_getSKUData(skuId, authConstants_getAPIKey);\n            case 3:\n              skuConfig = _context.sent;\n              if (skuConfig.data.status && skuConfig.data.status === "403") {\n                emitSKUFailed();\n                emitSubscriptionIssue(skuConfig.data);\n                showBillingPanel(errorMessages.billingIssue);\n              } else {\n                handleApiResponse(skuConfig.data);\n              }\n              _context.next = 11;\n              break;\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context["catch"](0);\n              emitSKUFailed();\n              if (_context.t0.response && _context.t0.response.status && _context.t0.response.status === 403) {\n                showBillingPanel(errorMessages.billingIssue);\n                emitSubscriptionIssue(_context.t0.response.data);\n              } else {\n                if (_context.t0.response && _context.t0.response.data && _context.t0.response.data.error) errorMessage = _context.t0.response.data.error;else errorMessage = _context.t0.message;\n\n                // showSnackbar(errorMessage).then(() => {\n                //   setTimeout(() => {\n                //     hideSnackbar();\n                //   }, 2000);\n                // });\n                errorPanel_showErrorPermissionPanel(errorMessage);\n              }\n            case 11:\n            case "end":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n    function applyMakeupBySDK(_x) {\n      return _applyMakeupBySDK.apply(this, arguments);\n    }\n    return applyMakeupBySDK;\n  }(),\n  applyMakeupByConfig: function applyMakeupByConfig(skuConfig) {\n    if (!skuConfig) {\n      emitSKUFailed();\n      return;\n    }\n    handleApiResponse(skuConfig);\n  },\n  clearSku: function clearSku() {\n    if (getSceneManagerInstance()) {\n      getSceneManagerInstance().Clear();\n      emitReset();\n    }\n  },\n  snapshot: function snapshot() {\n    CaptureSnapShot();\n  },\n  closePreview: function closePreview() {\n    if (getIsInitialized()) CloseModule();\n    // route("/");\n  },\n  resumePreview: function resumePreview(payload) {\n    setIsPause(false);\n    if (payload && payload.mode === "liveTryOn") {\n      sdkEngine_tryOnEventHandler("live");\n    }\n    emitModuleResume();\n  },\n  pausePreview: function pausePreview() {\n    setIsPause(true);\n    emitModulePause();\n  },\n  openLivePreview: function openLivePreview(payload) {\n    //console.log("openLivePreview", payload);\n    setIsPause(false);\n    if (isClosed) {\n      emitModuleOpened();\n      isClosed = false;\n    }\n    if (payload && payload.mode === "modelTryOn") {\n      if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) {\n        if (payload.imgURL) {\n          hideCameraPermissionPanel();\n          sdkEngine_tryOnEventHandler("modelTryOn", null, payload.imgURL);\n        } else {\n          errorPanel_showErrorPermissionPanel("Invalid Image URL");\n        }\n      } else {\n        sdkEngine_tryOnEventHandler("modelTryOn", null, payload.imgURL);\n      }\n    } else if (payload && payload.mode === "imgTryOn") {\n      if (payload.imgURL) {\n        hideCameraPermissionPanel();\n        sdkEngine_tryOnEventHandler("modelTryOn", null, payload.imgURL);\n        emitUploadStarted();\n      } else {\n        // showSnackbar("Invalid Image URL").then(() => {\n        //   setTimeout(() => {\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel("Invalid Image URL");\n      }\n    } else {\n      sdkEngine_tryOnEventHandler("live");\n    }\n  },\n  disableInternalUI: function disableInternalUI() {\n    // setShouldHideInternalUI(true);\n    // // hideOptionsContainer();\n    // hideModelContainer();\n    // hideConfigContainer();\n    // setVisibilityStateOfUploadInput("none");\n  },\n  onConfigChange: function onConfigChange(payload) {\n    if (payload) {\n      if (payload.options) configSliderHandler(payload.value, payload.options);\n    }\n  },\n  initializeSDK: function initializeSDK(payload) {\n    //console.log("initializeSDK", payload);\n\n    if (payload) {\n      if (isFirstInitialize) return;\n      if (payload.platform) {\n        setWrapperType(payload.platform);\n      }\n      if (payload.apiKey) setAPIKey(payload.apiKey);\n      if (payload.chooseTryOnConfig) overrideChooseTryOnConfig(payload.chooseTryOnConfig);\n      if (payload.mode) {\n        if (payload.mode === "platform") {\n          (0,globalVariables/* setPlatformMode */.z2)("platform");\n        }\n        if (payload.mode === "console") {\n          (0,globalVariables/* setPlatformMode */.z2)("panel");\n        }\n        if (payload.mode === "private") {\n          (0,globalVariables/* setPlatformMode */.z2)("private");\n        }\n      } else {\n        (0,globalVariables/* setPlatformMode */.z2)("platform");\n      }\n      // console.log(payload.category.toLowerCase());\n      if (payload.category) {\n        var currentTryOn = getCategoryFactorybyID(payload.category.toLowerCase());\n        setCurrentTryon(currentTryOn);\n        if (!["opacity"].includes(currentTryOn === null || currentTryOn === void 0 ? void 0 : currentTryOn.ConfigUIType[0])) updateConfigSettingsUi();\n      } else {\n        setCurrentTryon(getCategoryFactorybyID("lipstick"));\n      }\n      if (payload.openLiveOnInit) {\n        (0,globalVariables/* setOpenLiveOnInit */.AQ)(true);\n      }\n      if (payload.openImageOnInit) {\n        (0,globalVariables/* setOpenImageOnInit */.b4)(payload.openImageOnInit);\n      }\n      if (payload.disableCrossIcon) {\n        setCrossIconState(true);\n        hideCrossIcon();\n      }\n      if (payload.disablePrevIcon) {\n        setPrevIconState(true);\n        hidePrevIcon();\n      }\n      (0,env/* updateEnvironmentURL */.i)();\n      updateAPIURL();\n      if (!(0,globalVariables/* isShouldHideInternalUI */.Fu)()) {\n        fetchModuleConfig(getSceneManagerInstance());\n      } else emitInitComplete();\n      loadML();\n      isFirstInitialize = true;\n    }\n  },\n  onNailColorEvents: function onNailColorEvents(payload) {\n    if (payload) {\n      if (payload.options == "clickSnapShot") onImageClick();\n      if (payload.options == "resetSnapShot") {\n        onClearClick();\n        if (getSceneManagerInstance()) {\n          getSceneManagerInstance().resetNailData();\n        }\n      }\n    }\n  },\n  onFaceAnalysisEvents: function onFaceAnalysisEvents(payload) {\n    if (payload) {\n      if (payload.options == "opened") openFaceAnalysis();\n      if (payload.options == "closed") closeFaceAnalysis();\n      if (payload.options == "resetSnapShot") resetFaceAnalysis();\n      if (payload.options == "clickSnapShot") faceAnalysisSnapShot();\n    }\n  },\n  onComparisonEvents: function onComparisonEvents(payload) {\n    if (payload) {\n      if (payload.options == "sliderUI") {\n        setComparisonState(0);\n        if (payload.value == "show") {\n          showComparisonSlider();\n        } else {\n          hideComparisonSlider();\n        }\n      } else if (payload.options == "touch") {\n        setComparisonState(1);\n        if (payload.value == "show") {\n          showComparisonSlider("0%", "none");\n        } else {\n          hideComparisonSlider();\n        }\n      }\n    }\n  },\n  webDemoSettings: function webDemoSettings(payload) {\n    //onVideoMode();\n    var _getHtmlElements2 = getHtmlElements(),\n      configurationContainer = _getHtmlElements2.configurationContainer;\n    if (payload && payload) {\n      configurationContainer.style.bottom = "".concat(payload, "px");\n    } else {\n      configurationContainer.style.bottom = "187.5px";\n    }\n  }\n};\nfunction addMessageEventListener() {\n  window.addEventListener("message", function (e) {\n    var _e$data = e.data,\n      type = _e$data.type,\n      payload = _e$data.payload;\n    switch (type) {\n      case "initialize":\n        methods.initializeSDK(payload);\n        return;\n      case "applyBySku":\n        methods.applyMakeupBySDK(payload.skuId); //, payload.styleId);\n        return;\n      case "applyByConfig":\n        methods.applyMakeupByConfig(payload);\n        return;\n      case "clearSku":\n        methods.clearSku();\n        return;\n      case "snapshot":\n        methods.snapshot();\n        return;\n      case "closePreview":\n        methods.closePreview();\n        return;\n      case "openLivePreview":\n        methods.openLivePreview(payload);\n        return;\n      case "webDemo":\n        methods.webDemoSettings(payload);\n        return;\n      case "pausePreview":\n        methods.pausePreview();\n        return;\n      case "resumePreview":\n        methods.resumePreview(payload);\n        return;\n      case "disableInternalUI":\n        methods.disableInternalUI();\n        return;\n      case "configChange":\n        methods.onConfigChange(payload);\n        return;\n      case "nailColor":\n        methods.onNailColorEvents(payload);\n        return;\n      case "faceAnalysis":\n        methods.onFaceAnalysisEvents(payload);\n        return;\n      case "comparison":\n        methods.onComparisonEvents(payload);\n        return;\n      default:\n        return;\n    }\n  }, false);\n}\n;// CONCATENATED MODULE: ./src/assets/lottie/loader.json\nconst loader_namespaceObject = /*#__PURE__*/JSON.parse(\'{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.5.7","a":"","k":"","d":"","tc":""},"fr":24,"ip":0,"op":60,"w":300,"h":300,"nm":"Glam AR Loader","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"four","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":22.9,"s":[20]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":40,"s":[30]},{"t":57,"s":[20]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,152,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[120,120,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-1.283,0],[0,0],[-0.682,-1.366],[0,0],[0,0],[1.213,-1.402],[0,0],[0,0],[1.444,1.67],[0,0],[-0.871,1.745],[0,0]],"o":[[0,0],[0.682,-1.366],[0,0],[1.283,0],[0,0],[0,0],[0.871,1.743],[0,0],[0,0],[-1.444,1.67],[0,0],[-1.212,-1.402],[0,0],[0,0]],"v":[[-61.403,-91.778],[-61.403,-91.778],[-58.206,-93.938],[58.648,-93.938],[61.845,-91.778],[96.924,-21.497],[96.924,-21.497],[96.322,-16.152],[96.322,-16.152],[2.221,92.685],[-2.971,92.685],[-96.323,-15.28],[-96.924,-20.627],[-96.924,-20.627]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"three","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":16,"s":[30]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":33.9,"s":[60]},{"t":51,"s":[30]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-1.283,0],[0,0],[-0.682,-1.366],[0,0],[0,0],[1.213,-1.402],[0,0],[0,0],[1.444,1.67],[0,0],[-0.871,1.745],[0,0]],"o":[[0,0],[0.682,-1.366],[0,0],[1.283,0],[0,0],[0,0],[0.871,1.743],[0,0],[0,0],[-1.444,1.67],[0,0],[-1.212,-1.402],[0,0],[0,0]],"v":[[-61.403,-91.778],[-61.403,-91.778],[-58.206,-93.938],[58.648,-93.938],[61.845,-91.778],[96.924,-21.497],[96.924,-21.497],[96.322,-16.152],[96.322,-16.152],[2.221,92.685],[-2.971,92.685],[-96.323,-15.28],[-96.924,-20.627],[-96.924,-20.627]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"two","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":9,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":26.601,"s":[80]},{"t":44,"s":[40]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-0.964,0],[0,0],[-0.521,-1.041],[0,0],[0,0],[0.926,-1.066],[0,0],[0,0],[1.094,1.262],[0,0],[-0.667,1.333],[0,0]],"o":[[0,0],[0.521,-1.041],[0,0],[0.964,0],[0,0],[0,0],[0.668,1.331],[0,0],[0,0],[-1.094,1.262],[0,0],[-0.924,-1.066],[0,0],[0,0]],"v":[[-48.477,-76.427],[-48.477,-76.427],[-46.055,-78.062],[46.28,-78.062],[48.701,-76.427],[76.419,-21.067],[76.419,-21.067],[75.96,-16.989],[75.96,-16.989],[1.604,68.741],[-2.321,68.741],[-76.086,-16.302],[-76.544,-20.381],[-76.544,-20.381]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"one","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":2,"s":[50]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":15.828,"s":[100]},{"t":30,"s":[50]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-0.678,0],[0,0],[-0.379,-0.756],[0,0],[0,0],[0.669,-0.771],[0,0],[0,0],[0.781,0.902],[0,0],[0,0],[0,0],[-0.486,0.971],[0,0]],"o":[[0,0],[0.378,-0.756],[0,0],[0.678,0],[0,0],[0,0],[0.486,0.97],[0,0],[0,0],[-0.781,0.902],[0,0],[0,0],[0,0],[-0.668,-0.771],[0,0],[0,0]],"v":[[-36.869,-61.888],[-36.869,-61.888],[-35.142,-63.062],[35.283,-63.062],[37.011,-61.888],[58.152,-19.636],[58.152,-19.636],[57.82,-16.67],[57.82,-16.67],[1.108,48.761],[-1.684,48.761],[-2.109,49.13],[-1.684,48.761],[-57.946,-16.146],[-58.277,-19.113],[-58.277,-19.113]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"logo center","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0.328,-0.572],[0,0],[-0.591,-0.591],[0,0],[0,0],[-0.725,0.72],[0,0],[0.415,0.725],[0,0],[0.656,0]],"o":[[0,0],[-0.66,0],[0,0],[-0.42,0.725],[0,0],[0,0],[0.72,0.72],[0,0],[0.591,-0.591],[0,0],[-0.327,-0.572],[0,0]],"v":[[6.529,-12.24],[-4.332,-12.24],[-5.93,-11.317],[-8.03,-7.68],[-7.734,-5.45],[-4.559,-2.275],[-0.206,2.078],[2.407,2.078],[9.935,-5.45],[10.231,-7.68],[8.13,-11.317],[6.533,-12.24]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":9}},"s":{"a":0,"k":[-42.176,-66.036],"ix":5},"e":{"a":0,"k":[22.915,21.512],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"logo","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.113,0.113,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":0,"s":[100,100,100]},{"i":{"x":[0.184,0.184,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":30,"s":[104,104,100]},{"t":60,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0.66,0],[0,0],[0.328,-0.572],[0,0],[-0.591,-0.591],[0,0],[-0.605,1.052],[0,0],[-0.66,0],[0,0],[-0.328,-0.572],[0,0],[0,0],[1.421,0],[0,0],[0.332,0.572],[0,0],[0,0],[0.66,0],[0,0],[0.328,-0.572],[0,0],[-0.591,-0.591],[0,0],[-0.724,0.72],[0,0],[1.648,0],[0,0],[0.346,-0.346],[0,0],[0.725,0.72],[0,0],[-0.415,0.725],[0,0],[-0.655,0],[0,0],[-0.328,-0.572],[0,0],[-0.66,0],[0,0],[-0.346,0.346],[0,0],[0.416,0.725]],"o":[[0,0],[-0.328,-0.572],[0,0],[-0.66,0],[0,0],[-0.42,0.725],[0,0],[0.859,0.859],[0,0],[0.328,-0.572],[0,0],[0.66,0],[0,0],[0,0],[0.711,1.232],[0,0],[-0.66,0],[0,0],[0,0],[-0.327,-0.572],[0,0],[-0.66,0],[0,0],[-0.42,0.725],[0,0],[0.72,0.72],[0,0],[1.163,-1.163],[0,0],[-0.489,0],[0,0],[-0.72,0.72],[0,0],[-0.591,-0.591],[0,0],[0.328,-0.572],[0,0],[0.66,0],[0,0],[0.328,0.572],[0,0],[0.489,0],[0,0],[0.591,-0.591],[0,0]],"v":[[45.546,-18.712],[29.188,-47.04],[27.591,-47.963],[-25.39,-47.963],[-26.988,-47.04],[-43.346,-18.712],[-43.051,-16.483],[-39.169,-12.601],[-36.265,-12.984],[-21.813,-38.016],[-20.216,-38.939],[22.407,-38.939],[24.004,-38.02],[34.879,-19.178],[35.174,-18.666],[33.573,-15.896],[27.498,-15.896],[25.897,-16.82],[24.535,-19.178],[18.82,-29.07],[17.223,-29.993],[-15.046,-29.993],[-16.643,-29.07],[-30.209,-5.575],[-29.914,-3.346],[-0.206,26.362],[2.406,26.362],[26.769,1.999],[25.463,-1.153],[17.92,-1.153],[16.614,-0.613],[2.402,13.594],[-0.211,13.594],[-18.665,-4.86],[-18.96,-7.089],[-11.483,-20.046],[-9.886,-20.969],[12.067,-20.969],[13.665,-20.046],[18.871,-11.027],[20.468,-10.104],[38.092,-10.104],[39.398,-10.644],[45.242,-16.487],[45.537,-18.717]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":9}},"s":{"a":0,"k":[-42.176,-66.036],"ix":5},"e":{"a":0,"k":[22.915,21.512],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0}],"markers":[]}\');\n;// CONCATENATED MODULE: ./src/htmlService/lottieLoader.js\n\n\nvar animation = null;\nfunction showLottieLoader() {\n  var _getHtmlElements = getHtmlElements(),\n    lottieLoader = _getHtmlElements.lottieLoader;\n  if (!animation) {\n    initLottieLoader();\n  }\n  lottieLoader.style.display = "flex";\n}\nfunction hideLottieLoader() {\n  var _getHtmlElements2 = getHtmlElements(),\n    lottieLoader = _getHtmlElements2.lottieLoader;\n  if (animation) animation.destroy();\n  animation = null;\n  lottieLoader.style.display = "none";\n}\nfunction initLottieLoader() {\n  if (!animation) {\n    animation = lottie.loadAnimation({\n      container: document.getElementById("lottie"),\n      // the DOM element\n      renderer: "svg",\n      loop: true,\n      autoplay: true,\n      animationData: loader_namespaceObject // the path to the animation json\n    });\n  }\n}\n;// CONCATENATED MODULE: ./src/sdkService/tryOnModes.js\n\n\n\n\nfunction tryOnModes_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction tryOnModes_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { tryOnModes_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { tryOnModes_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar texture;\nvar loadImage = /*#__PURE__*/(/* unused pure expression or super */ null && (function () {\n  var _ref = tryOnModes_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee(src) {\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt("return", new Promise(function (resolve, reject) {\n              var img = getInputImage();\n              if (img.complete) {\n                texture = new THREE.Texture(img);\n                texture.needsUpdate = true;\n                resolve(texture);\n              } else {\n                img.onload = function () {\n                  texture = new THREE.Texture(img);\n                  texture.needsUpdate = true;\n                  resolve(texture);\n                };\n                img.onerror = function (err) {\n                  return reject(err);\n                };\n              }\n            }));\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function loadImage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}()));\nfunction loadImageTag(src) {\n  return new Promise(function (resolve, reject) {\n    var img = document.createElement("img");\n    img.alt = "boy in a jacket";\n    img.classList.add("input_Image"); // Add the class "input_Image"\n    img.crossOrigin = "Anonymous";\n    img.src = src;\n    img.onload = function () {\n      resolve(img);\n    };\n    img.onerror = function (err) {\n      reject(err);\n    };\n  });\n}\nvar onImageMode = /*#__PURE__*/function () {\n  var _ref2 = tryOnModes_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2(URL) {\n    var trackingMode, _getHtmlElements, video_Container, canavas_container, canvas, tracks, img, inputImage, inputImageRes, windowRes, Difference, percentageDifference, div, vw, vh, imgWidth, imgHeight, aspectRatio;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            trackingMode = getTrackingMode();\n            hideCameraPermissionPanel();\n            setInputImageTexture(null);\n            _getHtmlElements = getHtmlElements(), video_Container = _getHtmlElements.video_Container, canavas_container = _getHtmlElements.canavas_container;\n            video_Container.style.transform = "scaleX(1)";\n            // loaderContainer.style.display = "flex";\n            showLottieLoader();\n            canavas_container.style.display = "flex";\n            canavas_container.style.justifyContent = "center";\n            //modelsContainer.style.display = "none";\n            canvas = document.querySelector(".output_canvas");\n            canvas.style.display = "block";\n            canvas.style.transform = "scaleX(1)";\n            cancelAnimationFrame(getAnimationFrameId());\n            if (getCurrentStream()) {\n              tracks = getCurrentStream().getTracks();\n              tracks.forEach(function (track) {\n                return track.stop();\n              }); // Stop all tracks\n            }\n            if (getVideo()) {\n              getVideo().pause();\n              getVideo().srcObject = null; // Disconnect the video source\n              video_Container.removeChild(getVideo()); // Remove the video element from DOM\n              setVideo(null);\n            }\n            if (sdkEngine_getInputImage()) {\n              video_Container.removeChild(sdkEngine_getInputImage());\n              setInputImage(null);\n            }\n            if (!(trackingMode === TrackingMode.Face)) {\n              _context2.next = 22;\n              break;\n            }\n            if (getProviders().facemeshLandmarksProvider) {\n              _context2.next = 20;\n              break;\n            }\n            setProvider("face", new FacemeshLandmarksProvider(onLandmarks, canvas));\n            _context2.next = 20;\n            return getProviders().facemeshLandmarksProvider.initialize();\n          case 20:\n            _context2.next = 38;\n            break;\n          case 22:\n            if (!(trackingMode === TrackingMode.Hair)) {\n              _context2.next = 29;\n              break;\n            }\n            if (getProviders().hairSegmentProvider) {\n              _context2.next = 27;\n              break;\n            }\n            setProvider("hair", new HairSegmentProvider(onHairSegment));\n            _context2.next = 27;\n            return getProviders().hairSegmentProvider.initialize();\n          case 27:\n            _context2.next = 38;\n            break;\n          case 29:\n            if (!(trackingMode === TrackingMode.Hand)) {\n              _context2.next = 38;\n              break;\n            }\n            if (getProviders().handsLandmarkProvider) {\n              _context2.next = 34;\n              break;\n            }\n            setProvider("hand", new HandsLandmarkProvider(onHandLandsmarks));\n            _context2.next = 34;\n            return getProviders().handsLandmarkProvider.initialize();\n          case 34:\n            if (getProviders().nailmaskProvider) {\n              _context2.next = 38;\n              break;\n            }\n            setProvider("nail", new NailMaskProvider(onCameraFrame));\n            _context2.next = 38;\n            return getProviders().nailmaskProvider.initialize();\n          case 38:\n            _context2.next = 40;\n            return loadImageTag(URL);\n          case 40:\n            img = _context2.sent;\n            setInputImage(img);\n            video_Container.appendChild(sdkEngine_getInputImage());\n            assetsCache_addToGlobalCache(URL, sdkEngine_getInputImage().src);\n            texture = new three_module/* Texture */.gPd(img);\n            texture.needsUpdate = true;\n            inputImage = img;\n            canvas.width = inputImage.width;\n            canvas.height = inputImage.height;\n            canvas.style.margin = "auto";\n            video_Container.style.width = "100%";\n            video_Container.style.height = "100%";\n            setIsVideo(false);\n            resetComparisonSlider("50%", getComparisonState(), getIsVideo());\n            if (!getSceneManagerInstance()) {\n              setSceneManager(new SceneManager(canvas, getDebug(), getuseOrtho()));\n            }\n            setVideoEl(inputImage);\n            inputImageRes = inputImage.width > inputImage.height ? inputImage.width : inputImage.height;\n            windowRes = inputImage.width > inputImage.height ? window.innerWidth : window.innerHeight;\n            Difference = windowRes - inputImageRes;\n            if (windowRes > inputImageRes) percentageDifference = Difference / windowRes;else percentageDifference = Difference / inputImageRes;\n            div = 4;\n            if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) div = 1;\n            vw = window.innerWidth;\n            vh = window.innerHeight;\n            imgWidth = inputImage.width;\n            imgHeight = inputImage.height;\n            aspectRatio = imgWidth / imgHeight; // console.log(inputImage.width, inputImage.height, aspectRatio);\n            if (vw / vh > aspectRatio) {\n              inputImage.style.width = vw + "px";\n              inputImage.style.height = vw / aspectRatio + "px";\n\n              // If the height is still larger than the viewport height, adjust width and height\n              if (parseInt(inputImage.style.height) > vh) {\n                inputImage.style.height = vh + "px";\n                inputImage.style.width = vh * aspectRatio + "px";\n              }\n            } else {\n              inputImage.style.height = vh + "px";\n              inputImage.style.width = vh * aspectRatio + "px";\n\n              // If the width is still larger than the viewport width, adjust width and height\n              if (parseInt(inputImage.style.width) > vw) {\n                inputImage.style.width = vw + "px";\n                inputImage.style.height = vw / aspectRatio + "px";\n              }\n            }\n            // }\n\n            // console.log(inputImage.width, inputImage.height);\n            getSceneManagerInstance().setImageTryonSettings(inputImage.width, inputImage.height);\n\n            // await new Promise((resolve) => setTimeout(resolve, 500));\n            getSceneManagerInstance().updatePlaneWithImage(texture);\n            if (!(trackingMode === TrackingMode.Face)) {\n              _context2.next = 76;\n              break;\n            }\n            getProviders().facemeshLandmarksProvider.setSelfieMode(getIsVideo());\n            _context2.next = 74;\n            return getProviders().facemeshLandmarksProvider.send(inputImage, false, false);\n          case 74:\n            _context2.next = 95;\n            break;\n          case 76:\n            if (!(trackingMode === TrackingMode.Hair)) {\n              _context2.next = 82;\n              break;\n            }\n            getProviders().hairSegmentProvider.setSelfieMode(getIsVideo());\n            _context2.next = 80;\n            return getProviders().hairSegmentProvider.send(inputImage, getIsVideo());\n          case 80:\n            _context2.next = 95;\n            break;\n          case 82:\n            if (!(trackingMode === TrackingMode.Hand)) {\n              _context2.next = 95;\n              break;\n            }\n            getProviders().handsLandmarkProvider.setSelfieMode(getIsVideo());\n            _context2.next = 86;\n            return getProviders().handsLandmarkProvider.send(inputImage, true, getIsVideo());\n          case 86:\n            //////\n            onClearClick();\n            if (!(getCurrentTryon().id === CategoryFactories.nailcolor)) {\n              _context2.next = 95;\n              break;\n            }\n            if (getSceneManagerInstance()) {\n              getSceneManagerInstance().resetNailData();\n            }\n            hideAllPills();\n            hideCaptureTimer();\n            hideSettingIcon("reset");\n            enableSettingIcon("capture");\n            _context2.next = 95;\n            return onImageClick(true);\n          case 95:\n            _context2.next = 97;\n            return initialize(0);\n          case 97:\n            hideAlignMessagePanel();\n            //emitModuleOpened();\n          case 98:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function onImageMode(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nvar onVideoMode = /*#__PURE__*/function () {\n  var _ref3 = tryOnModes_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    var _getHtmlElements2, video_Container, canavas_container, isvideo, canvas, inputImage, video, trackingMode, pills;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            if (getIsVideo()) {\n              _context3.next = 76;\n              break;\n            }\n            _getHtmlElements2 = getHtmlElements(), video_Container = _getHtmlElements2.video_Container, canavas_container = _getHtmlElements2.canavas_container; // loaderContainer.style.display = "flex";\n            showLottieLoader();\n            setTempWidth(-1);\n            setImageSource(null);\n            isvideo = getIsVideo();\n            hideModelContainer();\n            canavas_container.style.display = "flex";\n            canavas_container.style.justifyContent = "center";\n            canvas = document.querySelector(".output_canvas");\n            canvas.style.margin = "unset";\n            canvas.style.transform = "scaleX(-1)";\n            cancelAnimationFrame(getAnimationFrameId());\n            inputImage = sdkEngine_getInputImage();\n            if (inputImage) {\n              video_Container.removeChild(inputImage);\n              setInputImage(null);\n            }\n            video = document.createElement("video");\n            setVideo(video);\n            video.controls = true; // Show video controls\n            video.setAttribute("muted", "");\n            video.defaultMuted = true;\n            video.autoplay = false;\n            video.playsInline = true; // Play inline (important for mobile)\n            video.style.width = "100%";\n            video.style.height = "100%";\n            video.style.objectFit = "cover";\n            video_Container.appendChild(video);\n            setIsVideo(true);\n            resetComparisonSlider("50%", getComparisonState(), getIsVideo());\n            trackingMode = getTrackingMode();\n            if (!(trackingMode === TrackingMode.Face)) {\n              _context3.next = 39;\n              break;\n            }\n            if (getProviders().facemeshLandmarksProvider) {\n              _context3.next = 36;\n              break;\n            }\n            setProvider("face", new FacemeshLandmarksProvider(onLandmarks, canvas));\n            _context3.next = 34;\n            return getProviders().facemeshLandmarksProvider.initialize();\n          case 34:\n            _context3.next = 37;\n            break;\n          case 36:\n            getProviders().facemeshLandmarksProvider.setSelfieMode(getIsVideo());\n          case 37:\n            _context3.next = 70;\n            break;\n          case 39:\n            if (!(trackingMode === TrackingMode.Hair)) {\n              _context3.next = 49;\n              break;\n            }\n            if (getProviders().hairSegmentProvider) {\n              _context3.next = 46;\n              break;\n            }\n            setProvider("hair", new HairSegmentProvider(onHairSegment));\n            _context3.next = 44;\n            return getProviders().hairSegmentProvider.initialize();\n          case 44:\n            _context3.next = 47;\n            break;\n          case 46:\n            getProviders().hairSegmentProvider.setSelfieMode(getIsVideo());\n          case 47:\n            _context3.next = 70;\n            break;\n          case 49:\n            if (!(trackingMode === TrackingMode.Hand)) {\n              _context3.next = 70;\n              break;\n            }\n            if (getProviders().handsLandmarkProvider) {\n              _context3.next = 56;\n              break;\n            }\n            setProvider("hand", new HandsLandmarkProvider(onHandLandsmarks));\n            _context3.next = 54;\n            return getProviders().handsLandmarkProvider.initialize();\n          case 54:\n            _context3.next = 57;\n            break;\n          case 56:\n            getProviders().handsLandmarkProvider.setSelfieMode(getIsVideo());\n          case 57:\n            if (!(getCurrentTryon().id === CategoryFactories.nailcolor)) {\n              _context3.next = 68;\n              break;\n            }\n            if (getProviders().nailmaskProvider) {\n              _context3.next = 62;\n              break;\n            }\n            setProvider("nail", new NailMaskProvider(onCameraFrame));\n            _context3.next = 62;\n            return getProviders().nailmaskProvider.initialize();\n          case 62:\n            createStatusPill();\n            pills = [{\n              pillId: 1,\n              pillType: "position"\n            }, {\n              pillId: 2,\n              pillType: "look"\n            }];\n            showPills(pills);\n            showSettingIcon("reset");\n            disableSettingIcon("reset");\n            disableSettingIcon("capture");\n          case 68:\n            onClearClick();\n            if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n              if (getSceneManagerInstance()) {\n                getSceneManagerInstance().resetNailData();\n              }\n            }\n          case 70:\n            if (!getSceneManagerInstance()) {\n              setSceneManager(new SceneManager(canvas, getDebug(), getuseOrtho()));\n            }\n            _context3.next = 73;\n            return initialize();\n          case 73:\n            getSceneManagerInstance().setVideoTryonSettings(video.videoWidth, video.videoHeight);\n            if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n              onClearClick();\n              if (getSceneManagerInstance()) {\n                getSceneManagerInstance().resetNailData();\n              }\n            }\n            // videoEl = video;\n            setVideoEl(video);\n          case 76:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function onVideoMode() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/popupModal.css\nvar styles_popupModal = __webpack_require__(4790);\n;// CONCATENATED MODULE: ./src/htmlService/styles/popupModal.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar popupModal_options = {};\n\npopupModal_options.styleTagTransform = (styleTagTransform_default());\npopupModal_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      popupModal_options.insert = insertBySelector_default().bind(null, "head");\n    \npopupModal_options.domAPI = (styleDomAPI_default());\npopupModal_options.insertStyleElement = (insertStyleElement_default());\n\nvar popupModal_update = injectStylesIntoStyleTag_default()(styles_popupModal/* default */.A, popupModal_options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_popupModal = (styles_popupModal/* default */.A && styles_popupModal/* default */.A.locals ? styles_popupModal/* default */.A.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/htmlService/popupModal.js\n\n\nfunction createPopupModal(positiveHandler, negativeHandler) {\n  var _getHtmlElements = getHtmlElements(),\n    popupModal = _getHtmlElements.popupModal;\n  var modalContainerDiv = document.createElement("div");\n  modalContainerDiv.classList.add("modal-container");\n  var modalHeading = document.createElement("div");\n  modalHeading.classList.add("modal-heading");\n  modalHeading.innerText = "Are you sure you want to stop using Virtual Try-on?";\n  var separatorDiv = document.createElement("div");\n  separatorDiv.classList.add("modal-separator");\n  var actionsContainer = document.createElement("div");\n  actionsContainer.classList.add("modal-actions-container");\n  var _getActionButtons = getActionButtons(positiveHandler, negativeHandler),\n    NegativeActionButton = _getActionButtons.NegativeActionButton,\n    PositiveActionButton = _getActionButtons.PositiveActionButton;\n  actionsContainer.appendChild(NegativeActionButton);\n  actionsContainer.appendChild(PositiveActionButton);\n  modalContainerDiv.appendChild(modalHeading);\n  modalContainerDiv.appendChild(separatorDiv);\n  modalContainerDiv.appendChild(actionsContainer);\n  popupModal.appendChild(modalContainerDiv);\n}\nfunction getActionButtons(positiveHandler, negativeHandler) {\n  var PositiveActionButton = document.createElement("button");\n  var NegativeActionButton = document.createElement("button");\n  PositiveActionButton.classList.add("modal-positive-action");\n  NegativeActionButton.classList.add("modal-negative-action");\n  PositiveActionButton.addEventListener("click", function () {\n    positiveHandler();\n  });\n  NegativeActionButton.addEventListener("click", function () {\n    negativeHandler();\n  });\n  NegativeActionButton.innerText = "Close";\n  PositiveActionButton.innerText = "Confirm";\n  return {\n    PositiveActionButton: PositiveActionButton,\n    NegativeActionButton: NegativeActionButton\n  };\n}\nfunction showPopupModal() {\n  var _getHtmlElements2 = getHtmlElements(),\n    popupModal = _getHtmlElements2.popupModal;\n  popupModal.style.display = "flex";\n}\nfunction hidePopupModal() {\n  var _getHtmlElements3 = getHtmlElements(),\n    popupModal = _getHtmlElements3.popupModal;\n  popupModal.style.display = "none";\n}\n;// CONCATENATED MODULE: ./src/sdkService/sdkEngine.js\n\n\n\n\n\nfunction sdkEngine_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction sdkEngine_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { sdkEngine_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { sdkEngine_asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { setErrorMessageElement } from "../js/utils/errorPanel";\n\nvar videoEl;\nvar isPause = false;\nvar comparisonState = 0;\nvar currentTryon = "";\nvar fps = 0;\nvar isInitialized = false;\nvar isvideo = false;\nvar UserUploadSrc = null;\nvar video = null;\nvar inputImage = null;\nvar imageSource = null;\nvar inputImageTexture = null;\nvar trackingMode = TrackingMode.Face;\nvar currentStream = null;\nvar clicked = false;\nvar cameraPermissionGranted = true;\nvar sceneManager;\nvar facemeshLandmarksProvider;\nvar hairSegmentProvider;\nvar nailmaskProvider;\nvar handsLandmarkProvider;\nvar videoFrameProvider;\nvar isHandVisible = false;\nvar useOrtho = true;\nvar debug = false;\nvar animationFrameId;\nvar tempWidth = -1;\nsetHtmlElements();\nvar _getHtmlElements = getHtmlElements(),\n  sdkEngine_loaderContainer = _getHtmlElements.loaderContainer,\n  sdkEngine_videoContainer = _getHtmlElements.videoContainer,\n  sdkEngine_video_Container = _getHtmlElements.video_Container,\n  sdkEngine_optionsContainer = _getHtmlElements.optionsContainer,\n  sdkEngine_canavas_container = _getHtmlElements.canavas_container,\n  sdkEngine_imageInput = _getHtmlElements.imageInput,\n  sdkEngine_modelsContainer = _getHtmlElements.modelsContainer,\n  sdkEngine_canvas = _getHtmlElements.canvas,\n  sdkEngine_configurationContainer = _getHtmlElements.configurationContainer,\n  sdkEngine_configurationSubContainer = _getHtmlElements.configurationSubContainer,\n  sdkEngine_toastElement = _getHtmlElements.toastElement;\nshowLottieLoader();\nsdkEngine_canvas.style.display = "none";\nsdkEngine_canavas_container.style.display = "none";\nfunction SdkEngine() {\n  addMessageEventListener();\n  emitModuleLoading();\n  addComparisonSliderEvents(sdkEngine_video_Container);\n  setSnackbarElement();\n  initModelContainer(sdkEngine_modelsContainer);\n  hideModelContainer();\n  setCameraPermissionElement(cameraPermissionHandler);\n  setBillingElement(billingHandler);\n  hideCameraPermissionPanel();\n  hideBillingPanel();\n  initConfigContainer(sdkEngine_configurationContainer);\n  hideConfigContainer();\n  setApplyButton(applyEventHandler);\n  setResetButton(resetEventHandler);\n  setAlignMessageElement();\n  setLoadingModelPanelElement();\n  hideLoadingModelPanel();\n  setErrorElement(errorBtnHandler);\n  setAlignMsg(globalVariables/* errorMessages */.xc.invisbileLiveFace);\n  hideAlignMessagePanel();\n  buildTryOnScreen(sdkEngine_tryOnEventHandler);\n  createConfigBottomSheet(configSliderHandler);\n  createConfigSettings(configSettingHeaderHandler, configSettingContentHandler, configSettingActionsHanlder);\n  showTryOnScreen();\n  buildSettingOptions(settingsEventHandler);\n  createNavigationButtons(onPrevIconClick, onCrossIconClick);\n  showCrossIcon({\n    blurredBg: false,\n    blackIcon: true\n  });\n  createPopupModal(onConfirmClick, onCloseClick);\n  initLottieLoader();\n  if (isvideo) {\n    videoEl = video;\n  } else {\n    videoEl = inputImage;\n  }\n  if (!sceneManager) {\n    sceneManager = new SceneManager(sdkEngine_canvas, debug, useOrtho);\n  }\n  fakeInit();\n}\nfunction timercallback() {\n  onImageClick();\n}\nfunction getSceneManagerInstance() {\n  return sceneManager;\n}\nfunction getIsInitialized() {\n  return isInitialized;\n}\nfunction getAnimationFrameId() {\n  return animationFrameId;\n}\nfunction sdkEngine_getInputImage() {\n  return inputImage;\n}\nfunction getCurrentStream() {\n  return currentStream;\n}\nfunction getVideo() {\n  return video;\n}\nfunction getVideoEl() {\n  return videoEl;\n}\nfunction getIsVideo() {\n  return isvideo;\n}\nfunction getTrackingMode() {\n  return trackingMode;\n}\nfunction getProviders() {\n  return {\n    facemeshLandmarksProvider: facemeshLandmarksProvider,\n    handsLandmarkProvider: handsLandmarkProvider,\n    hairSegmentProvider: hairSegmentProvider,\n    nailmaskProvider: nailmaskProvider\n  };\n}\nfunction getCameraPermissionState() {\n  return cameraPermissionGranted;\n}\nfunction getuseOrtho() {\n  return useOrtho;\n}\nfunction getDebug() {\n  return debug;\n}\nfunction getComparisonState() {\n  return comparisonState;\n}\nfunction getCurrentTryon() {\n  return currentTryon;\n}\nfunction setProvider(type, value) {\n  // console.log(type, value);\n  switch (type) {\n    case "face":\n      facemeshLandmarksProvider = value;\n      break;\n    case "hand":\n      handsLandmarkProvider = value;\n      break;\n    case "hair":\n      hairSegmentProvider = value;\n      break;\n    case "nail":\n      nailmaskProvider = value;\n      break;\n  }\n}\nfunction setVideo(value) {\n  return video = value;\n}\nfunction setIsVideo(value) {\n  return isvideo = value;\n}\nfunction setInputImage(value) {\n  inputImage = value;\n}\nfunction setIsPause(value) {\n  isPause = value;\n}\nfunction setComparisonState(value) {\n  comparisonState = value;\n}\nfunction setInputImageTexture(value) {\n  inputImageTexture = value;\n}\nfunction setSceneManager(value) {\n  sceneManager = value;\n}\nfunction setVideoEl(value) {\n  videoEl = value;\n}\nfunction setClicked(value) {\n  var _video, _video2;\n  clicked = value;\n  if (clicked) (_video = video) === null || _video === void 0 ? void 0 : _video.pause();else (_video2 = video) === null || _video2 === void 0 ? void 0 : _video2.play();\n}\nfunction setTrackingMode(value) {\n  trackingMode = value;\n}\nfunction setCurrentTryon(value) {\n  currentTryon = value;\n}\nfunction setTempWidth(value) {\n  tempWidth = value;\n}\nfunction setImageSource(value) {\n  imageSource = value;\n}\nfunction setVisibilityStateOfUploadInput(state) {\n  if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) {\n    sdkEngine_imageInput.style.display = "none";\n    return;\n  }\n  sdkEngine_imageInput.style.display = state;\n}\nvar onLandmarks = function onLandmarks(_ref) {\n  var image = _ref.image,\n    landmarks = _ref.landmarks,\n    ogLandmarks = _ref.ogLandmarks;\n  fps++;\n  if (isvideo) sceneManager.onLandmarks(image, landmarks, ogLandmarks, isvideo);else sceneManager.onLandmarks(inputImageTexture, landmarks, ogLandmarks, isvideo);\n};\nvar onHairSegment = function onHairSegment(image, maskData, isvideo) {\n  sceneManager.onHairSegment(image, maskData, isvideo);\n};\nvar onHandLandsmarks = function onHandLandsmarks(image, landmarks, handedness, isVideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle) {\n  if (landmarks) {\n    isHandVisible = true;\n  } else {\n    isHandVisible = false;\n  }\n  if (isvideo) {\n    sceneManager.onHandsLandmarks(image, landmarks, handedness, isvideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle);\n  } else {\n    sceneManager.onHandsLandmarks(inputImageTexture, landmarks, handedness, isvideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle);\n  }\n};\nvar onCameraFrame = function onCameraFrame(_ref2) {\n  var image = _ref2.image,\n    isMask = _ref2.isMask,\n    maskData = _ref2.maskData;\n  fps++;\n  if (isMask == 0) {\n    sceneManager.onImageFrame(image, true);\n  } else {\n    sceneManager.onMaskFrame(image, maskData, true);\n  }\n};\nfunction setVisibalityOfModels() {\n  for (var i = 0; i < sceneManager.getModelData().length; i++) {\n    if (sceneManager.getModelData()[i].subCategory === getRelevantModels()) {\n      var model = document.getElementById("model".concat(i));\n      if (model) model.style.display = "block";\n    } else {\n      var _model = document.getElementById("model".concat(i));\n      if (_model) _model.style.display = "none";\n    }\n  }\n  setVisibilityOfModels(sceneManager.getModelData(), getRelevantModels());\n}\nfunction getRelevantModels() {\n  return getCurrentTryon();\n}\nvar animate = function animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  if (!isPause) {\n    if (isvideo && video && (trackingMode === TrackingMode.Face && facemeshLandmarksProvider && facemeshLandmarksProvider.IsInit() || trackingMode === TrackingMode.Hair && hairSegmentProvider && hairSegmentProvider.IsInit() && !hairSegmentProvider.isSelfieMode() || trackingMode === TrackingMode.Hand && handsLandmarkProvider && handsLandmarkProvider.IsInit())) {\n      if (video.readyState >= HTMLMediaElement.HAVE_METADATA) {\n        if (trackingMode === TrackingMode.Face) {\n          if (getCurrentTryon().id === CategoryFactories.faceanalysis) {\n            if (!clicked) {\n              facemeshLandmarksProvider.send(video, true, isvideo);\n            }\n          } else {\n            facemeshLandmarksProvider.send(video);\n          }\n        } else if (trackingMode === TrackingMode.Hair) hairSegmentProvider.send(video, isvideo);else if (trackingMode === TrackingMode.Hand) {\n          handsLandmarkProvider.send(video, clicked, isvideo);\n        }\n        if (tempWidth !== video.videoWidth) {\n          sceneManager.setVideoTryonSettings(video.videoWidth, video.videoHeight);\n          tempWidth = video.videoWidth;\n        }\n        sceneManager.animate(isvideo);\n      }\n    } else if (!isvideo) {\n      if (inputImage.complete) {\n        sceneManager.animate(isvideo);\n      }\n    }\n  }\n};\n\n// Handles API response\nfunction handleApiResponse(_x) {\n  return _handleApiResponse.apply(this, arguments);\n}\nfunction _handleApiResponse() {\n  _handleApiResponse = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee7(event) {\n    var apiResponse, categoryID, PrevTryon;\n    return regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            apiResponse = event;\n            if (apiResponse) {\n              _context7.next = 4;\n              break;\n            }\n            errorPanel_showErrorPermissionPanel("Invalid SKU Data");\n            return _context7.abrupt("return");\n          case 4:\n            if (apiResponse.sku.subCategory.toLowerCase() === "3d" || apiResponse.sku.subCategory.toLowerCase() === "2d") {\n              categoryID = apiResponse.sku.category.toLowerCase();\n            } else {\n              categoryID = apiResponse.sku.subCategory.toLowerCase();\n            }\n            PrevTryon = getCurrentTryon();\n            setCurrentTryon(getCategoryFactorybyID(categoryID));\n            trackingMode = getCurrentTryon().MLModelInUse;\n            if (!getCurrentTryon().usesCaptureUI) {\n              hideAllPills();\n              hideCaptureTimer();\n              hideSettingIcon("reset");\n              enableSettingIcon("capture");\n            }\n\n            //setVisibalityOfModels();\n            if (!(trackingMode === TrackingMode.Face)) {\n              _context7.next = 19;\n              break;\n            }\n            if (facemeshLandmarksProvider) {\n              _context7.next = 16;\n              break;\n            }\n            facemeshLandmarksProvider = new FacemeshLandmarksProvider(onLandmarks, sdkEngine_canvas);\n            _context7.next = 14;\n            return facemeshLandmarksProvider.initialize();\n          case 14:\n            _context7.next = 17;\n            break;\n          case 16:\n            facemeshLandmarksProvider.setSelfieMode(isvideo);\n          case 17:\n            _context7.next = 42;\n            break;\n          case 19:\n            if (!(trackingMode === TrackingMode.Hair)) {\n              _context7.next = 29;\n              break;\n            }\n            if (hairSegmentProvider) {\n              _context7.next = 26;\n              break;\n            }\n            hairSegmentProvider = new HairSegmentProvider(onHairSegment);\n            _context7.next = 24;\n            return hairSegmentProvider.initialize();\n          case 24:\n            _context7.next = 27;\n            break;\n          case 26:\n            hairSegmentProvider.setSelfieMode(isvideo);\n          case 27:\n            _context7.next = 42;\n            break;\n          case 29:\n            if (!(trackingMode === TrackingMode.Hand)) {\n              _context7.next = 42;\n              break;\n            }\n            if (handsLandmarkProvider) {\n              _context7.next = 36;\n              break;\n            }\n            handsLandmarkProvider = new HandsLandmarkProvider(onHandLandsmarks);\n            _context7.next = 34;\n            return handsLandmarkProvider.initialize();\n          case 34:\n            _context7.next = 37;\n            break;\n          case 36:\n            handsLandmarkProvider.setSelfieMode(isvideo);\n          case 37:\n            if (!(getCurrentTryon().id === CategoryFactories.nailcolor)) {\n              _context7.next = 42;\n              break;\n            }\n            if (nailmaskProvider) {\n              _context7.next = 42;\n              break;\n            }\n            nailmaskProvider = new NailMaskProvider(onCameraFrame);\n            _context7.next = 42;\n            return nailmaskProvider.initialize();\n          case 42:\n            if (PrevTryon.id !== getCurrentTryon().id) {\n              onClearClick();\n              if (PrevTryon.id === CategoryFactories.nailcolor) {\n                if (sceneManager) {\n                  sceneManager.resetNailData();\n                }\n              }\n              if (PrevTryon.id === CategoryFactories.faceanalysis) {\n                // showOptionsContainer();\n              }\n            }\n            if (sceneManager) {\n              sceneManager.setAPIResponse(apiResponse);\n            }\n          case 44:\n          case "end":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _handleApiResponse.apply(this, arguments);\n}\nvar stopTracking = /*#__PURE__*/function () {\n  var _ref3 = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var tracks;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            tempWidth = -1;\n            isvideo = false;\n            resetComparisonSlider("50%", comparisonState, isvideo);\n            // video_Container.style.width = "initial";\n            // video_Container.style.height = "initial";\n            imageSource = null;\n            sdkEngine_canavas_container.style.display = "none";\n            cancelAnimationFrame(animationFrameId);\n            onClearClick();\n            if (sceneManager) sceneManager.resetTryons();\n            if (inputImage) {\n              sdkEngine_video_Container.removeChild(inputImage);\n              inputImage = null;\n            }\n            if (getCurrentStream()) {\n              tracks = getCurrentStream().getTracks();\n              tracks.forEach(function (track) {\n                return track.stop();\n              }); // Stop all tracks\n            }\n            if (getVideo()) {\n              getVideo().pause();\n              getVideo().srcObject = null; // Disconnect the video source\n              sdkEngine_video_Container.removeChild(getVideo()); // Remove the video element from DOM\n              setVideo(null);\n            }\n            tempWidth = -1;\n          case 12:\n          case "end":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function stopTracking() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nfunction CloseModule() {\n  stopTracking();\n  emitModuleClosed();\n  setIsClosed(true);\n}\nfunction modelsEventHandler(modelObj) {\n  onImageMode(modelObj.imageUrl);\n}\nvar initialize = /*#__PURE__*/function () {\n  var _ref4 = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var loaderTime,\n      idealRes,\n      constraints,\n      _args2 = arguments;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            loaderTime = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : 2000;\n            if (!isvideo) {\n              _context2.next = 13;\n              break;\n            }\n            video.pause();\n            if (video.querySelector("source")) {\n              video.querySelector("source").remove();\n            }\n            video.removeAttribute("src");\n            video.load();\n            if (!videoFrameProvider) {\n              _context2.next = 10;\n              break;\n            }\n            _context2.next = 9;\n            return videoFrameProvider.stop();\n          case 9:\n            videoFrameProvider = null;\n          case 10:\n            if (trackingMode === TrackingMode.Hair) {\n              idealRes = 640;\n            } else {\n              idealRes = 1920;\n            }\n            //console.log(idealRes);\n            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n              constraints = {\n                video: {\n                  facingMode: {\n                    ideal: "user"\n                  },\n                  width: {\n                    ideal: idealRes\n                  },\n                  frameRate: {\n                    ideal: 30\n                  },\n                  advanced: [\n                  // { frameRate: { min: 60 } },\n                  {\n                    facingMode: {\n                      exact: "user"\n                    }\n                  }, {\n                    width: {\n                      max: 2560\n                    }\n                  }, {\n                    width: {\n                      min: 320\n                    }\n                  }]\n                }\n              };\n              navigator.mediaDevices.getUserMedia(constraints) //{ video: { facingMode: "user" } })\n              .then(function (stream) {\n                cameraPermissionGranted = true;\n                currentStream = stream;\n                video.srcObject = stream;\n                video.play();\n                if (sdkEngine_canvas) sdkEngine_canvas.style.display = "block";\n                emitCameraOpened();\n              })["catch"](function (error) {\n                cameraPermissionGranted = false;\n                showCameraPermissionPanel();\n                emitCameraAccessIssue();\n                // console.error("Unable to access the camera/webcam.", error);\n              });\n            }\n            sceneManager.createNewPlane(video);\n          case 13:\n            animate();\n\n            // emitModuleOpened();\n            sdkEngine_videoContainer.classList.remove("loading");\n\n            //if (!isInitialized) setTimeout(disableInitLoading, 2000);\n\n            setTimeout(disableInitLoading, loaderTime);\n          case 16:\n          case "end":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function initialize() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nfunction disableInitLoading() {\n  hideLottieLoader();\n  // loaderContainer.style.display = "none";\n  isInitialized = true;\n}\nsdkEngine_imageInput.addEventListener("click", function () {});\nsdkEngine_imageInput.addEventListener("cancel", function (event) {\n  if (!UserUploadSrc) {\n    emitUploadCancelled();\n  }\n});\nsdkEngine_imageInput.addEventListener("change", function (event) {\n  var selectedFile = event.target.files[0];\n  function displayError(message) {\n    errorPanel_showErrorPermissionPanel(message);\n  }\n  function downscaleImage(img, maxWidth, maxHeight, callback) {\n    var width = img.width;\n    var height = img.height;\n    var newWidth = width;\n    var newHeight = height;\n    if (width > maxWidth || height > maxHeight) {\n      var aspectRatio = width / height;\n      if (width > height) {\n        newWidth = maxWidth;\n        newHeight = Math.round(maxWidth / aspectRatio);\n      } else {\n        newHeight = maxHeight;\n        newWidth = Math.round(maxHeight * aspectRatio);\n      }\n    }\n    var canvas = document.createElement("canvas");\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    var ctx = canvas.getContext("2d");\n    ctx.drawImage(img, 0, 0, newWidth, newHeight);\n    callback(canvas.toDataURL());\n  }\n  try {\n    if (selectedFile) {\n      var fileType = selectedFile.type;\n      var validTypes = ["image/jpeg", "image/png", "image/avif", "image/webp", "image/vnd.wap.wbmp", "image/svg+xml"];\n      if (!validTypes.includes(fileType)) {\n        displayError("Invalid file type. Supported types are JPEG, PNG, AVIF, WEBP, WBMP, SVG.");\n        return;\n      }\n      var MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n      if (selectedFile.size > MAX_FILE_SIZE) {\n        displayError("File is too large. Please select a file smaller than 10MB.");\n        return;\n      }\n      if (selectedFile.size === 0) {\n        displayError("Selected file is empty.");\n        return;\n      }\n      var reader = new FileReader();\n      reader.onload = function (event) {\n        var imageURL = event.target.result;\n        var img = new Image();\n        img.onload = function () {\n          var MAX_WIDTH = 2048; // 2k resolution width\n          var MAX_HEIGHT = 2048; // 2k resolution height\n          hideTryOnScreen();\n          if (!getCurrentTryon().usesCaptureUI) {\n            hideAllPills();\n            hideCaptureTimer();\n            hideSettingIcon("reset");\n            enableSettingIcon("capture");\n          }\n          if (img.width > MAX_WIDTH || img.height > MAX_HEIGHT) {\n            downscaleImage(img, MAX_WIDTH, MAX_HEIGHT, function (downscaledImageURL) {\n              imageSource = downscaledImageURL;\n              UserUploadSrc = downscaledImageURL;\n              showPrevIcon();\n              showCrossIcon({\n                blurredBg: true\n              });\n              showSettingOptions();\n              onImageMode(imageSource);\n              hideModelContainer();\n            });\n          } else {\n            imageSource = imageURL;\n            UserUploadSrc = imageURL;\n            showPrevIcon();\n            showCrossIcon({\n              blurredBg: true\n            });\n            showSettingOptions();\n            onImageMode(imageSource);\n            hideModelContainer();\n          }\n        };\n        img.onerror = function () {\n          displayError("Error loading the image.");\n        };\n        img.src = imageURL;\n      };\n      reader.onerror = function () {\n        displayError("Error reading the file.");\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      displayError("No file selected.");\n    }\n  } catch (error) {\n    displayError("An error occurred while processing the file: " + error.message);\n  }\n  sdkEngine_imageInput.value = "";\n});\nfunction applyEventHandler() {\n  hideConfigContainer();\n  // toggleOptionsButton(3);\n}\nfunction resetEventHandler() {\n  ResetOpacitySliderValue();\n  ResetSliders();\n  //hideConfigContainer();\n}\nfunction sdkEngine_tryOnEventHandler(type, imageID, imgURL) {\n  sceneManager.resetZoomChanges();\n  enableBothZoomIcons();\n  disableSettingIcon("zoomOut");\n  switch (type) {\n    case "live":\n      if (getCameraPermissionState()) {\n        hideTryOnScreen();\n        showPrevIcon();\n        showCrossIcon({\n          blurredBg: true\n        });\n        emitLiveModeStarted();\n        showSettingOptions();\n        if (!getCurrentTryon().usesCaptureUI) {\n          hideAllPills();\n          hideCaptureTimer();\n          hideSettingIcon("reset");\n          enableSettingIcon("capture");\n        }\n        onVideoMode();\n      } else {\n        sdkEngine_canavas_container.style.display = "flex";\n        sdkEngine_canavas_container.style.justifyContent = "center";\n        sdkEngine_canvas.style.display = "none";\n        showCameraPermissionPanel();\n      }\n      break;\n    case "upload":\n      if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) {\n        if (imgURL) {\n          UserUploadSrc = imgURL;\n          emitUploadModeStarted();\n          onImageMode(UserUploadSrc);\n          //  toggleOptionsSelectedImage(0);\n        }\n      } else {\n        emitUploadModeStarted();\n        sdkEngine_imageInput.click();\n      }\n      break;\n    case "modelTryOn":\n      if ((0,globalVariables/* isShouldHideInternalUI */.Fu)()) {\n        emitModelTryonModeStarted();\n        onImageMode(imgURL);\n      } else {\n        hideTryOnScreen();\n        if (!getCurrentTryon().usesCaptureUI) {\n          hideAllPills();\n          hideCaptureTimer();\n          hideSettingIcon("reset");\n          enableSettingIcon("capture");\n        }\n        if (imgURL) {\n          onImageMode(imgURL);\n          showPrevIcon();\n          showSettingOptions();\n          showCrossIcon({\n            blurredBg: true\n          });\n        } else {\n          showPrevIcon();\n          showSettingOptions();\n          showCrossIcon({\n            blurredBg: true\n          });\n\n          //console.log(getSceneManagerInstance().getModelData()[]);\n          emitModelTryonModeStarted();\n          onImageMode(getSceneManagerInstance().getModelData()[imageID].imageUrl);\n        }\n      }\n      break;\n    default:\n      break;\n  }\n}\nfunction onPrevIconClick() {\n  stopTracking();\n  onReset();\n}\nfunction onReset() {\n  hideSettingOptions();\n  hidePrevIcon();\n  hideConfigContainer();\n  hideComparisonSlider();\n  unSelectAllSettings();\n  showCrossIcon({\n    blurredBg: false,\n    blackIcon: true\n  });\n  showTryOnScreen();\n  hideAllPills();\n  hideCaptureTimer();\n  hideSettingIcon("reset");\n  disableSettingIcon("capture");\n}\nfunction onCrossIconClick() {\n  showPopupModal();\n}\nfunction onConfirmClick() {\n  onReset();\n  CloseModule();\n  hidePopupModal();\n}\nfunction onCloseClick() {\n  hidePopupModal();\n}\nfunction configSettingHeaderHandler(pillIndex, config) {\n  if (config.tag === "fingers") {\n    setRingIndex(2);\n  }\n}\nfunction configSettingActionsHanlder(tag, type) {\n  switch (type) {\n    case "close":\n      unSelectAllSettings();\n      showSettingOptions();\n    // unSelectAllSettings();\n    // showSettingOptions();\n  }\n}\nfunction configSettingContentHandler(type, value) {\n  var _sceneManager, _sceneManager2, _sceneManager3, _sceneManager4;\n  switch (type) {\n    case "fingers":\n      setRingIndex(value);\n      (_sceneManager = sceneManager) === null || _sceneManager === void 0 ? void 0 : _sceneManager.forceUpdateCurrentStyle();\n      break;\n    case "horizontal":\n      setXSliderValue(value);\n      (_sceneManager2 = sceneManager) === null || _sceneManager2 === void 0 ? void 0 : _sceneManager2.forceUpdateCurrentStyle();\n      break;\n    case "vertical":\n      setYSliderValue(value);\n      (_sceneManager3 = sceneManager) === null || _sceneManager3 === void 0 ? void 0 : _sceneManager3.forceUpdateCurrentStyle();\n      break;\n    case "scale":\n      setScaleSliderValue(value);\n      (_sceneManager4 = sceneManager) === null || _sceneManager4 === void 0 ? void 0 : _sceneManager4.forceUpdateCurrentStyle();\n      break;\n  }\n}\nfunction settingsEventHandler(data) {\n  switch (data.tag) {\n    case "configSettings":\n      hideComparisonSlider();\n      if (["opacity"].includes(getCurrentTryon().ConfigUIType)) {\n        toggleConfigContainer();\n      } else {\n        showConfigSettingBottomSheet();\n      }\n      hideSettingOptions();\n      break;\n    case "comparison":\n      hideConfigContainer();\n      toggleComparisonSlider();\n      break;\n    case "zoomIn":\n      //console.log("salhflhsflahsldfa");\n      getSceneManagerInstance().updateCameraZoom("up");\n      break;\n    case "zoomOut":\n      getSceneManagerInstance().updateCameraZoom("down");\n      break;\n    case "capture":\n      CaptureSnapShot();\n      break;\n    case "reset":\n      onClearClick();\n      if (getSceneManagerInstance()) {\n        getSceneManagerInstance().resetNailData();\n      }\n      disableSettingIcon("reset");\n      disableSettingIcon("capture");\n      break;\n  }\n}\nfunction errorBtnHandler() {\n  hideErrorPermissionPanel();\n  onPrevIconClick();\n}\nfunction configSliderHandler(value, tag) {\n  // console.log(value, tag);\n  switch (tag) {\n    case "Opacity":\n      setOpacitySliderValue(value);\n      getSceneManagerInstance().forceUpdateCurrentStyle();\n      break;\n    case "reset":\n      resetEventHandler();\n      break;\n    case "close":\n      unSelectAllSettings();\n      showSettingOptions();\n      hideConfigContainer();\n      break;\n    default:\n      resetEventHandler();\n  }\n}\nfunction cameraPermissionHandler() {\n  emitCameraFailed();\n  hideCameraPermissionPanel();\n  onPrevIconClick();\n}\nfunction billingHandler() {\n  emitModuleClosed();\n  CloseModule();\n}\nvar onImageClick = /*#__PURE__*/function () {\n  var _ref5 = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\n    var ignoreHandVisible,\n      _args3 = arguments;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            ignoreHandVisible = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : false;\n            if (!(isHandVisible || ignoreHandVisible)) {\n              _context3.next = 6;\n              break;\n            }\n            _context3.next = 4;\n            return handsLandmarkProvider.SnapNailImage();\n          case 4:\n            _context3.next = 8;\n            break;\n          case 6:\n            emitNailColorEvent("error", globalVariables/* errorMessages */.xc.nailDetectionIssue);\n            errorPanel_showErrorPermissionPanel(globalVariables/* errorMessages */.xc.nailDetectionIssue + "SDK");\n          case 8:\n          case "end":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function onImageClick() {\n    return _ref5.apply(this, arguments);\n  };\n}();\nvar onClearClick = /*#__PURE__*/function () {\n  var _ref6 = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\n    var _video3;\n    var pills;\n    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            // console.log("onClearClick");\n            clicked = false;\n            (_video3 = video) === null || _video3 === void 0 ? void 0 : _video3.play();\n            if (getCurrentTryon().usesCaptureUI) {\n              if (isvideo) {\n                createStatusPill();\n                pills = [{\n                  pillId: 1,\n                  pillType: "position"\n                }, {\n                  pillId: 2,\n                  pillType: "look"\n                }];\n                showPills(pills);\n                showSettingIcon("reset");\n                disableSettingIcon("reset");\n                disableSettingIcon("capture");\n              }\n              if (sceneManager) sceneManager.resetHandLandmark();\n            }\n          case 3:\n          case "end":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return function onClearClick() {\n    return _ref6.apply(this, arguments);\n  };\n}();\nvar loadML = /*#__PURE__*/function () {\n  var _ref7 = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\n    var fakeSKU;\n    return regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            fakeSKU = function _fakeSKU() {\n              window.postMessage({\n                type: "applyByConfig",\n                payload: {\n                  sku: {\n                    _id: "aee9c42a-ef4f-4283-9a7a-b6363dc2f4da",\n                    orgId: -99,\n                    category: "glasses",\n                    subCategory: "3d",\n                    productName: "Test glasses1",\n                    productImage: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/bracelet/01.png",\n                    vendor: "vogue",\n                    isActive: true,\n                    itemCode: "BRUNT-1709637495061",\n                    styleVariant: "straight1",\n                    styleIcon: "https://notavailabledummy.com",\n                    attributes: [{\n                      name: "matte",\n                      icons: [],\n                      colors: ["#ff0000", "#ffffff"],\n                      effectAssets: ["https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/sunglasses/sunglasses_01.glb"\n                      // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/watches/watch_05.glb",\n                      // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/rings/2D/ring_01.png",\n                      // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/bracelet/2D/bracelet_05.png",\n                      // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/earring/2D/earring_3.png",\n                      // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/mangtika/05.png",\n                      //"https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/necklace/2D/necklace_03.png",\n                      ]\n                    }],\n                    meta: {\n                      material: "Polycarbonate",\n                      dimension: "14x15x70",\n                      colorIntensity: 80\n                    },\n                    createdAt: "2024-03-07T11:03:11.373Z",\n                    updatedAt: "2024-05-20T07:40:31.757Z"\n                  }\n                }\n              });\n            };\n            trackingMode = getCurrentTryon().MLModelInUse;\n            console.log(trackingMode);\n            if (!(trackingMode === TrackingMode.Face)) {\n              _context5.next = 10;\n              break;\n            }\n            if (facemeshLandmarksProvider) {\n              _context5.next = 8;\n              break;\n            }\n            facemeshLandmarksProvider = new FacemeshLandmarksProvider(onLandmarks, sdkEngine_canvas);\n            _context5.next = 8;\n            return facemeshLandmarksProvider.initialize();\n          case 8:\n            _context5.next = 26;\n            break;\n          case 10:\n            if (!(trackingMode === TrackingMode.Hair)) {\n              _context5.next = 17;\n              break;\n            }\n            if (getProviders().hairSegmentProvider) {\n              _context5.next = 15;\n              break;\n            }\n            setProvider("hair", new HairSegmentProvider(onHairSegment));\n            _context5.next = 15;\n            return getProviders().hairSegmentProvider.initialize();\n          case 15:\n            _context5.next = 26;\n            break;\n          case 17:\n            if (!(trackingMode === TrackingMode.Hand)) {\n              _context5.next = 26;\n              break;\n            }\n            if (getProviders().handsLandmarkProvider) {\n              _context5.next = 22;\n              break;\n            }\n            setProvider("hand", new HandsLandmarkProvider(onHandLandsmarks));\n            _context5.next = 22;\n            return getProviders().handsLandmarkProvider.initialize();\n          case 22:\n            if (getProviders().nailmaskProvider) {\n              _context5.next = 26;\n              break;\n            }\n            setProvider("nail", new NailMaskProvider(onCameraFrame));\n            _context5.next = 26;\n            return getProviders().nailmaskProvider.initialize();\n          case 26:\n            emitModuleLoaded();\n            if (!(0,globalVariables/* getOpenLiveOnInit */.qB)()) {\n              if ((0,globalVariables/* getOpenImageOnInit */.Pk)()) {\n                sdkEngine_tryOnEventHandler("modelTryOn", null, (0,globalVariables/* getOpenImageOnInit */.Pk)());\n              } else {\n                disableInitLoading();\n              }\n            } else {\n              sdkEngine_tryOnEventHandler("live");\n            }\n            fakeSKU();\n            sdkEngine_toastElement.addEventListener("click", function (e) {\n              var _e$target;\n              if ((e === null || e === void 0 ? void 0 : (_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.id) === "snackbar-close-icon") {\n                hideSnackbar();\n              }\n            });\n            window.addEventListener("resize", function () {\n              if (sceneManager) {\n                sceneManager.resizeCamera();\n              }\n            });\n          case 31:\n          case "end":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return function loadML() {\n    return _ref7.apply(this, arguments);\n  };\n}();\nvar fakeInit = /*#__PURE__*/function () {\n  var _ref8 = sdkEngine_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\n    return regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            window.postMessage({\n              type: "initialize",\n              payload: {\n                mode: "platform",\n                category: "glasses",\n                chooseTryOnConfig: {\n                  tryOnScreen: {\n                    hideTryOnScreen: false,\n                    mode: "light",\n                    tryOnTypeConfig: {\n                      hideLiveCamera: false,\n                      hideModelTryOn: false,\n                      hideUploadMode: false\n                    }\n                  }\n                }\n              }\n            });\n          case 1:\n          case "end":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return function fakeInit() {\n    return _ref8.apply(this, arguments);\n  };\n}();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4876\n')},6062:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".capture-timer {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n\\n  transform: translate(-50%, -50%);\\n}\\n\\n.capture-timer-heading {\\n  font-size: 20px;\\n  line-height: 28px;\\n  font-weight: 600;\\n}\\n\\n.capture-timer-div {\\n  font-size: 72px;\\n  line-height: 85px;\\n  font-weight: 700;\\n  text-align: center;\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/captureTimer.css"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,kBAAkB;EAClB,QAAQ;EACR,SAAS;;EAET,gCAAgC;AAClC;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB","sourcesContent":[".capture-timer {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n\\n  transform: translate(-50%, -50%);\\n}\\n\\n.capture-timer-heading {\\n  font-size: 20px;\\n  line-height: 28px;\\n  font-weight: 600;\\n}\\n\\n.capture-timer-div {\\n  font-size: 72px;\\n  line-height: 85px;\\n  font-weight: 700;\\n  text-align: center;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBEQUEwRCxrQkFBa0IsMkJBQTJCLGFBQWEsdUJBQXVCLGFBQWEsY0FBYyx1Q0FBdUMsR0FBRyw0QkFBNEIsb0JBQW9CLHNCQUFzQixxQkFBcUIsR0FBRyx3QkFBd0Isb0JBQW9CLHNCQUFzQixxQkFBcUIsdUJBQXVCLEdBQUcsU0FBUywwR0FBMEcsVUFBVSxZQUFZLFdBQVcsWUFBWSxXQUFXLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLGFBQWEsMENBQTBDLGtCQUFrQiwyQkFBMkIsYUFBYSx1QkFBdUIsYUFBYSxjQUFjLHVDQUF1QyxHQUFHLDRCQUE0QixvQkFBb0Isc0JBQXNCLHFCQUFxQixHQUFHLHdCQUF3QixvQkFBb0Isc0JBQXNCLHFCQUFxQix1QkFBdUIsR0FBRyxxQkFBcUI7QUFDaG5DO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWRpYXBpcGUtZmFjZW1lc2gtZWZmZWN0cy8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvY2FwdHVyZVRpbWVyLmNzcz9kMzBlIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmNhcHR1cmUtdGltZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDhweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcblxcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxufVxcblxcbi5jYXB0dXJlLXRpbWVyLWhlYWRpbmcge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4uY2FwdHVyZS10aW1lci1kaXYge1xcbiAgZm9udC1zaXplOiA3MnB4O1xcbiAgbGluZS1oZWlnaHQ6IDg1cHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL2NhcHR1cmVUaW1lci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFFBQVE7RUFDUixrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7O0VBRVQsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNhcHR1cmUtdGltZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDhweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcblxcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxufVxcblxcbi5jYXB0dXJlLXRpbWVyLWhlYWRpbmcge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4uY2FwdHVyZS10aW1lci1kaXYge1xcbiAgZm9udC1zaXplOiA3MnB4O1xcbiAgbGluZS1oZWlnaHQ6IDg1cHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6062\n')},1510:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".tryon-screen {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  top: 0;\\n  z-index: 10;\\n  /* display: flex; */\\n  display: none;\\n  justify-content: center;\\n}\\n\\n.tryon_container {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column;\\n  padding: 0 auto;\\n  padding-top: 64px;\\n  gap: 24px;\\n  max-width: 344px;\\n}\\n\\n.tryon_screen_light {\\n  background: white;\\n}\\n.tryon_screen_dark {\\n  background: #1c1d1e;\\n}\\n\\n.tryon_container_heading {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  color: #101112;\\n}\\n\\n.tryon_container_heading_text {\\n  font-size: 20px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 120%;\\n}\\n\\n.tryon_container_heading_subtext {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: 140%;\\n  color: #4c4d4d;\\n}\\n\\n.tryon_container_live_tryon {\\n  padding: 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #f1f1f1;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_live_tryon_left {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  color: #4c4d4d;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.tryon_container_live_tryon_left_camera {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.tryon_container_live_tryon_right path {\\n  /* fill: #4c4d4d; */\\n}\\n\\n.tryon_container_upload_tryon {\\n  padding: 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #f1f1f1;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_upload_tryon_left {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  color: #4c4d4d;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.tryon_container_upload_tryon_left_camera {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.tryon_container_live_tryon_right path {\\n  /* fill: #4c4d4d; */\\n}\\n\\n.tryon_container_choose_model_heading {\\n  color: #101112;\\n  font-size: 18px;\\n  font-style: normal;\\n  line-height: 140%;\\n  margin-bottom: 4px;\\n}\\n\\n.tryon_container_model_tryon {\\n  display: grid;\\n  grid-template-columns: auto auto auto;\\n  gap: 8px;\\n}\\n\\n.tryon_container_model_tryon_container {\\n  width: 108px;\\n  height: 108px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_model_tryon_container img {\\n  width: 100%;\\n  height: 100%;\\n  object-fit: cover;\\n  border-radius: 8px;\\n}\\n.tryon_container_model_tryon_upload {\\n  width: 108px;\\n  height: 108px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  background: #e7e7e7;\\n  border-radius: 8px;\\n  font-size: 12px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: normal;\\n  color: #b7b8b8;\\n  cursor: pointer;\\n  gap: 8px;\\n}\\n\\n.tryon_container_footer {\\n  height: 100px;\\n  padding: 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000000 100%);\\n  /* opacity: 0.3; */\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .tryon_container {\\n    max-width: 296px;\\n    padding-top: 48px;\\n  }\\n  .tryon_container_heading_subtext {\\n    display: none;\\n  }\\n  .tryon_container_heading_text {\\n    font-size: 18px;\\n    position: relative;\\n    top: 12px;\\n  }\\n  .tryon_container_model_tryon {\\n    gap: 10px;\\n  }\\n  .tryon_container_choose_model_heading {\\n    font-size: 16px;\\n  }\\n  .tryon_container_live_tryon_left {\\n    font-size: 14px;\\n  }\\n  .tryon_container_live_tryon {\\n    padding: 12px 8px;\\n  }\\n  .tryon_container_model_tryon_container {\\n    width: 92px;\\n    height: 92px;\\n  }\\n\\n  .tryon_container_model_tryon_upload {\\n    width: 92px;\\n    height: 92px;\\n  }\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/chooseTryOn.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,WAAW;EACX,mBAAmB;EACnB,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,iBAAiB;EACjB,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;EACR,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;EACR,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,cAAc;EACd,eAAe;EACf,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sEAAsE;EACtE,kBAAkB;AACpB;;AAEA;EACE;IACE,gBAAgB;IAChB,iBAAiB;EACnB;EACA;IACE,aAAa;EACf;EACA;IACE,eAAe;IACf,kBAAkB;IAClB,SAAS;EACX;EACA;IACE,SAAS;EACX;EACA;IACE,eAAe;EACjB;EACA;IACE,eAAe;EACjB;EACA;IACE,iBAAiB;EACnB;EACA;IACE,WAAW;IACX,YAAY;EACd;;EAEA;IACE,WAAW;IACX,YAAY;EACd;AACF","sourcesContent":[".tryon-screen {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  top: 0;\\n  z-index: 10;\\n  /* display: flex; */\\n  display: none;\\n  justify-content: center;\\n}\\n\\n.tryon_container {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column;\\n  padding: 0 auto;\\n  padding-top: 64px;\\n  gap: 24px;\\n  max-width: 344px;\\n}\\n\\n.tryon_screen_light {\\n  background: white;\\n}\\n.tryon_screen_dark {\\n  background: #1c1d1e;\\n}\\n\\n.tryon_container_heading {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  color: #101112;\\n}\\n\\n.tryon_container_heading_text {\\n  font-size: 20px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 120%;\\n}\\n\\n.tryon_container_heading_subtext {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: 140%;\\n  color: #4c4d4d;\\n}\\n\\n.tryon_container_live_tryon {\\n  padding: 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #f1f1f1;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_live_tryon_left {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  color: #4c4d4d;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.tryon_container_live_tryon_left_camera {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.tryon_container_live_tryon_right path {\\n  /* fill: #4c4d4d; */\\n}\\n\\n.tryon_container_upload_tryon {\\n  padding: 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #f1f1f1;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_upload_tryon_left {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  color: #4c4d4d;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.tryon_container_upload_tryon_left_camera {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.tryon_container_live_tryon_right path {\\n  /* fill: #4c4d4d; */\\n}\\n\\n.tryon_container_choose_model_heading {\\n  color: #101112;\\n  font-size: 18px;\\n  font-style: normal;\\n  line-height: 140%;\\n  margin-bottom: 4px;\\n}\\n\\n.tryon_container_model_tryon {\\n  display: grid;\\n  grid-template-columns: auto auto auto;\\n  gap: 8px;\\n}\\n\\n.tryon_container_model_tryon_container {\\n  width: 108px;\\n  height: 108px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_model_tryon_container img {\\n  width: 100%;\\n  height: 100%;\\n  object-fit: cover;\\n  border-radius: 8px;\\n}\\n.tryon_container_model_tryon_upload {\\n  width: 108px;\\n  height: 108px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  background: #e7e7e7;\\n  border-radius: 8px;\\n  font-size: 12px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: normal;\\n  color: #b7b8b8;\\n  cursor: pointer;\\n  gap: 8px;\\n}\\n\\n.tryon_container_footer {\\n  height: 100px;\\n  padding: 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000000 100%);\\n  /* opacity: 0.3; */\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .tryon_container {\\n    max-width: 296px;\\n    padding-top: 48px;\\n  }\\n  .tryon_container_heading_subtext {\\n    display: none;\\n  }\\n  .tryon_container_heading_text {\\n    font-size: 18px;\\n    position: relative;\\n    top: 12px;\\n  }\\n  .tryon_container_model_tryon {\\n    gap: 10px;\\n  }\\n  .tryon_container_choose_model_heading {\\n    font-size: 16px;\\n  }\\n  .tryon_container_live_tryon_left {\\n    font-size: 14px;\\n  }\\n  .tryon_container_live_tryon {\\n    padding: 12px 8px;\\n  }\\n  .tryon_container_model_tryon_container {\\n    width: 92px;\\n    height: 92px;\\n  }\\n\\n  .tryon_container_model_tryon_upload {\\n    width: 92px;\\n    height: 92px;\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1510\n')},7038:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".configuration-container {\\n  width: 100%;\\n  position: absolute;\\n  right: 0;\\n  left: 0;\\n  bottom: 0;\\n  margin: auto;\\n  z-index: 2000;\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\\n  font-family: sans-serif;\\n}\\n\\n.show-configuration-container {\\n  opacity: 1;\\n  visibility: visible;\\n  transition-delay: 0s;\\n}\\n\\n.config-slider {\\n  position: relative;\\n}\\n\\n.config-slider-type {\\n  position: absolute;\\n  left: -48px;\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-slider-value {\\n  position: absolute;\\n  right: -10%;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-type-slider {\\n  position: absolute;\\n  width: 100%;\\n  display: flex;\\n  top: 6px;\\n}\\n.config-type-slider input {\\n  /* -webkit-appearance: none; */\\n  /* background-color: rgba(255, 255, 255, 0.4); */\\n}\\n.config-type-slider input::-webkit-slider-thumb {\\n  /* height: 4px;\\n  background-color: aqua;\\n  accent-color: red; */\\n  /* box-shadow: -1px 0 0 1px #43e5f7; */\\n}\\n\\n.config-reset-icon {\\n  position: absolute;\\n  backdrop-filter: blur(25px);\\n  transition: backdrop-filter 0.33s linear;\\n  background: rgba(16, 17, 18, 0.1);\\n  border-radius: 50%;\\n  left: -112px;\\n  padding: 4px;\\n  display: flex;\\n  bottom: -30px;\\n  cursor: pointer;\\n}\\n\\n.config-bottom-sheet-container {\\n  padding: 16px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 16px;\\n  border-radius: 16px 16px 0px 0px;\\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\\n  background: rgba(0, 0, 0, 0.16);\\n  backdrop-filter: blur(25px);\\n  transform: translateY(100%);\\n  transition: 0.3s ease;\\n}\\n\\n.show-configuration-container .config-bottom-sheet-container {\\n  transform: translateY(0%);\\n}\\n\\n.config-bottom-sheet-header-text {\\n  color: #fff;\\n  font-family: Inter;\\n  font-size: 18px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 24px;\\n  letter-spacing: 0.18px;\\n}\\n\\n.config-bottom-sheet-divider {\\n  height: 1px;\\n  width: 100%;\\n  background: rgba(255, 255, 255, 0.4);\\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\\n}\\n\\n.config-bottom-sheet-content {\\n  display: flex;\\n  gap: 16px;\\n  width: 100%;\\n  justify-content: center;\\n  align-items: center;\\n  max-width: 586px;\\n}\\n\\n.config-bottom-sheet-left-text {\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n.config-bottom-sheet-slider {\\n  flex: 1;\\n  display: flex;\\n  align-items: center;\\n}\\n.config-bottom-sheet-slider input {\\n  height: 1px;\\n  width: 100%;\\n  padding: 1px;\\n  /* accent-color: #fff; */\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  background: linear-gradient(\\n    to right,\\n    #fff 0%,\\n    #fff 50%,\\n    rgba(255, 255, 255, 0.4) 50%,\\n    rgba(255, 255, 255, 0.4) 100%\\n  );\\n  transition: background 450ms ease-in;\\n  outline: none;\\n  border-radius: 4px;\\n}\\ninput::-webkit-slider-thumb {\\n  background-color: white;\\n  border-radius: 0;\\n\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 50%;\\n  -webkit-appearance: none;\\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\\n}\\n.config-bottom-sheet-right-text {\\n  width: 56px;\\n  display: flex;\\n  justify-content: end;\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-bottom-sheet-actions {\\n  position: absolute;\\n  display: flex;\\n  gap: 10px;\\n  top: -48px;\\n  right: 16px;\\n}\\n\\n.config-bottom-sheet-reset-button,\\n.config-bottom-sheet-close-button {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 40px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  background: rgba(16, 17, 18, 0.1);\\n  backdrop-filter: blur(25px);\\n  cursor: pointer;\\n}\\n.config-bottom-sheet-close-button img {\\n  position: absolute;\\n  left: 8px;\\n  top: 8px;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .config-bottom-sheet-header-text {\\n    font-size: 16px;\\n  }\\n  /* … */\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/configSlider.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,OAAO;EACP,SAAS;EACT,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,UAAU;EACV,4DAA4D;EAC5D,uBAAuB;AACzB;;AAEA;EACE,UAAU;EACV,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,QAAQ;AACV;AACA;EACE,8BAA8B;EAC9B,gDAAgD;AAClD;AACA;EACE;;sBAEoB;EACpB,sCAAsC;AACxC;;AAEA;EACE,kBAAkB;EAClB,2BAA2B;EAC3B,wCAAwC;EACxC,iCAAiC;EACjC,kBAAkB;EAClB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,SAAS;EACT,gCAAgC;EAChC,8CAA8C;EAC9C,+BAA+B;EAC/B,2BAA2B;EAC3B,2BAA2B;EAC3B,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,oCAAoC;EACpC,+CAA+C;AACjD;;AAEA;EACE,aAAa;EACb,SAAS;EACT,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;AACA;EACE,OAAO;EACP,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,wBAAwB;EACxB,eAAe;EACf,wBAAwB;EACxB;;;;;;GAMC;EACD,oCAAoC;EACpC,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,uBAAuB;EACvB,gBAAgB;;EAEhB,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;EACxB,qDAAqD;AACvD;AACA;EACE,WAAW;EACX,aAAa;EACb,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,UAAU;EACV,WAAW;AACb;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,iCAAiC;EACjC,2BAA2B;EAC3B,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;AACV;;AAEA;EACE;IACE,eAAe;EACjB;EACA,MAAM;AACR","sourcesContent":[".configuration-container {\\n  width: 100%;\\n  position: absolute;\\n  right: 0;\\n  left: 0;\\n  bottom: 0;\\n  margin: auto;\\n  z-index: 2000;\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\\n  font-family: sans-serif;\\n}\\n\\n.show-configuration-container {\\n  opacity: 1;\\n  visibility: visible;\\n  transition-delay: 0s;\\n}\\n\\n.config-slider {\\n  position: relative;\\n}\\n\\n.config-slider-type {\\n  position: absolute;\\n  left: -48px;\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-slider-value {\\n  position: absolute;\\n  right: -10%;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-type-slider {\\n  position: absolute;\\n  width: 100%;\\n  display: flex;\\n  top: 6px;\\n}\\n.config-type-slider input {\\n  /* -webkit-appearance: none; */\\n  /* background-color: rgba(255, 255, 255, 0.4); */\\n}\\n.config-type-slider input::-webkit-slider-thumb {\\n  /* height: 4px;\\n  background-color: aqua;\\n  accent-color: red; */\\n  /* box-shadow: -1px 0 0 1px #43e5f7; */\\n}\\n\\n.config-reset-icon {\\n  position: absolute;\\n  backdrop-filter: blur(25px);\\n  transition: backdrop-filter 0.33s linear;\\n  background: rgba(16, 17, 18, 0.1);\\n  border-radius: 50%;\\n  left: -112px;\\n  padding: 4px;\\n  display: flex;\\n  bottom: -30px;\\n  cursor: pointer;\\n}\\n\\n.config-bottom-sheet-container {\\n  padding: 16px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 16px;\\n  border-radius: 16px 16px 0px 0px;\\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\\n  background: rgba(0, 0, 0, 0.16);\\n  backdrop-filter: blur(25px);\\n  transform: translateY(100%);\\n  transition: 0.3s ease;\\n}\\n\\n.show-configuration-container .config-bottom-sheet-container {\\n  transform: translateY(0%);\\n}\\n\\n.config-bottom-sheet-header-text {\\n  color: #fff;\\n  font-family: Inter;\\n  font-size: 18px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 24px;\\n  letter-spacing: 0.18px;\\n}\\n\\n.config-bottom-sheet-divider {\\n  height: 1px;\\n  width: 100%;\\n  background: rgba(255, 255, 255, 0.4);\\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\\n}\\n\\n.config-bottom-sheet-content {\\n  display: flex;\\n  gap: 16px;\\n  width: 100%;\\n  justify-content: center;\\n  align-items: center;\\n  max-width: 586px;\\n}\\n\\n.config-bottom-sheet-left-text {\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n.config-bottom-sheet-slider {\\n  flex: 1;\\n  display: flex;\\n  align-items: center;\\n}\\n.config-bottom-sheet-slider input {\\n  height: 1px;\\n  width: 100%;\\n  padding: 1px;\\n  /* accent-color: #fff; */\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  background: linear-gradient(\\n    to right,\\n    #fff 0%,\\n    #fff 50%,\\n    rgba(255, 255, 255, 0.4) 50%,\\n    rgba(255, 255, 255, 0.4) 100%\\n  );\\n  transition: background 450ms ease-in;\\n  outline: none;\\n  border-radius: 4px;\\n}\\ninput::-webkit-slider-thumb {\\n  background-color: white;\\n  border-radius: 0;\\n\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 50%;\\n  -webkit-appearance: none;\\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\\n}\\n.config-bottom-sheet-right-text {\\n  width: 56px;\\n  display: flex;\\n  justify-content: end;\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-bottom-sheet-actions {\\n  position: absolute;\\n  display: flex;\\n  gap: 10px;\\n  top: -48px;\\n  right: 16px;\\n}\\n\\n.config-bottom-sheet-reset-button,\\n.config-bottom-sheet-close-button {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 40px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  background: rgba(16, 17, 18, 0.1);\\n  backdrop-filter: blur(25px);\\n  cursor: pointer;\\n}\\n.config-bottom-sheet-close-button img {\\n  position: absolute;\\n  left: 8px;\\n  top: 8px;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .config-bottom-sheet-header-text {\\n    font-size: 16px;\\n  }\\n  /* … */\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzAzOC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLG9FQUFvRSxnQkFBZ0IsdUJBQXVCLGFBQWEsWUFBWSxjQUFjLGlCQUFpQixrQkFBa0IsdUJBQXVCLGVBQWUsaUVBQWlFLDRCQUE0QixHQUFHLG1DQUFtQyxlQUFlLHdCQUF3Qix5QkFBeUIsR0FBRyxvQkFBb0IsdUJBQXVCLEdBQUcseUJBQXlCLHVCQUF1QixnQkFBZ0IsdUJBQXVCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQixHQUFHLDBCQUEwQix1QkFBdUIsZ0JBQWdCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQixHQUFHLHlCQUF5Qix1QkFBdUIsZ0JBQWdCLGtCQUFrQixhQUFhLEdBQUcsNkJBQTZCLGlDQUFpQyxxREFBcUQsS0FBSyxtREFBbUQsbUJBQW1CLDJCQUEyQix1QkFBdUIsMkNBQTJDLEtBQUssd0JBQXdCLHVCQUF1QixnQ0FBZ0MsNkNBQTZDLHNDQUFzQyx1QkFBdUIsaUJBQWlCLGlCQUFpQixrQkFBa0Isa0JBQWtCLG9CQUFvQixHQUFHLG9DQUFvQyxrQkFBa0Isa0JBQWtCLDJCQUEyQiw0QkFBNEIsY0FBYyxxQ0FBcUMsbURBQW1ELG9DQUFvQyxnQ0FBZ0MsZ0NBQWdDLDBCQUEwQixHQUFHLGtFQUFrRSw4QkFBOEIsR0FBRyxzQ0FBc0MsZ0JBQWdCLHVCQUF1QixvQkFBb0IsdUJBQXVCLHFCQUFxQixzQkFBc0IsMkJBQTJCLEdBQUcsa0NBQWtDLGdCQUFnQixnQkFBZ0IseUNBQXlDLG9EQUFvRCxHQUFHLGtDQUFrQyxrQkFBa0IsY0FBYyxnQkFBZ0IsNEJBQTRCLHdCQUF3QixxQkFBcUIsR0FBRyxvQ0FBb0MsdUJBQXVCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQixHQUFHLCtCQUErQixZQUFZLGtCQUFrQix3QkFBd0IsR0FBRyxxQ0FBcUMsZ0JBQWdCLGdCQUFnQixpQkFBaUIsMkJBQTJCLHNCQUFzQiw2QkFBNkIsd0pBQXdKLHlDQUF5QyxrQkFBa0IsdUJBQXVCLEdBQUcsK0JBQStCLDRCQUE0QixxQkFBcUIsbUJBQW1CLGdCQUFnQix1QkFBdUIsNkJBQTZCLDBEQUEwRCxHQUFHLG1DQUFtQyxnQkFBZ0Isa0JBQWtCLHlCQUF5Qix1QkFBdUIsb0JBQW9CLHVCQUF1QixxQkFBcUIsc0JBQXNCLEdBQUcsa0NBQWtDLHVCQUF1QixrQkFBa0IsY0FBYyxlQUFlLGdCQUFnQixHQUFHLDJFQUEyRSxnQkFBZ0IsaUJBQWlCLHdCQUF3QixrQkFBa0IsNEJBQTRCLHdCQUF3Qix1QkFBdUIsc0NBQXNDLGdDQUFnQyxvQkFBb0IsR0FBRyx5Q0FBeUMsdUJBQXVCLGNBQWMsYUFBYSxHQUFHLGdFQUFnRSxzQ0FBc0Msc0JBQXNCLEtBQUssY0FBYyxTQUFTLDBHQUEwRyxVQUFVLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLFdBQVcsWUFBWSxXQUFXLFlBQVksYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxPQUFPLEtBQUssWUFBWSxXQUFXLFVBQVUsVUFBVSxLQUFLLEtBQUssWUFBWSxhQUFhLE1BQU0sS0FBSyxNQUFNLE9BQU8sYUFBYSxPQUFPLEtBQUssWUFBWSxhQUFhLGFBQWEsYUFBYSxhQUFhLFdBQVcsVUFBVSxVQUFVLFVBQVUsVUFBVSxPQUFPLEtBQUssVUFBVSxVQUFVLFlBQVksYUFBYSxXQUFXLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsYUFBYSxhQUFhLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxPQUFPLEtBQUssWUFBWSxXQUFXLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLFVBQVUsWUFBWSxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsWUFBWSxXQUFXLFlBQVksV0FBVyxLQUFLLFlBQVksV0FBVyxZQUFZLE1BQU0sS0FBSyxZQUFZLGNBQWMsV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxNQUFNLE1BQU0sVUFBVSxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsV0FBVyxNQUFNLEtBQUssWUFBWSxXQUFXLFVBQVUsTUFBTSxLQUFLLEtBQUssVUFBVSxNQUFNLFVBQVUsbURBQW1ELGdCQUFnQix1QkFBdUIsYUFBYSxZQUFZLGNBQWMsaUJBQWlCLGtCQUFrQix1QkFBdUIsZUFBZSxpRUFBaUUsNEJBQTRCLEdBQUcsbUNBQW1DLGVBQWUsd0JBQXdCLHlCQUF5QixHQUFHLG9CQUFvQix1QkFBdUIsR0FBRyx5QkFBeUIsdUJBQXVCLGdCQUFnQix1QkFBdUIsb0JBQW9CLHVCQUF1QixxQkFBcUIsc0JBQXNCLEdBQUcsMEJBQTBCLHVCQUF1QixnQkFBZ0Isb0JBQW9CLHVCQUF1QixxQkFBcUIsc0JBQXNCLEdBQUcseUJBQXlCLHVCQUF1QixnQkFBZ0Isa0JBQWtCLGFBQWEsR0FBRyw2QkFBNkIsaUNBQWlDLHFEQUFxRCxLQUFLLG1EQUFtRCxtQkFBbUIsMkJBQTJCLHVCQUF1QiwyQ0FBMkMsS0FBSyx3QkFBd0IsdUJBQXVCLGdDQUFnQyw2Q0FBNkMsc0NBQXNDLHVCQUF1QixpQkFBaUIsaUJBQWlCLGtCQUFrQixrQkFBa0Isb0JBQW9CLEdBQUcsb0NBQW9DLGtCQUFrQixrQkFBa0IsMkJBQTJCLDRCQUE0QixjQUFjLHFDQUFxQyxtREFBbUQsb0NBQW9DLGdDQUFnQyxnQ0FBZ0MsMEJBQTBCLEdBQUcsa0VBQWtFLDhCQUE4QixHQUFHLHNDQUFzQyxnQkFBZ0IsdUJBQXVCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQiwyQkFBMkIsR0FBRyxrQ0FBa0MsZ0JBQWdCLGdCQUFnQix5Q0FBeUMsb0RBQW9ELEdBQUcsa0NBQWtDLGtCQUFrQixjQUFjLGdCQUFnQiw0QkFBNEIsd0JBQXdCLHFCQUFxQixHQUFHLG9DQUFvQyx1QkFBdUIsb0JBQW9CLHVCQUF1QixxQkFBcUIsc0JBQXNCLEdBQUcsK0JBQStCLFlBQVksa0JBQWtCLHdCQUF3QixHQUFHLHFDQUFxQyxnQkFBZ0IsZ0JBQWdCLGlCQUFpQiwyQkFBMkIsc0JBQXNCLDZCQUE2Qix3SkFBd0oseUNBQXlDLGtCQUFrQix1QkFBdUIsR0FBRywrQkFBK0IsNEJBQTRCLHFCQUFxQixtQkFBbUIsZ0JBQWdCLHVCQUF1Qiw2QkFBNkIsMERBQTBELEdBQUcsbUNBQW1DLGdCQUFnQixrQkFBa0IseUJBQXlCLHVCQUF1QixvQkFBb0IsdUJBQXVCLHFCQUFxQixzQkFBc0IsR0FBRyxrQ0FBa0MsdUJBQXVCLGtCQUFrQixjQUFjLGVBQWUsZ0JBQWdCLEdBQUcsMkVBQTJFLGdCQUFnQixpQkFBaUIsd0JBQXdCLGtCQUFrQiw0QkFBNEIsd0JBQXdCLHVCQUF1QixzQ0FBc0MsZ0NBQWdDLG9CQUFvQixHQUFHLHlDQUF5Qyx1QkFBdUIsY0FBYyxhQUFhLEdBQUcsZ0VBQWdFLHNDQUFzQyxzQkFBc0IsS0FBSyxjQUFjLHFCQUFxQjtBQUMvK1Q7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL21lZGlhcGlwZS1mYWNlbWVzaC1lZmZlY3RzLy4vc3JjL2h0bWxTZXJ2aWNlL3N0eWxlcy9jb25maWdTbGlkZXIuY3NzPzYxNWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuY29uZmlndXJhdGlvbi1jb250YWluZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMDtcXG4gIGxlZnQ6IDA7XFxuICBib3R0b206IDA7XFxuICBtYXJnaW46IGF1dG87XFxuICB6LWluZGV4OiAyMDAwO1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgb3BhY2l0eTogMDtcXG4gIHRyYW5zaXRpb246IHZpc2liaWxpdHkgMHMgbGluZWFyIDAuMzNzLCBvcGFjaXR5IDAuMzNzIGxpbmVhcjtcXG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xcbn1cXG5cXG4uc2hvdy1jb25maWd1cmF0aW9uLWNvbnRhaW5lciB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IDBzO1xcbn1cXG5cXG4uY29uZmlnLXNsaWRlciB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxufVxcblxcbi5jb25maWctc2xpZGVyLXR5cGUge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogLTQ4cHg7XFxuICBmb250LWZhbWlseTogSW50ZXI7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XFxufVxcblxcbi5jb25maWctc2xpZGVyLXZhbHVlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAtMTAlO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxNDAlO1xcbn1cXG5cXG4uY29uZmlnLXR5cGUtc2xpZGVyIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHRvcDogNnB4O1xcbn1cXG4uY29uZmlnLXR5cGUtc2xpZGVyIGlucHV0IHtcXG4gIC8qIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsgKi9cXG4gIC8qIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KTsgKi9cXG59XFxuLmNvbmZpZy10eXBlLXNsaWRlciBpbnB1dDo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgLyogaGVpZ2h0OiA0cHg7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiBhcXVhO1xcbiAgYWNjZW50LWNvbG9yOiByZWQ7ICovXFxuICAvKiBib3gtc2hhZG93OiAtMXB4IDAgMCAxcHggIzQzZTVmNzsgKi9cXG59XFxuXFxuLmNvbmZpZy1yZXNldC1pY29uIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcXG4gIHRyYW5zaXRpb246IGJhY2tkcm9wLWZpbHRlciAwLjMzcyBsaW5lYXI7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMSk7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBsZWZ0OiAtMTEycHg7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm90dG9tOiAtMzBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtY29udGFpbmVyIHtcXG4gIHBhZGRpbmc6IDE2cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgZ2FwOiAxNnB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTZweCAxNnB4IDBweCAwcHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjE2KTtcXG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMDAlKTtcXG4gIHRyYW5zaXRpb246IDAuM3MgZWFzZTtcXG59XFxuXFxuLnNob3ctY29uZmlndXJhdGlvbi1jb250YWluZXIgLmNvbmZpZy1ib3R0b20tc2hlZXQtY29udGFpbmVyIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwJSk7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWhlYWRlci10ZXh0IHtcXG4gIGNvbG9yOiAjZmZmO1xcbiAgZm9udC1mYW1pbHk6IEludGVyO1xcbiAgZm9udC1zaXplOiAxOHB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxpbmUtaGVpZ2h0OiAyNHB4O1xcbiAgbGV0dGVyLXNwYWNpbmc6IDAuMThweDtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtZGl2aWRlciB7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpO1xcbiAgYm94LXNoYWRvdzogMHB4IDRweCA4cHggMHB4IHJnYmEoMCwgMCwgMCwgMC4xNik7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWNvbnRlbnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTZweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgbWF4LXdpZHRoOiA1ODZweDtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtbGVmdC10ZXh0IHtcXG4gIGZvbnQtZmFtaWx5OiBJbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBsaW5lLWhlaWdodDogMTQwJTtcXG59XFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtc2xpZGVyIHtcXG4gIGZsZXg6IDE7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG59XFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtc2xpZGVyIGlucHV0IHtcXG4gIGhlaWdodDogMXB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBwYWRkaW5nOiAxcHg7XFxuICAvKiBhY2NlbnQtY29sb3I6ICNmZmY7ICovXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoXFxuICAgIHRvIHJpZ2h0LFxcbiAgICAjZmZmIDAlLFxcbiAgICAjZmZmIDUwJSxcXG4gICAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpIDUwJSxcXG4gICAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpIDEwMCVcXG4gICk7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDQ1MG1zIGVhc2UtaW47XFxuICBvdXRsaW5lOiBub25lO1xcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xcbn1cXG5pbnB1dDo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxuICBib3JkZXItcmFkaXVzOiAwO1xcblxcbiAgaGVpZ2h0OiAxNnB4O1xcbiAgd2lkdGg6IDE2cHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICBmaWx0ZXI6IGRyb3Atc2hhZG93KDBweCA0cHggMTBweCByZ2JhKDAsIDAsIDAsIDAuMjUpKTtcXG59XFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcmlnaHQtdGV4dCB7XFxuICB3aWR0aDogNTZweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGVuZDtcXG4gIGZvbnQtZmFtaWx5OiBJbnRlcjtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBsaW5lLWhlaWdodDogMTQwJTtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtYWN0aW9ucyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiAxMHB4O1xcbiAgdG9wOiAtNDhweDtcXG4gIHJpZ2h0OiAxNnB4O1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1yZXNldC1idXR0b24sXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtY2xvc2UtYnV0dG9uIHtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNDBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMSk7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcbi5jb25maWctYm90dG9tLXNoZWV0LWNsb3NlLWJ1dHRvbiBpbWcge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogOHB4O1xcbiAgdG9wOiA4cHg7XFxufVxcblxcbkBtZWRpYSAobWluLWFzcGVjdC1yYXRpbzogNC81KSBhbmQgKG1heC1hc3BlY3QtcmF0aW86IDEvMSkge1xcbiAgLmNvbmZpZy1ib3R0b20tc2hlZXQtaGVhZGVyLXRleHQge1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICB9XFxuICAvKiDigKYgKi9cXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2h0bWxTZXJ2aWNlL3N0eWxlcy9jb25maWdTbGlkZXIuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixRQUFRO0VBQ1IsT0FBTztFQUNQLFNBQVM7RUFDVCxZQUFZO0VBQ1osYUFBYTtFQUNiLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsNERBQTREO0VBQzVELHVCQUF1QjtBQUN6Qjs7QUFFQTtFQUNFLFVBQVU7RUFDVixtQkFBbUI7RUFDbkIsb0JBQW9CO0FBQ3RCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLFdBQVc7RUFDWCxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLGFBQWE7RUFDYixRQUFRO0FBQ1Y7QUFDQTtFQUNFLDhCQUE4QjtFQUM5QixnREFBZ0Q7QUFDbEQ7QUFDQTtFQUNFOztzQkFFb0I7RUFDcEIsc0NBQXNDO0FBQ3hDOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLDJCQUEyQjtFQUMzQix3Q0FBd0M7RUFDeEMsaUNBQWlDO0VBQ2pDLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osWUFBWTtFQUNaLGFBQWE7RUFDYixhQUFhO0VBQ2IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixTQUFTO0VBQ1QsZ0NBQWdDO0VBQ2hDLDhDQUE4QztFQUM5QywrQkFBK0I7RUFDL0IsMkJBQTJCO0VBQzNCLDJCQUEyQjtFQUMzQixxQkFBcUI7QUFDdkI7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0I7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtFQUNqQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsV0FBVztFQUNYLG9DQUFvQztFQUNwQywrQ0FBK0M7QUFDakQ7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsU0FBUztFQUNULFdBQVc7RUFDWCx1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLE9BQU87RUFDUCxhQUFhO0VBQ2IsbUJBQW1CO0FBQ3JCO0FBQ0E7RUFDRSxXQUFXO0VBQ1gsV0FBVztFQUNYLFlBQVk7RUFDWix3QkFBd0I7RUFDeEIsZUFBZTtFQUNmLHdCQUF3QjtFQUN4Qjs7Ozs7O0dBTUM7RUFDRCxvQ0FBb0M7RUFDcEMsYUFBYTtFQUNiLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGdCQUFnQjs7RUFFaEIsWUFBWTtFQUNaLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsd0JBQXdCO0VBQ3hCLHFEQUFxRDtBQUN2RDtBQUNBO0VBQ0UsV0FBVztFQUNYLGFBQWE7RUFDYixvQkFBb0I7RUFDcEIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsU0FBUztFQUNULFVBQVU7RUFDVixXQUFXO0FBQ2I7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGlDQUFpQztFQUNqQywyQkFBMkI7RUFDM0IsZUFBZTtBQUNqQjtBQUNBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxRQUFRO0FBQ1Y7O0FBRUE7RUFDRTtJQUNFLGVBQWU7RUFDakI7RUFDQSxNQUFNO0FBQ1JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbmZpZ3VyYXRpb24tY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDA7XFxuICBsZWZ0OiAwO1xcbiAgYm90dG9tOiAwO1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgei1pbmRleDogMjAwMDtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIGxpbmVhciAwLjMzcywgb3BhY2l0eSAwLjMzcyBsaW5lYXI7XFxuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcXG59XFxuXFxuLnNob3ctY29uZmlndXJhdGlvbi1jb250YWluZXIge1xcbiAgb3BhY2l0eTogMTtcXG4gIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICB0cmFuc2l0aW9uLWRlbGF5OiAwcztcXG59XFxuXFxuLmNvbmZpZy1zbGlkZXIge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbn1cXG5cXG4uY29uZmlnLXNsaWRlci10eXBlIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IC00OHB4O1xcbiAgZm9udC1mYW1pbHk6IEludGVyO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxNDAlO1xcbn1cXG5cXG4uY29uZmlnLXNsaWRlci12YWx1ZSB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogLTEwJTtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA2MDA7XFxuICBsaW5lLWhlaWdodDogMTQwJTtcXG59XFxuXFxuLmNvbmZpZy10eXBlLXNsaWRlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB3aWR0aDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB0b3A6IDZweDtcXG59XFxuLmNvbmZpZy10eXBlLXNsaWRlciBpbnB1dCB7XFxuICAvKiAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7ICovXFxuICAvKiBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCk7ICovXFxufVxcbi5jb25maWctdHlwZS1zbGlkZXIgaW5wdXQ6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXG4gIC8qIGhlaWdodDogNHB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogYXF1YTtcXG4gIGFjY2VudC1jb2xvcjogcmVkOyAqL1xcbiAgLyogYm94LXNoYWRvdzogLTFweCAwIDAgMXB4ICM0M2U1Zjc7ICovXFxufVxcblxcbi5jb25maWctcmVzZXQtaWNvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICB0cmFuc2l0aW9uOiBiYWNrZHJvcC1maWx0ZXIgMC4zM3MgbGluZWFyO1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjEpO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgbGVmdDogLTExMnB4O1xcbiAgcGFkZGluZzogNHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGJvdHRvbTogLTMwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWNvbnRhaW5lciB7XFxuICBwYWRkaW5nOiAxNnB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG4gIGdhcDogMTZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDE2cHggMTZweCAwcHggMHB4O1xcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xNik7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTAwJSk7XFxuICB0cmFuc2l0aW9uOiAwLjNzIGVhc2U7XFxufVxcblxcbi5zaG93LWNvbmZpZ3VyYXRpb24tY29udGFpbmVyIC5jb25maWctYm90dG9tLXNoZWV0LWNvbnRhaW5lciB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCUpO1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1oZWFkZXItdGV4dCB7XFxuICBjb2xvcjogI2ZmZjtcXG4gIGZvbnQtZmFtaWx5OiBJbnRlcjtcXG4gIGZvbnQtc2l6ZTogMThweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsaW5lLWhlaWdodDogMjRweDtcXG4gIGxldHRlci1zcGFjaW5nOiAwLjE4cHg7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWRpdmlkZXIge1xcbiAgaGVpZ2h0OiAxcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KTtcXG4gIGJveC1zaGFkb3c6IDBweCA0cHggOHB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMTYpO1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1jb250ZW50IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDE2cHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1heC13aWR0aDogNTg2cHg7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWxlZnQtdGV4dCB7XFxuICBmb250LWZhbWlseTogSW50ZXI7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XFxufVxcbi5jb25maWctYm90dG9tLXNoZWV0LXNsaWRlciB7XFxuICBmbGV4OiAxO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5jb25maWctYm90dG9tLXNoZWV0LXNsaWRlciBpbnB1dCB7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgcGFkZGluZzogMXB4O1xcbiAgLyogYWNjZW50LWNvbG9yOiAjZmZmOyAqL1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxcbiAgICB0byByaWdodCxcXG4gICAgI2ZmZiAwJSxcXG4gICAgI2ZmZiA1MCUsXFxuICAgIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KSA1MCUsXFxuICAgIHJnYmEoMjU1LCAyNTUsIDI1NSwgMC40KSAxMDAlXFxuICApO1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCA0NTBtcyBlYXNlLWluO1xcbiAgb3V0bGluZTogbm9uZTtcXG4gIGJvcmRlci1yYWRpdXM6IDRweDtcXG59XFxuaW5wdXQ6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyLXJhZGl1czogMDtcXG5cXG4gIGhlaWdodDogMTZweDtcXG4gIHdpZHRoOiAxNnB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgZmlsdGVyOiBkcm9wLXNoYWRvdygwcHggNHB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjI1KSk7XFxufVxcbi5jb25maWctYm90dG9tLXNoZWV0LXJpZ2h0LXRleHQge1xcbiAgd2lkdGg6IDU2cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBlbmQ7XFxuICBmb250LWZhbWlseTogSW50ZXI7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWFjdGlvbnMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGdhcDogMTBweDtcXG4gIHRvcDogLTQ4cHg7XFxuICByaWdodDogMTZweDtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcmVzZXQtYnV0dG9uLFxcbi5jb25maWctYm90dG9tLXNoZWV0LWNsb3NlLWJ1dHRvbiB7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDQwcHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjEpO1xcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDI1cHgpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1jbG9zZS1idXR0b24gaW1nIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDhweDtcXG4gIHRvcDogOHB4O1xcbn1cXG5cXG5AbWVkaWEgKG1pbi1hc3BlY3QtcmF0aW86IDQvNSkgYW5kIChtYXgtYXNwZWN0LXJhdGlvOiAxLzEpIHtcXG4gIC5jb25maWctYm90dG9tLXNoZWV0LWhlYWRlci10ZXh0IHtcXG4gICAgZm9udC1zaXplOiAxNnB4O1xcbiAgfVxcbiAgLyog4oCmICovXFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7038\n')},4495:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".config-settings-fs {\\n  position: absolute;\\n  bottom: 0;\\n  width: 100%;\\n  z-index: 5;\\n  border-radius: 16px 16px 0px 0px;\\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\\n  background: rgba(0, 0, 0, 0.16);\\n  backdrop-filter: blur(25px);\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\\n}\\n\\n.show-config-settings-fs {\\n  opacity: 1;\\n  visibility: visible;\\n  transition-delay: 0s;\\n}\\n\\n.config-settings-hide-fs {\\n  display: none;\\n}\\n\\n.config-bottom-sheet-container-fs {\\n  display: flex;\\n  padding: 16px;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 16px;\\n  transform: translateY(100%);\\n  transition: 0.3s ease;\\n}\\n\\n.show-config-settings-fs .config-bottom-sheet-container-fs {\\n  transform: translateY(0%);\\n}\\n\\n.config-bottom-sheet-header-fs {\\n  display: flex;\\n  align-items: flex-start;\\n  gap: 8px;\\n  align-self: stretch;\\n}\\n\\n.config-bottom-sheet-pill-fs {\\n  display: flex;\\n  height: 40px;\\n  padding: 0px 12px 0px 8px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 40px;\\n  background: rgba(16, 17, 18, 0.24);\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n}\\n\\n.hide-pill-fs {\\n  display: none;\\n}\\n\\n.config-bottom-sheet-pill-fs:hover {\\n  border: 1px solid #404141;\\n  background: rgba(16, 17, 18, 0.48);\\n}\\n\\n.active-config-bottom-sheet-pill-active-fs {\\n  background: #fff;\\n  backdrop-filter: blur(25px);\\n  border: 1px solid transparent;\\n}\\n.active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  color: #101112;\\n}\\n.active-config-bottom-sheet-pill-active-fs:hover {\\n  background: #fff !important;\\n  border: 1px solid transparent;\\n}\\n\\n.config-bottom-sheet-pill-icon-wrapper-fs {\\n  display: flex;\\n  width: 24px;\\n  height: 24px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 10px;\\n}\\n\\n.config-bottom-sheet-pill-text-fs {\\n  color: white;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.config-bottom-sheet-divider-fs {\\n  height: 1px;\\n  width: 100%;\\n  background: rgba(255, 255, 255, 0.4);\\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\\n}\\n\\n.config-bottom-sheet-actions-fs {\\n  position: absolute;\\n  display: flex;\\n  gap: 10px;\\n  top: -48px;\\n  right: 16px;\\n}\\n\\n.config-bottom-sheet-reset-button-fs,\\n.config-bottom-sheet-close-button-fs {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 40px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  background: rgba(16, 17, 18, 0.1);\\n  backdrop-filter: blur(25px);\\n  cursor: pointer;\\n}\\n\\n.config-bottom-sheet-content-fs {\\n  width: 100%;\\n}\\n\\n.ring-row-container-fs {\\n  display: flex;\\n  align-items: center;\\n  gap: 16px;\\n  align-self: stretch;\\n}\\n\\n.config-bottom-sheet-ring-divs-fs {\\n  display: flex;\\n  width: 64px;\\n  padding: 0px 10px;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 80px;\\n}\\n\\n.config-bottom-sheet-ringicon-divs-fs {\\n  display: flex;\\n  width: 64px;\\n  height: 64px;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 10px;\\n  border-radius: 80px;\\n  background: rgba(16, 17, 18, 0.24);\\n  cursor: pointer;\\n}\\n\\n.ring-selected-fs {\\n  background: #fff;\\n}\\n\\n.config-bottom-sheet-ringicon-label-fs {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n  color: #fff;\\n}\\n\\n.slider-container-fs {\\n  display: flex;\\n  height: 40px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 16px;\\n  align-self: stretch;\\n  width: 100%;\\n  /* max-width: 580px; */\\n}\\n\\n.slider-main-container-fs {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 8px;\\n  align-self: stretch;\\n}\\n\\n.slider-input-div-fs {\\n  display: flex;\\n  align-items: center;\\n  flex: 1;\\n}\\n\\n.slider-input-div-fs input {\\n  width: 100%;\\n  height: 1px;\\n  padding: 1px;\\n  /* accent-color: #fff; */\\n  -webkit-appearance: none;\\n  background: linear-gradient(\\n    to right,\\n    #fff 0%,\\n    #fff 50%,\\n    rgba(255, 255, 255, 0.4) 50%,\\n    rgba(255, 255, 255, 0.4) 100%\\n  );\\n  transition: background 450ms ease-in;\\n  outline: none;\\n  cursor: pointer;\\n  border-radius: 4px;\\n}\\ninput::-webkit-slider-thumb-fs {\\n  background-color: white;\\n  border-radius: 0;\\n\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 50%;\\n  -webkit-appearance: none;\\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\\n}\\n\\n.slider-left-text-fs,\\n.slider-right-text-fs {\\n  width: 56px;\\n}\\n.slider-right-text-fs {\\n  text-align: end;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .config-bottom-sheet-pill-fs {\\n    height: 32px;\\n  }\\n  .config-bottom-sheet-pill-text-fs {\\n    font-size: 12px;\\n  }\\n  .active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\\n    font-size: 12px;\\n  }\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/fyndStyleConfigBottomSheet.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,UAAU;EACV,gCAAgC;EAChC,8CAA8C;EAC9C,+BAA+B;EAC/B,2BAA2B;EAC3B,kBAAkB;EAClB,UAAU;EACV,4DAA4D;AAC9D;;AAEA;EACE,UAAU;EACV,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,SAAS;EACT,2BAA2B;EAC3B,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,QAAQ;EACR,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,yBAAyB;EACzB,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,mBAAmB;EACnB,kCAAkC;EAClC,eAAe;EACf,6BAA6B;AAC/B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,yBAAyB;EACzB,kCAAkC;AACpC;;AAEA;EACE,gBAAgB;EAChB,2BAA2B;EAC3B,6BAA6B;AAC/B;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,2BAA2B;EAC3B,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,oCAAoC;EACpC,+CAA+C;AACjD;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,UAAU;EACV,WAAW;AACb;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,iCAAiC;EACjC,2BAA2B;EAC3B,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,WAAW;EACX,iBAAiB;EACjB,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,mBAAmB;EACnB,kCAAkC;EAClC,eAAe;AACjB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,mBAAmB;EACnB,WAAW;EACX,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;EACR,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,OAAO;AACT;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,wBAAwB;EACxB,wBAAwB;EACxB;;;;;;GAMC;EACD,oCAAoC;EACpC,aAAa;EACb,eAAe;EACf,kBAAkB;AACpB;AACA;EACE,uBAAuB;EACvB,gBAAgB;;EAEhB,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;EACxB,qDAAqD;AACvD;;AAEA;;EAEE,WAAW;AACb;AACA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,YAAY;EACd;EACA;IACE,eAAe;EACjB;EACA;IACE,eAAe;EACjB;AACF","sourcesContent":[".config-settings-fs {\\n  position: absolute;\\n  bottom: 0;\\n  width: 100%;\\n  z-index: 5;\\n  border-radius: 16px 16px 0px 0px;\\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\\n  background: rgba(0, 0, 0, 0.16);\\n  backdrop-filter: blur(25px);\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\\n}\\n\\n.show-config-settings-fs {\\n  opacity: 1;\\n  visibility: visible;\\n  transition-delay: 0s;\\n}\\n\\n.config-settings-hide-fs {\\n  display: none;\\n}\\n\\n.config-bottom-sheet-container-fs {\\n  display: flex;\\n  padding: 16px;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 16px;\\n  transform: translateY(100%);\\n  transition: 0.3s ease;\\n}\\n\\n.show-config-settings-fs .config-bottom-sheet-container-fs {\\n  transform: translateY(0%);\\n}\\n\\n.config-bottom-sheet-header-fs {\\n  display: flex;\\n  align-items: flex-start;\\n  gap: 8px;\\n  align-self: stretch;\\n}\\n\\n.config-bottom-sheet-pill-fs {\\n  display: flex;\\n  height: 40px;\\n  padding: 0px 12px 0px 8px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 40px;\\n  background: rgba(16, 17, 18, 0.24);\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n}\\n\\n.hide-pill-fs {\\n  display: none;\\n}\\n\\n.config-bottom-sheet-pill-fs:hover {\\n  border: 1px solid #404141;\\n  background: rgba(16, 17, 18, 0.48);\\n}\\n\\n.active-config-bottom-sheet-pill-active-fs {\\n  background: #fff;\\n  backdrop-filter: blur(25px);\\n  border: 1px solid transparent;\\n}\\n.active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  color: #101112;\\n}\\n.active-config-bottom-sheet-pill-active-fs:hover {\\n  background: #fff !important;\\n  border: 1px solid transparent;\\n}\\n\\n.config-bottom-sheet-pill-icon-wrapper-fs {\\n  display: flex;\\n  width: 24px;\\n  height: 24px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 10px;\\n}\\n\\n.config-bottom-sheet-pill-text-fs {\\n  color: white;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.config-bottom-sheet-divider-fs {\\n  height: 1px;\\n  width: 100%;\\n  background: rgba(255, 255, 255, 0.4);\\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\\n}\\n\\n.config-bottom-sheet-actions-fs {\\n  position: absolute;\\n  display: flex;\\n  gap: 10px;\\n  top: -48px;\\n  right: 16px;\\n}\\n\\n.config-bottom-sheet-reset-button-fs,\\n.config-bottom-sheet-close-button-fs {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 40px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  background: rgba(16, 17, 18, 0.1);\\n  backdrop-filter: blur(25px);\\n  cursor: pointer;\\n}\\n\\n.config-bottom-sheet-content-fs {\\n  width: 100%;\\n}\\n\\n.ring-row-container-fs {\\n  display: flex;\\n  align-items: center;\\n  gap: 16px;\\n  align-self: stretch;\\n}\\n\\n.config-bottom-sheet-ring-divs-fs {\\n  display: flex;\\n  width: 64px;\\n  padding: 0px 10px;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 80px;\\n}\\n\\n.config-bottom-sheet-ringicon-divs-fs {\\n  display: flex;\\n  width: 64px;\\n  height: 64px;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 10px;\\n  border-radius: 80px;\\n  background: rgba(16, 17, 18, 0.24);\\n  cursor: pointer;\\n}\\n\\n.ring-selected-fs {\\n  background: #fff;\\n}\\n\\n.config-bottom-sheet-ringicon-label-fs {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n  color: #fff;\\n}\\n\\n.slider-container-fs {\\n  display: flex;\\n  height: 40px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 16px;\\n  align-self: stretch;\\n  width: 100%;\\n  /* max-width: 580px; */\\n}\\n\\n.slider-main-container-fs {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 8px;\\n  align-self: stretch;\\n}\\n\\n.slider-input-div-fs {\\n  display: flex;\\n  align-items: center;\\n  flex: 1;\\n}\\n\\n.slider-input-div-fs input {\\n  width: 100%;\\n  height: 1px;\\n  padding: 1px;\\n  /* accent-color: #fff; */\\n  -webkit-appearance: none;\\n  background: linear-gradient(\\n    to right,\\n    #fff 0%,\\n    #fff 50%,\\n    rgba(255, 255, 255, 0.4) 50%,\\n    rgba(255, 255, 255, 0.4) 100%\\n  );\\n  transition: background 450ms ease-in;\\n  outline: none;\\n  cursor: pointer;\\n  border-radius: 4px;\\n}\\ninput::-webkit-slider-thumb-fs {\\n  background-color: white;\\n  border-radius: 0;\\n\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 50%;\\n  -webkit-appearance: none;\\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\\n}\\n\\n.slider-left-text-fs,\\n.slider-right-text-fs {\\n  width: 56px;\\n}\\n.slider-right-text-fs {\\n  text-align: end;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .config-bottom-sheet-pill-fs {\\n    height: 32px;\\n  }\\n  .config-bottom-sheet-pill-text-fs {\\n    font-size: 12px;\\n  }\\n  .active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\\n    font-size: 12px;\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4495\n')},2262:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".left-nav-icon {\\n  position: absolute;\\n  left: 16px;\\n  top: 16px;\\n  display: none;\\n  justify-content: center;\\n  align-items: center;\\n  width: 40px;\\n  height: 40px;\\n  cursor: pointer;\\n  border-radius: 50%;\\n  z-index: 12;\\n}\\n\\n.cross-nav-icon {\\n  position: absolute;\\n  right: 16px;\\n  top: 16px;\\n  display: none;\\n  justify-content: center;\\n  align-items: center;\\n  width: 40px;\\n  height: 40px;\\n  cursor: pointer;\\n  border-radius: 50%;\\n  z-index: 12;\\n}\\n\\n.icon-blur-bg {\\n  backdrop-filter: blur(25px);\\n  background: rgba(16, 17, 18, 0.1);\\n}\\n\\n.icon-blur-bg img {\\n  width: 24px;\\n  height: 24px;\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/navigationButtons.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,2BAA2B;EAC3B,iCAAiC;AACnC;;AAEA;EACE,WAAW;EACX,YAAY;AACd","sourcesContent":[".left-nav-icon {\\n  position: absolute;\\n  left: 16px;\\n  top: 16px;\\n  display: none;\\n  justify-content: center;\\n  align-items: center;\\n  width: 40px;\\n  height: 40px;\\n  cursor: pointer;\\n  border-radius: 50%;\\n  z-index: 12;\\n}\\n\\n.cross-nav-icon {\\n  position: absolute;\\n  right: 16px;\\n  top: 16px;\\n  display: none;\\n  justify-content: center;\\n  align-items: center;\\n  width: 40px;\\n  height: 40px;\\n  cursor: pointer;\\n  border-radius: 50%;\\n  z-index: 12;\\n}\\n\\n.icon-blur-bg {\\n  backdrop-filter: blur(25px);\\n  background: rgba(16, 17, 18, 0.1);\\n}\\n\\n.icon-blur-bg img {\\n  width: 24px;\\n  height: 24px;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDBEQUEwRCx1QkFBdUIsZUFBZSxjQUFjLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHVCQUF1QixnQkFBZ0IsR0FBRyxxQkFBcUIsdUJBQXVCLGdCQUFnQixjQUFjLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHVCQUF1QixnQkFBZ0IsR0FBRyxtQkFBbUIsZ0NBQWdDLHNDQUFzQyxHQUFHLHVCQUF1QixnQkFBZ0IsaUJBQWlCLEdBQUcsU0FBUywrR0FBK0csWUFBWSxXQUFXLFVBQVUsVUFBVSxZQUFZLGFBQWEsV0FBVyxVQUFVLFVBQVUsWUFBWSxXQUFXLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxXQUFXLFVBQVUsVUFBVSxZQUFZLFdBQVcsTUFBTSxLQUFLLFlBQVksYUFBYSxPQUFPLEtBQUssVUFBVSxVQUFVLHlDQUF5Qyx1QkFBdUIsZUFBZSxjQUFjLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHVCQUF1QixnQkFBZ0IsR0FBRyxxQkFBcUIsdUJBQXVCLGdCQUFnQixjQUFjLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHVCQUF1QixnQkFBZ0IsR0FBRyxtQkFBbUIsZ0NBQWdDLHNDQUFzQyxHQUFHLHVCQUF1QixnQkFBZ0IsaUJBQWlCLEdBQUcscUJBQXFCO0FBQ2p2RDtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkaWFwaXBlLWZhY2VtZXNoLWVmZmVjdHMvLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL25hdmlnYXRpb25CdXR0b25zLmNzcz9mOGUyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmxlZnQtbmF2LWljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMTZweDtcXG4gIHRvcDogMTZweDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHotaW5kZXg6IDEyO1xcbn1cXG5cXG4uY3Jvc3MtbmF2LWljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDE2cHg7XFxuICB0b3A6IDE2cHg7XFxuICBkaXNwbGF5OiBub25lO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICB6LWluZGV4OiAxMjtcXG59XFxuXFxuLmljb24tYmx1ci1iZyB7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMSk7XFxufVxcblxcbi5pY29uLWJsdXItYmcgaW1nIHtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL25hdmlnYXRpb25CdXR0b25zLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixVQUFVO0VBQ1YsU0FBUztFQUNULGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZQUFZO0VBQ1osZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFNBQVM7RUFDVCxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixXQUFXO0VBQ1gsWUFBWTtFQUNaLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsV0FBVztBQUNiOztBQUVBO0VBQ0UsMkJBQTJCO0VBQzNCLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0FBQ2RcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmxlZnQtbmF2LWljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbGVmdDogMTZweDtcXG4gIHRvcDogMTZweDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHotaW5kZXg6IDEyO1xcbn1cXG5cXG4uY3Jvc3MtbmF2LWljb24ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDE2cHg7XFxuICB0b3A6IDE2cHg7XFxuICBkaXNwbGF5OiBub25lO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICB6LWluZGV4OiAxMjtcXG59XFxuXFxuLmljb24tYmx1ci1iZyB7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMSk7XFxufVxcblxcbi5pY29uLWJsdXItYmcgaW1nIHtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2262\n')},4790:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".popup-modal {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: none;\\n  z-index: 15;\\n  justify-content: center;\\n  align-items: center;\\n  background: rgba(28, 28, 28, 0.4);\\n}\\n\\n.modal-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n  padding: 16px;\\n  border-radius: 8px;\\n  justify-content: center;\\n  align-items: center;\\n  max-width: 328px;\\n  background: #fff;\\n}\\n\\n.modal-heading {\\n  font-size: 18px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n  color: #242b38;\\n  text-align: center;\\n}\\n\\n.modal-separator {\\n  border: 1px solid rgba(28, 28, 28, 0.1);\\n  width: 100%;\\n}\\n\\n.modal-actions-container {\\n  display: flex;\\n  justify-content: center;\\n  gap: 16px;\\n}\\n\\n.modal-positive-action {\\n  min-width: 104px;\\n  padding: 10px 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 6px;\\n  background: linear-gradient(168deg, #e65f6e 0.66%, #da0e64 59.95%);\\n  color: #fff;\\n  border-radius: 8px;\\n  border: none;\\n  cursor: pointer;\\n  font-weight: 600;\\n}\\n\\n.modal-negative-action {\\n  min-width: 104px;\\n  padding: 10px 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 6px;\\n  border: 1px solid #da0e64;\\n  color: #e65e97;\\n  background: #fff;\\n  border-radius: 8px;\\n  cursor: pointer;\\n  background: rgba(218, 14, 100, 0.04);\\n  font-weight: 600;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .modal-container {\\n    width: min-content;\\n  }\\n  .modal-heading {\\n    font-size: 16px;\\n  }\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/popupModal.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,WAAW;EACX,YAAY;EACZ,aAAa;EACb,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,aAAa;EACb,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,uCAAuC;EACvC,WAAW;AACb;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,kEAAkE;EAClE,WAAW;EACX,kBAAkB;EAClB,YAAY;EACZ,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,yBAAyB;EACzB,cAAc;EACd,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;EACf,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE;IACE,kBAAkB;EACpB;EACA;IACE,eAAe;EACjB;AACF","sourcesContent":[".popup-modal {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: none;\\n  z-index: 15;\\n  justify-content: center;\\n  align-items: center;\\n  background: rgba(28, 28, 28, 0.4);\\n}\\n\\n.modal-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n  padding: 16px;\\n  border-radius: 8px;\\n  justify-content: center;\\n  align-items: center;\\n  max-width: 328px;\\n  background: #fff;\\n}\\n\\n.modal-heading {\\n  font-size: 18px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n  color: #242b38;\\n  text-align: center;\\n}\\n\\n.modal-separator {\\n  border: 1px solid rgba(28, 28, 28, 0.1);\\n  width: 100%;\\n}\\n\\n.modal-actions-container {\\n  display: flex;\\n  justify-content: center;\\n  gap: 16px;\\n}\\n\\n.modal-positive-action {\\n  min-width: 104px;\\n  padding: 10px 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 6px;\\n  background: linear-gradient(168deg, #e65f6e 0.66%, #da0e64 59.95%);\\n  color: #fff;\\n  border-radius: 8px;\\n  border: none;\\n  cursor: pointer;\\n  font-weight: 600;\\n}\\n\\n.modal-negative-action {\\n  min-width: 104px;\\n  padding: 10px 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 6px;\\n  border: 1px solid #da0e64;\\n  color: #e65e97;\\n  background: #fff;\\n  border-radius: 8px;\\n  cursor: pointer;\\n  background: rgba(218, 14, 100, 0.04);\\n  font-weight: 600;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .modal-container {\\n    width: min-content;\\n  }\\n  .modal-heading {\\n    font-size: 16px;\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4790\n')},6009:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".setting-options {\\n  visibility: hidden;\\n  z-index: 4;\\n  position: absolute;\\n  right: 12px;\\n  bottom: 36px;\\n}\\n.settingOptions-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  transform: translateX(0%);\\n  transition: 0.3s ease;\\n}\\n.hide-settingOptions .settingOptions-container {\\n  transform: translateX(1000px);\\n}\\n\\n.settingOptions-icon-container {\\n  box-sizing: border-box;\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 50%;\\n  display: flex;\\n  padding: 4px;\\n  justify-content: center;\\n  border: 1px solid transparent;\\n  backdrop-filter: blur(25px);\\n  background: rgba(16, 17, 18, 0.1);\\n  cursor: pointer;\\n}\\n\\n.settingOptions-icon-wrapper {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n}\\n\\n.settingOptions-icon-disabled {\\n  opacity: 0.5;\\n  pointer-events: none;\\n  touch-action: none;\\n}\\n\\n.settingOptions-custom-icon-wrapper {\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid white;\\n  padding: 4px;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n}\\n\\n.settingOptions-custom-icon {\\n  width: 100%;\\n  height: 100%;\\n  border-radius: 50%;\\n  background: white;\\n}\\n.settingOptions-icon-selected {\\n  border: 1px solid white;\\n}\\n.settingOptions-icon-selected .settingOptions-icon-wrapper {\\n  background: white;\\n}\\n\\n.hide-setting-icon {\\n  display: none;\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/settingOptions.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,YAAY;AACd;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,yBAAyB;EACzB,qBAAqB;AACvB;AACA;EACE,6BAA6B;AAC/B;;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,6BAA6B;EAC7B,2BAA2B;EAC3B,iCAAiC;EACjC,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf","sourcesContent":[".setting-options {\\n  visibility: hidden;\\n  z-index: 4;\\n  position: absolute;\\n  right: 12px;\\n  bottom: 36px;\\n}\\n.settingOptions-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  transform: translateX(0%);\\n  transition: 0.3s ease;\\n}\\n.hide-settingOptions .settingOptions-container {\\n  transform: translateX(1000px);\\n}\\n\\n.settingOptions-icon-container {\\n  box-sizing: border-box;\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 50%;\\n  display: flex;\\n  padding: 4px;\\n  justify-content: center;\\n  border: 1px solid transparent;\\n  backdrop-filter: blur(25px);\\n  background: rgba(16, 17, 18, 0.1);\\n  cursor: pointer;\\n}\\n\\n.settingOptions-icon-wrapper {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n}\\n\\n.settingOptions-icon-disabled {\\n  opacity: 0.5;\\n  pointer-events: none;\\n  touch-action: none;\\n}\\n\\n.settingOptions-custom-icon-wrapper {\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid white;\\n  padding: 4px;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n}\\n\\n.settingOptions-custom-icon {\\n  width: 100%;\\n  height: 100%;\\n  border-radius: 50%;\\n  background: white;\\n}\\n.settingOptions-icon-selected {\\n  border: 1px solid white;\\n}\\n.settingOptions-icon-selected .settingOptions-icon-wrapper {\\n  background: white;\\n}\\n\\n.hide-setting-icon {\\n  display: none;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAwOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLDREQUE0RCx1QkFBdUIsZUFBZSx1QkFBdUIsZ0JBQWdCLGlCQUFpQixHQUFHLDZCQUE2QixrQkFBa0IsMkJBQTJCLGFBQWEsOEJBQThCLDBCQUEwQixHQUFHLGtEQUFrRCxrQ0FBa0MsR0FBRyxvQ0FBb0MsMkJBQTJCLGdCQUFnQixpQkFBaUIsdUJBQXVCLGtCQUFrQixpQkFBaUIsNEJBQTRCLGtDQUFrQyxnQ0FBZ0Msc0NBQXNDLG9CQUFvQixHQUFHLGtDQUFrQyxnQkFBZ0IsaUJBQWlCLGtCQUFrQiw0QkFBNEIsd0JBQXdCLHVCQUF1QiwyQkFBMkIsR0FBRyxtQ0FBbUMsaUJBQWlCLHlCQUF5Qix1QkFBdUIsR0FBRyx5Q0FBeUMsZ0JBQWdCLGlCQUFpQiw0QkFBNEIsaUJBQWlCLHVCQUF1QiwyQkFBMkIsR0FBRyxpQ0FBaUMsZ0JBQWdCLGlCQUFpQix1QkFBdUIsc0JBQXNCLEdBQUcsaUNBQWlDLDRCQUE0QixHQUFHLDhEQUE4RCxzQkFBc0IsR0FBRyx3QkFBd0Isa0JBQWtCLEdBQUcsU0FBUyw0R0FBNEcsWUFBWSxXQUFXLFlBQVksV0FBVyxVQUFVLEtBQUssS0FBSyxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsV0FBVyxPQUFPLEtBQUssVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsYUFBYSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxZQUFZLFdBQVcsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLDJDQUEyQyx1QkFBdUIsZUFBZSx1QkFBdUIsZ0JBQWdCLGlCQUFpQixHQUFHLDZCQUE2QixrQkFBa0IsMkJBQTJCLGFBQWEsOEJBQThCLDBCQUEwQixHQUFHLGtEQUFrRCxrQ0FBa0MsR0FBRyxvQ0FBb0MsMkJBQTJCLGdCQUFnQixpQkFBaUIsdUJBQXVCLGtCQUFrQixpQkFBaUIsNEJBQTRCLGtDQUFrQyxnQ0FBZ0Msc0NBQXNDLG9CQUFvQixHQUFHLGtDQUFrQyxnQkFBZ0IsaUJBQWlCLGtCQUFrQiw0QkFBNEIsd0JBQXdCLHVCQUF1QiwyQkFBMkIsR0FBRyxtQ0FBbUMsaUJBQWlCLHlCQUF5Qix1QkFBdUIsR0FBRyx5Q0FBeUMsZ0JBQWdCLGlCQUFpQiw0QkFBNEIsaUJBQWlCLHVCQUF1QiwyQkFBMkIsR0FBRyxpQ0FBaUMsZ0JBQWdCLGlCQUFpQix1QkFBdUIsc0JBQXNCLEdBQUcsaUNBQWlDLDRCQUE0QixHQUFHLDhEQUE4RCxzQkFBc0IsR0FBRyx3QkFBd0Isa0JBQWtCLEdBQUcscUJBQXFCO0FBQ3JuSDtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWVkaWFwaXBlLWZhY2VtZXNoLWVmZmVjdHMvLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL3NldHRpbmdPcHRpb25zLmNzcz9jZTZjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLnNldHRpbmctb3B0aW9ucyB7XFxuICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICB6LWluZGV4OiA0O1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgcmlnaHQ6IDEycHg7XFxuICBib3R0b206IDM2cHg7XFxufVxcbi5zZXR0aW5nT3B0aW9ucy1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDhweDtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgwJSk7XFxuICB0cmFuc2l0aW9uOiAwLjNzIGVhc2U7XFxufVxcbi5oaWRlLXNldHRpbmdPcHRpb25zIC5zZXR0aW5nT3B0aW9ucy1jb250YWluZXIge1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDEwMDBweCk7XFxufVxcblxcbi5zZXR0aW5nT3B0aW9ucy1pY29uLWNvbnRhaW5lciB7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgcGFkZGluZzogNHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMTYsIDE3LCAxOCwgMC4xKTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnNldHRpbmdPcHRpb25zLWljb24td3JhcHBlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uc2V0dGluZ09wdGlvbnMtaWNvbi1kaXNhYmxlZCB7XFxuICBvcGFjaXR5OiAwLjU7XFxuICBwb2ludGVyLWV2ZW50czogbm9uZTtcXG4gIHRvdWNoLWFjdGlvbjogbm9uZTtcXG59XFxuXFxuLnNldHRpbmdPcHRpb25zLWN1c3RvbS1pY29uLXdyYXBwZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5zZXR0aW5nT3B0aW9ucy1jdXN0b20taWNvbiB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbn1cXG4uc2V0dGluZ09wdGlvbnMtaWNvbi1zZWxlY3RlZCB7XFxuICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcXG59XFxuLnNldHRpbmdPcHRpb25zLWljb24tc2VsZWN0ZWQgLnNldHRpbmdPcHRpb25zLWljb24td3JhcHBlciB7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG59XFxuXFxuLmhpZGUtc2V0dGluZy1pY29uIHtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvc2V0dGluZ09wdGlvbnMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixrQkFBa0I7RUFDbEIsV0FBVztFQUNYLFlBQVk7QUFDZDtBQUNBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixRQUFRO0VBQ1IseUJBQXlCO0VBQ3pCLHFCQUFxQjtBQUN2QjtBQUNBO0VBQ0UsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLFdBQVc7RUFDWCxZQUFZO0VBQ1osa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYixZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLDZCQUE2QjtFQUM3QiwyQkFBMkI7RUFDM0IsaUNBQWlDO0VBQ2pDLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxZQUFZO0VBQ1osb0JBQW9CO0VBQ3BCLGtCQUFrQjtBQUNwQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsaUJBQWlCO0FBQ25CO0FBQ0E7RUFDRSx1QkFBdUI7QUFDekI7QUFDQTtFQUNFLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLGFBQWE7QUFDZlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc2V0dGluZy1vcHRpb25zIHtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIHotaW5kZXg6IDQ7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTJweDtcXG4gIGJvdHRvbTogMzZweDtcXG59XFxuLnNldHRpbmdPcHRpb25zLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGdhcDogOHB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDAlKTtcXG4gIHRyYW5zaXRpb246IDAuM3MgZWFzZTtcXG59XFxuLmhpZGUtc2V0dGluZ09wdGlvbnMgLnNldHRpbmdPcHRpb25zLWNvbnRhaW5lciB7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTAwMHB4KTtcXG59XFxuXFxuLnNldHRpbmdPcHRpb25zLWljb24tY29udGFpbmVyIHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDI1cHgpO1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjEpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uc2V0dGluZ09wdGlvbnMtaWNvbi13cmFwcGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcblxcbi5zZXR0aW5nT3B0aW9ucy1pY29uLWRpc2FibGVkIHtcXG4gIG9wYWNpdHk6IDAuNTtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbiAgdG91Y2gtYWN0aW9uOiBub25lO1xcbn1cXG5cXG4uc2V0dGluZ09wdGlvbnMtY3VzdG9tLWljb24td3JhcHBlciB7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xcbiAgcGFkZGluZzogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLnNldHRpbmdPcHRpb25zLWN1c3RvbS1pY29uIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxufVxcbi5zZXR0aW5nT3B0aW9ucy1pY29uLXNlbGVjdGVkIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlO1xcbn1cXG4uc2V0dGluZ09wdGlvbnMtaWNvbi1zZWxlY3RlZCAuc2V0dGluZ09wdGlvbnMtaWNvbi13cmFwcGVyIHtcXG4gIGJhY2tncm91bmQ6IHdoaXRlO1xcbn1cXG5cXG4uaGlkZS1zZXR0aW5nLWljb24ge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6009\n')},3412:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".status-pill {\\n  position: absolute;\\n  top: 64px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 8px;\\n  width: 100%;\\n  z-index: 5;\\n}\\n\\n.pill-container {\\n  width: 125px;\\n  padding: 4px 12px;\\n  backdrop-filter: blur(16px);\\n  background: rgba(0, 0, 0, 0.4);\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 8px;\\n  transition: background-color 200ms linear;\\n}\\n\\n.pill-text {\\n  font-size: 12px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: normal;\\n  letter-spacing: 0.12px;\\n  color: #fff;\\n}\\n\\n.pill-status-text {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n", "",{"version":3,"sources":["webpack://./src/htmlService/styles/statusPill.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,2BAA2B;EAC3B,8BAA8B;EAC9B,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,kBAAkB;EAClB,yCAAyC;AAC3C;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB","sourcesContent":[".status-pill {\\n  position: absolute;\\n  top: 64px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 8px;\\n  width: 100%;\\n  z-index: 5;\\n}\\n\\n.pill-container {\\n  width: 125px;\\n  padding: 4px 12px;\\n  backdrop-filter: blur(16px);\\n  background: rgba(0, 0, 0, 0.4);\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 8px;\\n  transition: background-color 200ms linear;\\n}\\n\\n.pill-text {\\n  font-size: 12px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: normal;\\n  letter-spacing: 0.12px;\\n  color: #fff;\\n}\\n\\n.pill-status-text {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQxMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHdEQUF3RCx1QkFBdUIsY0FBYyxrQkFBa0IsNEJBQTRCLHdCQUF3QixhQUFhLGdCQUFnQixlQUFlLEdBQUcscUJBQXFCLGlCQUFpQixzQkFBc0IsZ0NBQWdDLG1DQUFtQyxrQkFBa0IsMkJBQTJCLDRCQUE0Qix3QkFBd0IsYUFBYSx1QkFBdUIsOENBQThDLEdBQUcsZ0JBQWdCLG9CQUFvQix1QkFBdUIscUJBQXFCLHdCQUF3QiwyQkFBMkIsZ0JBQWdCLEdBQUcsdUJBQXVCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQixHQUFHLFNBQVMsd0dBQXdHLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxXQUFXLFVBQVUsVUFBVSxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSxXQUFXLFlBQVksYUFBYSxhQUFhLFdBQVcsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsV0FBVyxNQUFNLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSx3Q0FBd0MsdUJBQXVCLGNBQWMsa0JBQWtCLDRCQUE0Qix3QkFBd0IsYUFBYSxnQkFBZ0IsZUFBZSxHQUFHLHFCQUFxQixpQkFBaUIsc0JBQXNCLGdDQUFnQyxtQ0FBbUMsa0JBQWtCLDJCQUEyQiw0QkFBNEIsd0JBQXdCLGFBQWEsdUJBQXVCLDhDQUE4QyxHQUFHLGdCQUFnQixvQkFBb0IsdUJBQXVCLHFCQUFxQix3QkFBd0IsMkJBQTJCLGdCQUFnQixHQUFHLHVCQUF1QixvQkFBb0IsdUJBQXVCLHFCQUFxQixzQkFBc0IsR0FBRyxxQkFBcUI7QUFDeGdFO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZWRpYXBpcGUtZmFjZW1lc2gtZWZmZWN0cy8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvc3RhdHVzUGlsbC5jc3M/MTI2MCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5zdGF0dXMtcGlsbCB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDY0cHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiA4cHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIHotaW5kZXg6IDU7XFxufVxcblxcbi5waWxsLWNvbnRhaW5lciB7XFxuICB3aWR0aDogMTI1cHg7XFxuICBwYWRkaW5nOiA0cHggMTJweDtcXG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigxNnB4KTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDIwMG1zIGxpbmVhcjtcXG59XFxuXFxuLnBpbGwtdGV4dCB7XFxuICBmb250LXNpemU6IDEycHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcXG4gIGxldHRlci1zcGFjaW5nOiAwLjEycHg7XFxuICBjb2xvcjogI2ZmZjtcXG59XFxuXFxuLnBpbGwtc3RhdHVzLXRleHQge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxNDAlO1xcbn1cXG5cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL3N0YXR1c1BpbGwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxhQUFhO0VBQ2IsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixRQUFRO0VBQ1IsV0FBVztFQUNYLFVBQVU7QUFDWjs7QUFFQTtFQUNFLFlBQVk7RUFDWixpQkFBaUI7RUFDakIsMkJBQTJCO0VBQzNCLDhCQUE4QjtFQUM5QixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsUUFBUTtFQUNSLGtCQUFrQjtFQUNsQix5Q0FBeUM7QUFDM0M7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsc0JBQXNCO0VBQ3RCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuc3RhdHVzLXBpbGwge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgdG9wOiA2NHB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogOHB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbn1cXG5cXG4ucGlsbC1jb250YWluZXIge1xcbiAgd2lkdGg6IDEyNXB4O1xcbiAgcGFkZGluZzogNHB4IDEycHg7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTZweCk7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDAsIDAsIDAuNCk7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogNHB4O1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAyMDBtcyBsaW5lYXI7XFxufVxcblxcbi5waWxsLXRleHQge1xcbiAgZm9udC1zaXplOiAxMnB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XFxuICBsZXR0ZXItc3BhY2luZzogMC4xMnB4O1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5waWxsLXN0YXR1cy10ZXh0IHtcXG4gIGZvbnQtc2l6ZTogMTRweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBsaW5lLWhlaWdodDogMTQwJTtcXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3412\n')},477:()=>{},2634:()=>{}}]);