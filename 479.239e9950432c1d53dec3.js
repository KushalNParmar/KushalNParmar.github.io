(self.webpackChunkglamar_sdk=self.webpackChunkglamar_sdk||[]).push([[479],{6396:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   sign: () => (/* binding */ sign)\n/* harmony export */ });\n\n\nconst url = __webpack_require__(8835);\nconst querystring = __webpack_require__(7186);\nconst sha256 = __webpack_require__(3009);\nconst hmacSHA256 = __webpack_require__(3793);\nfunction hmac(key, string, encoding) {\n  return hmacSHA256(string, key).toString();\n}\nfunction hash(string, encoding) {\n  return sha256(string).toString();\n}\n\n// This function assumes the string has already been percent encoded\nfunction encodeRfc3986(urlEncodedString) {\n  return urlEncodedString.replace(/[!\'()*]/g, function (c) {\n    return "%" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\nfunction encodeRfc3986Full(str) {\n  return str;\n  // return encodeRfc3986(encodeURIComponent(str));\n}\nconst HEADERS_TO_IGNORE = {\n  authorization: true,\n  connection: true,\n  "x-amzn-trace-id": true,\n  "user-agent": true,\n  expect: true,\n  "presigned-expires": true,\n  range: true\n};\nconst HEADERS_TO_INCLUDE = ["x-ebg-.*", "host"];\n\n// request: { path | body, [host], [method], [headers], [service], [region] }\nclass RequestSigner {\n  constructor(request) {\n    if (typeof request === "string") {\n      request = url.parse(request);\n    }\n    let headers = request.headers = request.headers || {};\n    this.request = request;\n    if (!request.method && request.body) {\n      request.method = "POST";\n    }\n    if (!headers.Host && !headers.host) {\n      headers.Host = request.hostname || request.host;\n\n      // If a port is specified explicitly, use it as is\n      if (request.port) {\n        headers.Host += ":" + request.port;\n      }\n    }\n    if (!request.hostname && !request.host) {\n      request.hostname = headers.Host || headers.host;\n    }\n  }\n  prepareRequest() {\n    this.parsePath();\n    let request = this.request;\n    let headers = request.headers;\n    let query;\n    if (request.signQuery) {\n      this.parsedPath.query = query = this.parsedPath.query || {};\n      if (query["x-ebg-param"]) {\n        this.datetime = query["x-ebg-param"];\n      } else {\n        query["x-ebg-param"] = this.getDateTime();\n      }\n    } else {\n      if (!request.doNotModifyHeaders) {\n        if (headers["x-ebg-param"]) {\n          this.datetime = headers["x-ebg-param"] || headers["x-ebg-param"];\n        } else {\n          headers["x-ebg-param"] = this.getDateTime();\n        }\n      }\n      delete headers["x-ebg-signature"];\n      delete headers["X-Ebg-Signature"];\n    }\n  }\n  sign() {\n    if (!this.parsedPath) {\n      this.prepareRequest();\n    }\n    if (this.request.signQuery) {\n      this.parsedPath.query["x-ebg-signature"] = this.signature();\n    } else {\n      this.request.headers["x-ebg-signature"] = this.signature();\n    }\n    this.request.path = this.formatPath();\n    return this.request;\n  }\n  getDateTime() {\n    if (!this.datetime) {\n      let headers = this.request.headers;\n      let date = new Date(headers.Date || headers.date || new Date());\n      this.datetime = date.toISOString().replace(/[:\\-]|\\.\\d{3}/g, "");\n    }\n    return this.datetime;\n  }\n  getDate() {\n    return this.getDateTime().substr(0, 8);\n  }\n  signature() {\n    let kCredentials = "1234567";\n    let strTosign = this.stringToSign();\n    return `v1:${hmac(kCredentials, strTosign, "hex")}`;\n  }\n  stringToSign() {\n    return [this.getDateTime(), hash(this.canonicalString(), "hex")].join("\\n");\n  }\n  canonicalString() {\n    if (!this.parsedPath) {\n      this.prepareRequest();\n    }\n    let pathStr = this.parsedPath.path;\n    let query = this.parsedPath.query;\n    let headers = this.request.headers;\n    let queryStr = "";\n    let normalizePath = true;\n    let decodePath = this.request.doNotEncodePath;\n    let decodeSlashesInPath = false;\n    let firstValOnly = false;\n    let bodyHash = hash(this.request.body || "", "hex");\n    if (query) {\n      let reducedQuery = Object.keys(query).reduce(function (obj, key) {\n        if (!key) {\n          return obj;\n        }\n        obj[encodeRfc3986Full(key)] = !Array.isArray(query[key]) ? query[key] : firstValOnly ? query[key][0] : query[key];\n        return obj;\n      }, {});\n      let encodedQueryPieces = [];\n      Object.keys(reducedQuery).sort().forEach(function (key) {\n        if (!Array.isArray(reducedQuery[key])) {\n          encodedQueryPieces.push(key + "=" + encodeRfc3986Full(reducedQuery[key]));\n        } else {\n          reducedQuery[key].map(encodeRfc3986Full).sort().forEach(function (val) {\n            encodedQueryPieces.push(key + "=" + val);\n          });\n        }\n      });\n      queryStr = encodedQueryPieces.join("&");\n    }\n    if (pathStr !== "/") {\n      if (normalizePath) {\n        pathStr = pathStr.replace(/\\/{2,}/g, "/");\n      }\n      pathStr = pathStr.split("/").reduce(function (path, piece) {\n        if (normalizePath && piece === "..") {\n          path.pop();\n        } else if (!normalizePath || piece !== ".") {\n          if (decodePath) piece = decodeURIComponent(piece.replace(/\\+/g, " "));\n          path.push(encodeRfc3986Full(piece));\n        }\n        return path;\n      }, []).join("/");\n      if (pathStr[0] !== "/") pathStr = "/" + pathStr;\n      if (decodeSlashesInPath) pathStr = pathStr.replace(/%2F/g, "/");\n    }\n    let canonicalReq = [this.request.method || "GET", pathStr, queryStr, this.canonicalHeaders() + "\\n", this.signedHeaders(), bodyHash].join("\\n");\n    return canonicalReq;\n  }\n  canonicalHeaders() {\n    let headers = this.request.headers;\n    function trimAll(header) {\n      return header.toString().trim().replace(/\\s+/g, " ");\n    }\n    return Object.keys(headers).filter(function (key) {\n      let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n      if (notInIgnoreHeader) {\n        let foundMatch = false;\n        for (let t in HEADERS_TO_INCLUDE) {\n          if (Object.prototype.hasOwnProperty.call(HEADERS_TO_INCLUDE, t)) {\n            foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], "ig").test(key);\n          }\n        }\n        return foundMatch;\n      } else {\n        return false;\n      }\n    }).sort(function (a, b) {\n      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;\n    }).map(function (key) {\n      return key.toLowerCase() + ":" + trimAll(headers[key]);\n    }).join("\\n");\n  }\n  signedHeaders() {\n    return Object.keys(this.request.headers).map(function (key) {\n      return key.toLowerCase();\n    }).filter(function (key) {\n      let notInIgnoreHeader = HEADERS_TO_IGNORE[key.toLowerCase()] == null;\n      if (notInIgnoreHeader) {\n        let foundMatch = false;\n        for (let t in HEADERS_TO_INCLUDE) {\n          if (Object.prototype.hasOwnProperty.call(HEADERS_TO_INCLUDE, t)) {\n            foundMatch = foundMatch || new RegExp(HEADERS_TO_INCLUDE[t], "ig").test(key);\n          }\n        }\n        return foundMatch;\n      } else {\n        return false;\n      }\n    }).sort().join(";");\n  }\n  parsePath() {\n    let path = this.request.path || "/";\n\n    // So if there are non-reserved chars (and it\'s not already all % encoded), just encode them all\n    if (/[^0-9A-Za-z;,/?:@&=+$\\-_.!~*\'()#%]/.test(path)) {\n      path = encodeURI(decodeURI(path));\n    }\n    let queryIx = path.indexOf("?");\n    let query = null;\n    if (queryIx >= 0) {\n      query = querystring.parse(path.slice(queryIx + 1));\n      path = path.slice(0, queryIx);\n    }\n    this.parsedPath = {\n      path: path,\n      query: query\n    };\n  }\n  formatPath() {\n    let path = this.parsedPath.path;\n    let query = this.parsedPath.query;\n    if (!query) {\n      return path;\n    }\n\n    // Services don\'t support empty query string keys\n    if (query[""] != null) {\n      delete query[""];\n    }\n    return path + "?" + encodeRfc3986(querystring.stringify(query));\n  }\n}\nfunction sign(request) {\n  return new RequestSigner(request).sign();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6396\n')},2159:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  lt: () => (/* binding */ CloseModule),\n  SdkEngine: () => (/* binding */ SdkEngine),\n  sm: () => (/* binding */ configSliderHandler),\n  n1: () => (/* binding */ getAnimationFrameId),\n  dT: () => (/* binding */ getComparisonState),\n  IX: () => (/* binding */ getCurrentStream),\n  IJ: () => (/* binding */ getCurrentTryon),\n  aZ: () => (/* binding */ getDebug),\n  Gv: () => (/* binding */ sdkEngine_getInputImage),\n  Nr: () => (/* binding */ getIsInitialized),\n  G7: () => (/* binding */ sdkEngine_getIsVideo),\n  Z3: () => (/* binding */ getProviders),\n  v: () => (/* binding */ getSceneManagerInstance),\n  dy: () => (/* binding */ getTrackingMode),\n  yb: () => (/* binding */ getVideo),\n  PG: () => (/* binding */ getVideoEl),\n  UV: () => (/* binding */ getuseOrtho),\n  yH: () => (/* binding */ handleApiResponse),\n  n_: () => (/* binding */ initialize),\n  sD: () => (/* binding */ loadML),\n  Oo: () => (/* binding */ onCameraFrame),\n  B3: () => (/* binding */ onClearClick),\n  p: () => (/* binding */ onHairSegment),\n  Hr: () => (/* binding */ onHandLandsmarks),\n  HM: () => (/* binding */ onImageClick),\n  Lj: () => (/* binding */ onLandmarks),\n  tV: () => (/* binding */ onShoeLandMark),\n  bv: () => (/* binding */ setAppliedSKU),\n  Qx: () => (/* binding */ setClicked),\n  rM: () => (/* binding */ setComparisonState),\n  _k: () => (/* binding */ setCurrentTryon),\n  V0: () => (/* binding */ setImageSource),\n  Kf: () => (/* binding */ setInputImage),\n  ZK: () => (/* binding */ setInputImageTexture),\n  jY: () => (/* binding */ setIsPause),\n  oW: () => (/* binding */ setIsVideo),\n  U0: () => (/* binding */ setProvider),\n  c9: () => (/* binding */ setSceneManager),\n  t3: () => (/* binding */ setTempWidth),\n  ZA: () => (/* binding */ setTrackingMode),\n  SD: () => (/* binding */ setVideo),\n  rU: () => (/* binding */ setVideoEl),\n  Pr: () => (/* binding */ timercallback),\n  hl: () => (/* binding */ sdkEngine_tryOnEventHandler)\n});\n\n// UNUSED EXPORTS: disableInitLoading, fakeInit, getAppliedSKU, getCameraPermissionState, modelsEventHandler, setVisibilityStateOfUploadInput\n\n// EXTERNAL MODULE: ./node_modules/@mediapipe/face_mesh/face_mesh.js\nvar face_mesh = __webpack_require__(2726);\n;// ./src/makeupVTOs/public_path.js\nconst PUBLIC_PATH = __webpack_require__.p.replace(/\\/$/, \'\') || \'\';\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(9437);\n;// ./src/MLModelProviders/face_geom.js\n//\n\nconst FACE_MESH_INDEX_BUFFER = [173, 155, 133, 246, 33, 7, 382, 398, 362, 263, 466, 249, 308, 415, 324, 78, 95, 191, 356, 389, 264, 127, 34, 162, 368, 264, 389, 139, 162, 34, 267, 0, 302, 37, 72, 0, 11, 302, 0, 11, 0, 72, 349, 451, 350, 120, 121, 231, 452, 350, 451, 232, 231, 121, 267, 302, 269, 37, 39, 72, 303, 269, 302, 73, 72, 39, 357, 343, 350, 128, 121, 114, 277, 350, 343, 47, 114, 121, 350, 452, 357, 121, 128, 232, 453, 357, 452, 233, 232, 128, 299, 333, 297, 69, 67, 104, 332, 297, 333, 103, 104, 67, 175, 152, 396, 175, 171, 152, 377, 396, 152, 148, 152, 171, 381, 384, 382, 154, 155, 157, 398, 382, 384, 173, 157, 155, 280, 347, 330, 50, 101, 118, 348, 330, 347, 119, 118, 101, 269, 303, 270, 39, 40, 73, 304, 270, 303, 74, 73, 40, 9, 336, 151, 9, 151, 107, 337, 151, 336, 108, 107, 151, 344, 278, 360, 115, 131, 48, 279, 360, 278, 49, 48, 131, 262, 431, 418, 32, 194, 211, 424, 418, 431, 204, 211, 194, 304, 408, 270, 74, 40, 184, 409, 270, 408, 185, 184, 40, 272, 310, 407, 42, 183, 80, 415, 407, 310, 191, 80, 183, 322, 270, 410, 92, 186, 40, 409, 410, 270, 185, 40, 186, 347, 449, 348, 118, 119, 229, 450, 348, 449, 230, 229, 119, 434, 432, 430, 214, 210, 212, 422, 430, 432, 202, 212, 210, 313, 314, 18, 83, 18, 84, 17, 18, 314, 17, 84, 18, 307, 375, 306, 77, 76, 146, 291, 306, 375, 61, 146, 76, 259, 387, 260, 29, 30, 160, 388, 260, 387, 161, 160, 30, 286, 414, 384, 56, 157, 190, 398, 384, 414, 173, 190, 157, 418, 424, 406, 194, 182, 204, 335, 406, 424, 106, 204, 182, 367, 416, 364, 138, 135, 192, 434, 364, 416, 214, 192, 135, 391, 423, 327, 165, 98, 203, 358, 327, 423, 129, 203, 98, 298, 301, 284, 68, 54, 71, 251, 284, 301, 21, 71, 54, 4, 275, 5, 4, 5, 45, 281, 5, 275, 51, 45, 5, 254, 373, 253, 24, 23, 144, 374, 253, 373, 145, 144, 23, 320, 321, 307, 90, 77, 91, 375, 307, 321, 146, 91, 77, 280, 425, 411, 50, 187, 205, 427, 411, 425, 207, 205, 187, 421, 313, 200, 201, 200, 83, 18, 200, 313, 18, 83, 200, 335, 321, 406, 106, 182, 91, 405, 406, 321, 181, 91, 182, 405, 321, 404, 181, 180, 91, 320, 404, 321, 90, 91, 180, 17, 314, 16, 17, 16, 84, 315, 16, 314, 85, 84, 16, 425, 266, 426, 205, 206, 36, 423, 426, 266, 203, 36, 206, 369, 396, 400, 140, 176, 171, 377, 400, 396, 148, 171, 176, 391, 269, 322, 165, 92, 39, 270, 322, 269, 40, 39, 92, 417, 465, 413, 193, 189, 245, 464, 413, 465, 244, 245, 189, 257, 258, 386, 27, 159, 28, 385, 386, 258, 158, 28, 159, 260, 388, 467, 30, 247, 161, 466, 467, 388, 246, 161, 247, 248, 456, 419, 3, 196, 236, 399, 419, 456, 174, 236, 196, 333, 298, 332, 104, 103, 68, 284, 332, 298, 54, 68, 103, 285, 8, 417, 55, 193, 8, 168, 417, 8, 168, 8, 193, 340, 261, 346, 111, 117, 31, 448, 346, 261, 228, 31, 117, 285, 417, 441, 55, 221, 193, 413, 441, 417, 189, 193, 221, 327, 460, 326, 98, 97, 240, 328, 326, 460, 99, 240, 97, 277, 355, 329, 47, 100, 126, 371, 329, 355, 142, 126, 100, 309, 392, 438, 79, 218, 166, 439, 438, 392, 219, 166, 218, 381, 382, 256, 154, 26, 155, 341, 256, 382, 112, 155, 26, 360, 279, 420, 131, 198, 49, 429, 420, 279, 209, 49, 198, 365, 364, 379, 136, 150, 135, 394, 379, 364, 169, 135, 150, 355, 277, 437, 126, 217, 47, 343, 437, 277, 114, 47, 217, 443, 444, 282, 223, 52, 224, 283, 282, 444, 53, 224, 52, 281, 275, 363, 51, 134, 45, 440, 363, 275, 220, 45, 134, 431, 262, 395, 211, 170, 32, 369, 395, 262, 140, 32, 170, 337, 299, 338, 108, 109, 69, 297, 338, 299, 67, 69, 109, 335, 273, 321, 106, 91, 43, 375, 321, 273, 146, 43, 91, 348, 450, 349, 119, 120, 230, 451, 349, 450, 231, 230, 120, 467, 359, 342, 247, 113, 130, 446, 342, 359, 226, 130, 113, 282, 283, 334, 52, 105, 53, 293, 334, 283, 63, 53, 105, 250, 458, 462, 20, 242, 238, 461, 462, 458, 241, 238, 242, 276, 353, 300, 46, 70, 124, 383, 300, 353, 156, 124, 70, 325, 292, 324, 96, 95, 62, 308, 324, 292, 78, 62, 95, 283, 276, 293, 53, 63, 46, 300, 293, 276, 70, 46, 63, 447, 264, 345, 227, 116, 34, 372, 345, 264, 143, 34, 116, 352, 345, 346, 123, 117, 116, 340, 346, 345, 111, 116, 117, 1, 19, 274, 1, 44, 19, 354, 274, 19, 125, 19, 44, 248, 281, 456, 3, 236, 51, 363, 456, 281, 134, 51, 236, 425, 426, 427, 205, 207, 206, 436, 427, 426, 216, 206, 207, 380, 381, 252, 153, 22, 154, 256, 252, 381, 26, 154, 22, 391, 393, 269, 165, 39, 167, 267, 269, 393, 37, 167, 39, 199, 428, 200, 199, 200, 208, 421, 200, 428, 201, 208, 200, 330, 329, 266, 101, 36, 100, 371, 266, 329, 142, 100, 36, 422, 432, 273, 202, 43, 212, 287, 273, 432, 57, 212, 43, 290, 250, 328, 60, 99, 20, 462, 328, 250, 242, 20, 99, 258, 286, 385, 28, 158, 56, 384, 385, 286, 157, 56, 158, 342, 446, 353, 113, 124, 226, 265, 353, 446, 35, 226, 124, 257, 386, 259, 27, 29, 159, 387, 259, 386, 160, 159, 29, 430, 422, 431, 210, 211, 202, 424, 431, 422, 204, 202, 211, 445, 342, 276, 225, 46, 113, 353, 276, 342, 124, 113, 46, 424, 422, 335, 204, 106, 202, 273, 335, 422, 43, 202, 106, 306, 292, 307, 76, 77, 62, 325, 307, 292, 96, 62, 77, 366, 447, 352, 137, 123, 227, 345, 352, 447, 116, 227, 123, 302, 268, 303, 72, 73, 38, 271, 303, 268, 41, 38, 73, 371, 358, 266, 142, 36, 129, 423, 266, 358, 203, 129, 36, 327, 294, 460, 98, 240, 64, 455, 460, 294, 235, 64, 240, 294, 331, 278, 64, 48, 102, 279, 278, 331, 49, 102, 48, 303, 271, 304, 73, 74, 41, 272, 304, 271, 42, 41, 74, 427, 436, 434, 207, 214, 216, 432, 434, 436, 212, 216, 214, 304, 272, 408, 74, 184, 42, 407, 408, 272, 183, 42, 184, 394, 430, 395, 169, 170, 210, 431, 395, 430, 211, 210, 170, 395, 369, 378, 170, 149, 140, 400, 378, 369, 176, 140, 149, 296, 334, 299, 66, 69, 105, 333, 299, 334, 104, 105, 69, 417, 168, 351, 193, 122, 168, 6, 351, 168, 6, 168, 122, 280, 411, 352, 50, 123, 187, 376, 352, 411, 147, 187, 123, 319, 320, 325, 89, 96, 90, 307, 325, 320, 77, 90, 96, 285, 295, 336, 55, 107, 65, 296, 336, 295, 66, 65, 107, 404, 320, 403, 180, 179, 90, 319, 403, 320, 89, 90, 179, 330, 348, 329, 101, 100, 119, 349, 329, 348, 120, 119, 100, 334, 293, 333, 105, 104, 63, 298, 333, 293, 68, 63, 104, 323, 454, 366, 93, 137, 234, 447, 366, 454, 227, 234, 137, 16, 315, 15, 16, 15, 85, 316, 15, 315, 86, 85, 15, 429, 279, 358, 209, 129, 49, 331, 358, 279, 102, 49, 129, 15, 316, 14, 15, 14, 86, 317, 14, 316, 87, 86, 14, 8, 285, 9, 8, 9, 55, 336, 9, 285, 107, 55, 9, 329, 349, 277, 100, 47, 120, 350, 277, 349, 121, 120, 47, 252, 253, 380, 22, 153, 23, 374, 380, 253, 145, 23, 153, 402, 403, 318, 178, 88, 179, 319, 318, 403, 89, 179, 88, 351, 6, 419, 122, 196, 6, 197, 419, 6, 197, 6, 196, 324, 318, 325, 95, 96, 88, 319, 325, 318, 89, 88, 96, 397, 367, 365, 172, 136, 138, 364, 365, 367, 135, 138, 136, 288, 435, 397, 58, 172, 215, 367, 397, 435, 138, 215, 172, 438, 439, 344, 218, 115, 219, 278, 344, 439, 48, 219, 115, 271, 311, 272, 41, 42, 81, 310, 272, 311, 80, 81, 42, 5, 281, 195, 5, 195, 51, 248, 195, 281, 3, 51, 195, 273, 287, 375, 43, 146, 57, 291, 375, 287, 61, 57, 146, 396, 428, 175, 171, 175, 208, 199, 175, 428, 199, 208, 175, 268, 312, 271, 38, 41, 82, 311, 271, 312, 81, 82, 41, 444, 445, 283, 224, 53, 225, 276, 283, 445, 46, 225, 53, 254, 339, 373, 24, 144, 110, 390, 373, 339, 163, 110, 144, 295, 282, 296, 65, 66, 52, 334, 296, 282, 105, 52, 66, 346, 448, 347, 117, 118, 228, 449, 347, 448, 229, 228, 118, 454, 356, 447, 234, 227, 127, 264, 447, 356, 34, 127, 227, 336, 296, 337, 107, 108, 66, 299, 337, 296, 69, 66, 108, 151, 337, 10, 151, 10, 108, 338, 10, 337, 109, 108, 10, 278, 439, 294, 48, 64, 219, 455, 294, 439, 235, 219, 64, 407, 415, 292, 183, 62, 191, 308, 292, 415, 78, 191, 62, 358, 371, 429, 129, 209, 142, 355, 429, 371, 126, 142, 209, 345, 372, 340, 116, 111, 143, 265, 340, 372, 35, 143, 111, 388, 390, 466, 161, 246, 163, 249, 466, 390, 7, 163, 246, 352, 346, 280, 123, 50, 117, 347, 280, 346, 118, 117, 50, 295, 442, 282, 65, 52, 222, 443, 282, 442, 223, 222, 52, 19, 94, 354, 19, 125, 94, 370, 354, 94, 141, 94, 125, 295, 285, 442, 65, 222, 55, 441, 442, 285, 221, 55, 222, 419, 197, 248, 196, 3, 197, 195, 248, 197, 195, 197, 3, 359, 263, 255, 130, 25, 33, 249, 255, 263, 7, 33, 25, 275, 274, 440, 45, 220, 44, 457, 440, 274, 237, 44, 220, 300, 383, 301, 70, 71, 156, 368, 301, 383, 139, 156, 71, 417, 351, 465, 193, 245, 122, 412, 465, 351, 188, 122, 245, 466, 263, 467, 246, 247, 33, 359, 467, 263, 130, 33, 247, 389, 251, 368, 162, 139, 21, 301, 368, 251, 71, 21, 139, 374, 386, 380, 145, 153, 159, 385, 380, 386, 158, 159, 153, 379, 394, 378, 150, 149, 169, 395, 378, 394, 170, 169, 149, 351, 419, 412, 122, 188, 196, 399, 412, 419, 174, 196, 188, 426, 322, 436, 206, 216, 92, 410, 436, 322, 186, 92, 216, 387, 373, 388, 160, 161, 144, 390, 388, 373, 163, 144, 161, 393, 326, 164, 167, 164, 97, 2, 164, 326, 2, 97, 164, 354, 370, 461, 125, 241, 141, 462, 461, 370, 242, 141, 241, 0, 267, 164, 0, 164, 37, 393, 164, 267, 167, 37, 164, 11, 12, 302, 11, 72, 12, 268, 302, 12, 38, 12, 72, 386, 374, 387, 159, 160, 145, 373, 387, 374, 144, 145, 160, 12, 13, 268, 12, 38, 13, 312, 268, 13, 82, 13, 38, 293, 300, 298, 63, 68, 70, 301, 298, 300, 71, 70, 68, 340, 265, 261, 111, 31, 35, 446, 261, 265, 226, 35, 31, 380, 385, 381, 153, 154, 158, 384, 381, 385, 157, 158, 154, 280, 330, 425, 50, 205, 101, 266, 425, 330, 36, 101, 205, 423, 391, 426, 203, 206, 165, 322, 426, 391, 92, 165, 206, 429, 355, 420, 209, 198, 126, 437, 420, 355, 217, 126, 198, 391, 327, 393, 165, 167, 98, 326, 393, 327, 97, 98, 167, 457, 438, 440, 237, 220, 218, 344, 440, 438, 115, 218, 220, 382, 362, 341, 155, 112, 133, 463, 341, 362, 243, 133, 112, 457, 461, 459, 237, 239, 241, 458, 459, 461, 238, 241, 239, 434, 430, 364, 214, 135, 210, 394, 364, 430, 169, 210, 135, 414, 463, 398, 190, 173, 243, 362, 398, 463, 133, 243, 173, 262, 428, 369, 32, 140, 208, 396, 369, 428, 171, 208, 140, 457, 274, 461, 237, 241, 44, 354, 461, 274, 125, 44, 241, 316, 403, 317, 86, 87, 179, 402, 317, 403, 178, 179, 87, 315, 404, 316, 85, 86, 180, 403, 316, 404, 179, 180, 86, 314, 405, 315, 84, 85, 181, 404, 315, 405, 180, 181, 85, 313, 406, 314, 83, 84, 182, 405, 314, 406, 181, 182, 84, 418, 406, 421, 194, 201, 182, 313, 421, 406, 83, 182, 201, 366, 401, 323, 137, 93, 177, 361, 323, 401, 132, 177, 93, 408, 407, 306, 184, 76, 183, 292, 306, 407, 62, 183, 76, 408, 306, 409, 184, 185, 76, 291, 409, 306, 61, 76, 185, 410, 409, 287, 186, 57, 185, 291, 287, 409, 61, 185, 57, 436, 410, 432, 216, 212, 186, 287, 432, 410, 57, 186, 212, 434, 416, 427, 214, 207, 192, 411, 427, 416, 187, 192, 207, 264, 368, 372, 34, 143, 139, 383, 372, 368, 156, 139, 143, 457, 459, 438, 237, 218, 239, 309, 438, 459, 79, 239, 218, 352, 376, 366, 123, 137, 147, 401, 366, 376, 177, 147, 137, 4, 1, 275, 4, 45, 1, 274, 275, 1, 44, 1, 45, 428, 262, 421, 208, 201, 32, 418, 421, 262, 194, 32, 201, 327, 358, 294, 98, 64, 129, 331, 294, 358, 102, 129, 64, 367, 435, 416, 138, 192, 215, 433, 416, 435, 213, 215, 192, 455, 439, 289, 235, 59, 219, 392, 289, 439, 166, 219, 59, 328, 462, 326, 99, 97, 242, 370, 326, 462, 141, 242, 97, 326, 370, 2, 97, 2, 141, 94, 2, 370, 94, 141, 2, 460, 455, 305, 240, 75, 235, 289, 305, 455, 59, 235, 75, 448, 339, 449, 228, 229, 110, 254, 449, 339, 24, 110, 229, 261, 446, 255, 31, 25, 226, 359, 255, 446, 130, 226, 25, 449, 254, 450, 229, 230, 24, 253, 450, 254, 23, 24, 230, 450, 253, 451, 230, 231, 23, 252, 451, 253, 22, 23, 231, 451, 252, 452, 231, 232, 22, 256, 452, 252, 26, 22, 232, 256, 341, 452, 26, 232, 112, 453, 452, 341, 233, 112, 232, 413, 464, 414, 189, 190, 244, 463, 414, 464, 243, 244, 190, 441, 413, 286, 221, 56, 189, 414, 286, 413, 190, 189, 56, 441, 286, 442, 221, 222, 56, 258, 442, 286, 28, 56, 222, 442, 258, 443, 222, 223, 28, 257, 443, 258, 27, 28, 223, 444, 443, 259, 224, 29, 223, 257, 259, 443, 27, 223, 29, 259, 260, 444, 29, 224, 30, 445, 444, 260, 225, 30, 224, 260, 467, 445, 30, 225, 247, 342, 445, 467, 113, 247, 225, 250, 309, 458, 20, 238, 79, 459, 458, 309, 239, 79, 238, 290, 305, 392, 60, 166, 75, 289, 392, 305, 59, 75, 166, 460, 305, 328, 240, 99, 75, 290, 328, 305, 60, 75, 99, 376, 433, 401, 147, 177, 213, 435, 401, 433, 215, 213, 177, 250, 290, 309, 20, 79, 60, 392, 309, 290, 166, 60, 79, 411, 416, 376, 187, 147, 192, 433, 376, 416, 213, 192, 147, 341, 463, 453, 112, 233, 243, 464, 453, 463, 244, 243, 233, 453, 464, 357, 233, 128, 244, 465, 357, 464, 245, 244, 128, 412, 343, 465, 188, 245, 114, 357, 465, 343, 128, 114, 245, 437, 343, 399, 217, 174, 114, 412, 399, 343, 188, 114, 174, 363, 440, 360, 134, 131, 220, 344, 360, 440, 115, 220, 131, 456, 420, 399, 236, 174, 198, 437, 399, 420, 217, 198, 174, 456, 363, 420, 236, 198, 134, 360, 420, 363, 131, 134, 198, 361, 401, 288, 132, 58, 177, 435, 288, 401, 215, 177, 58, 353, 265, 383, 124, 156, 35, 372, 383, 265, 143, 35, 156, 255, 249, 339, 25, 110, 7, 390, 339, 249, 163, 7, 110, 261, 255, 448, 31, 228, 25, 339, 448, 255, 110, 25, 228,\n//Lips--\n14, 317, 13, 14, 13, 87, 312, 13, 317, 82, 87, 13, 317, 402, 312, 87, 82, 178, 311, 312, 402, 81, 178, 82, 402, 318, 311, 178, 81, 88, 310, 311, 318, 80, 88, 81, 318, 324, 310, 88, 80, 95,\n//------\n415, 310, 324, 191, 95, 80];\nconst FACE_MESH_INDEX_test = (/* unused pure expression or super */ null && ([246, 33, 7, 7, 163, 246, 161, 246, 163, 163, 144, 161, 160, 161, 144, 144, 145, 160, 159, 160, 145, 145, 153, 159, 158, 159, 153, 153, 154, 158, 157, 158, 154, 154, 155, 157, 173, 157, 155, 155, 133, 173]));\nconst FACE_MESH_INDEX_test1 = (/* unused pure expression or super */ null && ([15, 1, 0, 0, 13, 15, 12, 15, 13, 13, 3, 12, 11, 12, 3, 3, 4, 11, 10, 11, 4, 4, 5, 10, 9, 10, 5, 5, 6, 9, 8, 9, 6, 6, 7, 8, 14, 8, 7, 7, 2, 14]));\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nconst FACE_MESH_UV = [[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.274657994508743, 0.389131009578705],\n//[-0.005, +0.003],\n[0.393361985683441, 0.403706014156342], [0.345234006643295, 0.344011008739471],\n//[+0.001, -0.024],\n[0.370094001293182, 0.346076011657715],\n//[+0.008, -0.021],\n[0.319321990013123, 0.347265005111694],\n//[0.319321990013123, 0.325265005111694],\n[0.297903001308441, 0.353591024875641],\n//[+0.012, -0.015],\n[0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.257764995098114, 0.314490020275116],\n//[-0.01, -0.03],\n[0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.33721199631691, 0.282882988452911],\n//[-0.012, -0.022],\n[0.296391993761063, 0.293242990970612],\n//[-0.056, -0.004],\n[0.169294998049736, 0.193813979625702], [0.447580009698868, 0.302609980106354],\n//[+0.01, -0.02],\n[0.392390012741089, 0.353887975215912],\n//[0.405390012741089, 0.338887975215912],\n[0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.385919004678726, 0.281364023685455],\n//[-0.01, -0.01],\n[0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.288955003023148, 0.398952007293701],\n//[-0.008, +0.002],\n[0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.257135003805161, 0.355440020561218],\n//[0, -0.013],\n[0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.348950982093811],\n//[0, -0.01],\n[0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.266469985246658, 0.376977026462555],\n//[0, -0.003]\n[0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.43639200925827, 0.359887003898621],\n//[+0.02, 0],\n[0.416164010763168, 0.368713974952698],\n//[+0.007, -0.008],\n[0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.414712011814117, 0.335219979286194],\n//[+0.015, -0.01],\n[0.37704598903656, 0.322777986526489],\n//[0, -0.01],\n[0.344107985496521, 0.320150971412659],\n//[+0.006, -0.013],\n[0.312875986099243, 0.32233202457428],\n//[-0.02, -0.022],\n[0.283526003360748, 0.333190023899078],\n//[-0.003, -0.023],\n[0.241245999932289, 0.382785975933075], [0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.42645001411438, 0.389798998832703], [0.438998997211456, 0.39649498462677], [0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.276670008897781, 0.363372981548309],\n//[+0.001, -0.013],\n[0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.725341975688934, 0.389131009578705], [0.606630027294159, 0.40370500087738], [0.654766023159027, 0.344011008739471], [0.629905998706818, 0.346076011657715], [0.680678009986877, 0.347265005111694], [0.702096998691559, 0.353591024875641], [0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.742246985435486, 0.314507007598877], [0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.662801027297974, 0.282917976379395], [0.70362401008606, 0.293271005153656], [0.830704987049103, 0.193813979625702], [0.552385985851288, 0.302568018436432], [0.607609987258911, 0.353887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.614082992076874, 0.281386971473694], [0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.711045026779175, 0.398952007293701], [0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.355445981025696], [0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.348959028720856], [0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.376977026462555], [0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.563543975353241, 0.359827995300293], [0.583841025829315, 0.368713974952698], [0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.585271000862122, 0.335177004337311], [0.622952997684479, 0.32277899980545], [0.655896008014679, 0.320163011550903], [0.687132000923157, 0.322345972061157], [0.716481983661652, 0.333200991153717], [0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.573594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.723330020904541, 0.363372981548309]];\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nconst FACE_MESH_UV_Eyelid = [[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.269657994508743, 0.392131009578705], [0.393361985683441, 0.403706014156342], [0.346234006643295, 0.320011008739471], [0.378094001293182, 0.325076011657715], [0.319321990013123, 0.325265005111694], [0.285903001308441, 0.338591024875641], [0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.247764995098114, 0.284490020275116], [0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.32521199631691, 0.260882988452911], [0.240391993761063, 0.289242990970612], [0.169294998049736, 0.193813979625702], [0.457580009698868, 0.292609980106354], [0.405390012741089, 0.338887975215912], [0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.375919004678726, 0.271364023685455], [0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.280955003023148, 0.400952007293701], [0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.257135003805161, 0.342440020561218], [0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.338950982093811], [0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.266469985246658, 0.373977026462555], [0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.45639200925827, 0.359887003898621], [0.423164010763168, 0.360713974952698], [0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.429712011814117, 0.325219979286194], [0.37704598903656, 0.312777986526489], [0.350107985496521, 0.307150971412659], [0.292875986099243, 0.30033202457428], [0.280526003360748, 0.310190023899078], [0.241245999932289, 0.385785975933075], [0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.43045001411438, 0.389798998832703], [0.438998997211456, 0.39649498462677], [0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.275670008897781, 0.350372981548309], [0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.730341975688934, 0.392131009578705],\n//[-0.005, +0.003],\n[0.606630027294159, 0.40370500087738], [0.653766023159027, 0.320011008739471],\n//[-0.001, -0.024],\n[0.621905998706818, 0.325076011657715],\n//[-0.008, -0.021],\n[0.680678009986877, 0.325265005111694], [0.714096998691559, 0.338591024875641],\n//[+0.012, -0.015],\n[0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.752246985435486, 0.284507007598877],\n//[-0.01, -0.03],\n[0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.674801027297974, 0.260917976379395],\n//[-0.012, -0.022],\n[0.75962401008606, 0.289271005153656],\n//[-0.056, -0.004],\n[0.830704987049103, 0.193813979625702], [0.542385985851288, 0.292568018436432],\n//[+0.01, -0.02],\n[0.59409987258911, 0.338887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.624082992076874, 0.271386971473694],\n//[-0.01, -0.01],\n[0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.719045026779175, 0.400952007293701],\n//[-0.008, +0.002],\n[0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.342445981025696],\n//[0, -0.013],\n[0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.338959028720856],\n//[0, -0.01],\n[0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.373977026462555],\n//[0, -0.003]\n[0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.543543975353241, 0.359827995300293],\n//[+0.02, 0],\n[0.576841025829315, 0.360713974952698],\n//[+0.007, -0.008],\n[0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.570271000862122, 0.325177004337311],\n//[+0.015, -0.01],\n[0.622952997684479, 0.31277899980545],\n//[0, -0.01],\n[0.649896008014679, 0.308163011550903],\n//[+0.006, -0.013],\n[0.707132000923157, 0.300345972061157],\n//[-0.02, -0.022],\n[0.719481983661652, 0.310200991153717],\n//[-0.003, -0.023],\n[0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.569594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.722330020904541, 0.350372981548309] //[+0.001, -0.013],\n];\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nconst FACE_MESH_UV_EyeLash = (/* unused pure expression or super */ null && ([[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433], [0.499976992607117, 0.719385027885437], [0.499976992607117, 0.737019002437592], [0.499967992305756, 0.781370997428894], [0.499816000461578, 0.562981009483337], [0.473773002624512, 0.573909997940063], [0.104906998574734, 0.254140973091125], [0.365929991006851, 0.409575998783112], [0.338757991790771, 0.41302502155304], [0.311120003461838, 0.409460008144379], [0.269657994508743, 0.392131009578705], [0.393361985683441, 0.403706014156342], [0.343364000320435, 0.355356991291046],\n//[0.346234006643295, 0.320011008739471],\n[0.365961998701096, 0.355970978736877],\n//[0.378094001293182, 0.325076011657715],\n[0.318785011768341, 0.35834002494812],\n//[0.319321990013123, 0.325265005111694],\n[0.301414996385574, 0.363156020641327],\n//[0.285903001308441, 0.338591024875641],\n[0.24779200553894, 0.410809993743896], [0.396889001131058, 0.842755019664764], [0.280097991228104, 0.375599980354309], [0.106310002505779, 0.399955987930298], [0.2099249958992, 0.391353011131287], [0.355807989835739, 0.534406006336212], [0.471751004457474, 0.65040397644043], [0.474155008792877, 0.680191993713379], [0.439785003662109, 0.657229006290436], [0.414617002010345, 0.66654098033905], [0.450374007225037, 0.680860996246338], [0.428770989179611, 0.682690978050232], [0.374971002340317, 0.727805018424988], [0.486716985702515, 0.547628998756409], [0.485300987958908, 0.527395009994507], [0.247764995098114, 0.284490020275116], [0.401223003864288, 0.455172002315521], [0.429818987846375, 0.548614978790283], [0.421351999044418, 0.533740997314453], [0.276895999908447, 0.532056987285614], [0.483370006084442, 0.499586999416351], [0.32521199631691, 0.260882988452911], [0.240391993761063, 0.289242990970612], [0.169294998049736, 0.193813979625702], [0.457580009698868, 0.292609980106354], [0.388664990663528, 0.362284004688263],\n//[0.405390012741089, 0.338887975215912],\n[0.354490011930466, 0.696784019470215], [0.067304998636246, 0.730105042457581], [0.442739009857178, 0.572826027870178], [0.457098007202148, 0.584792017936707], [0.381974011659622, 0.694710969924927], [0.392388999462128, 0.694203019142151], [0.277076005935669, 0.271932005882263], [0.422551989555359, 0.563233017921448], [0.375919004678726, 0.271364023685455], [0.383103013038635, 0.255840003490448], [0.331431001424789, 0.119714021682739], [0.229923993349075, 0.232002973556519], [0.364500999450684, 0.189113974571228], [0.229622006416321, 0.299540996551514], [0.173287004232407, 0.278747975826263], [0.472878992557526, 0.666198015213013], [0.446828007698059, 0.668527007102966], [0.422762006521225, 0.673889994621277], [0.445307999849319, 0.580065965652466], [0.388103008270264, 0.693961024284363], [0.403039008378983, 0.706539988517761], [0.403629004955292, 0.693953037261963], [0.460041999816895, 0.557139039039612], [0.431158006191254, 0.692366003990173], [0.452181994915009, 0.692366003990173], [0.475387006998062, 0.692366003990173], [0.465828001499176, 0.779190003871918], [0.472328990697861, 0.736225962638855], [0.473087012767792, 0.717857003211975], [0.473122000694275, 0.704625964164734], [0.473033010959625, 0.695277988910675], [0.427942007780075, 0.695277988910675], [0.426479011774063, 0.703539967536926], [0.423162013292313, 0.711845993995667], [0.4183090031147, 0.720062971115112], [0.390094995498657, 0.639572978019714], [0.013953999616206, 0.560034036636353], [0.499913990497589, 0.58014702796936], [0.413199990987778, 0.69539999961853], [0.409626007080078, 0.701822996139526], [0.468080013990402, 0.601534962654114], [0.422728985548019, 0.585985004901886], [0.463079988956451, 0.593783974647522], [0.37211999297142, 0.47341400384903], [0.334562003612518, 0.496073007583618], [0.411671012639999, 0.546965003013611], [0.242175996303558, 0.14767599105835], [0.290776997804642, 0.201445996761322], [0.327338010072708, 0.256527006626129], [0.399509996175766, 0.748921036720276], [0.441727995872498, 0.261676013469696], [0.429764986038208, 0.187834024429321], [0.412198007106781, 0.108901023864746], [0.280955003023148, 0.400952007293701], [0.218936994671822, 0.435410976409912], [0.41278201341629, 0.398970007896423], [0.289712011814117, 0.368252992630005],\n// [0.257135003805161, 0.342440020561218],\n[0.427684992551804, 0.437960982322693], [0.448339998722076, 0.536936044692993], [0.178560003638268, 0.45755398273468], [0.247308000922203, 0.457193970680237], [0.286267012357712, 0.467674970626831], [0.332827985286713, 0.460712015628815], [0.368755996227264, 0.447206974029541], [0.398963987827301, 0.432654976844788], [0.476410001516342, 0.405806005001068], [0.189241006970406, 0.523923993110657], [0.228962004184723, 0.338950982093811], [0.490725994110107, 0.562400996685028], [0.404670000076294, 0.485132992267609], [0.019469000399113, 0.401564002037048], [0.426243007183075, 0.420431017875671], [0.396993011236191, 0.548797011375427], [0.280097991228104, 0.375599980354309],\n//[0.266469985246658, 0.373977026462555],\n[0.439121007919312, 0.51895797252655], [0.032313998788595, 0.644356966018677], [0.419054001569748, 0.387154996395111], [0.462783008813858, 0.505746960639954], [0.238978996872902, 0.779744982719421], [0.198220998048782, 0.831938028335571], [0.107550002634525, 0.540755033493042], [0.183610007166862, 0.740257024765015], [0.134409993886948, 0.333683013916016], [0.385764002799988, 0.883153975009918], [0.490967005491257, 0.579378008842468], [0.382384985685349, 0.508572995662689], [0.174399003386497, 0.397670984268188], [0.318785011768341, 0.39623498916626], [0.343364000320435, 0.400596976280212], [0.396100014448166, 0.710216999053955], [0.187885001301765, 0.588537991046906], [0.430987000465393, 0.944064974784851], [0.318993002176285, 0.898285031318665], [0.266247987747192, 0.869701027870178], [0.500023007392883, 0.190576016902924], [0.499976992607117, 0.954452991485596], [0.366169989109039, 0.398822009563446], [0.393207013607025, 0.39553701877594], [0.410373002290726, 0.391080021858215], [0.194993004202843, 0.342101991176605], [0.388664990663528, 0.362284004688263], [0.365961998701096, 0.355970978736877], [0.343364000320435, 0.355356991291046], [0.318785011768341, 0.35834002494812], [0.301414996385574, 0.363156020641327], [0.058132998645306, 0.319076001644135], [0.301414996385574, 0.387449026107788], [0.499987989664078, 0.618434011936188], [0.415838003158569, 0.624195992946625], [0.445681989192963, 0.566076993942261], [0.465844005346298, 0.620640993118286], [0.49992299079895, 0.351523995399475], [0.288718998432159, 0.819945991039276], [0.335278987884521, 0.852819979190826], [0.440512001514435, 0.902418971061707], [0.128294005990028, 0.791940987110138], [0.408771991729736, 0.373893976211548], [0.455606997013092, 0.451801002025604], [0.499877005815506, 0.908990025520325], [0.375436991453171, 0.924192011356354], [0.11421000212431, 0.615022003650665], [0.448662012815475, 0.695277988910675], [0.4480200111866, 0.704632043838501], [0.447111994028091, 0.715808033943176], [0.444831997156143, 0.730794012546539], [0.430011987686157, 0.766808986663818], [0.406787008047104, 0.685672998428345], [0.400738000869751, 0.681069016456604], [0.392399996519089, 0.677703022956848], [0.367855995893478, 0.663918972015381], [0.247923001646996, 0.601333022117615], [0.452769994735718, 0.420849978923798], [0.408771991729736, 0.373893976211548],\n//[0.45639200925827, 0.359887003898621],\n[0.408771991729736, 0.373893976211548],\n//[0.423164010763168, 0.360713974952698],\n[0.413385987281799, 0.692366003990173], [0.228018000721931, 0.683571994304657], [0.468268007040024, 0.352671027183533], [0.411361992359161, 0.804327011108398], [0.499989002943039, 0.469825029373169], [0.479153990745544, 0.442654013633728], [0.499974012374878, 0.439637005329132], [0.432112008333206, 0.493588984012604], [0.499886006116867, 0.866917014122009], [0.49991300702095, 0.821729004383087], [0.456548988819122, 0.819200992584229], [0.344549000263214, 0.745438992977142], [0.37890899181366, 0.574010014533997], [0.374292999505997, 0.780184984207153], [0.319687992334366, 0.570737957954407], [0.357154995203018, 0.604269981384277], [0.295284003019333, 0.621580958366394], [0.447750002145767, 0.862477004528046], [0.410986006259918, 0.508723020553589], [0.31395098567009, 0.775308012962341], [0.354128003120422, 0.812552988529205], [0.324548006057739, 0.703992962837219], [0.189096003770828, 0.646299958229065], [0.279776990413666, 0.71465802192688], [0.1338230073452, 0.682700991630554], [0.336768001317978, 0.644733011722565], [0.429883986711502, 0.466521978378296], [0.455527991056442, 0.548622965812683], [0.437114000320435, 0.558896005153656], [0.467287987470627, 0.529924988746643], [0.388664990663528, 0.362284004688263],\n// [0.429712011814117, 0.325219979286194],\n[0.365961998701096, 0.355970978736877],\n// [0.37704598903656, 0.312777986526489],\n[0.343364000320435, 0.355356991291046],\n// [0.350107985496521, 0.307150971412659],\n[0.318785011768341, 0.35834002494812],\n// [0.292875986099243, 0.30033202457428],\n[0.301414996385574, 0.363156020641327],\n// [0.280526003360748, 0.310190023899078],\n[0.280097991228104, 0.375599980354309],\n//[0.241245999932289, 0.385785975933075],\n[0.102986000478268, 0.468762993812561], [0.267612010240555, 0.424560010433197], [0.297879010438919, 0.433175981044769], [0.333433985710144, 0.433878004550934], [0.366427004337311, 0.426115989685059], [0.396012008190155, 0.416696012020111], [0.420121014118195, 0.41022801399231], [0.007561000064015, 0.480777025222778], [0.432949006557465, 0.569517970085144], [0.458638995885849, 0.479089021682739], [0.473466008901596, 0.545744001865387], [0.476087987422943, 0.563830018043518], [0.468472003936768, 0.555056989192963], [0.433990985155106, 0.582361996173859], [0.483518004417419, 0.562983989715576], [0.482482999563217, 0.57784903049469], [0.419054001569748, 0.387154996395111],\n//[0.43045001411438, 0.389798998832703],\n[0.419054001569748, 0.387154996395111],\n//[0.438998997211456, 0.39649498462677],\n[0.450067013502121, 0.400434017181396], [0.289712011814117, 0.368252992630005], [0.289712011814117, 0.368252992630005],\n//[0.275670008897781, 0.350372981548309],\n[0.517862021923065, 0.471948027610779], [0.710287988185883, 0.380764007568359], [0.526226997375488, 0.573909997940063], [0.895093023777008, 0.254140973091125], [0.634069979190826, 0.409575998783112], [0.661242008209229, 0.41302502155304], [0.688880026340485, 0.409460008144379], [0.730341975688934, 0.392131009578705], [0.606630027294159, 0.40370500087738], [0.653766023159027, 0.320011008739471], [0.621905998706818, 0.325076011657715], [0.680678009986877, 0.325265005111694], [0.714096998691559, 0.338591024875641], [0.75221198797226, 0.410804986953735], [0.602918028831482, 0.842862963676453], [0.719901978969574, 0.375599980354309], [0.893692970275879, 0.399959981441498], [0.790081977844238, 0.391354024410248], [0.643998026847839, 0.534487962722778], [0.528249025344849, 0.65040397644043], [0.525849997997284, 0.680191040039062], [0.560214996337891, 0.657229006290436], [0.585384011268616, 0.66654098033905], [0.549625992774963, 0.680860996246338], [0.57122802734375, 0.682691991329193], [0.624852001667023, 0.72809898853302], [0.513050019741058, 0.547281980514526], [0.51509702205658, 0.527251958847046], [0.752246985435486, 0.284507007598877], [0.598631024360657, 0.454979002475739], [0.570338010787964, 0.548575043678284], [0.578631997108459, 0.533622980117798], [0.723087012767792, 0.532054007053375], [0.516445994377136, 0.499638974666595], [0.674801027297974, 0.260917976379395], [0.75962401008606, 0.289271005153656], [0.830704987049103, 0.193813979625702], [0.542385985851288, 0.292568018436432], [0.59409987258911, 0.338887975215912], [0.645429015159607, 0.696707010269165], [0.932694971561432, 0.730105042457581], [0.557260990142822, 0.572826027870178], [0.542901992797852, 0.584792017936707], [0.6180260181427, 0.694710969924927], [0.607590973377228, 0.694203019142151], [0.722943007946014, 0.271963000297546], [0.577413976192474, 0.563166975975037], [0.624082992076874, 0.271386971473694], [0.616907000541687, 0.255886018276215], [0.668509006500244, 0.119913995265961], [0.770092010498047, 0.232020974159241], [0.635536015033722, 0.189248979091644], [0.77039098739624, 0.299556016921997], [0.826722025871277, 0.278755009174347], [0.527121007442474, 0.666198015213013], [0.553171992301941, 0.668527007102966], [0.577238023281097, 0.673889994621277], [0.554691970348358, 0.580065965652466], [0.611896991729736, 0.693961024284363], [0.59696102142334, 0.706539988517761], [0.596370995044708, 0.693953037261963], [0.539958000183105, 0.557139039039612], [0.568841993808746, 0.692366003990173], [0.547818005084991, 0.692366003990173], [0.52461302280426, 0.692366003990173], [0.534089982509613, 0.779141008853912], [0.527670979499817, 0.736225962638855], [0.526912987232208, 0.717857003211975], [0.526877999305725, 0.704625964164734], [0.526966989040375, 0.695277988910675], [0.572058022022247, 0.695277988910675], [0.573521018028259, 0.703539967536926], [0.57683801651001, 0.711845993995667], [0.581691026687622, 0.720062971115112], [0.609944999217987, 0.639909982681274], [0.986046016216278, 0.560034036636353], [0.5867999792099, 0.69539999961853], [0.590372025966644, 0.701822996139526], [0.531915009021759, 0.601536989212036], [0.577268004417419, 0.585934996604919], [0.536915004253387, 0.593786001205444], [0.627542972564697, 0.473352015018463], [0.665585994720459, 0.495950996875763], [0.588353991508484, 0.546862006187439], [0.757824003696442, 0.14767599105835], [0.709249973297119, 0.201507985591888], [0.672684013843536, 0.256581008434296], [0.600408971309662, 0.74900496006012], [0.55826598405838, 0.261672019958496], [0.570303976535797, 0.187870979309082], [0.588165998458862, 0.109044015407562], [0.719045026779175, 0.400952007293701], [0.781069993972778, 0.435405015945435], [0.587247014045715, 0.398931980133057], [0.742869973182678, 0.342445981025696], [0.572156012058258, 0.437651991844177], [0.55186802148819, 0.536570012569427], [0.821442008018494, 0.457556009292603], [0.752701997756958, 0.457181990146637], [0.71375697851181, 0.467626988887787], [0.66711300611496, 0.460672974586487], [0.631101012229919, 0.447153985500336], [0.6008620262146, 0.432473003864288], [0.523481011390686, 0.405627012252808], [0.810747981071472, 0.523926019668579], [0.771045982837677, 0.338959028720856], [0.509127020835876, 0.562718033790588], [0.595292985439301, 0.485023975372314], [0.980530977249146, 0.401564002037048], [0.573499977588654, 0.420000016689301], [0.602994978427887, 0.548687994480133], [0.733529984951019, 0.373977026462555], [0.560611009597778, 0.519016981124878], [0.967685997486115, 0.644356966018677], [0.580985009670258, 0.387160003185272], [0.537728011608124, 0.505385041236877], [0.760966002941132, 0.779752969741821], [0.801778972148895, 0.831938028335571], [0.892440974712372, 0.54076099395752], [0.816350996494293, 0.740260004997253], [0.865594983100891, 0.333687007427216], [0.614073991775513, 0.883246004581451], [0.508952975273132, 0.579437971115112], [0.617941975593567, 0.508316040039062], [0.825608015060425, 0.397674977779388], [0.681214988231659, 0.39623498916626], [0.656635999679565, 0.400596976280212], [0.603900015354156, 0.710216999053955], [0.81208598613739, 0.588539004325867], [0.56801301240921, 0.944564998149872], [0.681007981300354, 0.898285031318665], [0.733752012252808, 0.869701027870178], [0.633830010890961, 0.398822009563446], [0.606792986392975, 0.39553701877594], [0.589659988880157, 0.391062021255493], [0.805015981197357, 0.342108011245728], [0.611334979534149, 0.362284004688263], [0.634037971496582, 0.355970978736877], [0.656635999679565, 0.355356991291046], [0.681214988231659, 0.35834002494812], [0.698584973812103, 0.363156020641327], [0.941866993904114, 0.319076001644135], [0.698584973812103, 0.387449026107788], [0.584177017211914, 0.624107003211975], [0.554318010807037, 0.566076993942261], [0.534153997898102, 0.62064003944397], [0.711217999458313, 0.819975018501282], [0.664629995822906, 0.852871000766754], [0.559099972248077, 0.902631998062134], [0.871706008911133, 0.791940987110138], [0.591234028339386, 0.373893976211548], [0.544341027736664, 0.451583981513977], [0.624562978744507, 0.924192011356354], [0.88577002286911, 0.615028977394104], [0.551338016986847, 0.695277988910675], [0.551980018615723, 0.704632043838501], [0.552887976169586, 0.715808033943176], [0.555167973041534, 0.730794012546539], [0.569944024085999, 0.767035007476807], [0.593203008174896, 0.685675978660583], [0.599261999130249, 0.681069016456604], [0.607599973678589, 0.677703022956848], [0.631937980651855, 0.663500010967255], [0.752032995223999, 0.601315021514893], [0.547226011753082, 0.420395016670227], [0.543543975353241, 0.359827995300293], [0.576841025829315, 0.360713974952698], [0.586614012718201, 0.692366003990173], [0.771915018558502, 0.683578014373779], [0.531597018241882, 0.352482974529266], [0.588370978832245, 0.804440975189209], [0.52079701423645, 0.442565023899078], [0.567984998226166, 0.493479013442993], [0.543282985687256, 0.819254994392395], [0.655317008495331, 0.745514988899231], [0.621008992195129, 0.574018001556396], [0.625559985637665, 0.78031200170517], [0.680198013782501, 0.570719003677368], [0.64276397228241, 0.604337990283966], [0.704662978649139, 0.621529996395111], [0.552012026309967, 0.862591981887817], [0.589071989059448, 0.508637011051178], [0.685944974422455, 0.775357007980347], [0.645735025405884, 0.812640011310577], [0.675342977046967, 0.703978002071381], [0.810858011245728, 0.646304965019226], [0.72012197971344, 0.714666962623596], [0.866151988506317, 0.682704985141754], [0.663187026977539, 0.644596993923187], [0.570082008838654, 0.466325998306274], [0.544561982154846, 0.548375964164734], [0.562758982181549, 0.558784961700439], [0.531987011432648, 0.530140042304993], [0.570271000862122, 0.325177004337311], [0.622952997684479, 0.31277899980545], [0.649896008014679, 0.308163011550903], [0.707132000923157, 0.300345972061157], [0.719481983661652, 0.310200991153717], [0.758756995201111, 0.382786989212036], [0.897013008594513, 0.468769013881683], [0.732392013072968, 0.424547016620636], [0.70211398601532, 0.433162987232208], [0.66652500629425, 0.433866024017334], [0.633504986763, 0.426087975502014], [0.603875994682312, 0.416586995124817], [0.579657971858978, 0.409945011138916], [0.992439985275269, 0.480777025222778], [0.567192018032074, 0.569419980049133], [0.54136598110199, 0.478899002075195], [0.526564002037048, 0.546118021011353], [0.523913025856018, 0.563830018043518], [0.531529009342194, 0.555056989192963], [0.566035985946655, 0.582329034805298], [0.51631098985672, 0.563053965568542], [0.5174720287323, 0.577877044677734], [0.569594987392426, 0.389806985855103], [0.560697972774506, 0.395331978797913], [0.549755990505219, 0.399751007556915], [0.710287988185883, 0.368252992630005], [0.722330020904541, 0.350372981548309]]));\nconst FACE_MESH_UV_test = (/* unused pure expression or super */ null && ([[0.499976992607117, 0.652534008026123], [0.500025987625122, 0.547487020492554], [0.499974012374878, 0.602371990680695], [0.482113003730774, 0.471979022026062], [0.500150978565216, 0.527155995368958], [0.499909996986389, 0.498252987861633], [0.499523013830185, 0.40106201171875], [0.289712011814117, 0.380764007568359], [0.499954998493195, 0.312398016452789], [0.499987006187439, 0.269918978214264], [0.500023007392883, 0.107050001621246], [0.500023007392883, 0.666234016418457], [0.5000159740448, 0.679224014282227], [0.500023007392883, 0.692348003387451], [0.499976992607117, 0.695277988910675], [0.499976992607117, 0.70593398809433]]));\n;// ./src/MLModelProviders/landmarks_helpers.js\n\n\n\n\n\n\n/**\n * Mediapipe uses different convention for axis\n * than three js. This function adapts mediapipe\n * landmarks for three js.\n * @param {*} landmarks\n */\nconst transformLandmarks = landmarks => {\n  // console.log(landmarks);\n  if (!landmarks) {\n    return landmarks;\n  }\n  let hasVisiblity = !!landmarks.find(l => l.visibility);\n  let minZ = 1e-4;\n  if (hasVisiblity) {\n    landmarks.forEach(landmark => {\n      let {\n        z,\n        visibility\n      } = landmark;\n      z = -z;\n      if (z < minZ && visibility) {\n        minZ = z;\n      }\n    });\n  } else {\n    minZ = Math.max(-landmarks[234].z, -landmarks[454].z);\n  }\n  return landmarks.map(landmark => {\n    let {\n      x,\n      y,\n      z\n    } = landmark;\n    return {\n      x: -0.5 + x,\n      y: 0.5 - y,\n      z: 0.5 - z,\n      visibility: landmark.visibility\n    };\n  });\n};\n\n/**\n * Scales landmark by width and height\n * @param {*} landmark\n * @param {*} width\n * @param {*} height\n */\nconst scaleLandmark = (landmark, width, height) => {\n  let {\n    x,\n    y,\n    z\n  } = landmark;\n  return {\n    ...landmark,\n    x: x * width,\n    y: y * height,\n    z: z * width\n  };\n};\n\n/**\n * makes buffer geometry from facemesh landmarks\n * @param {*} landmarks\n */\n\nlet geometry = new three_module/* BufferGeometry */.LoY();\nconst params = {\n  iterations: 1,\n  split: false,\n  // optional, default: true\n  uvSmooth: true,\n  // optional, default: false\n  preserveEdges: true,\n  // optional, default: false\n  flatOnly: false,\n  // optional, default: false\n  maxTriangles: 2000,\n  // optional, default: Infinity\n  flatShading: false,\n  textured: false,\n  wireframe: false\n};\nconst makeGeometry = (landmarks, geometry, type, pattern) => {\n  let vertices = [];\n  let uvs = [];\n  for (let i = 0; i < 468; i++) {\n    let {\n      x,\n      y,\n      z\n    } = landmarks[i];\n    let vertex = [x, y, z];\n    if (type && type === "eyelash") {\n      if (EyelidUpperLeftLandmarkIndices.includes(i) || EyelidDownLeftLandmarkIndices.includes(i) || EyelidSecondUpperLeftLandmarkIndices.includes(i) || EyelidThirdUpperLeftLandmarkIndices.includes(i) || EyelidUpperRightLandmarkIndices.includes(i) || EyelidDownRightLandmarkIndices.includes(i) || EyelidSecondUpperRightLandmarkIndices.includes(i) || EyelidThirdUpperRightLandmarkIndices.includes(i)) {\n        let p1 = landmarks[264];\n        let p2 = landmarks[34];\n        let p3 = landmarks[10];\n        let p4 = landmarks[151];\n        let vec1 = new three_module/* Vector3 */.Pq0(p1.x, p1.y, p1.z);\n        let vec2 = new three_module/* Vector3 */.Pq0(p2.x, p2.y, p2.z);\n        let vec3 = new three_module/* Vector3 */.Pq0(p3.x, p3.y, p3.z);\n        let vec4 = new three_module/* Vector3 */.Pq0(p4.x, p4.y, p4.z);\n        let distH = Math.abs(vec2.distanceTo(vec1) * 4.5);\n        let distV = Math.abs(vec3.distanceTo(vec4) * 18);\n        if (EyelidUpperLeftLandmarkIndices.includes(i)) {\n          let index = EyelidUpperLeftLandmarkIndices.indexOf(i);\n          let lower = EyelidDownLeftLandmarkIndices.at(index);\n          let offset = EyelidOffeset.at(index);\n          vertex[0] = landmarks[lower].x + offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          // vertex[2] = landmarks[lower].z;\n          vertex[2] = landmarks[EyelidDownLeftLandmarkIndices.at(4)].z;\n        }\n        if (EyelidSecondUpperLeftLandmarkIndices.includes(i)) {\n          let index = EyelidSecondUpperLeftLandmarkIndices.indexOf(i);\n          let lower = EyelidDownLeftLandmarkIndices.at(index);\n          let offset = EyelidOffeset1.at(index);\n          vertex[0] = landmarks[lower].x + offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          vertex[2] = landmarks[EyelidDownLeftLandmarkIndices.at(4)].z;\n        }\n        if (EyelidThirdUpperLeftLandmarkIndices.includes(i)) {\n          let index = EyelidThirdUpperLeftLandmarkIndices.indexOf(i);\n          let lower = EyelidDownLeftLandmarkIndices.at(index);\n          let offset = EyelidOffeset2.at(index);\n          vertex[0] = landmarks[lower].x + offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          vertex[2] = landmarks[EyelidDownLeftLandmarkIndices.at(4)].z;\n        }\n\n        ///\n        if (EyelidUpperRightLandmarkIndices.includes(i)) {\n          let index = EyelidUpperRightLandmarkIndices.indexOf(i);\n          let lower = EyelidDownRightLandmarkIndices.at(index);\n          let offset = EyelidOffeset.at(index);\n          vertex[0] = landmarks[lower].x - offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          // vertex[2] = landmarks[lower].z;\n          vertex[2] = landmarks[EyelidDownRightLandmarkIndices.at(4)].z;\n        }\n        if (EyelidSecondUpperRightLandmarkIndices.includes(i)) {\n          let index = EyelidSecondUpperRightLandmarkIndices.indexOf(i);\n          let lower = EyelidDownRightLandmarkIndices.at(index);\n          let offset = EyelidOffeset1.at(index);\n          vertex[0] = landmarks[lower].x - offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          vertex[2] = landmarks[EyelidDownRightLandmarkIndices.at(4)].z;\n        }\n        if (EyelidThirdUpperRightLandmarkIndices.includes(i)) {\n          let index = EyelidThirdUpperRightLandmarkIndices.indexOf(i);\n          let lower = EyelidDownRightLandmarkIndices.at(index);\n          let offset = EyelidOffeset2.at(index);\n          vertex[0] = landmarks[lower].x - offset.x * distH;\n          vertex[1] = landmarks[lower].y + offset.y * distV;\n          vertex[2] = landmarks[EyelidDownRightLandmarkIndices.at(4)].z;\n        }\n      } else {\n        //vertex[2] -= 100;\n      }\n      vertices.push(...vertex);\n    } else if (type && type === "foundation") {\n      if (lipsOuterFull.includes(i)) {\n        let index = lipsOuterFull.indexOf(i);\n        let lower = lipsInnerFull.at(index);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, 0.65);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, 0.65);\n      }\n      if (foundationUpperIndices.includes(i)) {\n        let p1 = landmarks[264];\n        let p2 = landmarks[34];\n        let p3 = landmarks[10];\n        let p4 = landmarks[151];\n        let vec1 = new three_module/* Vector3 */.Pq0(p1.x, p1.y, p1.z);\n        let vec2 = new three_module/* Vector3 */.Pq0(p2.x, p2.y, p2.z);\n        let vec3 = new three_module/* Vector3 */.Pq0(p3.x, p3.y, p3.z);\n        let vec4 = new three_module/* Vector3 */.Pq0(p4.x, p4.y, p4.z);\n        let distH = Math.abs(vec2.distanceTo(vec1) * 4.5);\n        let distV = Math.abs(vec3.distanceTo(vec4) * 18);\n        let index = foundationUpperIndices.indexOf(i);\n        let offset = foundationUpperOffset.at(index);\n        vertex[0] = landmarks[i].x + offset.x * distH;\n        vertex[1] = landmarks[i].y + offset.y * distV;\n        vertex[2] = landmarks[i].z + offset.z * distV;\n      }\n      if (foundationLowerIndices.includes(i)) {\n        let p1 = landmarks[264];\n        let p2 = landmarks[34];\n        let p3 = landmarks[10];\n        let p4 = landmarks[151];\n        let vec1 = new three_module/* Vector3 */.Pq0(p1.x, p1.y, p1.z);\n        let vec2 = new three_module/* Vector3 */.Pq0(p2.x, p2.y, p2.z);\n        let vec3 = new three_module/* Vector3 */.Pq0(p3.x, p3.y, p3.z);\n        let vec4 = new three_module/* Vector3 */.Pq0(p4.x, p4.y, p4.z);\n        let distH = Math.abs(vec2.distanceTo(vec1) * 4.5);\n        let distV = Math.abs(vec3.distanceTo(vec4) * 18);\n        let index = foundationLowerIndices.indexOf(i);\n        let offset = foundationLowerOffset.at(index);\n        vertex[0] = landmarks[i].x + offset.x / 1.3 * distH;\n        vertex[1] = landmarks[i].y + offset.y / 1.3 * distV;\n        vertex[2] = landmarks[i].z + offset.z * distV;\n      }\n      vertices.push(...vertex);\n    } else if (type && type === "lipliner") {\n      let liplinerPattern = lipLinerPatternConfig.find(config => config.pattern === pattern);\n      if (lipsOuter.includes(i)) {\n        let index = lipsOuter.indexOf(i);\n        if (liplinerPattern.ignoreUpper && index < lipsOuter.length / 2 || liplinerPattern.ignoreLower && index >= lipsOuter.length / 2) {\n          let lower = lipsInner.at(index);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, liplinerPattern.defaultOuterLayerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, liplinerPattern.defaultOuterLayerOffset);\n        } else {\n          let lower = lipsInner.at(index);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, liplinerPattern.outerLayerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, liplinerPattern.outerLayerOffset);\n        }\n      }\n      if (lipsOuterCorner.includes(i)) {\n        let index = lipsOuterCorner.indexOf(i);\n        if (liplinerPattern.ignoreUpper && index < lipsOuterCorner.length / 2 || liplinerPattern.ignoreLower && index >= lipsOuterCorner.length / 2) {\n          let lower = lipsInnerCorner.at(index);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, liplinerPattern.defaultCornerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, liplinerPattern.defaultCornerOffset);\n        } else {\n          let lower = lipsInnerCorner.at(index);\n          vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, liplinerPattern.cornerOffset);\n          vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, liplinerPattern.cornerOffset);\n        }\n      }\n      if (lipsOuterCornerLast.includes(i)) {\n        let index = lipsOuterCornerLast.indexOf(i);\n        let lower = lipsInnerCornerLast.at(index);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, liplinerPattern.cornerLastOffset);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, liplinerPattern.cornerLastOffset);\n      }\n      if (lipsInnerFull.includes(i)) {\n        let index = lipsInnerFull.indexOf(i);\n        let lower = lipsInnerSecond.at(index);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, liplinerPattern.innerLayerOffset);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, liplinerPattern.innerLayerOffset);\n      }\n      vertices.push(...vertex);\n    } else if (type && type === "lipstick") {\n      if (lipsOuterFull.includes(i)) {\n        let index = lipsOuterFull.indexOf(i);\n        let lower = lipsInnerFull.at(index);\n        vertex[0] = three_module/* MathUtils */.cj9.lerp(landmarks[i].x, landmarks[lower].x, lipsOuterFullOffset[index].x);\n        vertex[1] = three_module/* MathUtils */.cj9.lerp(landmarks[i].y, landmarks[lower].y, lipsOuterFullOffset[index].y);\n      }\n      vertices.push(...vertex);\n    } else {\n      vertices.push(...vertex);\n    }\n  }\n  if (type && type === "eyeliner") {\n    for (let j = 0; j < 468; j++) {\n      uvs[j * 2] = FACE_MESH_UV_Eyelid[j][0];\n      uvs[j * 2 + 1] = FACE_MESH_UV_Eyelid[j][1];\n    }\n  } else {\n    for (let j = 0; j < 468; j++) {\n      uvs[j * 2] = FACE_MESH_UV[j][0];\n      uvs[j * 2 + 1] = FACE_MESH_UV[j][1];\n    }\n  }\n  geometry.setIndex(FACE_MESH_INDEX_BUFFER);\n  geometry.setAttribute("position", new three_module/* Float32BufferAttribute */.qtW(vertices, 3));\n  geometry.setAttribute("uv", new three_module/* Float32BufferAttribute */.qtW(uvs, 2));\n  geometry.computeVertexNormals();\n\n  //geometry = LoopSubdivision.modify(geometry, params.iterations, params);\n\n  // return geometry;\n};\nconst isMouthLandmark = (index, landmarks) => {\n  return mouthLandmarkIndices.includes(index);\n};\nconst mouthLandmarkIndices = (/* unused pure expression or super */ null && ([14, 87, 317, 82, 13, 402, 178, 311, 312, 81, 318, 88, 310, 80, 324, 95, 415, 191]));\nconst eyetest = (/* unused pure expression or super */ null && ([7, 33, 133, 144, 145, 153, 154, 155, 157, 158, 159, 160, 161, 163, 173, 246]));\nconst eyetest1 = (/* unused pure expression or super */ null && ([9, 107, 108, 151]));\nconst EyelidDownLeftLandmarkIndices = [33, 246, 161, 160, 159, 158, 157, 173, 133,\n//down\n155, 154, 153, 145, 144, 163, 7];\nconst EyelidUpperLeftLandmarkIndices = [130, 247, 30, 29, 27, 28, 56, 190, 243,\n//down\n112, 26, 22, 23, 24, 110, 25];\nconst EyelidSecondUpperLeftLandmarkIndices = [226, 113, 225, 224, 223, 222, 221, 189, 244,\n//down\n233, 232, 231, 230, 229, 228, 31];\nconst EyelidThirdUpperLeftLandmarkIndices = [35, 124, 46, 53, 52, 65, 55, 193, 245];\nconst EyelidDownRightLandmarkIndices = [263, 466, 388, 387, 386, 385, 384, 398, 362,\n//down\n382, 381, 380, 374, 373, 390, 249];\nconst EyelidUpperRightLandmarkIndices = [359, 467, 260, 259, 257, 258, 286, 414, 463,\n//down\n341, 256, 252, 253, 254, 339, 255];\nconst EyelidSecondUpperRightLandmarkIndices = [446, 342, 445, 444, 443, 442, 441, 413, 464,\n//down\n453, 452, 451, 450, 449, 448, 261];\nconst EyelidThirdUpperRightLandmarkIndices = [265, 353, 276, 283, 282, 295, 285, 417, 465];\nconst foundationUpperIndices = [152, 148, 176, 149, 150, 136, 172, 58, 132, 93, 234, 127, 162, 21, 54, 103, 67, 109, 10, 338, 297, 332, 284, 251, 389, 356, 454, 323, 361, 288, 397, 365, 379, 378, 400, 377];\nconst foundationLowerIndices = [34, 139, 71, 68, 104, 69, 108, 151, 337, 299, 333, 298, 301, 368, 264];\nconst foundationUpperOffset = [new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(-0.0011, -0.025, 0), new three_module/* Vector3 */.Pq0(-0.0021, -0.02, 0), new three_module/* Vector3 */.Pq0(-0.0021, -0.015, 0), new three_module/* Vector3 */.Pq0(-0.0036, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0, 0),\n//\nnew three_module/* Vector3 */.Pq0(-0.0036, 0.015, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0.025, 0), new three_module/* Vector3 */.Pq0(-0.0036, 0.055, 0), new three_module/* Vector3 */.Pq0(-0.0035, 0.1, 0), new three_module/* Vector3 */.Pq0(-0.0025, 0.12, 0), new three_module/* Vector3 */.Pq0(-0.0015, 0.13, 0), new three_module/* Vector3 */.Pq0(-0.001, 0.13, 0), new three_module/* Vector3 */.Pq0(0, 0.13, 0), new three_module/* Vector3 */.Pq0(0.001, 0.13, 0), new three_module/* Vector3 */.Pq0(0.0015, 0.13, 0), new three_module/* Vector3 */.Pq0(0.0025, 0.12, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.1, 0), new three_module/* Vector3 */.Pq0(0.0036, 0.055, 0), new three_module/* Vector3 */.Pq0(0.0036, 0.025, 0), new three_module/* Vector3 */.Pq0(0.0036, 0.015, 0),\n//\nnew three_module/* Vector3 */.Pq0(0.0036, 0, 0), new three_module/* Vector3 */.Pq0(0.0036, 0, 0), new three_module/* Vector3 */.Pq0(0.0036, -0.01, 0), new three_module/* Vector3 */.Pq0(0.0021, -0.015, 0), new three_module/* Vector3 */.Pq0(0.0021, -0.02, 0), new three_module/* Vector3 */.Pq0(0.0011, -0.025, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0), new three_module/* Vector3 */.Pq0(0, -0.03, 0)];\nconst foundationLowerOffset = [new three_module/* Vector3 */.Pq0(-0.0035, 0.015, 0), new three_module/* Vector3 */.Pq0(-0.0035, 0.025, 0), new three_module/* Vector3 */.Pq0(-0.0035, 0.055, 0), new three_module/* Vector3 */.Pq0(-0.0025, 0.065, 0), new three_module/* Vector3 */.Pq0(-0.002, 0.085, 0), new three_module/* Vector3 */.Pq0(-0.0015, 0.09, 0), new three_module/* Vector3 */.Pq0(-0.001, 0.09, 0), new three_module/* Vector3 */.Pq0(0, 0.09, 0), new three_module/* Vector3 */.Pq0(0.001, 0.09, 0), new three_module/* Vector3 */.Pq0(0.0015, 0.09, 0), new three_module/* Vector3 */.Pq0(0.002, 0.085, 0), new three_module/* Vector3 */.Pq0(0.0025, 0.065, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.055, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.025, 0), new three_module/* Vector3 */.Pq0(0.0035, 0.015, 0)];\nconst EyelidOffeset = [new three_module/* Vector3 */.Pq0(-0.0045, -0.0013, 0), new three_module/* Vector3 */.Pq0(-0.0047, 0.004, 0), new three_module/* Vector3 */.Pq0(-0.002, 0.007, 0), new three_module/* Vector3 */.Pq0(-0.0007, 0.008, 0), new three_module/* Vector3 */.Pq0(0.0002, 0.0085, 0), new three_module/* Vector3 */.Pq0(0.0015, 0.0085, 0), new three_module/* Vector3 */.Pq0(0.001, 0.007, 0), new three_module/* Vector3 */.Pq0(0.0037, 0.0035, 0), new three_module/* Vector3 */.Pq0(0.004, -0.001, 0),\n//down\nnew three_module/* Vector3 */.Pq0(0.0024, -0.0063, 0), new three_module/* Vector3 */.Pq0(-0.00019, -0.009, 0), new three_module/* Vector3 */.Pq0(0.00015, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.0015, -0.011, 0), new three_module/* Vector3 */.Pq0(-0.0016, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.003, -0.009, 0), new three_module/* Vector3 */.Pq0(-0.005, -0.006, 0)];\nconst EyelidOffeset1 = [new three_module/* Vector3 */.Pq0(-0.012, -0.005, 0), new three_module/* Vector3 */.Pq0(-0.0105, 0.009, 0), new three_module/* Vector3 */.Pq0(-0.0078, 0.018, 0), new three_module/* Vector3 */.Pq0(-0.004, 0.023, 0), new three_module/* Vector3 */.Pq0(-0.001, 0.024, 0), new three_module/* Vector3 */.Pq0(0.003, 0.023, 0), new three_module/* Vector3 */.Pq0(0.009, 0.019, 0), new three_module/* Vector3 */.Pq0(0.011, 0.0078, 0), new three_module/* Vector3 */.Pq0(0.009, -0.003, 0),\n//down\nnew three_module/* Vector3 */.Pq0(0.005, -0.017, 0), new three_module/* Vector3 */.Pq0(0.0014, -0.022, 0), new three_module/* Vector3 */.Pq0(0.00023, -0.024, 0), new three_module/* Vector3 */.Pq0(-0.003, -0.026, 0), new three_module/* Vector3 */.Pq0(-0.005, -0.027, 0), new three_module/* Vector3 */.Pq0(-0.009, -0.026, 0), new three_module/* Vector3 */.Pq0(-0.013, -0.017, 0)];\nconst EyelidOffeset2 = [new three_module/* Vector3 */.Pq0(-0.02, -0.01, 0), new three_module/* Vector3 */.Pq0(-0.018, 0.014, 0), new three_module/* Vector3 */.Pq0(-0.016, 0.028, 0), new three_module/* Vector3 */.Pq0(-0.011, 0.037, 0), new three_module/* Vector3 */.Pq0(-0.005, 0.039, 0), new three_module/* Vector3 */.Pq0(0.0053, 0.039, 0), new three_module/* Vector3 */.Pq0(0.0215, 0.0275, 0), new three_module/* Vector3 */.Pq0(0.023, 0.008, 0), new three_module/* Vector3 */.Pq0(0.015, -0.008, 0)];\nconst lipsOuter = [92, 165, 167, 164, 393, 391, 322,\n//down\n335, 406, 313, 18, 83, 182, 106];\nconst lipsInner = [40, 39, 37, 0, 267, 269, 270,\n//down\n321, 405, 314, 17, 84, 181, 91];\nconst lipsOuterFull = [57, 186, 92, 165, 167, 164, 393, 391, 322, 410, 287,\n//down\n273, 335, 406, 313, 18, 83, 182, 106, 43];\nconst lipsOuterFullOffset = [new three_module/* Vector3 */.Pq0(0.7, 0.65, 0),\n//57\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//186\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//92\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//165\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//167\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//164\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//393\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//391\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//322\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//410\nnew three_module/* Vector3 */.Pq0(0.7, 0.65, 0),\n//287\n//down\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//273\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//335\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//406\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//313\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//18\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//83\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//182\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0),\n//106\nnew three_module/* Vector3 */.Pq0(0.65, 0.65, 0) //43\n];\nconst lipsInnerFull = [61, 185, 40, 39, 37, 0, 267, 269, 270, 409, 291,\n//down\n375, 321, 405, 314, 17, 84, 181, 91, 146];\nconst lipsInnerSecond = [76, 184, 74, 73, 72, 11, 302, 303, 304, 408, 306,\n//down\n307, 320, 404, 315, 16, 85, 180, 90, 77];\nconst lipsOuterCorner = [186, 410,\n//down\n273, 43];\nconst lipsInnerCorner = [185, 409,\n//down\n375, 146];\nconst lipsOuterCornerLast = [57, 287];\nconst lipsInnerCornerLast = [61, 291];\nconst lipLinerPatternConfig = [{\n  pattern: "natural",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.65,\n  cornerOffset: 0.65,\n  cornerLastOffset: 0.65,\n  innerLayerOffset: 0\n}, {\n  pattern: "wide",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.68,\n  cornerOffset: 0.57,\n  cornerLastOffset: 0.52,\n  innerLayerOffset: 0.15\n}, {\n  pattern: "small",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.85,\n  cornerOffset: 0.85,\n  cornerLastOffset: 0.85,\n  innerLayerOffset: 0.4\n}, {\n  pattern: "largeandfull",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.48,\n  cornerOffset: 0.5,\n  cornerLastOffset: 0.52,\n  innerLayerOffset: 0\n}, {\n  pattern: "largelower",\n  ignoreUpper: true,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.68,\n  outerLayerOffset: 0.5,\n  defaultCornerOffset: 0.68,\n  cornerOffset: 0.57,\n  cornerLastOffset: 0.62,\n  innerLayerOffset: 0\n}, {\n  pattern: "largeupper",\n  ignoreUpper: false,\n  ignoreLower: true,\n  defaultOuterLayerOffset: 0.68,\n  outerLayerOffset: 0.5,\n  defaultCornerOffset: 0.68,\n  cornerOffset: 0.57,\n  cornerLastOffset: 0.62,\n  innerLayerOffset: 0\n}, {\n  pattern: "rosebud",\n  ignoreUpper: false,\n  ignoreLower: false,\n  defaultOuterLayerOffset: 0.65,\n  outerLayerOffset: 0.53,\n  cornerOffset: 0.64,\n  cornerLastOffset: 0.78,\n  innerLayerOffset: 0\n}];\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(2505);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n;// ./src/constants/authConstants.js\nlet apiKey = "";\nfunction setAPIKey(key) {\n  apiKey = key;\n}\nfunction authConstants_getAPIKey() {\n  //return "ff4146c9-386a-463d-9b7d-4191bfa35c7"; //glamarz0 decoded key\n  //return "62a16d1e-0103-4b73-9a07-57b55aeb6277";\n  return apiKey;\n}\n;// ./src/apiService/interceptors/index.js\nconst combineURLs = __webpack_require__(4680);\nconst isAbsoluteURL = __webpack_require__(9137);\nconst {\n  isBrowser\n} = __webpack_require__(6127);\nconst {\n  Buffer\n} = __webpack_require__(/* webpackChunkName: "buffer" */8287);\n// const { transformRequestOptions } = require("./../../../helper/utils");\n\nconst {\n  sign\n} = __webpack_require__(6396);\nfunction transformRequestOptions(params) {\n  let options = "";\n  for (const key in params) {\n    if (typeof params[key] !== "object" && typeof params[key] !== "undefined") {\n      const encodeVal = encodeURIComponent(params[key]);\n      options += `${key}=${encodeVal}&`;\n    } else if (Array.isArray(params[key])) {\n      // eslint-disable-next-line no-loop-func\n      params[key].forEach(el => {\n        const encodeVal = encodeURIComponent(params[key]);\n        options += `${key}=${encodeVal}&`;\n      });\n    } else if (typeof params[key] === "object" && params[key]) {\n      options += transformRequestOptions(params[key]);\n    }\n  }\n  return options ? options.slice(0, -1) : options;\n}\nfunction getTransformer(config) {\n  const {\n    transformRequest\n  } = config;\n  if (transformRequest) {\n    if (typeof transformRequest === "function") {\n      return transformRequest;\n    } else if (transformRequest.length) {\n      return transformRequest[0];\n    }\n  }\n  throw new Error("Could not get default transformRequest function from Axios defaults");\n}\nfunction processQueryParams({\n  params,\n  search\n}) {\n  let queryParam = "";\n  if (params && Object.keys(params).length) {\n    if (search && search.trim() !== "") {\n      queryParam = `&${transformRequestOptions(params)}`;\n    } else {\n      queryParam = `?${transformRequestOptions(params)}`;\n    }\n  }\n  return queryParam;\n}\nfunction base64Encode(text) {\n  return Buffer.from(text).toString("base64");\n}\nfunction interceptorFn(options) {\n  return config => {\n    if (!config.url) {\n      throw new Error("No URL present in request config, unable to sign request");\n    }\n    let url = config.url;\n    if (config.baseURL && !isAbsoluteURL(config.url)) {\n      url = combineURLs(config.baseURL, config.url);\n    }\n    if (url.startsWith("/api") && isBrowser) {\n      url = `https://${window.location.host}${url}`;\n    }\n    const {\n      host,\n      pathname,\n      search\n    } = new URL(url);\n    //log(pathname);\n    if (pathname.startsWith("/service/panel") || pathname.startsWith("/api/service/panel") || pathname.startsWith("/service/platform") || pathname.startsWith("/service/private")) {\n      const {\n        data,\n        headers,\n        method,\n        params\n      } = config;\n      const queryParam = processQueryParams({\n        params,\n        search\n      });\n      const transformRequest = getTransformer(config);\n      const transformedData = transformRequest(data, headers);\n      // console.log(63, queryParam, headers, transformedData);\n      // Remove all the default Axios headers\n      const {\n        common,\n        delete: _delete,\n        // \'delete\' is a reserved word\n        get,\n        head,\n        post,\n        put,\n        patch,\n        ...headersToSign\n      } = headers;\n      const signingOptions = {\n        method: method && method.toUpperCase(),\n        host: host,\n        path: pathname + search + queryParam,\n        body: transformedData,\n        headers: headersToSign\n      };\n      if (signingOptions["body"] && signingOptions["body"] instanceof FormData) {\n        delete signingOptions["body"];\n      }\n      sign(signingOptions);\n      // console.log(signingOptions);\n      config.headers["x-ebg-param"] = base64Encode(signingOptions.headers["x-ebg-param"]);\n      config.headers["x-ebg-signature"] = signingOptions.headers["x-ebg-signature"];\n    }\n    // console.log(config);\n    return config;\n  };\n}\nconst addSignatureFn = interceptorFn;\n;// ./src/utils/globalVariables.js\nlet shouldHideInternalUI = false;\nlet platformMode = "private";\nlet apiVersion = "v1.0";\nconst globalVariables = {};\nlet category = "makeup";\nlet openLiveOnInit = false;\nlet openImageOnInit;\nlet details = navigator.userAgent;\n//let regexp = /android|iphone|kindle|ipad|webOS|iPod|BlackBerry|Windows Phone/i;\n\nfunction isMobileDevice() {\n  let regexp = /android|iphone|kindle|ipad|webOS|iPod|BlackBerry|Windows Phone/i;\n  let mobile = regexp.test(details);\n  return mobile;\n}\nfunction isIOSMobile() {\n  let regexp = /iphone/i;\n  let mobile = regexp.test(details);\n  return mobile;\n}\nconst globalVariables_errorMessages = {\n  invalidFaceUpload: "Please upload a photo clearly showing the entire face.",\n  invisbileLiveFace: "Ensure your face is clearly visible and aligned with the camera.",\n  TryonBlock: "Virtual try-on display error. Reach out to support for help.",\n  cameraPermissionNotGranted: "Camera access denied. Please refresh the page and allow camera use, or check your settings to enable it.",\n  cameraIssue: "A camera permission error occurred. Please check your settings.",\n  nailDetectionIssue: "Nail detection failed",\n  faceAnalysisIssue: "face detection failed",\n  billingIssue: "Virtual try-on display error. Reach out to support for help.",\n  invalidHandUpload: "Upload a clear photo showing the full back of the hand and wrist.",\n  invisbileLiveHand: "Direct your camera to capture your wrist and the back of your hand for a virtual fitting.",\n  invalidRingUpload: "Ensure your photo includes a clear view of the back of the hand and all fingers.",\n  invisbileLiveRing: "Aim your camera at your fingers and the back of your hand for a virtual fitting.",\n  noInternetConnection: "No internet connection available."\n};\nconst defaultModelConfig = {\n  desktop: {\n    modelType: "face",\n    models: [{\n      filename: null,\n      imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/EDwDNH/original/js/assets/model1.png",\n      isActive: true\n    }, {\n      filename: null,\n      imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/EDwDNH/original/js/assets/model2.png",\n      isActive: true\n    }, {\n      filename: null,\n      imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/EDwDNH/original/js/assets/model3.png",\n      isActive: true\n    }, {\n      filename: null,\n      imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/EDwDNH/original/js/assets/model4.png",\n      isActive: true\n    }, {\n      filename: null,\n      imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/EDwDNH/original/js/assets/model5.png",\n      isActive: true\n    }, {\n      filename: null,\n      imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/EDwDNH/original/js/assets/model6.png",\n      isActive: true\n    }]\n  }\n};\nconst defaultSkuConfig = {\n  // config: {\n  //   _id: 6,\n  //   orgId: -99,\n  //   name: "Test Lipstick2",\n  //   categoryName: "lipstick",\n  //   createdAt: "2024-01-11T12:06:47.087Z",\n  //   updatedAt: "2024-01-11T12:06:47.087Z",\n  //   styles: [\n  //     {\n  //       _id: 8,\n  //       orgId: -99,\n  //       skuId: 6,\n  //       name: "style1",\n  //       type: "single",\n  //       colorIntensity: 50,\n  //       styleIcon: "URL/icon/style1/01.png",\n  //       colorPaletteIcons: ["URL/icon/palette/01.png"],\n  //       createdAt: "2024-01-11T12:06:47.093Z",\n  //       updatedAt: "2024-01-11T12:06:47.093Z",\n  //       patterns: [\n  //         {\n  //           _id: 10,\n  //           orgId: -99,\n  //           styleId: 8,\n  //           name: "matte lipstic",\n  //           type: "matte",\n  //           color: ["#7e010e"],\n  //           effectAsset: ["URL/style1/01.png"],\n  //           createdAt: "2024-01-11T12:06:47.097Z",\n  //           updatedAt: "2024-01-11T12:06:47.097Z",\n  //         },\n  //       ],\n  //     },\n  //   ],\n  // },\n  // config: {\n  //   _id: 6,\n  //   orgId: -99,\n  //   name: "Test Lipstick2",\n  //   categoryName: "hair",\n  //   createdAt: "2024-01-11T12:06:47.087Z",\n  //   updatedAt: "2024-01-11T12:06:47.087Z",\n  //   styles: [\n  //     {\n  //       _id: 8,\n  //       orgId: -99,\n  //       skuId: 6,\n  //       name: "style1",\n  //       type: "single",\n  //       colorIntensity: 50,\n  //       styleIcon: "URL/icon/style1/01.png",\n  //       colorPaletteIcons: ["URL/icon/palette/01.png"],\n  //       createdAt: "2024-01-11T12:06:47.093Z",\n  //       updatedAt: "2024-01-11T12:06:47.093Z",\n  //       patterns: [\n  //         {\n  //           _id: 10,\n  //           orgId: -99,\n  //           styleId: 8,\n  //           name: "matte lipstic",\n  //           type: "glossy",\n  //           color: ["#7e010e"],\n  //           effectAsset: ["URL/style1/01.png"],\n  //           createdAt: "2024-01-11T12:06:47.097Z",\n  //           updatedAt: "2024-01-11T12:06:47.097Z",\n  //         },\n  //       ],\n  //     },\n  //   ],\n  // },\n\n  sku: {\n    _id: "c44c6346-8a4a-4ff4-a0e1-4fb224d4c99b",\n    orgId: -99,\n    category: "beauty",\n    subCategory: "nailcolor",\n    productName: "Test nailcolor",\n    productImage: "URL/icon/01.png",\n    vendor: "Lakeme",\n    isActive: true,\n    itemCode: "BRUNT-1709637495061",\n    styleVariant: "single",\n    styleIcon: "",\n    attributes: [{\n      name: "matte",\n      icons: [""],\n      colors: ["#66ff66"],\n      effectAssets: [""]\n    }],\n    meta: {\n      colorIntensity: 50\n    },\n    createdAt: "2024-01-11T12:06:47.087Z",\n    updatedAt: "2024-01-11T12:06:47.087Z"\n  }\n};\nconst faceAnalysisSkuConfig = {\n  sku: {\n    _id: "c44c6346-8a4a-4ff4-a0e1-4fb224d4c99b",\n    orgId: -99,\n    category: "beauty",\n    subCategory: "faceanalysis",\n    productName: "",\n    productImage: "",\n    vendor: "",\n    isActive: true,\n    itemCode: "",\n    styleVariant: "",\n    styleIcon: "",\n    attributes: [],\n    meta: {\n      colorIntensity: 50\n    },\n    createdAt: "",\n    updatedAt: ""\n  }\n};\n/* harmony default export */ const utils_globalVariables = ((/* unused pure expression or super */ null && (globalVariables)));\nfunction getDefaultModelConfig() {\n  return defaultModelConfig;\n}\nfunction globalVariables_isShouldHideInternalUI() {\n  return shouldHideInternalUI;\n}\nfunction setShouldHideInternalUI(state) {\n  shouldHideInternalUI = state;\n}\nfunction getPlatformMode() {\n  return platformMode;\n}\nfunction setPlatformMode(mode) {\n  platformMode = mode;\n}\nfunction getAPIVersion() {\n  return apiVersion;\n}\nfunction setAPIVersion(version) {\n  apiVersion = version;\n}\nfunction getCategory() {\n  return category;\n}\nfunction setCategory(val) {\n  category = val;\n}\nfunction getOpenLiveOnInit() {\n  return openLiveOnInit;\n}\nfunction setOpenLiveOnInit(value) {\n  openLiveOnInit = value;\n}\nfunction getOpenImageOnInit() {\n  return openImageOnInit;\n}\nfunction setOpenImageOnInit(value) {\n  openImageOnInit = value;\n}\n;// ./src/apiService/api-billing.js\n\n\n\n\nconst API = axios_default().create({\n  baseURL: `${"https://api.pixelbinz0.de/service/private/billing/"}`,\n  headers: {\n    "Content-Type": "application/json"\n    // Source: "web",\n  }\n});\nAPI.interceptors.request.use(addSignatureFn({}));\nAPI.defaults.withCredentials = true;\nconst setAuthorization = () => {\n  API.defaults.headers["Authorization"] = `Bearer ${btoa(authConstants_getAPIKey())}`;\n};\nconst getConnectionStatus = async () => {\n  try {\n    const response = await API.get(`_healthz`, {\n      timeout: 4000\n    });\n    if (response.status === 200) return true;\n    throw false;\n  } catch (error) {\n    throw false;\n  }\n};\nconst sendBilling = async () => {\n  if (getPlatformMode() === "platform" || getPlatformMode() === "console") return;\n  setAuthorization();\n  try {\n    const isConnected = await getConnectionStatus();\n    if (!isConnected) throw new Error(globalVariables_errorMessages.noInternetConnection);\n    const body = {\n      eventType: "virtualtryon"\n    };\n    return API.post(`v1.0/billing`, body).then(response => {\n      // console.log(response);\n      return response;\n    }).catch(error => {\n      // console.error("Error billing", error);\n      throw error;\n    });\n  } catch (err) {\n    throw err;\n  }\n};\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/GLTFLoader.js + 1 modules\nvar GLTFLoader = __webpack_require__(4092);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/DRACOLoader.js\nvar DRACOLoader = __webpack_require__(1728);\n;// ./src/utils/assetsCache.js\nlet globalCache = {};\nfunction assetsCache_addToGlobalCache(key, value) {\n  if (!globalCache[key]) {\n    globalCache[key] = value;\n    //console.log(`Added to cache: ${key}`);\n  } else {\n    //console.log(`Key ${key} already exists in the cache.`);\n  }\n}\nfunction assetsCache_hasGlobalAssetKey(key) {\n  return !!globalCache[key];\n}\nfunction assetsCache_getGlobalCacheAsset(key) {\n  if (assetsCache_hasGlobalAssetKey(key)) {\n    //console.log(`Retrieved value for key ${key}`);\n    return globalCache[key];\n  } else {\n    //console.log(`Key ${key} does not exist in the cache.`);\n    return null;\n  }\n}\n;// ./src/apiService/api.js\n\n\n\n\nconst api_API = axios_default().create({\n  headers: {\n    "Content-Type": "application/json"\n    // Source: "web",\n  }\n});\nfunction updateAPIURL() {\n  api_API.defaults.baseURL = `${"https://api.pixelbinz0.de/service/PLATFORM_MODE/misc/".replace("PLATFORM_MODE", getPlatformMode())}`;\n  api_setAuthorization();\n}\napi_API.interceptors.request.use(addSignatureFn({}));\napi_API.defaults.withCredentials = true;\nconst api_setAuthorization = () => {\n  if (getPlatformMode() === "platform") {\n    api_API.defaults.headers["Authorization"] = `Bearer ${authConstants_getAPIKey()}`;\n    // API.defaults.headers[\n    //   "Authorization"\n    // ] = `Bearer ODkzZmU1ZGItZDg5ZS00Yzc3LTk2NjktYTM2OTZhZjRlNGVi`;\n  } else {\n    api_API.defaults.headers["Authorization"] = `Bearer ${btoa(authConstants_getAPIKey())}`;\n  }\n};\nconst getModelsConfig = async (categoryType, subCategoryType, platformType) => {\n  try {\n    const isConnected = await api_getConnectionStatus();\n    if (!isConnected) throw new Error(globalVariables_errorMessages.noInternetConnection);\n    return api_API.get(`${getAPIVersion()}/models?category=${categoryType}&subCategory=${subCategoryType}&platform=${platformType}`).then(response => {\n      return response;\n    }).catch(error => {\n      throw error;\n    });\n  } catch (error) {\n    throw error;\n  }\n};\nconst getSKUData = async id => {\n  try {\n    const isConnected = await api_getConnectionStatus();\n    if (!isConnected) throw new Error(globalVariables_errorMessages.noInternetConnection);\n    api_setAuthorization();\n    return api_API.get(`${getAPIVersion()}/skus/${id}`).then(response => {\n      return response;\n    }).catch(error => {\n      throw error;\n    });\n  } catch (error) {\n    throw error;\n  }\n};\nconst api_getConnectionStatus = async () => {\n  try {\n    const response = await api_API.get(`_healthz`, {\n      timeout: 4000\n    });\n    if (response.status === 200) return true;\n    throw false;\n  } catch (error) {\n    throw false;\n  }\n};\n;// ./src/utils/NetworkStateHandler.js\n\nconst NetworkState = {\n  NONE: "NONE",\n  OFFLINE: "OFFLINE",\n  SLOW: "SLOW",\n  STABLE: "STABLE"\n};\nclass NetworkStateHandler {\n  constructor() {\n    this.currentState = NetworkState.NONE;\n    this.checkInterval = 3000; // Time in milliseconds\n    this.latencyLimitForSlowConnection = 2000; // Time in milliseconds\n  }\n  startPeriodicCheck() {\n    setInterval(() => {\n      this.IsConnectionStable();\n    }, this.checkInterval);\n  }\n  getLastConnectionState() {\n    return this.currentState;\n  }\n  async IsConnectionStable() {\n    try {\n      const startTime = Date.now();\n      await api_getConnectionStatus();\n      const endTime = Date.now();\n      const latency = endTime - startTime;\n      if (latency > this.latencyLimitForSlowConnection) {\n        // console.log("Internet connection is slow.");\n        this.currentState = NetworkState.SLOW;\n        return this.currentState;\n      }\n      //   console.log("Internet connection is stable.");\n      this.currentState = NetworkState.STABLE;\n      return this.currentState;\n    } catch (error) {\n      //   console.error("No internet connection.");\n      this.currentState = NetworkState.OFFLINE;\n      return this.currentState;\n    }\n  }\n}\nconst networkStateHandler = new NetworkStateHandler();\n\n;// ./src/assets/svg/Error.svg\n/* harmony default export */ const svg_Error = (__webpack_require__.p + "assets/src/assets/svg/Error.svg");\n;// ./src/htmlService/errorPanel.js\n\nlet Panel = null;\nlet msg = null;\nlet img = null;\nlet btn = null;\nfunction hideErrorPermissionPanel() {\n  Panel.style.display = "none";\n}\nfunction errorPanel_showErrorPermissionPanel(msgText) {\n  msg.innerHTML = msgText || "Something Went Wrong";\n  Panel.style.display = "flex";\n}\nfunction setErrorElement(handler) {\n  Panel = document.querySelector(".error-panel");\n  msg = document.querySelector(".error-message");\n  img = document.getElementById("error-icon");\n  btn = document.getElementById("error-btn");\n  img.src = svg_Error;\n  msg.innerHTML = "Something Went Wrong";\n  hideErrorPermissionPanel();\n  btn.addEventListener("click", () => {\n    handleErrorPermissionClickEvent(handler);\n  });\n}\nvar handleErrorPermissionClickEvent = handler => {\n  handler();\n};\n;// ./src/utils/three_utils.js\n\n\n\n\n\n\nfunction loadModel(file) {\n  return new Promise(async (resolve, rej) => {\n    // Check for internet connection first\n    const connectionState = await networkStateHandler.IsConnectionStable();\n    if (connectionState === NetworkState.OFFLINE) {\n      //   console.log("### OFFLINE OR SLOW NET");\n      rej(new Error(globalVariables_errorMessages.noInternetConnection));\n      return;\n    }\n    const timeoutDuration = 20000;\n    const timeoutRef = setTimeout(() => {\n      //   console.log("### LOADING TIMEOUT");\n      rej(new Error(globalVariables_errorMessages.noInternetConnection));\n    }, timeoutDuration);\n    const loader = new GLTFLoader/* GLTFLoader */.B();\n    // Optional: Provide a DRACOLoader instance to decode compressed mesh data\n    const dracoLoader = new DRACOLoader/* DRACOLoader */.Z();\n    dracoLoader.setDecoderPath("/draco/");\n    loader.setDRACOLoader(dracoLoader);\n    /// <---\n    loader.load(file, function (gltf) {\n      clearTimeout(timeoutRef);\n      resolve(gltf.scene);\n      assetsCache_addToGlobalCache(file, gltf.scene);\n    }, function (event) {\n      // console.log(event);\n    }, function (error) {\n      clearTimeout(timeoutRef);\n      rej(error);\n    });\n  });\n}\nfunction loadTexture(url) {\n  return new Promise(async (resolve, reject) => {\n    const connectionState = await networkStateHandler.IsConnectionStable();\n    if (connectionState === NetworkState.OFFLINE) {\n      reject(new Error(globalVariables_errorMessages.noInternetConnection));\n    }\n    const timeoutDuration = 10000;\n    const timeoutRef = setTimeout(() => {\n      //   console.log("### OFFLINE OR SLOW NET");\n      rej(new Error(globalVariables_errorMessages.noInternetConnection));\n    }, timeoutDuration);\n    new three_module/* TextureLoader */.Tap().load(url, texture => {\n      clearTimeout(timeoutRef);\n      resolve(texture);\n    }, event => {\n      // console.log(event);\n    }, error => {\n      clearTimeout(timeoutRef);\n      reject(error);\n    });\n  });\n}\nfunction handleDownloadOrApiError(error, msg) {\n  if (error?.message === globalVariables_errorMessages.noInternetConnection) {\n    errorPanel_showErrorPermissionPanel(error.message);\n    return;\n  }\n  errorPanel_showErrorPermissionPanel(msg);\n}\n;// ./src/utils/event.js\n\n\nlet parentOrigin = "";\nlet wrapper = "web";\nconst setWrapperType = type => {\n  wrapper = type;\n  //console.log("wrappertype set ---\x3e" + type);\n};\nconst sendMessage = message => {\n  window.parent !== window.self && window.parent.postMessage(message, "*");\n  if (wrapper === "android" && window.Android) {\n    window.Android.onLog(JSON.stringify(message));\n  }\n  if (wrapper === "ios" && window.webkit && window.webkit.messageHandlers) {\n    window.webkit.messageHandlers.onLog.postMessage(JSON.stringify(message));\n  }\n  if (wrapper === "flutter" && window.flutter_inappwebview && window.flutter_inappwebview.callHandler) {\n    window.flutter_inappwebview.callHandler("onLog", JSON.stringify(message));\n  }\n};\nconst setParentOrigin = origin => {\n  parentOrigin = origin;\n};\nconst emitInitComplete = () => {\n  //console.log("emitInitComplete");\n  sendMessage({\n    type: "init-complete"\n  });\n};\nconst emitModuleLoading = () => {\n  // console.log("emitModuleLoading");\n  sendMessage({\n    type: "loading"\n  });\n};\nconst emitModuleLoaded = () => {\n  // console.log("emitModuleLoaded");\n  sendMessage({\n    type: "loaded"\n  });\n};\nconst emitModuleOpened = () => {\n  //console.log("emitModuleOpened");\n  sendMessage({\n    type: "opened"\n  });\n};\nconst emitModuleClosed = () => {\n  //console.log("emitModuleClosed");\n  sendMessage({\n    type: "closed"\n  });\n};\nconst emitModuleResume = () => {\n  //console.log("emitModuleResume");\n  sendMessage({\n    type: "resume"\n  });\n};\nconst emitModulePause = () => {\n  //console.log("emitModulePause");\n  sendMessage({\n    type: "pause"\n  });\n};\nconst emitCameraOpened = () => {\n  //console.log("emitCameraOpened");\n  sendMessage({\n    type: "camera-opened"\n  });\n};\nconst emitModelTryonModeStarted = () => {\n  //console.log("emitModelTryonModeStarted");\n  sendMessage({\n    type: "ModelMode-started"\n  });\n};\nconst emitUploadModeStarted = () => {\n  //console.log("emitUploadModeStarted");\n  sendMessage({\n    type: "uploadMode-started"\n  });\n};\nconst emitLiveModeStarted = () => {\n  //console.log("emitLiveModeStarted");\n  sendMessage({\n    type: "liveMode-started"\n  });\n};\nconst emitCameraClosed = () => {\n  //console.log("emitCameraClosed");\n  sendMessage({\n    type: "camera-closed"\n  });\n};\nconst emitCameraFailed = () => {\n  //console.log("emitCameraFailed");\n  sendMessage({\n    type: "camera-failed"\n  });\n};\nconst emitCameraAccessIssue = () => {\n  //console.log("emitCameraFailed");\n  sendMessage({\n    type: "camera-access-issue"\n  });\n};\nconst emitPhotoLoaded = base64 => {\n  // console.log("emitPhotoLoaded", base64);\n  sendMessage({\n    type: "photo-loaded",\n    payload: {\n      image: base64,\n      status: "success"\n    }\n  });\n};\nconst emitPhotoLoadedFailed = () => {\n  sendMessage({\n    type: "photo-loaded",\n    payload: {\n      image: null,\n      status: "failed"\n    }\n  });\n};\nconst emitInteractionUI = (btnType, val) => {\n  sendMessage({\n    type: "ui-interaction",\n    payload: {\n      buttonType: btnType,\n      value: val\n    }\n  });\n};\nconst emitSKUApplied = async () => {\n  try {\n    await sendBilling();\n    sendMessage({\n      type: "sku-applied"\n    });\n    return true;\n  } catch (err) {\n    handleDownloadOrApiError(err, "Billing has failed");\n    emitSKUFailed();\n    return false;\n  }\n};\nconst emitSKUFailed = () => {\n  sendMessage({\n    type: "sku-failed"\n  });\n};\nconst emitSubscriptionIssue = response => {\n  sendMessage({\n    type: "subscription-invalid",\n    payload: {\n      response\n    }\n  });\n};\nconst emitReset = () => {\n  //console.log("emitReset");\n  sendMessage({\n    type: "reset"\n  });\n};\nconst emitUploadCancelled = () => {\n  sendMessage({\n    type: "upload-cancelled"\n  });\n};\nconst emitUploadStarted = () => {\n  sendMessage({\n    type: "upload-started"\n  });\n};\nconst event_emitError = error => {\n  sendMessage({\n    type: "error",\n    error\n  });\n};\nconst emitNailColorEvent = (option, val) => {\n  // console.log("emitNailColorEvent", option, val);\n  sendMessage({\n    type: "nailcolor",\n    payload: {\n      options: option,\n      value: val\n    }\n  });\n  //console.log(option, val);\n};\nconst emitFaceAnalysisEvent = (option, val) => {\n  // console.log("emitFaceAnalysisEvent", option, val);\n  sendMessage({\n    type: "faceAnalysis",\n    payload: {\n      options: option,\n      value: val\n    }\n  });\n  //console.log(option, val);\n};\nconst emitRecognizationDistanceAlert = () => {\n  // Your implementation here\n};\n// EXTERNAL MODULE: ./node_modules/@mediapipe/tasks-vision/vision_bundle.mjs\nvar vision_bundle = __webpack_require__(3260);\n;// ./src/MLModels/face_landmarker.task\n/* harmony default export */ const face_landmarker = (__webpack_require__.p + "assets/src/MLModels/face_landmarker.task");\n;// ./src/MLModelProviders/landmarks_provider.js\n\n\n\n\n\n\n\n//import { transformLandmarks } from "./eyeliner_landmark_helper";\n\nclass FacemeshLandmarksProvider {\n  constructor(callback, outputcanvas) {\n    this.isold = false;\n    this.callback = callback;\n    this.faceMesh = null;\n    this.faceLandmarker;\n    this.runningMode = "VIDEO";\n    this.init = false;\n    this.landmarks;\n    this.distanceState = -1;\n    this.prevdistanceState = -1;\n    this.positionState = -1;\n    this.prevPositionState = -1;\n    this.shouldCalculate = false;\n    this.result;\n    this.lastVideoTime = -1;\n  }\n  send(image, _shouldCalculate = false, isVideo = true) {\n    this.shouldCalculate = _shouldCalculate;\n    if (this.isold) {\n      return new Promise((resolve, reject) => {\n        this.faceMesh.send({\n          image: image\n        }).then(() => {\n          // Add any additional logic after successful send\n          resolve(); // Resolve the Promise upon successful completion\n        }).catch(error => {\n          // Handle errors from the send method\n          // console.error("Error sending image:", error);\n          // Perform appropriate actions based on the error, such as retries or fallbacks\n          reject(error); // Reject the Promise with the encountered error\n        });\n      });\n    } else {\n      if (isVideo) {\n        if (this.lastVideoTime !== image.currentTime) {\n          this.lastVideoTime = image.currentTime;\n          this.result = this.faceLandmarker.detectForVideo(image, performance.now());\n        }\n      } else {\n        this.result = this.faceLandmarker.detect(image);\n      }\n      this.landmarks = this.result.faceLandmarks[0];\n      let multiFaceLandmarks = transformLandmarks(this.result.faceLandmarks[0]);\n      if (this.shouldCalculate && this.landmarks) {\n        this.calculateDistance(this.landmarks[300].x, this.landmarks[70].x, this.landmarks[300].y, this.landmarks[70].y);\n        this.categorizePosition(this.landmarks[4].x, this.landmarks[4].y);\n      }\n      this.callback({\n        image: image,\n        landmarks: multiFaceLandmarks,\n        ogLandmarks: this.result.faceLandmarks[0]\n      });\n    }\n  }\n  onResults({\n    image,\n    multiFaceLandmarks,\n    multiFaceGeometry\n  }) {\n    if (this.isold) {\n      if (image != null && multiFaceLandmarks != null) {\n        this.landmarks = multiFaceLandmarks[0];\n        multiFaceLandmarks = transformLandmarks(multiFaceLandmarks[0]);\n        this.callback({\n          image: image,\n          landmarks: multiFaceLandmarks\n        });\n        if (this.shouldCalculate && this.landmarks) {\n          this.calculateDistance(this.landmarks[300].x, this.landmarks[70].x, this.landmarks[300].y, this.landmarks[70].y);\n          this.categorizePosition(this.landmarks[4].x, this.landmarks[4].y);\n          //console.log(this.landmarks[9].x, this.landmarks[9].y);\n        }\n      }\n    }\n  }\n  async createFaceLandmark() {\n    try {\n      const response = await fetch(`${"https://cdn.pixelbin.io/v2/glamar-fynd-835885/"}original/glamar-ml-models/face_landmarker.task`);\n      if (!response.ok) {\n        throw new Error("Failed to fetch the model file from CDN");\n        return;\n      }\n      const vision = await vision_bundle/* FilesetResolver */.Ps.forVisionTasks(`${PUBLIC_PATH}/mediapipe/task-vision/wasm`);\n      this.faceLandmarker = await vision_bundle/* FaceLandmarker */.pR.createFromOptions(vision, {\n        baseOptions: {\n          modelAssetPath: response.url,\n          delegate: "GPU"\n        },\n        outputFaceBlendshapes: false,\n        outputFacialTransformationMatrixes: false,\n        runningMode: this.runningMode,\n        numFaces: 1,\n        minFaceDetectionConfidence: 0.25,\n        minFacePresenceConfidence: 0.25,\n        minTrackingConfidence: 0.25\n      });\n      this.init = true;\n      // console.log("success");\n    } catch (error) {\n      errorPanel_showErrorPermissionPanel();\n      this.init = false;\n      // console.log("error");\n      // Handle errors here\n      // console.error("Error in createImageSegmenter:", error);\n      // You might want to throw the error again to propagate it to the caller\n      //throw error;\n    }\n  }\n  async initialize() {\n    if (this.isold) {\n      await this.initializeOld();\n    } else {\n      // console.log("face init called");\n      await this.createFaceLandmark();\n    }\n  }\n  async initializeOld() {\n    // console.log("face init");\n    let onResults = this.onResults.bind(this);\n    this.faceMesh = new face_mesh.FaceMesh({\n      locateFile: file => {\n        let url = `${PUBLIC_PATH}/mediapipe/${file}`;\n        return url;\n      }\n    });\n    this.faceMesh.setOptions({\n      maxNumFaces: 1,\n      //enableFaceGeometry: true,\n      selfieMode: true,\n      refineLandmarks: true,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5,\n      useCpuInference: true\n    });\n    this.faceMesh.onResults(onResults);\n    await this.faceMesh.initialize();\n    this.init = true;\n  }\n  IsInit() {\n    return this.init;\n  }\n  async setSelfieMode(state) {\n    if (!this.IsInit()) return;\n    if (this.isold) {\n      this.faceMesh.setOptions({\n        selfieMode: state\n      });\n    } else {\n      if (this.getState() === state) return;\n      if (state) this.runningMode = "VIDEO";else this.runningMode = "IMAGE";\n      await this.faceLandmarker.setOptions({\n        runningMode: this.runningMode\n      });\n    }\n  }\n  getState() {\n    if (this.runningMode === "IMAGE") return false;else return true;\n  }\n  async close() {\n    if (this.isold) {\n      await this.faceMesh.close();\n    }\n  }\n  calculateDistance(lefteye, righteyes, lefteyeY, righteyesY) {\n    const eyeToEye = 13.0;\n    const depthToFace = 48.0;\n    const eyeToEyeInPixel = 384.5;\n\n    // Calculate focal length\n    const calculatedFocalLength = this.focalLength(depthToFace, eyeToEye, eyeToEyeInPixel);\n\n    // Calculate eye measurement (assuming x_300 and x_70 are defined)\n    let x_300 = lefteye;\n    let x_70 = righteyes;\n    let y_300 = lefteyeY;\n    let y_70 = righteyesY;\n    let distance;\n    if (Math.abs(x_300 - x_70) > Math.abs(y_300 - y_70)) {\n      distance = Math.abs(x_300 - x_70);\n    } else {\n      distance = Math.abs(y_300 - y_70);\n    }\n    const eyeMeasurement = distance; //Math.abs(x_300 - x_70);\n\n    // Calculate distance\n    const calculatedDistance = this.distanceFinder(calculatedFocalLength, eyeToEye, eyeMeasurement);\n    const categorizedDepth = this.categorizeDepth(calculatedDistance);\n  }\n  categorizeDepth(distance) {\n    const smallThreshold = 40000;\n    const mediumThreshold = 72000;\n\n    // if (isMobileDevice()) {\n    //   smallThreshold = 50000;\n    //   mediumThreshold = 100000;\n    // }\n    let msg = null;\n    //console.log("distance", distance);\n    if (distance < smallThreshold) {\n      this.distanceState = 1;\n      //emitRecognizationDistanceAlert("TOO_CLOSE");\n      msg = "TOO_CLOSE";\n      // showDistanceMessagePanel();\n      // setDistanceMsg("Too Close");\n    } else if (distance > mediumThreshold) {\n      this.distanceState = 2;\n      //emitRecognizationDistanceAlert("TOO_FAR");\n      msg = "TOO_FAR";\n      // showDistanceMessagePanel();\n      // setDistanceMsg("Too far");\n    } else {\n      this.distanceState = 0;\n      //emitRecognizationDistanceAlert("PERFECT");\n      msg = "PERFECT";\n      //hideDistanceMessagePanel();\n    }\n    if (this.distanceState !== this.prevdistanceState) {\n      if (msg) {\n        let json = {\n          state: this.distanceState,\n          message: msg\n        };\n        emitFaceAnalysisEvent("distance", json);\n      }\n      this.prevdistanceState = this.distanceState;\n    }\n    return distance > smallThreshold && distance < mediumThreshold ? false : true;\n  }\n  categorizePosition(xdist, ydist) {\n    const xMinThresold = 0.4;\n    const xMaxThresold = 0.6;\n    const yMinThresold = 0.4;\n    const yMaxThresold = 0.75;\n    let msg = null;\n    //console.log("distance", distance);\n    if (xdist > xMinThresold && xdist < xMaxThresold && ydist > yMinThresold && ydist < yMaxThresold) {\n      this.positionState = 0;\n      msg = "PERFECT";\n    } else {\n      this.positionState = 1;\n      msg = "Out";\n    }\n    if (this.positionState !== this.prevPositionState) {\n      if (msg) {\n        let json = {\n          state: this.positionState,\n          message: msg\n        };\n        emitFaceAnalysisEvent("position", json);\n      }\n      this.prevPositionState = this.positionState;\n    }\n  }\n  focalLength(depthToFace, eyeToEye, eyeToEyeInPixel) {\n    return eyeToEyeInPixel * depthToFace / eyeToEye;\n  }\n\n  // Function to find distance based on focal length, eye-to-eye in pixels, and width calculated\n  distanceFinder(focalLength, eyeToEyeInPixel, widthCalculated) {\n    var distance = eyeToEyeInPixel * focalLength / widthCalculated;\n    return distance - 6;\n  }\n}\n;// ./src/threeComponents/video_bg.js\n\n\n\n\nlet plane;\nfunction getCurrentPlaneMap() {\n  return plane.material.map.clone();\n  //return plane.material.map;\n}\nclass VideoBackground {\n  constructor(scene, width, height) {\n    this.scene = scene;\n    this.image = null;\n    // plane = null;\n    this.width = width;\n    this.height = height;\n    this.imageUpdated = false;\n    this.sizeUpdated = false;\n    this.isVideo = true;\n    this.flipCanvas = false;\n    this.video;\n    this.log;\n    this.texture;\n  }\n  updateDimensions(width, height) {\n    if (plane) {\n      plane.scale.x = width;\n      plane.scale.y = height;\n    }\n  }\n  setImage(image, isvideo_, flip) {\n    this.image = image;\n    this.imageUpdated = true;\n    this.isVideo = isvideo_;\n\n    // if (flip && flip === true) {\n    //   this.flipCanvas = flip;\n    //   if (plane) plane.scale.set(-1, 1, 1);\n    // } else {\n    //   this.flipCanvas = false;\n    //   if (plane) plane.scale.set(1, 1, 1);\n    // }\n  }\n  createNewPlane(video) {\n    this.video = video;\n    const geometry = this.createGeometry();\n    if (video) {\n      this.texture = new three_module/* VideoTexture */.Nv2(video);\n      this.texture.generateMipmaps = false;\n      this.texture.minFilter = three_module/* LinearFilter */.k6q;\n      this.texture.magFilter = three_module/* LinearFilter */.k6q;\n      this.texture.colorSpace = three_module/* SRGBColorSpace */.er$;\n    }\n    let material = new three_module/* MeshBasicMaterial */.V9B({\n      map: this.texture,\n      depthWrite: false,\n      toneMapped: false,\n      fog: false\n    });\n    plane = new three_module/* Mesh */.eaF(geometry, material);\n\n    //plane.scale.set(1, 1, 1);\n    // this.updateDimensions();\n    this.addPlaneToScene();\n  }\n  updatePlaneWithImage(texture) {\n    if (plane) {\n      texture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      texture.generateMipmaps = false;\n      plane.material.map = texture;\n      plane.material.needsUpdate = true;\n    } else {\n      texture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      texture.generateMipmaps = false;\n      const geometry = this.createGeometry();\n      let material = new three_module/* MeshBasicMaterial */.V9B({\n        map: texture,\n        depthWrite: false,\n        toneMapped: false,\n        fog: false\n      });\n      plane = new three_module/* Mesh */.eaF(geometry, material);\n      this.addPlaneToScene();\n    }\n  }\n\n  // createNewPlane() {\n  //   const geometry = this.createGeometry();\n  //   const material = this.createMaterial();\n\n  //   plane = new THREE.Mesh(geometry, material);\n  //   if (this.flipCanvas) {\n  //     //  console.log(this.flipCanvas);\n  //     plane.scale.set(-1, 1, 1);\n  //   } else plane.scale.set(1, 1, 1);\n  //   // this.updateDimensions();\n  //   this.addPlaneToScene();\n  //   if (this.isVideo) plane.material = this.createMaterial();\n  //   else plane.material = this.createMaterialImage();\n  // }\n\n  addPlaneToScene() {\n    if (plane != null) {\n      // this.updateDimensions();\n      this.scene.add(plane);\n      plane.position.set(0, 0, 0);\n    }\n  }\n  createGeometry() {\n    return new three_module/* PlaneGeometry */.bdM(1, 1);\n  }\n  createMaterial() {\n    if (this.image == null) {\n      return new three_module/* MeshBasicMaterial */.V9B({\n        color: new three_module/* Color */.Q1f(0xcccccc)\n      });\n    }\n    // console.log(this.image);\n    const texture = new three_module/* VideoTexture */.Nv2(this.image);\n\n    // texture.colorSpace = THREE.SRGBColorSpace;\n    let material = new three_module/* MeshBasicMaterial */.V9B({\n      map: texture //new THREE.CanvasTexture(this.image),\n      // depthWrite: false,\n      //color: 0xffff00,\n    });\n    return material;\n  }\n  createMaterialImage() {\n    if (this.image == null) {\n      return new three_module/* MeshBasicMaterial */.V9B({\n        color: new three_module/* Color */.Q1f(0xcccccc)\n      });\n    }\n    let material = new three_module/* MeshBasicMaterial */.V9B({\n      map: this.image\n      //color: 0xffff00,\n    });\n    // material.needsUpdate = true;\n    return material;\n  }\n  removePlaneFromScene() {\n    // this.scene.remove(plane);\n    // plane = null;\n  }\n  update(trueVideoWidth, trueVideoHeight) {\n    if (plane) {\n      /*\n      let windowAspect = window.innerWidth / window.innerHeight;\n      var mql = window.matchMedia("(orientation: portrait)");\n      let cw = this.video.videoWidth;\n      let ch = this.video.videoHeight;\n       let videoAspect;\n       if (mql.matches && isMobileDevice()) videoAspect = ch / cw;\n      else videoAspect = cw / ch;\n       let offset = 1;\n      let diff = 0;\n      let boundry = 0;\n       if (mql.matches && isMobileDevice()) {\n        offset = videoAspect;\n      } else {\n        if (windowAspect < videoAspect) {\n          diff = videoAspect - windowAspect;\n          offset = videoAspect - diff;\n          if (windowAspect < 1) offset = 1;\n        } else {\n          offset = videoAspect;\n        }\n      }\n       // this.log.innerHTML = `v9+${windowAspect} + ${videoAspect} + ${offset}\n      // + ${this.video.videoWidth}+ ${this.video.videoHeight} +${window.innerWidth}+${window.innerHeight}\n      // +${mql.matches}+  ${trueVideoWidth}+ ${trueVideoHeight} +  ${diff}`;\n       plane.scale.x = cw / offset;\n      plane.scale.y = ch / offset;\n      */\n      plane.scale.x = trueVideoWidth;\n      plane.scale.y = trueVideoHeight;\n    }\n    // if (plane == null) {\n    //   this.createNewPlane();\n    // }\n    // if (this.sizeUpdated) {\n    //   this.removePlaneFromScene();\n    //   this.createNewPlane();\n    //   this.sizeUpdated = false;\n    //   this.imageUpdated = false;\n    // }\n    // if (this.imageUpdated) {\n    //   if (this.isVideo) null; //plane.material = this.createMaterial();\n    //   else plane.material = this.createMaterialImage();\n    //   this.imageUpdated = false;\n    // }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(7024);\n;// ./src/utils/modelDataProvider.js\n\nclass modelDataProvider {\n  constructor(data) {\n    if (getAPIVersion === "v2.0") {\n      this.id = data._id;\n      this.type = data.type;\n      this.category = data.category;\n      this.platform = data.platform;\n      this.imageUrl = data.imageUrl;\n      this.transform = data.transform;\n      this.isActive = data.isActive;\n    } else {\n      this.category = data.category;\n      this.subCategory = data.subCategory;\n      this.imageUrl = data.imageUrl;\n      this.isActive = data.isActive;\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/environments/RoomEnvironment.js\nvar RoomEnvironment = __webpack_require__(3950);\n// EXTERNAL MODULE: ./src/assets/svg/align_face.svg\nvar align_face = __webpack_require__(6356);\n;// ./src/assets/svg/hand_icon.svg\n/* harmony default export */ const hand_icon = (__webpack_require__.p + "assets/src/assets/svg/hand_icon.svg");\n;// ./src/assets/svg/nail_icon.svg\n/* harmony default export */ const nail_icon = (__webpack_require__.p + "assets/src/assets/svg/nail_icon.svg");\n;// ./src/htmlService/alignMessagePanel.js\n\n\n\n\nlet alignMessagePanel_Panel = null;\nlet alignMessagePanel_msg = null;\nlet alignMessagePanel_img = null;\nlet CurrentType;\nlet CurrentMsg;\nlet isShowing = false;\nfunction updateAlignUI(type, message) {\n  if (CurrentType && CurrentMsg && CurrentType === type && CurrentMsg == message) return;\n  setAlignMsg(message);\n  setAlignIcon(type);\n  event_emitError(message);\n  CurrentType = type;\n  CurrentMsg = message;\n}\nfunction setAlignMsg(message) {\n  alignMessagePanel_msg.innerHTML = message;\n}\nfunction setAlignIcon(type) {\n  // if (CurrentType && CurrentType === type) return;\n  // CurrentType = type;\n  switch (type) {\n    case "face":\n      alignMessagePanel_img.src = align_face/* default */.A;\n      break;\n    case "hand":\n      alignMessagePanel_img.src = hand_icon;\n      break;\n    case "ring":\n      alignMessagePanel_img.src = hand_icon;\n      break;\n    default:\n  }\n}\nfunction hideAlignMessagePanel() {\n  if (isShowing && alignMessagePanel_Panel.style.display === "flex") {\n    updatePanel("none");\n    isShowing = false;\n  }\n  //Panel.style.display = "none";\n}\nfunction showAlignMessagePanel(url) {\n  if (!isShowing && alignMessagePanel_Panel.style.display === "none") {\n    updatePanel("flex");\n    isShowing = true;\n  }\n  // Panel.style.display = "flex";\n}\nconst debouncedUpdatePanel = debounce(state => {\n  alignMessagePanel_Panel.style.display = state;\n}, 50); // Adjust delay as needed\n\nfunction updatePanel(state) {\n  debouncedUpdatePanel(state);\n}\nfunction setAlignMessageElement() {\n  //console.error("emitNailColorEvent");\n  alignMessagePanel_Panel = document.querySelector(".align-message-panel");\n  alignMessagePanel_msg = document.querySelector(".align-message");\n  alignMessagePanel_img = document.getElementById("align-icon");\n  alignMessagePanel_Panel.style.display = "none";\n  isShowing = false;\n  hideAlignMessagePanel();\n}\nfunction debounce(func, delay) {\n  let timerId;\n  return function (...args) {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(() => func.apply(this, args), delay);\n  };\n}\n;// ./src/htmlService/getHtmlElemets.js\nlet loaderContainer = null;\nlet LoaderImage = null;\nlet videoContainer = null;\nlet video_Container = null;\nlet optionsContainer = null;\nlet canavas_container = null;\nlet imageInput = null;\nlet dragContainer = null;\nlet dragLineSpan = null;\nlet dragIcon = null;\nlet modelsContainer = null;\nlet dropZone = null;\nlet canvas = null;\nlet configurationContainer = null;\nlet configurationSubContainer = null;\nlet toastElement = null;\nlet canvasBackButton = null;\nlet log = null;\nlet tryOnScreen = null;\nlet settingOptions = null;\nlet statusPill = null;\nlet popupModal = null;\nlet screenShotTag = null;\nlet lottieLoader = null;\nlet captureTimer = null;\nlet configSettings = null;\nconst setHtmlElements = () => {\n  loaderContainer = document.querySelector(".loader-container");\n  LoaderImage = document.getElementById("loadergif");\n  videoContainer = document.querySelector(".video-container");\n  video_Container = document.querySelector(".video_container");\n  optionsContainer = document.querySelector(".options-conatiner");\n  canavas_container = document.querySelector(".canavas_container");\n  imageInput = document.getElementById("imageInput");\n  dragContainer = document.querySelector(".drag-container");\n  dragLineSpan = document.querySelector(".drag-line-container");\n  dragIcon = document.querySelector(".drag-btn");\n  modelsContainer = document.querySelector(".models-container");\n  dropZone = document.getElementById("dropZone");\n  canvas = document.querySelector(".output_canvas");\n  configurationContainer = document.querySelector(".configuration-container");\n  configurationSubContainer = document.querySelector(".configuration-sub-container");\n  toastElement = document.getElementById("snackbar");\n  canvasBackButton = document.querySelector("#canvas-back-btn");\n  log = document.querySelector(".log-Text");\n  tryOnScreen = document.querySelector(".tryon-screen");\n  settingOptions = document.querySelector(".setting-options");\n  statusPill = document.querySelector(".status-pill");\n  popupModal = document.querySelector(".popup-modal");\n  screenShotTag = document.querySelector(".screenshot-tag");\n  lottieLoader = document.querySelector("#lottie");\n  captureTimer = document.querySelector(".capture-timer");\n  configSettings = document.querySelector(".config-settings-fs");\n};\nfunction getHtmlElements() {\n  return {\n    loaderContainer,\n    LoaderImage,\n    videoContainer,\n    video_Container,\n    optionsContainer,\n    canavas_container,\n    imageInput,\n    dragContainer,\n    dragLineSpan,\n    dragIcon,\n    modelsContainer,\n    dropZone,\n    canvas,\n    configurationContainer,\n    configurationSubContainer,\n    toastElement,\n    canvasBackButton,\n    log,\n    tryOnScreen,\n    settingOptions,\n    statusPill,\n    popupModal,\n    screenShotTag,\n    lottieLoader,\n    captureTimer,\n    configSettings\n  };\n}\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/settingOptions.css\nvar styles_settingOptions = __webpack_require__(6009);\n;// ./src/htmlService/styles/settingOptions.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(styles_settingOptions/* default */.A, options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_settingOptions = (styles_settingOptions/* default */.A && styles_settingOptions/* default */.A.locals ? styles_settingOptions/* default */.A.locals : undefined);\n\n;// ./src/assets/svg/settingIcon.svg\n/* harmony default export */ const settingIcon = (__webpack_require__.p + "assets/src/assets/svg/settingIcon.svg");\n;// ./src/assets/svg/zoomIn.svg\n/* harmony default export */ const zoomIn = (__webpack_require__.p + "assets/src/assets/svg/zoomIn.svg");\n;// ./src/assets/svg/zoomOut.svg\n/* harmony default export */ const zoomOut = (__webpack_require__.p + "assets/src/assets/svg/zoomOut.svg");\n;// ./src/assets/svg/compareIcon.svg\n/* harmony default export */ const compareIcon = (__webpack_require__.p + "assets/src/assets/svg/compareIcon.svg");\n;// ./src/assets/svg/sliderSelected.svg\n/* harmony default export */ const sliderSelected = (__webpack_require__.p + "assets/src/assets/svg/sliderSelected.svg");\n;// ./src/assets/svg/settingsIconSelected.svg\n/* harmony default export */ const settingsIconSelected = (__webpack_require__.p + "assets/src/assets/svg/settingsIconSelected.svg");\n;// ./src/assets/svg/downloadIcon.svg\n/* harmony default export */ const downloadIcon = (__webpack_require__.p + "assets/src/assets/svg/downloadIcon.svg");\n;// ./src/assets/svg/reset-icon.svg\n/* harmony default export */ const reset_icon = (__webpack_require__.p + "assets/src/assets/svg/reset-icon.svg");\n;// ./src/htmlService/settingOptions.js\n\n\n\n\n\n\n\n\n\n\nconst SettingOptionsConfig = [{\n  tag: "configSettings",\n  icon: settingIcon,\n  selectedIcon: settingsIconSelected,\n  isSelected: false,\n  isDisabled: false,\n  show: true,\n  toggleRequired: true\n}, {\n  tag: "comparison",\n  icon: compareIcon,\n  selectedIcon: sliderSelected,\n  isSelected: false,\n  isDisabled: false,\n  show: true,\n  toggleRequired: true\n}, {\n  tag: "zoomIn",\n  icon: zoomIn,\n  selectedIcon: zoomIn,\n  isSelected: false,\n  isDisabled: false,\n  show: true,\n  toggleRequired: false\n}, {\n  tag: "zoomOut",\n  icon: zoomOut,\n  selectedIcon: zoomOut,\n  isSelected: false,\n  isDisabled: true,\n  show: true,\n  toggleRequired: false\n}, {\n  tag: "capture",\n  icon: downloadIcon,\n  selectedIcon: downloadIcon,\n  isSelected: false,\n  isDisabled: true,\n  show: true,\n  toggleRequired: false\n  // customIcon: true,\n}, {\n  tag: "reset",\n  icon: reset_icon,\n  selectedIcon: reset_icon,\n  isSelected: false,\n  isDisabled: true,\n  show: false,\n  toggleRequired: false\n}];\nconst ElementsList = [];\nfunction buildSettingOptions(handler) {\n  const {\n    settingOptions\n  } = getHtmlElements();\n  let container = document.createElement("div");\n  container.classList.add("settingOptions-container");\n  SettingOptionsConfig.forEach((item, index) => {\n    let iconContainer = document.createElement("div");\n    iconContainer.classList.add("settingOptions-icon-container");\n    if (item?.isDisabled) {\n      iconContainer.classList.add("settingOptions-icon-disabled");\n    }\n    if (!item?.customIcon) {\n      let iconWrapperDiv = document.createElement("div");\n      iconWrapperDiv.classList.add("settingOptions-icon-wrapper");\n      let icon = document.createElement("img");\n      icon.id = `settingIcon-${item.tag}`;\n      icon.src = item.icon;\n      iconWrapperDiv.appendChild(icon);\n      iconContainer.appendChild(iconWrapperDiv);\n      if (!item.show) {\n        iconContainer.classList.add("hide-setting-icon");\n      }\n    } else {\n      let iconWrapperDiv = document.createElement("div");\n      iconWrapperDiv.classList.add("settingOptions-custom-icon-wrapper");\n      let customIcon = document.createElement("div");\n      customIcon.classList.add("settingOptions-custom-icon");\n      iconWrapperDiv.appendChild(customIcon);\n      iconContainer.appendChild(iconWrapperDiv);\n    }\n    container.appendChild(iconContainer);\n    ElementsList.push(iconContainer);\n    iconContainer.addEventListener("click", () => {\n      handleSettingIconClick(item, index, handler);\n    });\n  });\n  settingOptions.appendChild(container);\n}\nfunction handleSettingIconClick(configItem, ClickedIndex, handler) {\n  if (configItem.isDisabled) return;\n  if (configItem?.toggleRequired) {\n    handleToggle(configItem, ClickedIndex);\n  }\n  handler(configItem, ClickedIndex, ElementsList);\n}\nfunction handleToggle(configItem, ClickedIndex) {\n  // handle clicked item first\n  let icon = document.getElementById(`settingIcon-${configItem.tag}`);\n  if (configItem.isSelected && !configItem?.customIcon) {\n    ElementsList[ClickedIndex].classList.remove("settingOptions-icon-selected");\n    configItem.isSelected = false;\n    icon.src = configItem.icon;\n  } else if (!configItem.isSelected && !configItem?.customIcon) {\n    ElementsList[ClickedIndex].classList.add("settingOptions-icon-selected");\n    configItem.isSelected = true;\n    icon.src = configItem.selectedIcon;\n  }\n  // toggle icon that requires to be toggled\n\n  for (let [index, eachConfig] of SettingOptionsConfig.entries()) {\n    if (index !== ClickedIndex && eachConfig?.toggleRequired && !eachConfig?.customIcon) {\n      if (eachConfig?.isSelected) {\n        ElementsList[index].classList.remove("settingOptions-icon-selected");\n        eachConfig.isSelected = false;\n        let prevSelectedIcon = document.getElementById(`settingIcon-${eachConfig.tag}`);\n        prevSelectedIcon.src = eachConfig.icon;\n      }\n    }\n  }\n}\nfunction unSelectAllSettings() {\n  SettingOptionsConfig.forEach((item, indx) => {\n    item.isSelected = false;\n    ElementsList[indx].classList.remove("settingOptions-icon-selected");\n    let prevSelectedIcon = document.getElementById(`settingIcon-${item.tag}`);\n    if (prevSelectedIcon?.src) prevSelectedIcon.src = item.icon;\n  });\n}\nfunction disableSettingIcon(tag) {\n  let idxToBeDisabled = SettingOptionsConfig.map(item => item.tag).indexOf(tag);\n  if (!SettingOptionsConfig[idxToBeDisabled].isDisabled) {\n    ElementsList[idxToBeDisabled].classList.add("settingOptions-icon-disabled");\n    SettingOptionsConfig[idxToBeDisabled].isDisabled = true;\n  }\n}\nfunction enableSettingIcon(tag) {\n  let idxToBeEnabled = SettingOptionsConfig.map(item => item.tag).indexOf(tag);\n  if (SettingOptionsConfig[idxToBeEnabled].isDisabled) {\n    ElementsList[idxToBeEnabled].classList.remove("settingOptions-icon-disabled");\n    SettingOptionsConfig[idxToBeEnabled].isDisabled = false;\n  }\n}\nfunction enableBothZoomIcons() {\n  enableSettingIcon("zoomIn");\n  enableSettingIcon("zoomOut");\n}\nfunction showSettingOptions() {\n  const {\n    settingOptions\n  } = getHtmlElements();\n  settingOptions.classList.remove("hide-settingOptions");\n  settingOptions.style.visibility = "visible";\n}\nfunction hideSettingOptions() {\n  const {\n    settingOptions\n  } = getHtmlElements();\n  settingOptions.classList.add("hide-settingOptions");\n  settingOptions.style.visibility = "hidden";\n}\nfunction hideSettingIcon(tag, isInitial) {\n  let idxToShow = SettingOptionsConfig.map(item => item.tag).indexOf(tag);\n  if (SettingOptionsConfig[idxToShow].show || isInitial) {\n    ElementsList[idxToShow].classList.add("hide-setting-icon");\n    SettingOptionsConfig[idxToShow].show = false;\n  }\n}\nfunction showSettingIcon(tag) {\n  let idxToShow = SettingOptionsConfig.map(item => item.tag).indexOf(tag);\n  if (!SettingOptionsConfig[idxToShow].show) {\n    ElementsList[idxToShow].classList.remove("hide-setting-icon");\n    SettingOptionsConfig[idxToShow].show = true;\n  }\n}\n;// ./src/assets/glasses.hdr\n/* harmony default export */ const glasses = (__webpack_require__.p + "assets/src/assets/glasses.hdr");\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/loaders/RGBELoader.js\nvar RGBELoader = __webpack_require__(7231);\n;// ./src/assets/svg/positionIcon.svg\n/* harmony default export */ const positionIcon = (__webpack_require__.p + "assets/src/assets/svg/positionIcon.svg");\n;// ./src/assets/svg/positionIconSelected.svg\n/* harmony default export */ const positionIconSelected = (__webpack_require__.p + "assets/src/assets/svg/positionIconSelected.svg");\n;// ./src/assets/svg/scaleIcon.svg\n/* harmony default export */ const scaleIcon = (__webpack_require__.p + "assets/src/assets/svg/scaleIcon.svg");\n;// ./src/assets/svg/scaleIconSelected.svg\n/* harmony default export */ const scaleIconSelected = (__webpack_require__.p + "assets/src/assets/svg/scaleIconSelected.svg");\n;// ./src/assets/svg/fingerIcon.svg\n/* harmony default export */ const fingerIcon = (__webpack_require__.p + "assets/src/assets/svg/fingerIcon.svg");\n;// ./src/assets/svg/fingerIconSelected.svg\n/* harmony default export */ const fingerIconSelected = (__webpack_require__.p + "assets/src/assets/svg/fingerIconSelected.svg");\n;// ./src/assets/svg/indexSelected.svg\n/* harmony default export */ const indexSelected = (__webpack_require__.p + "assets/src/assets/svg/indexSelected.svg");\n;// ./src/assets/svg/middleSelected.svg\n/* harmony default export */ const middleSelected = (__webpack_require__.p + "assets/src/assets/svg/middleSelected.svg");\n;// ./src/assets/svg/ringSelected.svg\n/* harmony default export */ const ringSelected = (__webpack_require__.p + "assets/src/assets/svg/ringSelected.svg");\n;// ./src/assets/svg/littleSelected.svg\n/* harmony default export */ const littleSelected = (__webpack_require__.p + "assets/src/assets/svg/littleSelected.svg");\n;// ./src/assets/svg/indexUnselected.svg\n/* harmony default export */ const indexUnselected = (__webpack_require__.p + "assets/src/assets/svg/indexUnselected.svg");\n;// ./src/assets/svg/middleUnselected.svg\n/* harmony default export */ const middleUnselected = (__webpack_require__.p + "assets/src/assets/svg/middleUnselected.svg");\n;// ./src/assets/svg/ringUnselected.svg\n/* harmony default export */ const ringUnselected = (__webpack_require__.p + "assets/src/assets/svg/ringUnselected.svg");\n;// ./src/assets/svg/littleUnselected.svg\n/* harmony default export */ const littleUnselected = (__webpack_require__.p + "assets/src/assets/svg/littleUnselected.svg");\n;// ./src/constants/configContants.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst configContants_sliderConfigurations = [{\n  text: "Opacity",\n  leftText: "",\n  rightText: "",\n  tag: "Opacity",\n  min: 0.2,\n  max: 0.8,\n  step: 0.01,\n  defaultValue: 0.5\n  //\n}\n// {\n//   text: "Shift Horizontally",\n//   leftText: "Left",\n//   rightText: "Right",\n//   tag: "horizontal",\n//   min: -1,\n//   max: 1,\n//   step: 0.1,\n//   defaultValue: 0,\n// },\n// {\n//   text: "Zoom",\n//   leftText: "Zoom Out",\n//   rightText: "Zoom In",\n//   tag: "zoom",\n//   min: 0.8,\n//   max: 1.2,\n//   step: 0.03,\n//   defaultValue: 1,\n// },\n];\nconst configBottomSheetConfig = {\n  tabs: [{\n    label: "Finger",\n    selectedIcon: fingerIconSelected,\n    tag: "finger",\n    unSelectedIcon: fingerIcon,\n    allowedCategory: ["ring"],\n    selected: false,\n    subComponent: [{\n      type: "fingers",\n      tag: "fingers",\n      defaultValue: 2\n    }]\n  }, {\n    label: "Position",\n    tag: "position",\n    selectedIcon: positionIconSelected,\n    unSelectedIcon: positionIcon,\n    allowedCategory: ["ring", "glasses", "cap", "necklace", "bracelet", "earring", "watch", "mangtika"],\n    selected: false,\n    subComponent: [{\n      type: "slider",\n      tag: "horizontal",\n      leftText: "Left",\n      rightText: "Right",\n      defaultValue: 0,\n      step: 0.01,\n      min: -1,\n      max: 1\n    }, {\n      type: "slider",\n      tag: "vertical",\n      leftText: "Up",\n      rightText: "Down",\n      defaultValue: 0,\n      step: 0.01,\n      min: -1,\n      max: 1\n    }]\n  }, {\n    label: "Scale",\n    tag: "scale",\n    selectedIcon: scaleIconSelected,\n    unSelectedIcon: scaleIcon,\n    allowedCategory: ["ring", "glasses", "cap", "necklace", "bracelet", "earring", "watch", "mangtika"],\n    selected: false,\n    subComponent: [{\n      type: "slider",\n      leftText: "Scale",\n      tag: "scale",\n      defaultValue: 1,\n      step: 0.02,\n      min: 0.8,\n      max: 1.2\n    }]\n  }]\n};\nconst ringIconConfig = [{\n  label: "Index",\n  tag: "index",\n  unSelectedIcon: indexSelected,\n  selectedIcon: indexUnselected\n}, {\n  label: "Middle",\n  tag: "middle",\n  unSelectedIcon: middleSelected,\n  selectedIcon: middleUnselected\n}, {\n  label: "Ring",\n  tag: "ring",\n  unSelectedIcon: ringSelected,\n  selectedIcon: ringUnselected\n}, {\n  label: "Little",\n  tag: "little",\n  unSelectedIcon: littleSelected,\n  selectedIcon: littleUnselected\n}];\nconst CategoriesTypes = [{\n  allowedCategory: ["lipstick", "eyeliner", "eyeshadow", "blush", "eyebrow"],\n  apiPayload: "lipstick",\n  // any of makeup category\n  categoryKey: "makeup"\n}\n// {\n//   allowedCategory: ["hair"],\n//   apiPayload: "hair", // hair category\n//   categoryKey: "hair",\n// },\n// {\n//   allowedCategory: ["glasses"],\n//   apiPayload: "glasses", // hair category\n//   categoryKey: "glasses",\n// },\n];\n\n// src/constants/configContants.js\nconst configContants_modelSelectionIcons = {\n  // your icon definitions here\n};\n;// ./src/utils/sliderHandler.js\n\n\nlet opacityDefaultValue = configContants_sliderConfigurations[0].defaultValue;\nlet opacityValue = configContants_sliderConfigurations[0].defaultValue;\nlet scaleValue = configBottomSheetConfig.tabs[2].subComponent[0].defaultValue;\nlet xValue = configBottomSheetConfig.tabs[1].subComponent[0].defaultValue;\nlet yValue = configBottomSheetConfig.tabs[1].subComponent[1].defaultValue;\nlet ringIndex = configBottomSheetConfig.tabs[0].subComponent[0].defaultValue;\nfunction getOpacitySliderValue() {\n  return opacityValue;\n}\nfunction setDefaultOpacitySliderValue(value) {\n  opacityDefaultValue = value;\n}\nfunction setOpacitySliderValue(value) {\n  opacityValue = value;\n}\nfunction ResetOpacitySliderValue() {\n  opacityValue = opacityDefaultValue;\n  resetSliderValues();\n}\nfunction getRingIndex() {\n  return ringIndex;\n}\nfunction setRingIndex(index) {\n  ringIndex = index;\n}\nfunction getScaleSliderValue() {\n  return scaleValue;\n}\nfunction getXSliderValue() {\n  return xValue;\n}\nfunction getYSliderValue() {\n  return yValue;\n}\nfunction setScaleSliderValue(positive) {\n  scaleValue = positive;\n  // let currentVal = 0;\n  // if (positive) {\n  //   currentVal =\n  //     scaleValue + configBottomSheetConfig.tabs[2].subComponent[0].step;\n  //   if (currentVal < configBottomSheetConfig.tabs[2].subComponent[0].max)\n  //     scaleValue = currentVal;\n  //   else scaleValue = configBottomSheetConfig.tabs[2].subComponent[0].max;\n  // } else {\n  //   currentVal =\n  //     scaleValue - configBottomSheetConfig.tabs[2].subComponent[0].step;\n  //   if (currentVal > configBottomSheetConfig.tabs[2].subComponent[0].min)\n  //     scaleValue = currentVal;\n  //   else scaleValue = configBottomSheetConfig.tabs[2].subComponent[0].min;\n  // }\n}\nfunction setXSliderValue(positive) {\n  if (sdkEngine_getIsVideo()) xValue = -positive;else xValue = positive;\n  // let currentVal = 0;\n  // if (positive) {\n  //   currentVal = xValue + configBottomSheetConfig.tabs[1].subComponent[0].step;\n  //   if (currentVal < configBottomSheetConfig.tabs[1].subComponent[0].max)\n  //     xValue = currentVal;\n  //   else xValue = configBottomSheetConfig.tabs[1].subComponent[0].max;\n  // } else {\n  //   currentVal = xValue - configBottomSheetConfig.tabs[1].subComponent[0].step;\n  //   if (currentVal > configBottomSheetConfig.tabs[1].subComponent[0].min)\n  //     xValue = currentVal;\n  //   else xValue = configBottomSheetConfig.tabs[1].subComponent[0].min;\n  // }\n}\nfunction setYSliderValue(positive) {\n  yValue = positive;\n  // let currentVal = 0;\n  // if (positive) {\n  //   currentVal = yValue + configBottomSheetConfig.tabs[1].subComponent[1].step;\n  //   if (currentVal < configBottomSheetConfig.tabs[1].subComponent[1].max)\n  //     yValue = currentVal;\n  //   else yValue = configBottomSheetConfig.tabs[1].subComponent[1].max;\n  // } else {\n  //   currentVal = yValue - configBottomSheetConfig.tabs[1].subComponent[1].step;\n  //   if (currentVal > configBottomSheetConfig.tabs[1].subComponent[1].min)\n  //     yValue = currentVal;\n  //   else yValue = configBottomSheetConfig.tabs[1].subComponent[1].min;\n  // }\n}\nfunction resetSliderValues() {\n  scaleValue = configBottomSheetConfig.tabs[2].defaultValue;\n  xValue = configBottomSheetConfig.tabs[1].subComponent[0].defaultValue;\n  yValue = configBottomSheetConfig.tabs[1].subComponent[1].defaultValue;\n  ringIndex = configBottomSheetConfig.tabs[0].subComponent.defaultValue;\n}\n;// ./src/virtualTryOns/face_mask.js\n\n\n\n\n\n// import { getXSliderValue, getYSliderValue } from "../utils/sliderHandler";\n\nclass FaceMask {\n  constructor(scene, width, height) {\n    this.scene = scene;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = null;\n    this.width = width;\n    this.height = height;\n    this.configOffset = 1;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      // map: texture,\n      // transparent: true,\n      // opacity: 0.5,\n    });\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  updateMaterial(material) {\n    this.material = material;\n    this.material.needsUpdate = true;\n  }\n  setConfigOffset(offset) {\n    this.configOffset = offset;\n  }\n  addFaces() {\n    let leftEyeUpper1 = scaleLandmark(this.landmarks[264], this.width, this.height);\n    let rightEyeUpper1 = scaleLandmark(this.landmarks[34], this.width, this.height);\n    const eyeDist = Math.sqrt((leftEyeUpper1.x - rightEyeUpper1.x) ** 2 + (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 + (leftEyeUpper1.z - rightEyeUpper1.z) ** 2);\n    makeGeometry(this.landmarks, this.geometry, "foundation");\n    if (!this.faces) {\n      this.faces = new three_module/* Mesh */.eaF(this.geometry, this.material);\n      this.faces.renderOrder = 1;\n      this.faces.envMapIntensity = 1;\n      this.faces.material.colorWrite = false;\n      this.scene.add(this.faces);\n    } else {\n      this.faces.geometry = this.geometry;\n    }\n    this.faces.position.set(-this.width * -0.0005 + getXSliderValue() * this.configOffset * eyeDist, -(getYSliderValue() * this.configOffset * eyeDist), -this.width * 0.07);\n    this.faces.scale.set(this.width, this.height, this.width);\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    this.faces = null;\n  }\n  hide() {\n    if (this.faces) this.faces.visible = false;\n  }\n  show() {\n    if (this.faces) this.faces.visible = true;\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n  }\n  forceUpdate() {\n    this.addFaces();\n  }\n}\n;// ./src/makeupVTOs/style_factory.js\nclass StyleFactory {\n  constructor() {\n    if (this.constructor === StyleFactory) {\n      throw new Error("Abstract class StyleFactory cannot be instantiated.");\n    }\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    throw new Error("Method createStyle() must be implemented.");\n  }\n}\n;// ./src/htmlService/snackbar.js\n\nlet snackbarElement = null;\nfunction getSnackbarElement() {\n  return snackbarElement;\n}\nfunction setSnackbarElement() {\n  snackbarElement = document.getElementById("snackbar");\n}\nfunction showSnackbar(message = "Something Went Wrong") {\n  return new Promise((resolve, reject) => {\n    try {\n      emitError(message);\n      const snackbarElement = getSnackbarElement();\n      snackbarElement.classList.add("show-bar");\n      snackbarElement.innerHTML = "";\n      const snackBarInnerDiv = `\n      <div class=\'snackbar-container\'>\n        <div class=\'snackbar-left-icon-container\'>\n          <img class=\'snackbar-left-icon-image\' src="https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar_assets/camera-off.svg"/>\n        </div>\n        <div class=\'snackbar-text-container\'>\n          ${message}\n        </div>\n        <div class=\'snackbar-right-icon-container\'>\n          <img id="snackbar-close-icon" src="https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar_assets/x-close.svg"/>\n        </div>\n      </div>`;\n      snackbarElement.innerHTML = snackBarInnerDiv;\n      resolve("hidden succesfully");\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\nfunction hideSnackbar() {\n  const snackbarElement = getSnackbarElement();\n  snackbarElement.classList.remove("show-bar");\n}\nfunction isSnackBarVisible() {\n  if (snackbarElement && snackbarElement.style.display !== "none") return true;else return false;\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/configSlider.css\nvar configSlider = __webpack_require__(7038);\n;// ./src/htmlService/styles/configSlider.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar configSlider_options = {};\n\nconfigSlider_options.styleTagTransform = (styleTagTransform_default());\nconfigSlider_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      configSlider_options.insert = insertBySelector_default().bind(null, "head");\n    \nconfigSlider_options.domAPI = (styleDomAPI_default());\nconfigSlider_options.insertStyleElement = (insertStyleElement_default());\n\nvar configSlider_update = injectStylesIntoStyleTag_default()(configSlider/* default */.A, configSlider_options);\n\n\n\n\n       /* harmony default export */ const styles_configSlider = (configSlider/* default */.A && configSlider/* default */.A.locals ? configSlider/* default */.A.locals : undefined);\n\n;// ./src/assets/svg/Angle Right.svg\n/* harmony default export */ const Angle_Right = (__webpack_require__.p + "assets/src/assets/svg/Angle Right.svg");\n;// ./src/assets/svg/resetBig.svg\n/* harmony default export */ const resetBig = (__webpack_require__.p + "assets/src/assets/svg/resetBig.svg");\n;// ./src/htmlService/configSlider.js\n\n\n\n\n\n\n\n\nlet configContainerDiv = null;\nlet ringContainerDiv = null;\nlet confgSliderValueDiv = null;\nlet sliderInput = null;\nlet selectedImage = null;\nlet defaultOpacity = 50;\nfunction setDefaultOpacitySlider(value) {\n  defaultOpacity = value * 100;\n  ResetSliders();\n}\nconst initConfigContainer = (conifContainer, ringContainer) => {\n  configContainerDiv = conifContainer;\n};\n\n// export const createSlider = (containerList, handler) => {\n//   let moveBtnsContainer = containerList[0];\n//   let zoomBtnsContainer = containerList[1];\n\n//   const slideDiv = document.createElement("div");\n//   const MoveImgDiv = document.createElement("div");\n//   MoveImgDiv.classList.add("d-flex");\n//   MoveImgDiv.classList.add("g-8");\n//   const ZoomImgDiv = document.createElement("div");\n//   ZoomImgDiv.classList.add("d-flex");\n//   ZoomImgDiv.classList.add("g-8");\n//   for (const [index, sliderConfig] of distortConfig.move.entries()) {\n//     const img = document.createElement("img");\n//     img.src = sliderConfig.iconLink;\n//     img.addEventListener("click", () => {\n//       handler(sliderConfig.tag);\n//     });\n//     MoveImgDiv.appendChild(img);\n//   }\n//   moveBtnsContainer.appendChild(MoveImgDiv);\n//   for (const [index, sliderConfig] of distortConfig.zoom.entries()) {\n//     const img = document.createElement("img");\n//     img.src = sliderConfig.iconLink;\n//     img.addEventListener("click", () => {\n//       handler(sliderConfig.tag);\n//     });\n//     ZoomImgDiv.appendChild(img);\n//   }\n//   zoomBtnsContainer.appendChild(ZoomImgDiv);\n// };\n\nconst createSlider = (container, handler) => {\n  for (const [index, sliderConfig] of sliderConfigurations.entries()) {\n    const eachSliderWrapperDiv = `\n        <div class=\'config-slider\'>\n            <div class="config-reset-icon">\n              <img src=${resetIcon}></img>\n            </div>\n            <div class="config-slider-type">Depth</div>\n            <div class=\'config-type-slider\'>\n                <input id="config-slider-type${index}" class="configSlider" type="range" id="scaleSlider" min="${sliderConfig.min}" max="${sliderConfig.max}" step="${sliderConfig.step}" value="${sliderConfig.defaultValue}">\n            </div>\n            <div class="config-slider-value">${defaultOpacity}</div>\n        </div>\n    `;\n    container.innerHTML += eachSliderWrapperDiv;\n  }\n  confgSliderValueDiv = document.querySelector(`.config-slider-value`);\n  for (const [index, sliderConfig] of sliderConfigurations.entries()) {\n    const sliderInput = document.querySelector(`#config-slider-type${index}`);\n    sliderInput.addEventListener("input", () => {\n      confgSliderValueDiv.innerText = sliderInput.value;\n      handler(sliderInput.value, sliderConfig.tag);\n    });\n  }\n};\nconst createConfigBottomSheet = listener => {\n  let {\n    configurationContainer\n  } = getHtmlElements();\n  const configBottomSheetFragment = document.createDocumentFragment();\n  const configBottomSheetDiv = document.createElement("div");\n  const configBottomSheetHeaderDiv = document.createElement("div");\n  const configBottomSheetDividerDiv = document.createElement("div");\n  const configBottomSheetContentDiv = document.createElement("div");\n  const configBottomSheetActionsDiv = document.createElement("div");\n  configBottomSheetDiv.classList.add("config-bottom-sheet-container");\n  configBottomSheetHeaderDiv.classList.add("config-bottom-sheet-header");\n  configBottomSheetDividerDiv.classList.add("config-bottom-sheet-divider");\n  configBottomSheetContentDiv.classList.add("config-bottom-sheet-content");\n  configBottomSheetActionsDiv.classList.add("config-bottom-sheet-actions");\n  const HeaderElements = getHeaderElements();\n  configBottomSheetHeaderDiv.append(HeaderElements);\n  const SheetContent = getSheetTabContent(listener);\n  configBottomSheetContentDiv.append(SheetContent);\n  const SheetActionsElements = getSheetActionsContent(listener);\n  configBottomSheetActionsDiv.append(SheetActionsElements);\n  configBottomSheetDiv.append(configBottomSheetHeaderDiv, configBottomSheetDividerDiv, configBottomSheetContentDiv, configBottomSheetActionsDiv);\n  configBottomSheetFragment.append(configBottomSheetDiv);\n  configurationContainer.appendChild(configBottomSheetFragment);\n  hideConfigContainer(true);\n};\nfunction getSheetTabContent(handler) {\n  const sheetContentFragment = document.createDocumentFragment();\n  const LeftText = document.createElement("div");\n  LeftText.classList.add("config-bottom-sheet-left-text");\n  LeftText.innerText = "Intensity";\n  const SliderDiv = document.createElement("div");\n  SliderDiv.classList.add("config-bottom-sheet-slider");\n  const SliderInput = document.createElement("input");\n  SliderInput.type = "range";\n  SliderInput.step = "0.01";\n  SliderDiv.append(SliderInput);\n  SliderInput.addEventListener("input", () => {\n    handleSliderCss(sliderInput.value);\n    handleInputEvent(SliderInput.value, handler);\n  });\n  const RightText = document.createElement("div");\n  RightText.classList.add("config-bottom-sheet-right-text");\n  RightText.innerText = "80";\n  RightText.min = "0.2";\n  RightText.max = "0.8";\n  confgSliderValueDiv = RightText;\n  sliderInput = SliderInput;\n  sheetContentFragment.append(LeftText, SliderDiv, RightText);\n  return sheetContentFragment;\n}\nfunction handleInputEvent(value, handler) {\n  confgSliderValueDiv.innerText = Math.round(value);\n  handler(value / 100, "Opacity");\n}\nfunction getHeaderElements() {\n  const HeaderFragment = document.createDocumentFragment();\n  for (let elem of configContants_sliderConfigurations) {\n    // if (elem.allowedCategory?.length) {\n    const PillDiv = document.createElement("div");\n    PillDiv.classList.add("config-bottom-sheet-header-text");\n    PillDiv.innerText = elem.text;\n    HeaderFragment.append(PillDiv);\n    // }\n  }\n  return HeaderFragment;\n}\nfunction getSheetActionsContent(handler) {\n  const SheetActionFragment = document.createDocumentFragment();\n  const ResetIconDiv = document.createElement("div");\n  const CloseIconDiv = document.createElement("div");\n  ResetIconDiv.classList.add("config-bottom-sheet-reset-button");\n  CloseIconDiv.classList.add("config-bottom-sheet-close-button");\n  ResetIconDiv.addEventListener("click", () => {\n    handler("", "reset");\n  });\n  CloseIconDiv.addEventListener("click", () => {\n    handler("", "close");\n  });\n  const ResetIcon = document.createElement("img");\n  const CloseIcon = document.createElement("img");\n  ResetIcon.src = resetBig;\n  CloseIcon.src = Angle_Right;\n  ResetIconDiv.append(ResetIcon);\n  CloseIconDiv.append(CloseIcon);\n  SheetActionFragment.append(ResetIconDiv, CloseIconDiv);\n  return SheetActionFragment;\n}\nconst ResetSliders = () => {\n  // const sliderInput = document.querySelector(`#config-slider-type${index}`);\n  sliderInput.value = defaultOpacity;\n  confgSliderValueDiv.innerText = defaultOpacity;\n  handleSliderCss(defaultOpacity);\n};\nfunction handleSliderCss(value) {\n  sliderInput.style.background = `linear-gradient(to right, white 0%, white ${value}%, rgba(255, 255, 255, 0.4) ${value}%, rgba(255, 255, 255, 0.4) 100%)`;\n}\nconst toggleConfigContainer = () => {\n  // if (!iconConfig[3].isSelected) {\n  if (!SettingOptionsConfig[0].isSelected) {\n    // above value gets set in the settingOptions file first\n    hideConfigContainer();\n  } else {\n    showConfigContainer();\n  }\n};\nconst showConfigContainer = () => {\n  if (globalVariables_isShouldHideInternalUI()) return;\n  configContainerDiv.classList.add("show-configuration-container");\n  emitInteractionUI("config", "opened");\n};\nconst isConfigContainerActive = () => {\n  if (configContainerDiv.style.visibility === "visible") {\n    return false;\n  }\n  return true;\n};\nconst hideConfigContainer = (initial = false) => {\n  configContainerDiv.classList.remove("show-configuration-container");\n  if (!initial) emitInteractionUI("config", "closed");\n};\nfunction setApplyButton(handler) {\n  const applyButton = document.getElementById("config-close");\n  // applyButton.addEventListener("click", (event) => {\n  //   handler();\n  // });\n}\nfunction setResetButton(handler) {\n  // const resetButton = document.querySelector(".config-reset-icon");\n  // resetButton.addEventListener("click", (event) => {\n  //   handler();\n  //   handler(2);\n  // });\n}\n;// ./src/makeupVTOs/blush-style/blush_style.js\n\n\n\n\n\n\n\n\nclass BlushStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry);\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width / 10);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/assets/Blush_oval.png\n/* harmony default export */ const Blush_oval = (__webpack_require__.p + "assets/src/assets/Blush_oval.png");\n;// ./src/makeupVTOs/blush-style/glossy_blush_mask.js\n\n // Import BlushStyle class\n\n\n\nvar vertexShader = [\'varying vec2 vUv;\', \'void main() {\', \'  vUv = uv;\', \'  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\', \'}\'].join(\'\\n\');\nvar fragmentShader = [\'uniform sampler2D makeupTexture;\',\n// The texture you want to render\n\'uniform vec3 colorValue;\',\n// Uniform for controlling color\n\'uniform float opacityValue;\',\n// Uniform for controlling opacity\n\'varying vec2 vUv;\', \'void main() {\', \'  vec4 textureColor = texture2D(makeupTexture, vUv);\', \'  if (textureColor.a < 0.01) {\', \'    discard;\', \'  }\', \'  gl_FragColor = vec4(textureColor.rgb * colorValue, textureColor.a * opacityValue);\',\n// Multiply texture color with the specified color and opacity\n\'}\'].join(\'\\n\');\nclass GlossyBlushMask extends BlushStyle {\n  constructor(apiResponseData, scene, width, height) {\n    const material = new three_module/* ShaderMaterial */.BKk({\n      vertexShader: vertexShader,\n      // Your vertex shader code\n      fragmentShader: fragmentShader,\n      // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new three_module/* TextureLoader */.Tap().load(Blush_oval, function (texture) {\n            // texture.premultiplyAlpha = true;\n            texture.flipY = false;\n          })\n        },\n        opacityValue: {\n          value: 1\n        },\n        colorValue: {\n          value: new three_module/* Vector3 */.Pq0(1, 1, 1)\n        }\n      },\n      transparent: true,\n      color: 0xff0000\n    });\n    material.uniforms.colorValue.value.set(1, 0, 0); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material.uniforms.opacityValue.value = 0.6;\n    const material1 = new three_module/* ShaderMaterial */.BKk({\n      vertexShader: vertexShader,\n      // Your vertex shader code\n      fragmentShader: fragmentShader,\n      // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new three_module/* TextureLoader */.Tap().load(Blush_oval, function (texture) {\n            // texture.premultiplyAlpha = true;\n            texture.flipY = false;\n          })\n        },\n        opacityValue: {\n          value: 1\n        },\n        colorValue: {\n          value: new three_module/* Vector3 */.Pq0(1, 1, 1)\n        }\n      },\n      transparent: true,\n      color: 0xff0000\n    });\n    material1.uniforms.colorValue.value.set(1, 1, 1); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material1.uniforms.opacityValue.value = 0.6;\n    material1.needsUpdate = true;\n    const materialsArray = [material, material1];\n    super(apiResponseData, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/blush-style/glitter_blush_mask.js\n\n // Import BlushStyle class\n\n\n\n\nvar glitter_blush_mask_vertexShader = [\'varying vec2 vUv;\', \'void main() {\', \'  vUv = uv;\', \'  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\', \'}\'].join(\'\\n\');\nvar glitterFragmentShader = [\'uniform sampler2D makeupAO;\', \'uniform sampler2D makeupColorMask;\', \'uniform sampler2D makeupLighting;\', \'uniform vec3 colorValue;\', \'uniform float mainTextureAlpha;\', \'uniform vec3 newColorValue;\',\n// New color for color mask\n\'uniform float roughness;\',\n// Roughness property\n\n\'varying vec2 vUv;\', \'void main() {\', \'  vec2 uv = vec2(vUv.x, 1.0 - vUv.y);\',\n// Flip the texture in the y-axis\n\'  float aoValue = texture2D(makeupAO, uv).r;\', \'  vec4 colorMask = texture2D(makeupColorMask, uv);\', \'  vec4 lighting = texture2D(makeupLighting, uv);\', \'  vec4 finalColor = colorMask * vec4(colorValue, 0.1);\',\n// Consider original lighting color\n\'  finalColor.rgb *= aoValue;\', \'\', \'  // Adjust the opacity and intensity of the color mask\', \'  float colorMaskAlpha = colorMask.a * 0.8;\',\n// Reduce the alpha value of the color mask\n\'  float colorMaskIntensity = colorMask.r;\',\n// Grayscale intensity of the color mask\n\'  float adjustedColorMaskIntensity = mix(colorMaskIntensity, dot(newColorValue.rgb, vec3(0.299, 0.587, 0.114)), 0.9);\',\n// Blend the intensity with the new color value\n\'  colorMask = vec4(adjustedColorMaskIntensity, adjustedColorMaskIntensity, adjustedColorMaskIntensity, colorMaskAlpha);\',\n// Update the color mask with the adjusted intensity and opacity\n\'\', \'  // Adjust the opacity of the lighting texture only\', \'  finalColor.a *= 0.8 * lighting.a;\',\n// Set opacity to 80% multiplied by lighting texture\'s opacity\n\'\', \'  // Use green color value in the lighting texture as white light\', \'  vec3 whiteLight = vec3(1.0, 1.0, 1.0);\',\n// White light color\n\'  vec3 greenLight = vec3(0.0, 1.0, 0.0);\',\n// Green light color\n\'  float greenLightIntensity = lighting.g;\',\n// Green channel intensity in the lighting texture\n\'  float blendFactor = 0.8;\',\n// Adjust the blend factor as desired (0.0 - 1.0)\n\'  vec3 blendedColor = mix(whiteLight * greenLightIntensity, newColorValue, blendFactor);\',\n// Blend white light and new color based on green intensity\n\'  finalColor.rgb *= blendedColor;\', \'\', \'  // Add emission for glitter effect\', \'  vec3 emissionColor = vec3(1.0, 1.0, 1.0);\',\n// Emission color (adjust as desired)\n\'  float glitterIntensity = 0.8 * lighting.g;\',\n// Intensity of glitter effect based on red channel in the lighting texture\n\'  finalColor.rgb += emissionColor * glitterIntensity;\',\n// Add emission color multiplied by glitter intensity\n\'\', \'  finalColor.rgb *= mainTextureAlpha;\', \'  finalColor.a = pow(finalColor.a, 0.13);\',\n// Apply roughness effect to opacity\n\'  gl_FragColor = finalColor;\', \'}\'].join(\'\\n\');\nclass GlitterBlushMask extends BlushStyle {\n  constructor(apiResponseData, scene, width, height) {\n    const material = new three_module/* ShaderMaterial */.BKk({\n      vertexShader: glitter_blush_mask_vertexShader,\n      fragmentShader: glitterFragmentShader,\n      uniforms: {\n        makeupAO: {\n          value: new three_module/* TextureLoader */.Tap().load(Blush_oval, function (texture) {\n            texture.premultiplyAlpha = true;\n          })\n        },\n        makeupColorMask: {\n          value: new three_module/* TextureLoader */.Tap().load(Blush_oval, function (texture) {\n            texture.premultiplyAlpha = true;\n          })\n        },\n        makeupLighting: {\n          value: new three_module/* TextureLoader */.Tap().load(Blush_oval, function (texture) {\n            texture.premultiplyAlpha = true;\n          })\n        },\n        colorValue: {\n          value: new three_module/* Color */.Q1f(1, 1, 1)\n        },\n        mainTextureAlpha: {\n          value: 1\n        }\n      },\n      transparent: true,\n      depthWrite: false,\n      blending: three_module/* AdditiveBlending */.EZo\n    });\n    super(apiResponseData, scene, width, height, material);\n  }\n}\n;// ./src/assets/blush_round_base.png\n/* harmony default export */ const blush_round_base = (__webpack_require__.p + "assets/src/assets/blush_round_base.png");\n;// ./src/assets/blush_round_shimmer.png\n/* harmony default export */ const blush_round_shimmer = (__webpack_require__.p + "assets/src/assets/blush_round_shimmer.png");\n;// ./src/makeupVTOs/pattern_factory.js\nclass PatternFactory {\n  constructor() {\n    if (this.constructor === PatternFactory) {\n      throw new Error("Abstract class PatternFactory cannot be instantiated.");\n    }\n  }\n  createPattern(apiResponseData, scene, width, height) {\n    throw new Error("Method createPattern() must be implemented.");\n  }\n}\n;// ./src/utils/color_utils.js\n\nclass ColorUtils {\n  static hexToColor(hex) {\n    hex = hex.replace("#", "");\n    const red = parseInt(hex.substring(0, 2), 16);\n    const green = parseInt(hex.substring(2, 4), 16);\n    const blue = parseInt(hex.substring(4, 6), 16);\n    return `rgb(${red}, ${green}, ${blue})`;\n  }\n  static hexToVector4(hex, alpha = 1.0) {\n    // Remove the hash if it exists\n    hex = hex.replace(/^#/, "");\n\n    // Parse the hex values\n    const bigint = parseInt(hex, 16);\n    const r = bigint >> 16 & 255;\n    const g = bigint >> 8 & 255;\n    const b = bigint & 255;\n\n    // Normalize to [0, 1] range and create the THREE.Vector4\n    return new three_module/* Vector4 */.IUQ(r / 255, g / 255, b / 255, alpha);\n  }\n  static getColorWithIntensity(hex, intensity) {\n    const red = parseInt(hex.substring(1, 3), 16);\n    const green = parseInt(hex.substring(3, 5), 16);\n    const blue = parseInt(hex.substring(5, 7), 16);\n    const alpha = Math.floor(intensity / 100 * 255);\n    return `rgba(${red}, ${green}, ${blue}, ${alpha})`;\n  }\n}\n;// ./src/makeupVTOs/blush-style/matte_blush_mask.js\n\n\nclass MatteBlushMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/blush-style/shimmer_blush_mask.js\n\n\nclass ShimmerBlushMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor1 = null;\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    if (_pattern.colors.length > 1) {\n      const color1 = _pattern.colors[1];\n      let newColor1 = ColorUtils.getColorWithIntensity(color1, 100);\n      threeColor1 = new three_module/* Color */.Q1f(newColor1);\n    } else {\n      threeColor1 = new three_module/* Color */.Q1f("0xffffff");\n    }\n    const material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[0], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 0.22,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      // clearcoat: 1,\n      // clearcoatRoughness: 0.3,\n      specularIntensity: 0.5,\n      specularColor: threeColor,\n      color: threeColor\n    });\n    const material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 0.22,\n      metalness: 0,\n      specularIntensity: 0.6,\n      specularColor: threeColor1,\n      color: threeColor1\n    });\n    this.MaterialArray = [material, material1];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/blush-style/blush_pattern_factory.js\n\n\n\n\n\n\n\nclass BlushPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      // matte: MatteEyeShadowMask,\n      matte: MatteBlushMask,\n      shimmer: ShimmerBlushMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/blush-style/blush_style_1.js\n\n\n\n\n\nclass BlushStyle1 extends BlushStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: blush_round_base,\n      // glossy: MatteAOTexture,\n      shimmer: [blush_round_base, blush_round_shimmer]\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new BlushPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/blush_oval_base.png\n/* harmony default export */ const blush_oval_base = (__webpack_require__.p + "assets/src/assets/blush_oval_base.png");\n;// ./src/assets/blush_oval_shimmer.png\n/* harmony default export */ const blush_oval_shimmer = (__webpack_require__.p + "assets/src/assets/blush_oval_shimmer.png");\n;// ./src/makeupVTOs/blush-style/blush_style_2.js\n\n\n\n\n\nclass BlushStyle2 extends BlushStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: blush_oval_base,\n      // glossy: MatteAOTexture,\n      shimmer: [blush_oval_base, blush_oval_shimmer]\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new BlushPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/makeupVTOs/blush-style/blush_style_factory.js\n\n\n\n\n\n\n\n\n\n\nclass BlushStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.blushStyles = {\n      round: BlushStyle1,\n      oval: BlushStyle2\n      // "blush3": GlitterBlushMask,\n      // "shimmer": ShimmerBlushMask\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.blushStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported blush style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/eyebrows_arrow1.png\n/* harmony default export */ const eyebrows_arrow1 = (__webpack_require__.p + "assets/src/assets/eyebrows_arrow1.png");\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style.js\n\n\n\n\n\n\n\n\n\n\nclass EyebrowsStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n    this.maskMesh;\n    this.clonedTexture;\n\n    // this.leftEyeBrow = [\n    //   70, 63, 105, 66, 107, 55, 221, 222, 223, 224, 225, 46, 70,\n    // ];\n    this.leftEyeBrow = [151, 68, 139, 247, 190, 8, 151];\n    this.RightEyeBrow = [151, 298, 368, 467, 414, 8, 151];\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks, ogLandmarks) {\n    this.landmarks = landmarks;\n    this.ogLandmarks = ogLandmarks;\n    // console.log(ogLandmarks);\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    if (!this.maskMesh) {\n      let blurGeom = new three_module/* PlaneGeometry */.bdM(1, 1);\n      this.maskMesh = new three_module/* Mesh */.eaF(blurGeom, this.materialArray[0]);\n      this.maskMesh.position.set(0, 0, 0);\n      this.scene.add(this.maskMesh);\n      let cropCoords = [];\n      for (let i = 0; i < this.leftEyeBrow.length; i++) {\n        let p = this.ogLandmarks[this.leftEyeBrow[i]];\n        let vec = new three_module/* Vector2 */.I9Y(p.x, p.y);\n        cropCoords.push(vec);\n      }\n      let cropCoords2 = [];\n      for (let i = 0; i < this.RightEyeBrow.length; i++) {\n        let p = this.ogLandmarks[this.RightEyeBrow[i]];\n        let vec = new three_module/* Vector2 */.I9Y(p.x, p.y);\n        cropCoords2.push(vec);\n      }\n      this.materialArray[0].uniforms.cropCoords.value = cropCoords;\n      this.materialArray[0].uniforms.cropCoords2.value = cropCoords2;\n      let tex = getCurrentPlaneMap();\n      tex.colorSpace = three_module/* NoColorSpace */.jf0;\n      tex.needsUpdate = true;\n      this.materialArray[0].uniforms.map.value = tex;\n      this.maskMesh.scale.set(this.width, this.height, 0);\n    }\n    if (this.faces) {\n      let cropCoords = [];\n      for (let i = 0; i < this.leftEyeBrow.length; i++) {\n        let p = this.ogLandmarks[this.leftEyeBrow[i]];\n        let vec = new three_module/* Vector2 */.I9Y(p.x, p.y);\n        cropCoords.push(vec);\n      }\n      let cropCoords2 = [];\n      for (let i = 0; i < this.RightEyeBrow.length; i++) {\n        let p = this.ogLandmarks[this.RightEyeBrow[i]];\n        let vec = new three_module/* Vector2 */.I9Y(p.x, p.y);\n        cropCoords2.push(vec);\n      }\n      this.materialArray[0].uniforms.cropCoords.value = cropCoords;\n      this.materialArray[0].uniforms.cropCoords2.value = cropCoords2;\n      if (this.clonedTexture) this.clonedTexture.dispose();\n      this.clonedTexture = getCurrentPlaneMap();\n      this.clonedTexture.colorSpace = three_module/* NoColorSpace */.jf0;\n      this.clonedTexture.needsUpdate = true;\n      this.materialArray[0].uniforms.map.value = this.clonedTexture;\n      this.maskMesh.scale.set(this.width, this.height, 0);\n      //console.log(getCurrentPlaneMap());\n    }\n    for (let i = 1; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry);\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i - 1].receiveShadow = false; // Disable receiving shadows\n        this.faces[i - 1].castShadow = false; // Disable casting shadows\n        this.faces[i - 1].position.set(0, 0, 0);\n        this.faces[i - 1].name = "makeup";\n      } else {\n        this.faces[i - 1].geometry = this.geometry;\n        this.faces[i - 1].material = this.materialArray[i];\n      }\n      this.faces[i - 1].scale.set(this.width, this.height, 0);\n    }\n  }\n  getConvexHull(points) {\n    points.sort((a, b) => a.x !== b.x ? a.x - b.x : a.y - b.y);\n    let lower = [];\n    for (let p of points) {\n      while (lower.length >= 2 && this.cross(lower[lower.length - 2], lower[lower.length - 1], p) <= 0) {\n        lower.pop();\n      }\n      lower.push(p);\n    }\n    let upper = [];\n    for (let i = points.length - 1; i >= 0; i--) {\n      let p = points[i];\n      while (upper.length >= 2 && this.cross(upper[upper.length - 2], upper[upper.length - 1], p) <= 0) {\n        upper.pop();\n      }\n      upper.push(p);\n    }\n    lower.pop();\n    upper.pop();\n    return lower.concat(upper);\n  }\n  cross(o, a, b) {\n    return (a.x - o.x) * (b.y - o.y) - (a.y - o.y) * (b.x - o.x);\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    this.scene.remove(this.maskMesh);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n    this.maskMesh = null;\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/eyebrows-style/matte_eyebrows_mask.js\n\n\nclass MatteEyebrowsMask {\n  constructor(_pattern, _texture) {\n    // console.log(_texture);\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n\n    //let maskColor = new THREE.Vector4(0.4667, 0.0941, 0.2157, 1.0);\n\n    const vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\n    const fragmentShader = `\nuniform sampler2D map;\nuniform int numCoords; // Number of coordinates\nuniform vec2 cropCoords[7]; // First polygon coordinates\nuniform vec2 cropCoords2[7]; // Second polygon coordinates\n\nvarying vec2 vUv;\n\n// Point-in-polygon test using the ray-casting algorithm\nbool isInsidePolygon(vec2 point, vec2 polygon[7], int numCoords) {\n    bool inside = false;\n    for (int i = 0, j = numCoords - 1; i < numCoords; j = i++) {\n        if (((polygon[i].y > point.y) != (polygon[j].y > point.y)) &&\n            (point.x < (polygon[j].x - polygon[i].x) * (point.y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x)) {\n            inside = !inside;\n        }\n    }\n    return inside;\n}\n\n// Function to calculate the distance to the edge of the polygon\nfloat distanceToPolygonEdge(vec2 point, vec2 polygon[7], int numCoords) {\n    float minDistance = 1e20;\n    for (int i = 0; i < numCoords; i++) {\n        vec2 a = polygon[i];\n        vec2 b = polygon[(i + 1) % numCoords];\n        vec2 ab = b - a;\n        vec2 ap = point - a;\n        float t = clamp(dot(ap, ab) / dot(ab, ab), 0.0, 1.0);\n        vec2 projection = a + t * ab;\n        float distance = length(point - projection);\n        minDistance = min(minDistance, distance);\n    }\n    return minDistance;\n}\n\n// Function to compute a simple box blur using a 3x3 kernel\nvec4 smoothMask(sampler2D tex, vec2 uv, float radius, vec2 texelSize) {\n    vec4 sum = vec4(0.0);\n    float count = 0.0;\n    vec2 offset = radius * texelSize; // Adjust the radius for more or less blur\n\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\n        for (float y = -1.0; y <= 1.0; y += 1.0) {\n            vec2 texCoord = uv + vec2(x, y) * offset;\n            sum += texture2D(tex, texCoord);\n            count += 1.0;\n        }\n    }\n    return sum / count;\n}\n\nvoid main() {\n    vec2 flippedUV = vec2(vUv.x, 1.0 - vUv.y);\n    vec2 texelSize = 1.0 / vec2(textureSize(map, 0));\n    float blurRadius = 3.0;\n    float blendWidth = 0.02;\n\n    vec4 originalCol = texture2D(map, vUv);\n\n    // Check if the current UV is inside the crop polygons\n    if (isInsidePolygon(flippedUV, cropCoords, numCoords)) {\n      // Calculate distance to the edge of the polygons\n      float distance = distanceToPolygonEdge(flippedUV, cropCoords, numCoords);\n      // Calculate blending factors based on distance\n      float blendFactor = smoothstep(0.0, blendWidth, distance);\n      vec4 blurredCol = originalCol;\n      \n        blurredCol = smoothMask(map, vUv, blurRadius, texelSize);\n        gl_FragColor = mix(originalCol, blurredCol, blendFactor);\n    } else if (isInsidePolygon(flippedUV, cropCoords2, numCoords)) {\n      float distance2 = distanceToPolygonEdge(flippedUV, cropCoords2, numCoords);\n      float blendFactor2 = smoothstep(0.0, blendWidth, distance2);\n      vec4 blurredCol2 = originalCol;\n        blurredCol2 = smoothMask(map, vUv, blurRadius, texelSize);\n        gl_FragColor = mix(originalCol, blurredCol2, blendFactor2);\n    } else {\n        // Outside the polygons, render the original texture\n        gl_FragColor = originalCol;\n    }\n}\n`;\n\n    // Load the textures\n    const texture = new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    const numPoints = 11;\n    const radius = 0.25; // Circle radius (half of the 0.0 to 0.5 range)\n    const centerX = 0.25; // Circle center x-coordinate\n    const centerY = 0.25; // Circle center y-coordinate\n\n    const cropCoords = [];\n    for (let i = 0; i < numPoints; i++) {\n      const angle = i / numPoints * Math.PI * 2; // Angle in radians\n      const x = centerX + radius * Math.cos(angle);\n      const y = centerY + radius * Math.sin(angle);\n      cropCoords.push(new three_module/* Vector2 */.I9Y(x, y));\n      // console.log(x, y);\n    }\n    let material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        map: {\n          value: texture\n        },\n        cropCoords: {\n          value: cropCoords\n        },\n        cropCoords2: {\n          value: cropCoords\n        },\n        // cropCoords: {\n        //   value: [\n        //     new THREE.Vector2(0.2, 0.2), // Vertex 0\n        //     new THREE.Vector2(0.3, 0.2), // Vertex 1\n        //     new THREE.Vector2(0.3, 0.3), // Vertex 2\n        //     new THREE.Vector2(0.2, 0.3), // Vertex 3\n        //     new THREE.Vector2(0.2, 0.2),\n        //     new THREE.Vector2(0.3, 0.2),\n        //     // new THREE.Vector2(0.3, 0.3),\n        //     // new THREE.Vector2(0.2, 0.3),\n        //     // new THREE.Vector2(0.2, 0.2), // Closing the loop\n        //   ],\n        // },\n        numCoords: {\n          value: numPoints\n        }\n\n        // numCoords: { value: 10 },\n        // alphaMap: { value: alphaMap },\n        //  _Threshold: { value: 0 },\n        // resolution: { type: "v2", value: new THREE.Vector2(2048.0, 2048.0) },\n        // blurAmount: { type: "f", value: 10.0 },\n        // _MainColor: { value: maskColor },\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5,\n      depthWrite: false,\n      toneMapped: false\n    });\n    const material1 = new three_module/* MeshStandardMaterial */._4j({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* DoubleSide */.$EB,\n      envMapIntensity: 1,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n      // envMap: new THREE.TextureLoader().load(_texture, function (texture) {\n      //   texture.flipY = false;\n      // }),\n    });\n    this.MaterialArray = [material, material1];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_pattern_factory.js\n\n\n\n\n\n\nclass EyebrowsPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteEyebrowsMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style_1.js\n\n\n\n\nclass EyebrowsStyle1 extends EyebrowsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyebrows_arrow1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyebrowsPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/eyebrows_arrow2.png\n/* harmony default export */ const eyebrows_arrow2 = (__webpack_require__.p + "assets/src/assets/eyebrows_arrow2.png");\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style_2.js\n\n\n\n\nclass EyebrowsStyle2 extends EyebrowsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyebrows_arrow2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyebrowsPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/eyebrows_arrow3.png\n/* harmony default export */ const eyebrows_arrow3 = (__webpack_require__.p + "assets/src/assets/eyebrows_arrow3.png");\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style_3.js\n\n\n\n\nclass EyebrowsStyle3 extends EyebrowsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyebrows_arrow3\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyebrowsPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/eyebrows_curved1.png\n/* harmony default export */ const eyebrows_curved1 = (__webpack_require__.p + "assets/src/assets/eyebrows_curved1.png");\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style_4.js\n\n\n\n\nclass EyebrowsStyle4 extends EyebrowsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyebrows_curved1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyebrowsPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/eyebrows_straight1.png\n/* harmony default export */ const eyebrows_straight1 = (__webpack_require__.p + "assets/src/assets/eyebrows_straight1.png");\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style_5.js\n\n\n\n\nclass EyebrowsStyle5 extends EyebrowsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyebrows_straight1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyebrowsPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/makeupVTOs/eyebrows-style/eyebrows_style_factory.js\n\n\n\n\n\n\n\n\n\nclass EyebrowsStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.eyebrowsStyles = {\n      arrow1: EyebrowsStyle1,\n      arrow2: EyebrowsStyle2,\n      arrow3: EyebrowsStyle3,\n      curve1: EyebrowsStyle4,\n      straight1: EyebrowsStyle5\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.eyebrowsStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported eyebrows style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/eyelash_natural1.png\n/* harmony default export */ const eyelash_natural1 = (__webpack_require__.p + "assets/src/assets/eyelash_natural1.png");\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style.js\n\n\n\n\n\n\n\n\nclass EyelashesStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry, "eyelash");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        //this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/eyelashes-style/matte_eyelashes_mask.js\n\n\nclass MatteEyelashesMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_pattern_factory.js\n\n\n\n\n\n\nclass EyelashesPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteEyelashesMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style_1.js\n\n\n\n\nclass EyelashesStyle1 extends EyelashesStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyelash_natural1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyelashesPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/eyelash_natural2.png\n/* harmony default export */ const eyelash_natural2 = (__webpack_require__.p + "assets/src/assets/eyelash_natural2.png");\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style_2.js\n\n\n\n\nclass EyelashesStyle2 extends EyelashesStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyelash_natural2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new EyelashesPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/eyelash_natural3.png\n/* harmony default export */ const eyelash_natural3 = (__webpack_require__.p + "assets/src/assets/eyelash_natural3.png");\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style_3.js\n\n\n\n\nclass EyelashesStyle3 extends EyelashesStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyelash_natural3\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new EyelashesPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/eyelash_upperlower1.png\n/* harmony default export */ const eyelash_upperlower1 = (__webpack_require__.p + "assets/src/assets/eyelash_upperlower1.png");\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style_4.js\n\n\n\n\nclass EyelashesStyle4 extends EyelashesStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyelash_upperlower1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new EyelashesPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/eyelash_upperlower2.png\n/* harmony default export */ const eyelash_upperlower2 = (__webpack_require__.p + "assets/src/assets/eyelash_upperlower2.png");\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style_5.js\n\n\n//import MatteAOTexture from "../../assets/eyelash_12.png";\n\n\nclass EyelashesStyle5 extends EyelashesStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: eyelash_upperlower2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new EyelashesPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/eyelashes-style/eyelashes_style_factory.js\n\n\n\n\n\n\n\n\n\n\nclass EyelashesStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.eyeShadowStyles = {\n      natural1: EyelashesStyle1,\n      natural2: EyelashesStyle2,\n      natural3: EyelashesStyle3,\n      upperlower1: EyelashesStyle4,\n      upperlower2: EyelashesStyle5\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.eyeShadowStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported eyelashes style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/Eyeliner_11.png\n/* harmony default export */ const Eyeliner_11 = (__webpack_require__.p + "assets/src/assets/Eyeliner_11.png");\n;// ./src/makeupVTOs/eyeliner-style/eyelinerstyle.js\n\n\n//import { makeGeometry } from "../facemesh/eyeliner_landmark_helper";\n\n\n\n\n\n\n\nclass EyeLinerStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    // this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry, "eyelash");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/eyeliner-style/matter_eyeliner.js\n\n\nclass MatteEyeLinerMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/eyeliner-style/eyeliner_pattern_factory.js\n\n\n\n\n\n\nclass EyelinerPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteEyeLinerMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/eyeliner-style/eyeliner_style_1.js\n\n\n\n\n\nclass EyelinerStyle1 extends EyeLinerStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: Eyeliner_11\n      // glossy: MatteAOTexture,\n      //shimmer: [MatteAOTexture, ShimmerAOTexture],\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyelinerPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/Eyeliner_12.png\n/* harmony default export */ const Eyeliner_12 = (__webpack_require__.p + "assets/src/assets/Eyeliner_12.png");\n;// ./src/makeupVTOs/eyeliner-style/eyeliner_style_2.js\n\n\n\n\n\nclass EyelinerStyle2 extends EyeLinerStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: Eyeliner_12\n      //shimmer: [MatteAOTextureUpper, ShimmerAOTextureUpper],\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyelinerPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    //console.log("asfasf" + materialsArray.length);\n\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/makeupVTOs/eyeliner-style/eyeliner_style_factory.js\n\n\n\n\n\n\nclass EyeLinerStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.eyeLinerStyles = {\n      eyeliner1: EyelinerStyle1,\n      eyeliner2: EyelinerStyle2\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.eyeLinerStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported lips style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/Eyeshadow1.png\n/* harmony default export */ const Eyeshadow1 = (__webpack_require__.p + "assets/src/assets/Eyeshadow1.png");\n;// ./src/assets/Eyeshadow1_shimmer.png\n/* harmony default export */ const Eyeshadow1_shimmer = (__webpack_require__.p + "assets/src/assets/Eyeshadow1_shimmer.png");\n;// ./src/makeupVTOs/eyeshadow-style/eyeshadow_style.js\n\n\n\n\n\n\n\n\nclass EyeShadowStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry, "eyeliner");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width / 5);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        //this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/eyeshadow-style/matte_eyeshadow_mask.js\n\n\nclass MatteEyeShadowMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/eyeshadow-style/shimmer_eyeshadow_mask.js\n\n\nclass ShimmerEyeShadowMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    let threeColor1 = null;\n    if (_pattern.colors.length > 1) {\n      const color1 = _pattern.colors[1];\n      let newColor1 = ColorUtils.getColorWithIntensity(color1, 100);\n      threeColor1 = new three_module/* Color */.Q1f(newColor1);\n    } else {\n      threeColor1 = new three_module/* Color */.Q1f("0xffffff");\n    }\n    const material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[0], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 0.24,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      // clearcoat: 1,\n      // clearcoatRoughness: 0.3,\n      specularIntensity: 0.5,\n      specularColor: threeColor,\n      color: threeColor\n    });\n    const material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 0.24,\n      metalness: 0,\n      specularIntensity: 0.6,\n      specularColor: threeColor1,\n      color: threeColor1\n    });\n    this.MaterialArray = [material, material1];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/eyeshadow-style/eyeshadow_pattern_factory.js\n\n\n\n\n\n\n\nclass EyeshadowPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteEyeShadowMask,\n      shimmer: ShimmerEyeShadowMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/eyeshadow-style/eyeshadow_style_1.js\n\n\n\n\n\nclass EyeshadowStyle1 extends EyeShadowStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: Eyeshadow1,\n      // glossy: MatteAOTexture,\n      shimmer: [Eyeshadow1, Eyeshadow1_shimmer]\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new EyeshadowPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/Eyeshadow2.png\n/* harmony default export */ const Eyeshadow2 = (__webpack_require__.p + "assets/src/assets/Eyeshadow2.png");\n;// ./src/assets/Eyeshadow2_shimmer.png\n/* harmony default export */ const Eyeshadow2_shimmer = (__webpack_require__.p + "assets/src/assets/Eyeshadow2_shimmer.png");\n;// ./src/makeupVTOs/eyeshadow-style/eyeshadow_style_2.js\n\n\n\n\n\nclass EyeshadowStyle2 extends EyeShadowStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: Eyeshadow2,\n      // glossy: MatteAOTexture,\n      shimmer: [Eyeshadow2, Eyeshadow2_shimmer]\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new EyeshadowPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/makeupVTOs/eyeshadow-style/eyeshadow_style_factory.js\n\n\n\n\n\n\nclass EyeShadowStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.eyeShadowStyles = {\n      eyeshadow1: EyeshadowStyle1,\n      eyeshadow2: EyeshadowStyle2\n      //"eyeShadow3": GlossyEyeShadowMask\n      // "shimmer": ShimmerEyeShadowMask,\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.eyeShadowStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported eyeshadow style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/Foundation.png\n/* harmony default export */ const Foundation = (__webpack_require__.p + "assets/src/assets/Foundation.png");\n;// ./src/makeupVTOs/foundation-style/foundation_style.js\n\n\n\n\n\n\n\n\nclass FoundationStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry, "foundation");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width / 10);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/foundation-style/matte_foundation_mask.js\n\n\nclass MatteFoundationMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      color: threeColor\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/foundation-style/glossy_foundation_mask.js\n\n\nclass GlossyFoundationMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 1,\n      metalness: 0,\n      specularIntensity: 1,\n      specularColor: threeColor,\n      clearcoat: 0.1,\n      clearcoatRoughness: 0.25,\n      //need to change this value for gloss slider\n      color: threeColor\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/foundation-style/foundation_pattern_factory.js\n\n\n\n\n\nclass FoundationPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteFoundationMask,\n      glossy: GlossyFoundationMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/foundation-style/foundation_style_1.js\n\n\n\nclass FoundationStyle1 extends FoundationStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: Foundation,\n      glossy: Foundation\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new FoundationPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/foundation-style/foundation_style_factory.js\n\n\n\n\nclass FoundationStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.foundationStyles = {\n      foundation1: FoundationStyle1\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.foundationStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported foundation style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/makeupVTOs/hair-style/glossy_hair_mask.js\n\n\nvar glossy_hair_mask_vertexShader = ["varying vec2 vUv;", "void main() {", "  vUv = uv;", "  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\n\n// var fragmentShader = [\n//   "uniform sampler2D _MainTex;",\n//   "uniform sampler2D _MaskTex;",\n//   "uniform vec4 _MainColor;", // Added variable for main color\n//   "uniform float _Threshold;",\n//   "",\n//   "varying vec2 vUv;",\n//   "",\n//   "void main() {",\n//   " vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);",\n//   "  vec4 mainCol = texture2D(_MainTex, flippedUV);",\n//   "  vec4 maskCol = texture2D(_MaskTex, flippedUV);",\n//   "",\n//   "  float mask = maskCol.g;",\n//   "  // Apply main color",\n//   "  vec4 mainColor = _MainColor * mainCol;",\n//   "",\n//   "  // Calculate final color based on mask and threshold",\n//   "  vec4 col = mix(maskCol, mix(maskCol, mainColor, mask), step(_Threshold, mask));",\n//   "",\n//   "  gl_FragColor = col;",\n//   "}",\n// ].join("\\n");\n\nvar glossy_hair_mask_fragmentShader = ["uniform sampler2D _MainTex;", "uniform sampler2D _MaskTex;", "uniform vec4 _MainColor;",\n// Added variable for main color\n"uniform float _Threshold;", "", "varying vec2 vUv;", "", "void main() {", " vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);", "  vec4 mainCol = texture2D(_MainTex, flippedUV);", "  vec4 maskCol = texture2D(_MaskTex, flippedUV);", "", "  float mask = maskCol.g;", "  // Apply main color", "  vec4 mainColor = _MainColor * mainCol;", "", "  // Calculate final color based on mask and threshold", "  vec4 col = mix(mainCol, mix(mainCol, maskCol, mask), step(_Threshold, mask));", "", "  if (mask > _Threshold) {", "    col = _MainColor;",\n// Set the mask color to newColorValue if mask value is greater than _Threshold\n"  }", "", "  gl_FragColor = col;", "}"].join("\\n");\n\n// var fragmentShader = [\n//   "uniform sampler2D _MainTex;",\n//   "uniform sampler2D _MaskTex;",\n//   "uniform vec4 _MainColor;", // Original main color variable\n//   "uniform vec4 _EdgeColor;", // New variable for edge color\n//   "uniform float _Threshold;",\n//   "uniform float _EdgeWidth;", // New variable for edge width\n//   "",\n//   "varying vec2 vUv;",\n//   "",\n//   "void main() {",\n//   "  vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);",\n//   "  vec4 mainCol = texture2D(_MainTex, flippedUV);",\n//   "  vec4 maskCol = texture2D(_MaskTex, flippedUV);",\n//   "",\n//   "  float mask = maskCol.r;",\n//   "  // Apply main color",\n//   "  vec4 mainColor = _MainColor * mainCol;",\n//   "",\n//   "  // Edge detection",\n//   "  float edge = 1.0 - smoothstep(0.5 - _EdgeWidth, 0.5 + _EdgeWidth, mask);",\n//   "  vec4 edgeColor = _EdgeColor * edge;",\n//   "",\n//   "  // Calculate final color based on mask, edges, and threshold",\n//   "  vec4 col = mix(maskCol, mix(mainColor, mainColor + edgeColor, edge), step(_Threshold, mask));",\n//   "",\n//   "  gl_FragColor = col;",\n//   "}",\n// ].join("\\n");\n\n// var fragmentShader = [\n//   "uniform sampler2D _MainTex;",\n//   "uniform sampler2D _MaskTex;",\n//   "uniform float _Threshold;",\n//   "uniform vec4 _MainColor;",\n//   "",\n//   "varying vec2 vUv;",\n//   "",\n//   "void main() {",\n//   " vec2 flippedUV = vec2(1.0 - vUv.x, vUv.y);",\n//   "  vec4 mainCol = texture2D(_MainTex, flippedUV);",\n//   "  vec4 maskCol = texture2D(_MaskTex, flippedUV);",\n//   "",\n//   "  float mask = maskCol.a;", // Use the red channel value of _MaskTex as the mask value\n//   "  vec4 col = mix(mainCol, mix(mainCol, maskCol, mask), step(_Threshold, mask));",\n//   "",\n// "  if (mask > _Threshold) {",\n// "    col = _MainColor;", // Set the mask color to newColorValue if mask value is greater than _Threshold\n// "  }",\n// "",\n//   "  gl_FragColor = col;",\n//   "}",\n// ].join("\\n");\n\nfunction maskShader(maskColor) {\n  return {\n    uniforms: {\n      _MainTex: {\n        value: null\n      },\n      _MaskTex: {\n        value: null\n      },\n      _Threshold: {\n        value: 0.9\n      },\n      _MainColor: {\n        value: maskColor\n      } // Initialize with an empty Vector4\n    },\n    vertexShader: glossy_hair_mask_vertexShader,\n    fragmentShader: glossy_hair_mask_fragmentShader\n  };\n}\nclass GlossyHairMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    let maskColor = new three_module/* Vector4 */.IUQ(threeColor.r, threeColor.g, threeColor.b, 0);\n    let material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: maskShader(maskColor).uniforms,\n      vertexShader: maskShader(maskColor).vertexShader,\n      fragmentShader: maskShader(maskColor).fragmentShader,\n      transparent: true,\n      opacity: 0\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/math/Lut.js\nvar Lut = __webpack_require__(6443);\n;// ./src/makeupVTOs/hair-style/hair_style.js\n\n\n\n\n//import { Lut } from "three/examples/jsm/math/Lut.js";\n\n// import { GLTFLoader } from "three/examples/jsm/loaders/GLTFLoader.js";\n// import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";\n\nclass HairStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.imageCanvas;\n    this.mask = null;\n    this.maskMesh = null;\n    this.imageMesh = null;\n    this.isvideo = true;\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n    this.lut = new Lut/* Lut */.S("grayscale", 256);\n    this.lut.setMin(0);\n    this.lut.setMax(1);\n    this.imageMaterial = null;\n  }\n  updateOpacity() {\n    if (this.imageMaterial) {\n      this.imageMaterial.opacity = getOpacitySliderValue();\n    }\n    this.materialArray.forEach(material => {\n      material.uniforms._MainColor.value = new three_module/* Vector4 */.IUQ(material.uniforms._MainColor.value.x, material.uniforms._MainColor.value.y, material.uniforms._MainColor.value.z, 0\n      //getOpacitySliderValue()\n      );\n      // material.uniforms._Threshold.value = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.uniforms._MainColor.value = new three_module/* Vector4 */.IUQ(material.uniforms._MainColor.value.x, material.uniforms._MainColor.value.y, material.uniforms._MainColor.value.z, intensity);\n    });\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateMask(imageCanvas, mask, isvideo) {\n    this.isvideo = isvideo;\n    if (imageCanvas) {\n      this.imageCanvas = imageCanvas;\n    }\n    if (!this.mask || this.mask.width !== mask.width || this.mask.height !== mask.height) {\n      this.mask = {\n        data: this.flipImageData(mask.data, mask.width, mask.height),\n        width: mask.width,\n        height: mask.height\n      };\n    } else {\n      this.mask.data.set(\n      //mask.data\n      this.flipImageData(mask.data, mask.width, mask.height));\n    }\n    this.needsUpdate = true;\n  }\n  removeFaces() {\n    if (this.maskMesh) {\n      this.scene.remove(this.maskMesh);\n    }\n    if (this.imageMesh) {\n      this.scene.remove(this.imageMesh);\n    }\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      this.removeFaces();\n      if (this.mask) {\n        this.addRendering();\n      } else {\n        // Handle case when there is no mask\n      }\n      this.needsUpdate = false;\n    }\n    if (this.mask != null) {\n      this.updateOpacity();\n    }\n  }\n  flipImageData(data, width, height) {\n    const flippedData = new Uint8Array(data.length);\n    const rowSize = width * 4; // Assuming 4 channels (RGBA)\n\n    for (let row = 0; row < height; row++) {\n      const srcOffset = row * rowSize;\n      const destOffset = (height - row - 1) * rowSize;\n      flippedData.set(data.subarray(srcOffset, srcOffset + rowSize), destOffset);\n    }\n    return flippedData;\n  }\n  addRendering() {\n    const originalImageTexture = new three_module/* Texture */.gPd(this.imageCanvas);\n    //originalImageTexture.premultiplyAlpha = true;\n    // originalImageTexture.generateMipmaps = false;\n    // originalImageTexture.minFilter = THREE.LinearFilter;\n    // originalImageTexture.magFilter = THREE.LinearFilter;\n    originalImageTexture.wrapS = three_module/* RepeatWrapping */.GJx;\n    originalImageTexture.repeat.x = -1;\n\n    //originalImageTexture.needsUpdate = true;\n\n    const imageGeometry = new three_module/* PlaneGeometry */.bdM(this.width, this.height);\n    var shaderColor = this.materialArray[0].uniforms._MainColor.value;\n\n    // Step 2: Create a canvas to manipulate pixel data\n    var canvas = document.createElement("canvas");\n    var context = canvas.getContext("2d", {\n      willReadFrequently: true\n    });\n    canvas.width = originalImageTexture.image.width;\n    canvas.height = originalImageTexture.image.height;\n\n    // Step 3: Iterate through pixels and apply grayscale effect\n    context.drawImage(originalImageTexture.image, 0, 0);\n    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);\n    var data = imageData.data;\n    for (var i = 0; i < data.length; i += 4) {\n      // Extract the original color values\n      var r = data[i] / 255;\n      var g = data[i + 1] / 255;\n      var b = data[i + 2] / 255;\n      var grayscaleColor = this.lut.getColor(1 * r + 0 * g + 0 * b);\n\n      // Update pixel data with grayscale values\n      data[i] = grayscaleColor.r * 255;\n      data[i + 1] = grayscaleColor.g * 255;\n      data[i + 2] = grayscaleColor.b * 255;\n    }\n\n    // Update the originalImageTexture with the new grayscale data\n    context.putImageData(imageData, 0, 0);\n    originalImageTexture.needsUpdate = true;\n    var grayscaleTexture = new three_module/* Texture */.gPd(canvas);\n    grayscaleTexture.generateMipmaps = false;\n    grayscaleTexture.minFilter = three_module/* LinearFilter */.k6q;\n    grayscaleTexture.magFilter = three_module/* LinearFilter */.k6q;\n    grayscaleTexture.wrapS = three_module/* RepeatWrapping */.GJx;\n    grayscaleTexture.repeat.x = -1;\n    grayscaleTexture.needsUpdate = true;\n    this.imageMaterial = new three_module/* MeshBasicMaterial */.V9B({\n      map: grayscaleTexture,\n      color: new three_module/* Color */.Q1f().setRGB(shaderColor.x, shaderColor.y, shaderColor.z),\n      transparent: true,\n      premultipliedAlpha: false\n    });\n\n    // this.imageMaterial = new THREE.ShaderMaterial({\n    //   uniforms: {\n    //     detailTexture: { value: grayscaleTexture },\n    //     customColor: { value: new THREE.Color(0xeedee9) }, // Set your custom color here\n    //   },\n    //   vertexShader: vertexShader,\n    //   fragmentShader: fragmentShader,\n    // });\n\n    this.imageMesh = new three_module/* Mesh */.eaF(imageGeometry, this.imageMaterial);\n    this.imageMesh.position.set(0, 0, 0);\n    if (this.isvideo) this.imageMesh.scale.set(-1, 1, 1);else this.imageMesh.scale.set(-1, 1, 1);\n    this.scene.add(this.imageMesh);\n    const maskImageTexture = new three_module/* DataTexture */.GYF(this.mask.data, this.mask.width, this.mask.height, three_module/* RGBAFormat */.GWd);\n    maskImageTexture.generateMipmaps = false;\n    maskImageTexture.minFilter = three_module/* LinearFilter */.k6q;\n    maskImageTexture.magFilter = three_module/* LinearFilter */.k6q;\n    maskImageTexture.needsUpdate = true;\n    const maskGeometry = new three_module/* PlaneGeometry */.bdM(this.width, this.height);\n    this.materialArray[0].uniforms._MainTex.value = originalImageTexture;\n    this.materialArray[0].uniforms._MaskTex.value = maskImageTexture;\n    this.materialArray[0].uniforms._Threshold.value = 0.9;\n    this.maskMesh = new three_module/* Mesh */.eaF(maskGeometry, this.materialArray[0]);\n    this.maskMesh.position.set(0, 0, 0);\n    if (this.isvideo) this.maskMesh.scale.set(-1, 1, 1);else this.maskMesh.scale.set(-1, 1, 1);\n    this.scene.add(this.maskMesh);\n  }\n}\nvar hair_style_vertexShader = ["varying vec2 vUv;", "void main() {", "    vUv = vec2(1.0 - uv.x,  uv.y);",\n// Adjust UV to correct horizontal flip\n"    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\nvar hair_style_fragmentShader = ["uniform sampler2D detailTexture;", "uniform vec3 customColor;", "varying vec2 vUv;", "vec3 rgbToHsl(vec3 color) {", "    float minVal = min(min(color.r, color.g), color.b);", "    float maxVal = max(max(color.r, color.g), color.b);", "    float delta = maxVal - minVal;", "    float l = (maxVal + minVal) / 2.0;", "    float s = 0.0;", "    if (delta > 0.0) {", "        s = (l < 0.5) ? (delta / (maxVal + minVal)) : (delta / (2.0 - maxVal - minVal));", "    }", "    float h = 0.0;", "    if (delta > 0.0) {", "        if (maxVal == color.r) {", "            h = (color.g - color.b) / delta + ((color.g < color.b) ? 6.0 : 0.0);", "        } else if (maxVal == color.g) {", "            h = (color.b - color.r) / delta + 2.0;", "        } else if (maxVal == color.b) {", "            h = (color.r - color.g) / delta + 4.0;", "        }", "        h /= 6.0;", "    }", "    return vec3(h, s, l);", "}", "vec3 hslToRgb(vec3 hsl) {", "    float c = (1.0 - abs(2.0 * hsl.z - 1.0)) * hsl.y;", "    float x = c * (1.0 - abs(mod(hsl.x * 6.0, 2.0) - 1.0));", "    float m = hsl.z - c / 2.0;", "    vec3 rgb;", "    if (hsl.x < 1.0 / 6.0) {", "        rgb = vec3(c, x, 0.0);", "    } else if (hsl.x < 2.0 / 6.0) {", "        rgb = vec3(x, c, 0.0);", "    } else if (hsl.x < 3.0 / 6.0) {", "        rgb = vec3(0.0, c, x);", "    } else if (hsl.x < 4.0 / 6.0) {", "        rgb = vec3(0.0, x, c);", "    } else if (hsl.x < 5.0 / 6.0) {", "        rgb = vec3(x, 0.0, c);", "    } else {", "        rgb = vec3(c, 0.0, x);", "    }", "    return rgb + vec3(m);", "}", "void main() {", "    vec4 detailColor = texture2D(detailTexture, vUv);", "    vec3 hsl = rgbToHsl(detailColor.rgb);", "    hsl.y = clamp(hsl.y + 0.2, 0.0, 1.0); // Adjust saturation (increase by 0.2)", "    hsl.z = clamp(hsl.z + 0.1, 0.0, 1.0); // Adjust luminosity (increase by 0.1)", "    vec3 adjustedColor = hslToRgb(hsl);", "    vec4 finalColor = vec4(mix(customColor, adjustedColor, detailColor.r), 1.0);", "    gl_FragColor = finalColor;", "}"].join("\\n");\n;// ./src/makeupVTOs/hair-style/hair_pattern_factory.js\n\n\n\n\n\nclass HairPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      glossy: GlossyHairMask,\n      matte: GlossyHairMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    //console.log(this.patternClass.MaterialArray);\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/hair-style/hair_single_tone.js\n\n\n\nclass HairSingleTone extends HairStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: null,\n      glossy: null,\n      shimmer: null\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new HairPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/hair-style/hair_style_factory.js\n\n\n\n\n\n\nclass HairStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.hairStyles = {\n      single: HairSingleTone\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    // for (let i = 0; i < apiResponseData.config.style.length; i++) {\n    //   if (apiResponseData.config.style[i]._id === parseInt(styleid, 10)) {\n    //     style = apiResponseData.config.style[i];\n    //     break;\n    //   }\n    // }\n\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.hairStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported hair style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/highlighter_heartface1.png\n/* harmony default export */ const highlighter_heartface1 = (__webpack_require__.p + "assets/src/assets/highlighter_heartface1.png");\n;// ./src/makeupVTOs/highlighter-style /highlighter_style.js\n\n\n\n\n\n\n\n\nclass HighlighterStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry, "foundation");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/highlighter-style /matte_highlighter_mask.js\n\n\nclass MatteHighlighterMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      // envMapIntensity: 0,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n      // envMap: new THREE.TextureLoader().load(_texture, function (texture) {\n      //   texture.flipY = false;\n      // }),\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/highlighter-style /highlighter_pattern_factory.js\n\n\n\n\nclass HighlighterPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteHighlighterMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/highlighter-style /highlighter_style_1.js\n\n\n\nclass HighlighterStyle1 extends HighlighterStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: highlighter_heartface1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new HighlighterPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/highlighter_heartface2.png\n/* harmony default export */ const highlighter_heartface2 = (__webpack_require__.p + "assets/src/assets/highlighter_heartface2.png");\n;// ./src/makeupVTOs/highlighter-style /highlighter_style_2.js\n\n\n\nclass HighlighterStyle2 extends HighlighterStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: highlighter_heartface2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new HighlighterPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/highlighter_invtriangle1.png\n/* harmony default export */ const highlighter_invtriangle1 = (__webpack_require__.p + "assets/src/assets/highlighter_invtriangle1.png");\n;// ./src/makeupVTOs/highlighter-style /highlighter_style_3.js\n\n\n\nclass HighlighterStyle3 extends HighlighterStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: highlighter_invtriangle1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new HighlighterPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/highlighter_invtriangle2.png\n/* harmony default export */ const highlighter_invtriangle2 = (__webpack_require__.p + "assets/src/assets/highlighter_invtriangle2.png");\n;// ./src/makeupVTOs/highlighter-style /highlighter_style_4.js\n\n\n\nclass HighlighterStyle4 extends HighlighterStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: highlighter_invtriangle2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new HighlighterPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/highlighter_oblong1.png\n/* harmony default export */ const highlighter_oblong1 = (__webpack_require__.p + "assets/src/assets/highlighter_oblong1.png");\n;// ./src/makeupVTOs/highlighter-style /highlighter_style_5.js\n\n\n\nclass HighlighterStyle5 extends HighlighterStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: highlighter_oblong1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const PatternFactory = new HighlighterPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/highlighter-style /highlighter_style_factory.js\n\n\n\n\n\n\n\n\nclass HighlighterStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.highlighterStyles = {\n      heartface1: HighlighterStyle1,\n      heartface2: HighlighterStyle2,\n      invtriangle1: HighlighterStyle3,\n      invtriangle2: HighlighterStyle4,\n      oblong1: HighlighterStyle5\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.highlighterStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported highlighter style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/utils/FlickerSmoother.js\n\n// import { GUI } from "dat.gui";\nclass FlickerSmoother {\n  constructor() {\n    this.currentvector = new three_module/* Vector3 */.Pq0(0.4, 6, 4);\n    this.currentvector1 = new three_module/* Vector3 */.Pq0(0.5, 6, 0.1);\n    // const gui = new GUI();\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", 0, 100).step(0.001);\n    // vectorFolder2.add(this.currentvector, "y", 0, 100).step(0.001);\n    // vectorFolder2.add(this.currentvector, "z", 0, 100).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "x", 0, 100).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "y", 0, 100).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "z", 0, 100).step(0.001);\n\n    this.params = {\n      floatValue: 0.4 // Initial float value\n    };\n  }\n  smoothAndFilterLandmarks(previousLandmarks, currentLandmarks) {\n    let smoothedPosition = new three_module/* Vector3 */.Pq0();\n    smoothedPosition.lerpVectors(previousLandmarks, currentLandmarks, this.params.floatValue);\n    const distance = currentLandmarks.distanceTo(smoothedPosition);\n    const threshold = this.currentvector.z;\n    if (distance > threshold) {\n      smoothedPosition.copy(currentLandmarks);\n    } else {}\n    return smoothedPosition;\n  }\n  smoothAndFilterLandmarksAll(previousLandmarks, currentLandmarks) {\n    const smoothedLandmarks = [];\n    for (let i = 0; i < currentLandmarks.length; i++) {\n      const previousLandmark = new three_module/* Vector3 */.Pq0(previousLandmarks[i].x, previousLandmarks[i].y, previousLandmarks[i].z);\n      const currentLandmark = new three_module/* Vector3 */.Pq0(currentLandmarks[i].x, currentLandmarks[i].y, currentLandmarks[i].z);\n      const smoothedPosition = new three_module/* Vector3 */.Pq0();\n      smoothedPosition.lerpVectors(previousLandmark, currentLandmark, this.currentvector.x);\n      const distance = currentLandmark.distanceTo(smoothedPosition);\n      const threshold = this.currentvector.z;\n      if (distance > threshold) {\n        smoothedLandmarks.push({\n          x: currentLandmark.x,\n          y: currentLandmark.y,\n          z: currentLandmark.z\n        });\n      } else {\n        // smoothedLandmarks.push({\n        //   x: smoothedPosition.x,\n        //   y: smoothedPosition.y,\n        //   z: smoothedPosition.z,\n        // });\n\n        const previousLandmark1 = new three_module/* Vector3 */.Pq0(currentLandmarks[i].x, currentLandmarks[i].y, currentLandmarks[i].z);\n        const currentLandmark1 = new three_module/* Vector3 */.Pq0(smoothedPosition.x, smoothedPosition.y, smoothedPosition.z);\n        const smoothedPosition1 = new three_module/* Vector3 */.Pq0();\n        smoothedPosition1.lerpVectors(previousLandmark1, currentLandmark1, this.currentvector1.x);\n        const distance1 = currentLandmark1.distanceTo(smoothedPosition1);\n        const threshold1 = this.currentvector1.z;\n        // console.log(distance1, threshold1);\n        if (distance1 > threshold1) {\n          smoothedLandmarks.push({\n            x: smoothedPosition.x,\n            y: smoothedPosition.y,\n            z: smoothedPosition.z\n          });\n        } else {\n          smoothedLandmarks.push({\n            x: smoothedPosition1.x,\n            y: smoothedPosition1.y,\n            z: smoothedPosition1.z\n          });\n        }\n      }\n    }\n    // }\n\n    return smoothedLandmarks;\n  }\n  smoothAndFilterLandmarksAllShoe(previousLandmarks, currentLandmarks) {\n    const smoothedLandmarks = [];\n    for (let i = 0; i < currentLandmarks.length; i++) {\n      const previousLandmark = previousLandmarks[i];\n      const currentLandmark = currentLandmarks[i];\n      const smoothedPosition = three_module/* MathUtils */.cj9.lerp(previousLandmark, currentLandmark, this.currentvector.x);\n      const distance = Math.abs(currentLandmark - smoothedPosition);\n      const threshold = this.currentvector.z;\n      if (distance > threshold) {\n        smoothedLandmarks.push(currentLandmark);\n      } else {\n        // smoothedLandmarks.push({\n        //   x: smoothedPosition.x,\n        //   y: smoothedPosition.y,\n        //   z: smoothedPosition.z,\n        // });\n\n        const previousLandmark1 = currentLandmarks[i];\n        const currentLandmark1 = smoothedPosition;\n        const smoothedPosition1 = three_module/* MathUtils */.cj9.lerp(previousLandmark1, currentLandmark1, this.currentvector.x);\n        const distance1 = Math.abs(currentLandmark1 - smoothedPosition1);\n        const threshold1 = this.currentvector1.z;\n        // console.log(distance1, threshold1);\n        if (distance1 > threshold1) {\n          smoothedLandmarks.push(smoothedPosition);\n        } else {\n          smoothedLandmarks.push(smoothedPosition1);\n        }\n      }\n    }\n    // }\n\n    return smoothedLandmarks;\n  }\n}\n;// ./src/makeupVTOs/lipliner-style/lipliner_style.js\n\n\n\n\n\n\n\n\n\n\nclass LiplinerStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.flickerSmoother = new FlickerSmoother();\n    this.Prevlandmark;\n    this.PrevlandmarkBase;\n    this.colorIntensity = 1;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.liplinerPattern = sku.styleVariant.toLowerCase();\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      let landmarks;\n      landmarks = this.landmarks;\n      this.Prevlandmark = this.landmarks;\n      makeGeometry(landmarks, this.geometry, "lipliner", this.liplinerPattern);\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width);\n    }\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.uniforms._Opacity.value = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.uniforms._Opacity.value = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/assets/lipliner.png\n/* harmony default export */ const lipliner = (__webpack_require__.p + "assets/src/assets/lipliner.png");\n;// ./src/assets/lipliner_mask.png\n/* harmony default export */ const lipliner_mask = (__webpack_require__.p + "assets/src/assets/lipliner_mask.png");\n;// ./src/makeupVTOs/lipliner-style/matte_lipliner_mask.js\n\n\n\nclass MatteLiplinerMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let maskColor = ColorUtils.hexToVector4(color);\n    // let threeColor = new THREE.Color(newColor);\n    // let maskColor = new THREE.Vector4(\n    //   threeColor.r,\n    //   threeColor.g,\n    //   threeColor.b,\n    //   1.0\n    // );\n\n    //let maskColor = new THREE.Vector4(0.4667, 0.0941, 0.2157, 1.0);\n\n    const vertexShader = `\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`;\n    const fragmentShader = `\n        uniform sampler2D map;\n    uniform sampler2D alphaMap;\n    uniform vec4 _MainColor;\n    uniform float _Threshold;\n    uniform float _Smoothness; // Controls the intensity of the smooth blending\n    uniform float _Opacity; // Controls the intensity of the smooth blending\n    varying vec2 vUv;\n\n    void main() {\n        vec4 mainCol = texture2D(map, vUv);\n        vec4 maskCol = texture2D(alphaMap, vUv);\n        float mask = maskCol.a;\n\n       // vec4 maincolalpha = vec4(mainCol.r,mainCol.g,mainCol.b,0.5);\n\n        // Apply a simple blur to the mask\n        // float blurRadius = 0.0;\n        float sum = 0.0;\n        for (int x = -2; x <= 2; x++) {\n            for (int y = -2; y <= 2; y++) {\n                //vec2 offset = vec2(x, y) * blurRadius;\n                sum += texture2D(alphaMap, vUv).a;\n            }\n        }\n        float blurredMask = sum/3.0;\n\n        vec4 mainColor = _MainColor * mainCol;\n        vec4 col = mix(mainCol, mix(mainCol, maskCol, blurredMask), smoothstep(_Threshold - _Smoothness, _Threshold + _Smoothness,mask));\n\n          // if (mask < _Threshold) {\n          //     col = _MainColor;\n          //   }\n\n          float cola = col.a *_Opacity;\n        gl_FragColor = vec4(_MainColor.r,_MainColor.g,_MainColor.b,cola);\n    }\n     `;\n\n    // Load the textures\n    const texture = new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    const alphaMap = new three_module/* TextureLoader */.Tap().load(lipliner_mask, function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    let material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        map: {\n          value: texture\n        },\n        alphaMap: {\n          value: alphaMap\n        },\n        _Threshold: {\n          value: 0.2\n        },\n        _Smoothness: {\n          value: 0.2\n        },\n        _Opacity: {\n          value: 0.8\n        },\n        _MainColor: {\n          value: maskColor\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/lipliner-style/lipliner_pattern_factory.js\n\n\n\n\n\n\nclass LiplinerPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteLiplinerMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    //console.log(this.patternClass.MaterialArray);\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/lipliner-style/lipliner_style_1.js\n\n\n\n\nclass LiplinerStyle1 extends LiplinerStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: lipliner\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const lipsPatternFactory = new LiplinerPatternFactory();\n      const pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/makeupVTOs/lipliner-style/lipliner_style_factory.js\n\n// import { MatteFaceMask } from "./matte_lipliner_mask";\n\n\n\n\nclass LiplinerStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.lipStyles = {\n      natural: LiplinerStyle1,\n      small: LiplinerStyle1,\n      wide: LiplinerStyle1,\n      rosebud: LiplinerStyle1,\n      largeandfull: LiplinerStyle1,\n      largeupper: LiplinerStyle1,\n      largelower: LiplinerStyle1\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const LipStyleClass = this.lipStyles[styleType.toLowerCase()];\n    if (!LipStyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported lipliner style`);\n    }\n    return new LipStyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/Lips_Shimmer_2.png\n/* harmony default export */ const Lips_Shimmer_2 = (__webpack_require__.p + "assets/src/assets/Lips_Shimmer_2.png");\n;// ./src/makeupVTOs/lips-style/shimmer_face_mask.js\n\n\n\nclass ShimmerFaceMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor1 = null;\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    if (_pattern.colors.length > 1) {\n      const color1 = _pattern.colors[1];\n      let newColor1 = ColorUtils.getColorWithIntensity(color1, 100);\n      threeColor1 = new three_module/* Color */.Q1f(newColor1);\n    } else {\n      threeColor1 = new three_module/* Color */.Q1f("0xffffff");\n    }\n    const material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[0], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 0.3,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      clearcoat: 1,\n      clearcoatRoughness: 0.2,\n      specularIntensity: 1,\n      specularColor: threeColor,\n      color: threeColor\n    });\n    const material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      fog: false,\n      roughness: 0.24,\n      metalness: 0,\n      envMapIntensity: 0,\n      specularIntensity: 0.6,\n      specularColor: threeColor,\n      color: threeColor1\n    });\n    this.MaterialArray = [material, material1];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/lips-style/lips_style.js\n\n\n\n\n\n\n\n\n\nclass LipsStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.flickerSmoother = new FlickerSmoother();\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.Prevlandmark;\n    this.PrevlandmarkBase;\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      let landmarks;\n      landmarks = this.landmarks;\n      this.Prevlandmark = this.landmarks;\n      makeGeometry(landmarks, this.geometry, "lipstick");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width / 2);\n    }\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        // this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      //material.uniforms.opacityValue.value = getOpacitySliderValue();\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/assets/Lips_4.png\n/* harmony default export */ const Lips_4 = (__webpack_require__.p + "assets/src/assets/Lips_4.png");\n;// ./src/makeupVTOs/lips-style/glitter_face_mask.js\n\n // Import LipsStyle class\n\n\n\nvar glitter_face_mask_vertexShader = ["varying vec2 vUv;", "void main() {", "  vUv = uv;", "  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\nvar glitter_face_mask_fragmentShader = ["uniform sampler2D makeupTexture;",\n// The texture you want to render\n"uniform vec3 colorValue;",\n// Uniform for controlling color\n"uniform float opacityValue;",\n// Uniform for controlling opacity\n"varying vec2 vUv;", "void main() {", "  vec4 textureColor = texture2D(makeupTexture, vUv);", "  if (textureColor.a < 0.01) {", "    discard;", "  }", "  gl_FragColor = vec4(textureColor.rgb * colorValue, textureColor.a * opacityValue);",\n// Multiply texture color with the specified color and opacity\n"}"].join("\\n");\nclass GlitterFaceMask extends LipsStyle {\n  constructor(apiResponseData, scene, width, height) {\n    /*\n    const material = new THREE.ShaderMaterial({\n      vertexShader: vertexShader, // Your vertex shader code\n      fragmentShader: fragmentShader, // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new THREE.TextureLoader().load(\n            GlitterAOTexture,\n            function (texture) {\n              // texture.premultiplyAlpha = true;\n              texture.flipY = false;\n            }\n          ),\n        },\n        opacityValue: { value: 1 },\n        colorValue: { value: new THREE.Vector3(1, 1, 1) },\n      },\n       transparent: true,\n      color: 0xff0000,\n    });\n    material.uniforms.colorValue.value.set(1, 0, 0); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material.uniforms.opacityValue.value = 0.6;\n     const material1 = new THREE.ShaderMaterial({\n      vertexShader: vertexShader, // Your vertex shader code\n      fragmentShader: fragmentShader, // Your modified fragment shader code\n      uniforms: {\n        makeupTexture: {\n          value: new THREE.TextureLoader().load(\n            GlitterColorMaskTexture,\n            function (texture) {\n              texture.flipY = false;\n            }\n          ),\n        },\n        opacityValue: { value: 1 },\n        colorValue: { value: new THREE.Vector3(1, 1, 1) },\n      },\n       transparent: true,\n      color: 0xff0000,\n    });\n    material1.uniforms.colorValue.value.set(1, 1, 1); // Example: set color to RGB(0.2, 0.5, 0.8)\n    material1.uniforms.opacityValue.value = 0.6;\n    material1.needsUpdate = true;\n    */\n\n    const material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(Lips_4, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n      }),\n      transparent: true,\n      side: three_module/* DoubleSide */.$EB,\n      roughness: 0.25,\n      metalness: 0,\n      specularIntensity: 1,\n      envMapIntensity: 0,\n      toneMapped: false\n      //shadowSide: THREE.BackSide,\n    });\n    const material1 = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(Lips_Shimmer_2, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n      }),\n      transparent: true,\n      side: three_module/* DoubleSide */.$EB,\n      roughness: 0.5,\n      metalness: 1,\n      envMapIntensity: 1,\n      toneMapped: false,\n      specularIntensity: 1,\n      emissiveIntensity: 1,\n      emissive: 0x00ff00\n      // envMapIntensity: 1,\n      // emissiveMap: new THREE.TextureLoader().load(\n      //   GlitterColorMaskTexture,\n      //   function (texture) {\n      //     // texture.premultiplyAlpha = true;\n      //     texture.flipY = false;\n      //   }\n      // ),\n\n      //shadowSide: THREE.BackSide,\n    });\n    const materialsArray = [material, material1];\n    super(apiResponseData, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/lips_full.png\n/* harmony default export */ const lips_full = (__webpack_require__.p + "assets/src/assets/lips_full.png");\n;// ./src/makeupVTOs/lips-style/glossy_face_mask.js\n\n\nclass GlossyFaceMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshPhysicalMaterial */.uSd({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        // texture.premultiplyAlpha = true;\n        texture.flipY = false;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      roughness: 1,\n      metalness: 0,\n      envMapIntensity: 0,\n      toneMapped: false,\n      fog: false,\n      clearcoat: 0.8,\n      clearcoatRoughness: 0.2,\n      // envMap: new THREE.TextureLoader().load(_texture, function (texture) {\n      //   // texture.premultiplyAlpha = true;\n      //   texture.flipY = false;\n      // }),\n      color: threeColor\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/lips-style/matte_face_mask.js\n\n\nclass MatteFaceMask {\n  constructor(_pattern, _texture) {\n    // console.log(_pattern);\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      toneMapped: false,\n      color: threeColor,\n      fog: false\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n\n// export function getMatteFaceMask(_texture, _color) {\n//   const material = new THREE.MeshBasicMaterial({\n//     map: new THREE.TextureLoader().load(_texture, function (texture) {\n//       // texture.premultiplyAlpha = true;\n//       texture.flipY = false;\n//     }),\n//     transparent: true,\n//     side: THREE.DoubleSide,\n//     roughness: 1,\n//     metalness: 0,\n//     envMapIntensity: 0,\n//     toneMapped: false,\n//     color: _color,\n//   });\n\n//   return material;\n// }\n;// ./src/makeupVTOs/lips-style/lips_pattern_factory.js\n\n\n\n\n\n\n\n\n\nclass LipsPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteFaceMask,\n      glossy: GlossyFaceMask,\n      shimmer: ShimmerFaceMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    //console.log(this.patternClass.MaterialArray);\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/lips-style/lips_single_tone.js\n\n // Import LipsStyle class\n\n//import MatteAOTexture from "../../assets/lips_6.png";\n\n\n\n\nclass LipsSingleTone extends LipsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: lips_full,\n      glossy: lips_full,\n      shimmer: [lips_full, Lips_Shimmer_2]\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const lipsPatternFactory = new LipsPatternFactory();\n      const pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/assets/Lips_Matte_Top.png\n/* harmony default export */ const Lips_Matte_Top = (__webpack_require__.p + "assets/src/assets/Lips_Matte_Top.png");\n;// ./src/assets/Lips_Matte_Lower.png\n/* harmony default export */ const Lips_Matte_Lower = (__webpack_require__.p + "assets/src/assets/Lips_Matte_Lower.png");\n;// ./src/assets/lips_bottom_shimmer.png\n/* harmony default export */ const lips_bottom_shimmer = (__webpack_require__.p + "assets/src/assets/lips_bottom_shimmer.png");\n;// ./src/assets/lips_top_shimmer.png\n/* harmony default export */ const lips_top_shimmer = (__webpack_require__.p + "assets/src/assets/lips_top_shimmer.png");\n;// ./src/makeupVTOs/lips-style/lips_two_tone.js\n\n // Import LipsStyle class\n\n\n\n\n\n\n\nclass LipsTwoTone extends LipsStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTexturesU = {\n      matte: Lips_Matte_Top,\n      glossy: Lips_Matte_Top,\n      shimmer: [Lips_Matte_Top, lips_top_shimmer]\n    };\n    let patternDefaultTexturesL = {\n      matte: Lips_Matte_Lower,\n      glossy: Lips_Matte_Lower,\n      shimmer: [Lips_Matte_Lower, lips_bottom_shimmer]\n    };\n    let materialsArray = [];\n    // console.log(sku.attributes.patterns);\n    for (let i = 0; i < sku.attributes.length; i++) {\n      const lipsPatternFactory = new LipsPatternFactory();\n      if (i === 0) {\n        const pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTexturesU[sku.attributes[i].name.toLowerCase()] //need to change with link data\n        );\n        materialsArray.push(...pattern.getMaterials());\n      } else if (i === 1) {\n        const pattern = lipsPatternFactory.createPattern(sku.attributes[i], patternDefaultTexturesL[sku.attributes[i].name.toLowerCase()] //need to change with link data\n        );\n        materialsArray.push(...pattern.getMaterials());\n      }\n      //materialsArray.push(...pattern.getMaterials());\n    }\n    //console.log("asfasf" + materialsArray.length);\n\n    super(sku, scene, width, height, materialsArray);\n  }\n  // getDefaultTexture(type) {\n  //   if (type === "matte") {\n  //     return MatteAOTexture;\n  //   } else if (type === "glossy") {\n  //     return GlossyAOTexture;\n  //   } else if (type === "shimmer") {\n  //     return ShimmerAOTexture;\n  //   }\n  // }\n}\n;// ./src/makeupVTOs/lips-style/lips_style_factory.js\n\n\n\n\n\n\n\n\n\n\nclass LipsStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.lipStyles = {\n      single: LipsSingleTone,\n      dual: LipsTwoTone\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const LipStyleClass = this.lipStyles[styleType.toLowerCase()];\n    if (!LipStyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported lips style`);\n    }\n    return new LipStyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/mascara_natural1.png\n/* harmony default export */ const mascara_natural1 = (__webpack_require__.p + "assets/src/assets/mascara_natural1.png");\n;// ./src/makeupVTOs/masacara-style/masacara_style.js\n\n\n\n\n\n\n\n\nclass MasacaraStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.geometry = new three_module/* BufferGeometry */.LoY();\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.faces = [];\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  addFaces() {\n    for (let i = 0; i < this.materialArray.length; i++) {\n      makeGeometry(this.landmarks, this.geometry, "eyelash");\n      if (!this.faces || this.faces.length <= i) {\n        let tempface = new three_module/* Mesh */.eaF(this.geometry, this.materialArray[i]);\n        this.faces.push(tempface);\n        this.scene.add(tempface);\n        this.faces[i].receiveShadow = false; // Disable receiving shadows\n        this.faces[i].castShadow = false; // Disable casting shadows\n        this.faces[i].position.set(0, 0, 0);\n        this.faces[i].name = "makeup";\n      } else {\n        this.faces[i].geometry = this.geometry;\n        this.faces[i].material = this.materialArray[i];\n      }\n      this.faces[i].scale.set(this.width, this.height, this.width);\n    }\n  }\n  removeFaces() {\n    this.scene.remove(this.faces);\n    while (!!this.scene.getObjectByName("makeup")) {\n      this.scene.remove(this.scene.getObjectByName("makeup"));\n    }\n    this.faces = [];\n  }\n  setVisibility(state) {\n    this.materialArray.forEach(material => {\n      if (material.visible !== state) {\n        material.visible = state;\n      }\n    });\n  }\n  update() {\n    if (this.needsUpdate) {\n      if (this.faces != null) {\n        //this.removeFaces();\n      }\n      if (this.landmarks != null) {\n        this.addFaces();\n      }\n      this.needsUpdate = false;\n    }\n    if (this.faces != null && this.landmarks != null) {\n      this.updateOpacity();\n    }\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.opacity = getOpacitySliderValue();\n    });\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.opacity = intensity;\n      material.needsUpdate = true;\n      //if (material.emissive) material.emissive.setHex(newColorValue);\n    });\n  }\n}\n;// ./src/makeupVTOs/masacara-style/matte_masacara_mask.js\n\n\nclass MatteMasacaraMask {\n  constructor(_pattern, _texture) {\n    const color = _pattern.colors[0];\n    let newColor = ColorUtils.getColorWithIntensity(color, 100);\n    let threeColor = new three_module/* Color */.Q1f(newColor);\n    const material = new three_module/* MeshStandardMaterial */._4j({\n      map: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n        texture.generateMipmaps = true;\n        texture.magFilter = three_module/* LinearFilter */.k6q;\n        texture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      }),\n      transparent: true,\n      side: three_module/* FrontSide */.hB5,\n      envMapIntensity: 1,\n      toneMapped: false,\n      color: threeColor,\n      fog: false,\n      envMap: new three_module/* TextureLoader */.Tap().load(_texture, function (texture) {\n        texture.flipY = false;\n      })\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/masacara-style/masacara_pattern_factory.js\n\n\n\n\n\n\nclass MasacaraPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteMasacaraMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/masacara-style/masacara_style_1.js\n\n\n\n\nclass MasacaraStyle1 extends MasacaraStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: mascara_natural1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      // console.log(_style.patterns[i]);\n      const PatternFactory = new MasacaraPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/mascara_natural2.png\n/* harmony default export */ const mascara_natural2 = (__webpack_require__.p + "assets/src/assets/mascara_natural2.png");\n;// ./src/makeupVTOs/masacara-style/masacara_style_2.js\n\n\n\n\nclass MasacaraStyle2 extends MasacaraStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: mascara_natural2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new MasacaraPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/mascara_natural3.png\n/* harmony default export */ const mascara_natural3 = (__webpack_require__.p + "assets/src/assets/mascara_natural3.png");\n;// ./src/makeupVTOs/masacara-style/masacara_style_3.js\n\n\n\n\nclass MasacaraStyle3 extends MasacaraStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: mascara_natural3\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new MasacaraPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/mascara_upperlower1.png\n/* harmony default export */ const mascara_upperlower1 = (__webpack_require__.p + "assets/src/assets/mascara_upperlower1.png");\n;// ./src/makeupVTOs/masacara-style/masacara_style_4.js\n\n\n\n\nclass MasacaraStyle4 extends MasacaraStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: mascara_upperlower1\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new MasacaraPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/assets/mascara_upperlower2.png\n/* harmony default export */ const mascara_upperlower2 = (__webpack_require__.p + "assets/src/assets/mascara_upperlower2.png");\n;// ./src/makeupVTOs/masacara-style/masacara_style_5.js\n\n\n//import MatteAOTexture from "../../assets/eyelash_12.png";\n\n\nclass MasacaraStyle5 extends MasacaraStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: mascara_upperlower2\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      //console.log(_style.patterns[i]);\n      const PatternFactory = new MasacaraPatternFactory();\n      const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n      );\n      materialsArray.push(...pattern.getMaterials());\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/masacara-style/masacara_style_factory.js\n\n\n\n\n\n\n\n\n\n\nclass MasacaraStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.eyeShadowStyles = {\n      natural1: MasacaraStyle1,\n      natural2: MasacaraStyle2,\n      natural3: MasacaraStyle3,\n      upperlower1: MasacaraStyle4,\n      upperlower2: MasacaraStyle5\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.eyeShadowStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported masacara style`);\n    }\n    return new StyleClass(apiResponseData.sku, scene, width, height);\n  }\n}\n;// ./src/assets/shine_12.png\n/* harmony default export */ const shine_12 = (__webpack_require__.p + "assets/src/assets/shine_12.png");\n;// ./src/makeupVTOs/nail-style/nailResponse.js\nclass nailResponseData {\n  constructor(_image, _mask, _x_cord, _y_cord, _x2_cord, _y2_cord, _angle, _isVideo) {\n    this.image = _image;\n    this.maskData = _mask;\n    this.x_cord = _x_cord;\n    this.y_cord = _y_cord;\n    this.x2_cord = _x2_cord;\n    this.y2_cord = _y2_cord;\n    this.angle = _angle;\n    this.isVideo = _isVideo;\n  }\n}\n;// ./src/makeupVTOs/nail-style/nail_style.js\n\n\n\n\n\n\n\n\n\n//import { GUI } from "dat.gui";\n\nclass NailStyle {\n  constructor(sku, scene, width, height, materials) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.materialArray = materials;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.imageCanvas;\n    this.ctx;\n    this.nailData;\n    this.maskTexture = null;\n    this.angle = null;\n    this.x_cord = null;\n    this.y_cord = null;\n    this.x2_cord = null;\n    this.y2_cord = null;\n    this.maskMesh = [null, null, null, null, null, null, null, null, null, null];\n    this.faces = null;\n    this.isVideo = true;\n    this.combinecall = false;\n    this.maskCanvas = document.createElement("canvas");\n    let contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.maskCanvas.getContext("2d", contextAttributes);\n    this.colorIntensity = 1;\n    this.colorIntensity = sku.meta.colorIntensity / 100;\n    setDefaultOpacitySlider(this.colorIntensity);\n    setDefaultOpacitySliderValue(this.colorIntensity);\n    setOpacitySliderValue(this.colorIntensity);\n    this.setOpacity(this.colorIntensity);\n\n    // const gui = new GUI();\n\n    // this.currentvector = new THREE.Vector3(0, 0, 0);\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", -100, 100).step(0.01);\n    // vectorFolder2.add(this.currentvector, "y", -100, 100).step(0.01);\n    // vectorFolder2.add(this.currentvector, "z", -100, 100).step(0.01);\n  }\n  updateDimensions(width, height, offset) {\n    this.width = width;\n    this.height = height;\n    this.offset = offset;\n    if (this.isVideo) this.updateTransforms();\n\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    // this.needsUpdate = true;\n  }\n  setNeedUpdateTrue() {\n    this.needsUpdate = true;\n  }\n  updateMask(imageCanvas, mask, x_cord, y_cord, x2_cord, y2_cord, angle, isVideo) {\n    // console.log("inside updateMask called",combinecall);\n    //this.imageCanvas = imageCanvas;\n    let contextAttributes = {\n      willReadFrequently: true\n    };\n    this.ctx = this.maskCanvas.getContext("2d", contextAttributes);\n    //  console.error("Called  updateMask angle :: ", angle);\n    this.angle = angle;\n    this.maskTexture = mask;\n    this.x_cord = x_cord;\n    this.y_cord = y_cord;\n    this.x2_cord = x2_cord;\n    this.y2_cord = y2_cord;\n    this.needsUpdate = true;\n    this.isVideo = isVideo;\n    this.nailData = new nailResponseData(imageCanvas, mask, x_cord, y_cord, x2_cord, y2_cord, angle, isVideo);\n  }\n  getNailData() {\n    return this.nailData;\n  }\n  clearNailData() {\n    this.nailData = null;\n  }\n  setNailData(_nailData) {\n    this.nailData = _nailData;\n    let contextAttributes = {\n      willReadFrequently: true\n    };\n    this.ctx = this.maskCanvas.getContext("2d", contextAttributes);\n    // console.log(this.angle);\n    this.angle = _nailData.angle;\n    // console.log(this.angle);\n\n    this.maskTexture = _nailData.maskData;\n    this.x_cord = _nailData.x_cord;\n    this.y_cord = _nailData.y_cord;\n    this.x2_cord = _nailData.x2_cord;\n    this.y2_cord = _nailData.y2_cord;\n    this.isVideo = _nailData.isVideo;\n    this.needsUpdate = true;\n  }\n  flipImageData(data, width, height) {\n    const flippedData = new Uint8Array(data.length);\n    const rowSize = width * 4; // Assuming 4 channels (RGBA)\n\n    for (let row = 0; row < height; row++) {\n      const srcOffset = row * rowSize;\n      const destOffset = (height - row - 1) * rowSize;\n      flippedData.set(data.subarray(srcOffset, srcOffset + rowSize), destOffset);\n    }\n    return flippedData;\n  }\n  degreesToRadians(degrees) {\n    return degrees * (-Math.PI / 180);\n  }\n  addrendring() {\n    if (!this.maskTexture || !this.materialArray || this.materialArray.length <= 0) return;\n    //console.log(this.angle);\n    let anglesInRadians = this.angle.map(this.degreesToRadians);\n    for (let z = 0; z < this.maskTexture.length; z++) {\n      let sx;\n      let sy;\n      if (this.isVideo) {\n        sx = this.x_cord[z] + this.x2_cord[z] / 2 - getVideoEl()?.videoWidth / 2 + 1.7;\n        sy = getVideoEl()?.videoHeight / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n      } else {\n        sx = this.x_cord[z] + this.x2_cord[z] / 2 - this.width / 2 + 1.7;\n        sy = this.height / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n      }\n      let sh = this.y2_cord[z] * 1.08;\n      let sw = this.x2_cord[z] * 1.08;\n      let maskImageTexture = this.maskTexture[z];\n      let newColor = new three_module/* Color */.Q1f(0xb76e79); // Green color\n\n      maskImageTexture.generateMipmaps = true;\n      maskImageTexture.magFilter = three_module/* LinearFilter */.k6q; // For smoother magnification\n      maskImageTexture.minFilter = three_module/* LinearMipMapLinearFilter */.NZq;\n      maskImageTexture.color = newColor;\n      maskImageTexture.opacity = 0.5;\n      maskImageTexture.needsUpdate = true;\n      let maskGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n      if (this.isVideo) {\n        this.materialArray[z].vertexShader = nail_style_vertexShader;\n      } else {\n        this.materialArray[z].vertexShader = nail_style_vertexShader;\n      }\n      this.materialArray[z].uniforms._MaskTex.value = maskImageTexture;\n      this.materialArray[z].uniforms._RotationAngle.value = anglesInRadians[z];\n\n      // this.materialArray[z].uniforms._numMaskTextures.value = 1; //this.mask.length;\n      this.materialArray[z].uniforms._Threshold.value = 0.2;\n      this.materialArray[z].needsUpdate = true;\n      this.maskMesh[z] = new three_module/* Mesh */.eaF(maskGeometry, this.materialArray[z]);\n      this.maskMesh[z].position.set(sx / this.offset, sy / this.offset, 0);\n      this.maskMesh[z].scale.set(sw / this.offset, sh / this.offset, 1);\n      this.scene.add(this.maskMesh[z]);\n    }\n  }\n  updateTransforms() {\n    if (!this.maskTexture || !this.maskMesh || this.maskMesh.length <= 0 || this.maskMesh.length > 1 && !this.maskMesh[0]) return;\n    for (let z = 0; z < this.maskTexture.length; z++) {\n      let sx;\n      let sy;\n      if (this.isVideo) {\n        sx = this.x_cord[z] + this.x2_cord[z] / 2 - getVideoEl()?.videoWidth / 2 + 1.7;\n        sy = getVideoEl()?.videoHeight / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n      } else {\n        sx = this.x_cord[z] + this.x2_cord[z] / 2 - this.width / 2 + 1.7;\n        sy = this.height / 2 - this.y2_cord[z] / 2 - this.y_cord[z] - 2.5;\n      }\n      let sh = this.y2_cord[z] * 1.08;\n      let sw = this.x2_cord[z] * 1.08;\n\n      // console.log(this.maskMesh);\n\n      this.maskMesh[z].position.set(sx / this.offset, sy / this.offset, 0);\n      this.maskMesh[z].scale.set(sw / this.offset, sh / this.offset, 1);\n    }\n  }\n  removeFaces() {\n    //this.scene.remove(this.faces);\n    if (this.maskTexture) {\n      for (let z = 0; z < this.maskTexture.length; z++) {\n        this.scene.remove(this.maskMesh[z]);\n      }\n    }\n  }\n  setOpacity(intensity) {\n    this.materialArray.forEach(material => {\n      material.uniforms.opacity.value = intensity;\n    });\n  }\n  updateOpacity() {\n    this.materialArray.forEach(material => {\n      material.uniforms.opacity.value = getOpacitySliderValue();\n    });\n  }\n  update() {\n    // console.log(this.needsUpdate, this.maskTexture);\n    if (this.needsUpdate) {\n      // console.log("update called 218");//&& !this.combinecall\n      if (this.maskMesh != null) {\n        // if(this.combinecall =="false"){\n        this.removeFaces();\n        //console.log("removeFaces called 2",this.combinecall);\n        // }\n      }\n      if (this.maskTexture != null) {\n        this.addrendring();\n        // this.addMaskColor();\n      } else {\n        // console.log("addMaskColor not called");\n      }\n      this.needsUpdate = false;\n    }\n    if (this.maskMesh != null && this.maskTexture != null) {\n      // console.log("nail update");\n      this.updateOpacity();\n    }\n\n    // if (this.faces != null && this.pointLight != null) {\n    //     this.pointLight.position.copy(this.faces.position);\n    // }\n  }\n}\nvar vertexShaderFlipped = ["varying vec2 vUv;", "void main() {", "  vUv = vec2(1.0 - uv.x, uv.y);",\n// Flip the texture coordinates horizontally\n"  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\nvar nail_style_vertexShader = ["varying vec2 vUv;", "void main() {", "  vUv = uv;", "  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);", "}"].join("\\n");\n;// ./src/makeupVTOs/nail-style/glossy_nail_mask.js\n\n\nclass GlossyNailMask {\n  constructor(_pattern, _texture, index) {\n    const color = _pattern.colors[0];\n    let maskColor = ColorUtils.hexToVector4(color, 100);\n    // let threeColor = new THREE.Color(newColor);\n    // let maskColor = new THREE.Vector4(\n    //   threeColor.r,\n    //   threeColor.g,\n    //   threeColor.b,\n    //   1\n    // );\n\n    const aomap = new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n    const fragmentShader = `\n  uniform sampler2D _MaskTex;\n  uniform sampler2D aoTex;\n  uniform vec4 newColorValue;\n  uniform float _RotationAngle;\n  uniform float opacity;\n  varying vec2 vUv;\n\n  // Function to compute a simple box blur (you can adjust the radius for more or less blur)\n  float smoothMask(vec2 uv, float radius) {\n    float sum = 0.0;\n    float count = 0.0;\n    vec2 offset = vec2(radius / 512.0, radius / 512.0); // Adjust the 512.0 for your texture resolution\n\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\n      for (float y = -1.0; y <= 1.0; y += 1.0) {\n        vec2 texCoord = uv + vec2(x, y) * offset;\n        vec4 color = texture2D(_MaskTex, texCoord);\n        sum += color.r;\n        count += 1.0;\n      }\n    }\n    return sum / count;\n  }\n\n  void main() {\n    float blurRadius = 10.0; // Adjust this value for more or less blur\n    float alpha = smoothMask(vUv, blurRadius);\n\n    // Sample the aoTex and apply the mask\n    vec2 rotatedUV = vec2(\n      cos(_RotationAngle) * (vUv.x - 0.5) + sin(_RotationAngle) * (vUv.y - 0.5) + 0.5,\n      cos(_RotationAngle) * (vUv.y - 0.5) - sin(_RotationAngle) * (vUv.x - 0.5) + 0.5\n    );\n  \n    vec4 aoColor = texture2D(aoTex, rotatedUV);\n    vec4 baseColor = vec4(newColorValue.rgb, alpha);\n\n    // Apply the mask to aoTex\n    vec4 maskedAoColor = vec4(aoColor.rgb, aoColor.a * alpha);\n\n    // Mix baseColor and maskedAoColor\n    vec4 result = mix(baseColor, maskedAoColor, maskedAoColor.a);\n\n    // Apply the final opacity to the result\n    gl_FragColor = vec4(result.rgb, result.a * opacity);\n  }\n`;\n    let material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        _MaskTex: {\n          value: null\n        },\n        aoTex: {\n          value: aomap\n        },\n        _Threshold: {\n          value: 0.2\n        },\n        newColorValue: {\n          value: maskColor\n        },\n        opacity: {\n          value: 0.2\n        },\n        _RotationAngle: {\n          value: 0.0\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/nail-style/matte_nail_mask.js\n\n\nclass MatteNailMask {\n  constructor(_pattern, _texture, index) {\n    const color = _pattern.colors[0];\n    let maskColor = ColorUtils.hexToVector4(color, 100);\n    // let threeColor = new THREE.Color(newColor);\n    // let maskColor = new THREE.Vector4(\n    //   threeColor.r,\n    //   threeColor.g,\n    //   threeColor.b,\n    //   1\n    // );\n\n    const aomap = new three_module/* TextureLoader */.Tap().load(_texture[1], function (texture) {\n      texture.flipY = false;\n      texture.needsUpdate = true;\n    });\n    const vertexShader = `\n      varying vec2 vUv;\n      void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n    `;\n    const fragmentShader = `\n  uniform sampler2D _MaskTex;\n  uniform vec4 newColorValue;\n  uniform float opacity;\n  uniform float _RotationAngle;\n  varying vec2 vUv;\n\n  // Function to compute a simple box blur (you can adjust the radius for more or less blur)\n  float smoothMask(vec2 uv, float radius) {\n    float sum = 0.0;\n    float count = 0.0;\n    vec2 offset = vec2(radius / 512.0, radius / 512.0); // Adjust the 512.0 for your texture resolution\n\n    for (float x = -1.0; x <= 1.0; x += 1.0) {\n      for (float y = -1.0; y <= 1.0; y += 1.0) {\n        vec2 texCoord = uv + vec2(x, y) * offset;\n        vec4 color = texture2D(_MaskTex, texCoord);\n        sum += color.r;\n        count += 1.0;\n      }\n    }\n    return sum / count;\n  }\n\n  void main() {\n    \n    float blurRadius = 10.0; // Adjust this value for more or less blur\n    float alpha = smoothMask(vUv, blurRadius);\n    gl_FragColor = vec4(newColorValue.rgb, alpha * opacity);\n  }\n`;\n    let material = new three_module/* ShaderMaterial */.BKk({\n      uniforms: {\n        _MaskTex: {\n          value: null\n        },\n        _Threshold: {\n          value: 0.2\n        },\n        newColorValue: {\n          value: maskColor\n        },\n        opacity: {\n          value: 0.2\n        },\n        _RotationAngle: {\n          value: 0.0\n        }\n      },\n      vertexShader: vertexShader,\n      fragmentShader: fragmentShader,\n      transparent: true,\n      fog: false,\n      side: three_module/* FrontSide */.hB5\n    });\n    this.MaterialArray = [material];\n  }\n  getMaterials() {\n    return this.MaterialArray;\n  }\n}\n;// ./src/makeupVTOs/nail-style/nail_pattern_factory.js\n\n\n\n\n\n\nclass NailPatternFactory extends PatternFactory {\n  constructor() {\n    super();\n    this.pattern = {\n      matte: MatteNailMask,\n      glossy: GlossyNailMask\n    };\n    this.patternClass = null;\n  }\n  createPattern(_pattern, _texture) {\n    // console.log(_pattern.type);\n    let patternType = _pattern.name;\n    this.patternClass = this.pattern[patternType.toLowerCase()];\n    if (!this.patternClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported pattern` + patternType);\n    }\n    return new this.patternClass(_pattern, _texture);\n  }\n  getPatternMaterials() {\n    //console.log(this.patternClass.MaterialArray);\n    return this.patternClass.this.getMaterials();\n  }\n}\n;// ./src/makeupVTOs/nail-style/nail_single_color.js\n\n\n\n\nclass NailSingleTone extends NailStyle {\n  constructor(sku, scene, width, height) {\n    let patternDefaultTextures = {\n      matte: [null, shine_12],\n      glossy: [null, shine_12],\n      shimmer: null\n    };\n    let materialsArray = [];\n    for (let i = 0; i < sku.attributes.length; i++) {\n      for (let j = 0; j < 10; j++) {\n        const PatternFactory = new NailPatternFactory();\n        const pattern = PatternFactory.createPattern(sku.attributes[i], patternDefaultTextures[sku.attributes[i].name.toLowerCase()] //need to change with link data\n        );\n        materialsArray.push(...pattern.getMaterials());\n      }\n    }\n    super(sku, scene, width, height, materialsArray);\n  }\n}\n;// ./src/makeupVTOs/nail-style/nail_style_factory.js\n\n\n\n\n\nclass NailStyleFactory extends StyleFactory {\n  constructor() {\n    super();\n    this.nailStyles = {\n      single: NailSingleTone\n    };\n  }\n  createStyle(apiResponseData, scene, width, height) {\n    const styleType = apiResponseData.sku.styleVariant;\n    const StyleClass = this.nailStyles[styleType.toLowerCase()];\n    if (!StyleClass) {\n      // showSnackbar().then(() => {\n      //   setTimeout(() => {\n      //     emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n      throw new Error(`Unsupported hair style`);\n    }\n    const styleInstance = new StyleClass(apiResponseData.sku, scene, width, height);\n    styleInstance.isNailStyleFactoryInstance = true;\n    return styleInstance;\n  }\n}\n;// ./src/assets/svg/watch_n.svg\n/* harmony default export */ const watch_n = (__webpack_require__.p + "assets/src/assets/svg/watch_n.svg");\n;// ./src/assets/svg/ring_n.svg\n/* harmony default export */ const ring_n = (__webpack_require__.p + "assets/src/assets/svg/ring_n.svg");\n;// ./src/assets/svg/bracelet_n.svg\n/* harmony default export */ const bracelet_n = (__webpack_require__.p + "assets/src/assets/svg/bracelet_n.svg");\n;// ./src/assets/svg/earring_n.svg\n/* harmony default export */ const earring_n = (__webpack_require__.p + "assets/src/assets/svg/earring_n.svg");\n;// ./src/assets/svg/necklace_n.svg\n/* harmony default export */ const necklace_n = (__webpack_require__.p + "assets/src/assets/svg/necklace_n.svg");\n;// ./src/assets/svg/glasses_n.svg\n/* harmony default export */ const glasses_n = (__webpack_require__.p + "assets/src/assets/svg/glasses_n.svg");\n;// ./src/assets/svg/cap_n.svg\n/* harmony default export */ const cap_n = (__webpack_require__.p + "assets/src/assets/svg/cap_n.svg");\n;// ./src/assets/svg/mangtika_n.svg\n/* harmony default export */ const mangtika_n = (__webpack_require__.p + "assets/src/assets/svg/mangtika_n.svg");\n;// ./src/htmlService/loadingModelPanel.js\n\n\n\n\n\n\n\n//import mangtika from "../assets/svg/mangtika_n.svg";\n\nlet loadingModelPanel = null;\nlet imgElementCache = null;\nfunction getIcon(name) {\n  switch (name) {\n    case "watch":\n      return watch_n;\n    case "ring":\n      return ring_n;\n    case "bracelet":\n      return bracelet_n;\n    case "earring":\n      return earring_n;\n    case "necklace":\n      return necklace_n;\n    case "glasses":\n      return glasses_n;\n    case "cap":\n      return cap_n;\n    case "mangtika":\n      return mangtika_n;\n  }\n}\nfunction setTrackingMsg(message) {\n  loadingModelPanel.innerHTML = message;\n}\nfunction hideLoadingModelPanel() {\n  loadingModelPanel.style.display = "none";\n}\nfunction showLoadingModelPanel(name) {\n  imgElementCache.src = getIcon(name);\n  loadingModelPanel.style.display = "flex";\n}\nfunction setLoadingModelPanelElement(type) {\n  loadingModelPanel = document.querySelector(".loading-model-Panel");\n  const imgElement = document.querySelector(".loading-model-icon");\n  // imgElement.style.position = "absolute";\n  // imgElement.style.top = "20%";\n  imgElement.style.height = "96px";\n  imgElement.style.width = "96px";\n\n  // loadingModelPanel.appendChild(imgElement);\n  imgElementCache = imgElement;\n}\n;// ./src/utils/LerpingAndFlickerManager.js\n\n\n// import { GUI } from "dat.gui";\n\nclass LerpingAndFlickerManager {\n  constructor(glasseRef) {\n    this.glassRef = glasseRef;\n    this.clock = new THREE.Clock();\n    this.scaleSmoothing = new Vector3ExponentialSmoothing(0.7);\n    this.positionSmoothing = new Vector3ExponentialSmoothing(0.98);\n    this.rotationSmoothing = new QuaternionExponentialSmoothing(0.98);\n    this.lastSetScale = null;\n    this.targetScale = null;\n    this.scaleLerpFactor = 0.5;\n    this.lasSetPosition = null;\n    this.targetPosition = null;\n    this.positionLerpFactor = 0.9;\n    this.lasSetRotation = null;\n    this.targetRotation = null;\n    this.rotationLerpFactor = 0.9;\n    this.lastTime = 0;\n    this.frameCount = 0;\n    this.fps = 0;\n\n    // const gui = new GUI();\n\n    // this.currentvector = new THREE.Vector3(3.0, 4.4, 0.2);\n    // this.currentvector1 = new THREE.Vector3(1.4, -0.05, -0.02);\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", 0, 50).step(0.001);\n    // vectorFolder2.add(this.currentvector, "y", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector, "z", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "x", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "y", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "z", -10, 10).step(0.001);\n  }\n\n  //#region Scale Functions\n  setTargetScale(newScale) {\n    const scaleVector = new THREE.Vector3(newScale, newScale, newScale);\n    this.targetScale = this.scaleSmoothing.update(scaleVector);\n    // console.log(`SET Scale: ${scaleVector.toArray().join(", ")}`);\n    if (!this.lastSetScale) {\n      // console.log("## Set intital Scale");\n      this.lastSetScale = scaleVector.clone();\n      this.glassRef.scale.copy(this.lastSetScale);\n      return;\n    }\n  }\n  updateScaleSmoothly(lFactor) {\n    if (this.targetScale && this.lastSetScale) {\n      const closeEnoughThreshold = 0.3;\n      if (this.lastSetScale.distanceTo(this.targetScale) > closeEnoughThreshold) {\n        this.lastSetScale.copy(this.targetScale);\n        this.glassRef.scale.copy(this.targetScale);\n        // console.log("## Reached target Scale");\n        return;\n      }\n      this.lastSetScale.lerp(this.targetScale, lFactor);\n      this.glassRef.scale.copy(this.lastSetScale);\n    }\n  }\n  //#endregion\n\n  //#region Position Functions\n  setTargetPosition(position) {\n    const {\n      x,\n      y,\n      z\n    } = position;\n    const tPosition = new THREE.Vector3(x, y, z);\n    this.targetPosition = this.positionSmoothing.update(tPosition);\n    // console.log(`SET Scale: ${scaleVector.toArray().join(", ")}`);\n    if (!this.lasSetPosition) {\n      // console.log("## Set intital Scale");\n      this.lasSetPosition = tPosition.clone();\n      this.glassRef.position.copy(this.lasSetPosition);\n      return;\n    }\n  }\n  updatePositionSmoothly(lFactor) {\n    if (this.targetPosition && this.lasSetPosition) {\n      const closeEnoughThreshold = 3.0;\n      if (this.lasSetPosition.distanceTo(this.targetPosition) > closeEnoughThreshold) {\n        this.lasSetPosition.copy(this.targetPosition);\n        this.glassRef.position.copy(this.targetPosition);\n        // console.log("## Reached target Scale");\n        return;\n      }\n      this.lasSetPosition.lerp(this.targetPosition, lFactor);\n      this.glassRef.position.copy(this.lasSetPosition);\n    }\n  }\n  //#endregion\n\n  //#region Rotation Functions\n  setTargetRotation(rotation) {\n    this.targetRotation = this.rotationSmoothing.update(rotation);\n    if (!this.lasSetRotation) {\n      // console.log("## Set intital Rotation");\n      this.lasSetRotation = rotation;\n      this.glassRef.quaternion.copy(this.lasSetRotation);\n      return;\n    }\n  }\n  updateRotationSmoothly(lFactor) {\n    if (this.targetRotation && this.lasSetRotation) {\n      const closeEnoughThreshold = 0.9995;\n      if (this.lasSetRotation.dot(this.targetRotation) < closeEnoughThreshold) {\n        this.lasSetRotation.copy(this.targetRotation);\n        this.glassRef.quaternion.copy(this.targetRotation);\n        return;\n      }\n      this.lasSetRotation.slerp(this.targetRotation, lFactor);\n      this.glassRef.quaternion.copy(this.lasSetRotation);\n    }\n  }\n  //#endregion\n\n  update(dt) {\n    if (getIsVideo()) {\n      const speed = this.fps;\n      this.updateScaleSmoothly(this.scaleLerpFactor * dt * speed);\n      this.updatePositionSmoothly(this.positionLerpFactor * dt * speed);\n      this.updateRotationSmoothly(this.rotationLerpFactor * dt * speed);\n    }\n  }\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    const deltaTime = this.clock.getDelta();\n    const now = performance.now();\n    const delta = now - this.lastTime;\n    this.frameCount++;\n    //bit less than 1 sec.\n    if (delta >= 1000) {\n      // Update FPS every second\n      this.fps = this.frameCount;\n      this.frameCount = 0;\n      this.lastTime = now;\n      // console.log("FPS: " + this.fps); // Output FPS to the console\n    }\n    this.update(deltaTime);\n  }\n}\nclass Vector3ExponentialSmoothing {\n  constructor(alpha) {\n    this.alpha = alpha;\n    this.lastOutput = new THREE.Vector3();\n  }\n  update(value) {\n    if (this.lastOutput.equals(new THREE.Vector3())) {\n      this.lastOutput.copy(value);\n    } else {\n      this.lastOutput.lerp(value, this.alpha);\n    }\n    this.lastOutput.x = Math.round(this.lastOutput.x * 1000) / 1000;\n    this.lastOutput.y = Math.round(this.lastOutput.y * 1000) / 1000;\n    this.lastOutput.z = Math.round(this.lastOutput.z * 1000) / 1000;\n    return this.lastOutput;\n  }\n}\nclass QuaternionExponentialSmoothing {\n  constructor(alpha) {\n    this.alpha = alpha;\n    this.lastOutput = new THREE.Quaternion();\n  }\n  update(value) {\n    if (this.lastOutput.equals(new THREE.Quaternion())) {\n      this.lastOutput.copy(value);\n    } else {\n      // Correctly interpolate between the lastOutput and the new value\n      this.lastOutput.slerpQuaternions(this.lastOutput, value, this.alpha);\n    }\n    return this.lastOutput;\n  }\n}\n;// ./src/virtualTryOns/glasses.js\n\n\n\n\n\n// import {\n//   hideLoadingModelPanel,\n//   showLoadingModelPanel,\n// } from "../utils/loadingModelPanel";\n// import {\n//   hideDistanceMessagePanel,\n//   setDistanceMsg,\n//   showDistanceMessagePanel,\n// } from "../utils/distanceMessage";\n\n\n\n\n\n\n\n\n\n// import { GUI } from "dat.gui";\n\nconst customShaderMaterial = new three_module/* ShaderMaterial */.BKk({\n  uniforms: {\n    obj1Position: {\n      value: new three_module/* Vector3 */.Pq0()\n    },\n    // Stores obj1\'s world position\n    obj1Radius: {\n      value: 150.0\n    },\n    // obj1\'s radius\n    blendDistance: {\n      value: 50.0\n    } // Distance over which blending occurs\n  },\n  vertexShader: `\n      varying vec3 vWorldPosition;\n      void main() {\n          vWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz; // Compute world position of obj2 vertices\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n      }\n  `,\n  fragmentShader: `\n      uniform vec3 obj1Position; // obj1\'s world position\n      uniform float obj1Radius;  // obj1\'s radius\n      uniform float blendDistance; // Distance over which transparency should blend\n      varying vec3 vWorldPosition; // obj2\'s world position\n\n      void main() {\n          // Compute distance from obj2\'s fragment to obj1\'s center\n          float distanceToObj1 = distance(vWorldPosition, obj1Position);\n\n          // If the fragment is within blending range, calculate the transparency factor\n          float blendFactor = smoothstep(obj1Radius - blendDistance, obj1Radius, distanceToObj1);\n\n          // Set the color with blended transparency\n          gl_FragColor = vec4(1.0, 1.0, 1.0, blendFactor); // Blend opacity\n      }\n  `,\n  transparent: true // Enable transparency\n});\nclass Glasses extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.fill;\n    this.nose;\n    this.nosepoint;\n    this.planeMesh;\n    this.imagewidth;\n    this.imageheight;\n    this.planeMesh1;\n    this.planeMesh2;\n    this.planeMesh3;\n    this.planeMesh4;\n    this.planeMesh5;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.is2d = true;\n    //if (getIsVideo()) {\n    // this.smoothObejct = new LerpingAndFlickerManager(this.root);\n    // this.smoothObejct.animate();\n    // }\n    this.previousLandmarks = [];\n    this.localURL = `${PUBLIC_PATH}/3d/glasses/01.gltf`;\n    this.localURL2d = [`${PUBLIC_PATH}/3d/glasses/01_1.png`, `${PUBLIC_PATH}/3d/glasses/01_2.png`, `${PUBLIC_PATH}/3d/glasses/01_3.png`, `${PUBLIC_PATH}/3d/glasses/01_4.png`, `${PUBLIC_PATH}/3d/glasses/01_5.png`, `${PUBLIC_PATH}/3d/glasses/01_6.png`];\n    this.URL = [`${PUBLIC_PATH}/3d/glasses/01.gltf`];\n    //this.loadGlasses();\n\n    this.flickerSmoother = new FlickerSmoother();\n    // this.flickerSmoother.currentvector.y = 1.5;\n    this.filter = 0;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmideye = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevnosebottom = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevrighteye5 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmideye5 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevrighteye = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevlefteye = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.distanceState = -1;\n    this.prevdistanceState = -1;\n    this.timeoutId;\n    console.log(response.sku.attributes[0]);\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n\n    // let geometry = new THREE.SphereGeometry(100);\n    // let material = new THREE.MeshBasicMaterial({\n    //   color: 0xff0000,\n    //   transparent: true,\n    //   opacity: 0.1,\n    // });\n    // this.obj1 = new THREE.Mesh(geometry, material);\n    // this.obj1.position.set(50, 0, 500);\n    // this.obj1.material.colorWrite = false;\n\n    // let geometry1 = new THREE.SphereGeometry(100);\n    // this.obj2 = new THREE.Mesh(geometry1, customShaderMaterial);\n    // this.scene.add(this.obj1);\n    // this.scene.add(this.obj2);\n\n    // this.obj2.position.set(-50, 0, 500);\n\n    // const gui = new GUI();\n\n    // this.currentvector = new THREE.Vector3(0.35, 4.4, 0.2);\n    // this.currentvector1 = new THREE.Vector3(1.4, -0.05, -0.02);\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector, "y", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector, "z", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "x", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "y", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "z", -10, 10).step(0.001);\n\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    // AssetURL = null;\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      if (!is2d) this.URL[0] = this.localURL;else this.URL = this.localURL2d;\n    }\n    showLoadingModelPanel(`glasses`);\n    this.glasses = null;\n    this.planeMesh = null;\n    this.scale2d = 200;\n    clearTimeout(this.timeoutId);\n    this.timeoutId = setTimeout(async () => {\n      await this.loadGlasses(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  test(texture) {\n    // customShaderMaterial.uniforms.obj1Position.value.copy(this.obj1.position);\n  }\n  async loadGlasses(AssetURL) {\n    if (this.is2d) {\n      this.scaleFactor = 5.3;\n      let imageTexture6 = null;\n      let imageTexture5 = null;\n      let imageTexture4 = null;\n      let imageTexture3 = null;\n      let imageTexture2 = null;\n      let imageTexture1 = null;\n      let imageTexture = null;\n\n      // if (!hasGlobalAssetKey(this.URL[4])) {\n      //   imageTexture5 = await new Promise((resolve) => {\n      //     new THREE.TextureLoader().load(this.URL[4], resolve);\n      //   });\n      //   addToGlobalCache(this.URL[4], imageTexture5);\n      // } else {\n      //   imageTexture5 = getGlobalCacheAsset(this.URL[4]);\n      // }\n\n      // const width5 = imageTexture5.image.width;\n      // const height5 = imageTexture5.image.height;\n\n      // imageTexture5.generateMipmaps = false;\n      // imageTexture5.magFilter = THREE.LinearFilter;\n      // imageTexture5.minFilter = THREE.LinearFilter;\n      // imageTexture5.colorSpace = THREE.SRGBColorSpace;\n      // const material2d5 = new THREE.MeshBasicMaterial({\n      //   map: imageTexture5, // Assign the loaded texture\n      //   transparent: true, // Enable transparency\n      //   side: THREE.DoubleSide, // Make the material visible from both sides of the plane (if needed)\n      //   toneMapped: false,\n      // });\n\n      // material2d5.depthWrite = false;\n      // material2d5.needsUpdate = true;\n\n      // const planeGeometry5 = new THREE.PlaneGeometry(\n      //   -width5 / this.scale2d,\n      //   height5 / this.scale2d\n      // );\n      // this.planeMesh4 = new THREE.Mesh(planeGeometry5, material2d5);\n      // this.planeMesh4.renderOrder = 2;\n\n      // if (!hasGlobalAssetKey(this.URL[5])) {\n      //   imageTexture6 = await new Promise((resolve) => {\n      //     new THREE.TextureLoader().load(this.URL[5], resolve);\n      //   });\n      //   addToGlobalCache(this.URL[5], imageTexture6);\n      // } else {\n      //   imageTexture6 = getGlobalCacheAsset(this.URL[5]);\n      // }\n      // const width6 = imageTexture6.image.width;\n      // const height6 = imageTexture6.image.height;\n      // // imageTexture.minFilter = THREE.LinearFilter;\n      // imageTexture6.generateMipmaps = false;\n      // imageTexture6.magFilter = THREE.LinearFilter;\n      // imageTexture6.minFilter = THREE.LinearFilter;\n      // imageTexture6.colorSpace = THREE.SRGBColorSpace;\n      // const material2d6 = new THREE.MeshBasicMaterial({\n      //   map: imageTexture6, // Assign the loaded texture\n      //   transparent: true, // Enable transparency\n      //   side: THREE.DoubleSide, // Make the material visible from both sides of the plane (if needed)\n      //   toneMapped: false,\n      // });\n\n      // material2d6.depthWrite = false;\n      // material2d6.needsUpdate = true;\n\n      // const planeGeometry6 = new THREE.PlaneGeometry(\n      //   width6 / this.scale2d,\n      //   height6 / this.scale2d\n      // );\n\n      // this.planeMesh5 = new THREE.Mesh(planeGeometry6, material2d6);\n      // this.planeMesh5.renderOrder = 2;\n\n      if (!assetsCache_hasGlobalAssetKey(this.URL[1])) {\n        try {\n          imageTexture1 = await loadTexture(this.URL[1]);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL[1], imageTexture1);\n      } else {\n        imageTexture1 = assetsCache_getGlobalCacheAsset(this.URL[1]);\n      }\n      const width1 = imageTexture1.image.width;\n      const height1 = imageTexture1.image.height;\n      imageTexture1.generateMipmaps = false;\n      imageTexture1.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture1.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture1.colorSpace = three_module/* SRGBColorSpace */.er$;\n      const material2d1 = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture1,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB,\n        // Make the material visible from both sides of the plane (if needed)\n        toneMapped: false\n      });\n      material2d1.depthWrite = false;\n      material2d1.needsUpdate = true;\n      const planeGeometry1 = new three_module/* PlaneGeometry */.bdM(-width1 / this.scale2d, height1 / this.scale2d);\n      this.planeMesh1 = new three_module/* Mesh */.eaF(planeGeometry1, material2d1);\n      this.planeMesh1.renderOrder = 2;\n      if (!assetsCache_hasGlobalAssetKey(this.URL[2])) {\n        try {\n          imageTexture2 = await loadTexture(this.URL[2]);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL[2], imageTexture2);\n      } else {\n        imageTexture2 = assetsCache_getGlobalCacheAsset(this.URL[2]);\n      }\n      const width2 = imageTexture2.image.width;\n      const height2 = imageTexture2.image.height;\n      imageTexture2.generateMipmaps = false;\n      imageTexture2.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture2.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture2.colorSpace = three_module/* SRGBColorSpace */.er$;\n      const material2d2 = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture2,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB,\n        // Make the material visible from both sides of the plane (if needed)\n        toneMapped: false\n      });\n      material2d2.depthWrite = false;\n      material2d2.needsUpdate = true;\n      const planeGeometry2 = new three_module/* PlaneGeometry */.bdM(width2 / this.scale2d, height2 / this.scale2d);\n      this.planeMesh2 = new three_module/* Mesh */.eaF(planeGeometry2, material2d2);\n      this.planeMesh2.renderOrder = 2;\n\n      // if (!hasGlobalAssetKey(this.URL[1])) {\n      //   imageTexture3 = await new Promise((resolve) => {\n      //     new THREE.TextureLoader().load(this.URL[1], resolve);\n      //   });\n      //   addToGlobalCache(this.URL[1], imageTexture3);\n      // } else {\n      //   imageTexture3 = getGlobalCacheAsset(this.URL[1]);\n      // }\n      // imageTexture3.generateMipmaps = false;\n      // imageTexture3.magFilter = THREE.LinearFilter;\n      // imageTexture3.minFilter = THREE.LinearFilter;\n      // imageTexture3.colorSpace = THREE.SRGBColorSpace;\n      // this.imagewidth3 = imageTexture3.image.width;\n      // this.imageheight3 = imageTexture3.image.height;\n\n      // const material2d3 = new THREE.MeshBasicMaterial({\n      //   map: imageTexture3, // Assign the loaded texture\n      //   transparent: true, // Enable transparency\n      //   side: THREE.DoubleSide, // Make the material visible from both sides of the plane (if needed)\n      //   toneMapped: false,\n      // });\n\n      // material2d3.metalness = 1;\n      // material2d3.envMapIntensity = 1;\n      // material2d3.needsUpdate = true;\n\n      // const planeGeometry3 = new THREE.PlaneGeometry(\n      //   this.imagewidth3 / this.scale2d,\n      //   this.imageheight3 / this.scale2d,\n      //   this.imagewidth3 / this.scale2d\n      // );\n      // this.planeMesh3 = new THREE.Mesh(planeGeometry3, material2d3);\n      // this.planeMesh3.renderOrder = 2;\n\n      if (!assetsCache_hasGlobalAssetKey(this.URL[0])) {\n        try {\n          imageTexture = await loadTexture(this.URL[0]);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL[0], imageTexture);\n      } else {\n        imageTexture = assetsCache_getGlobalCacheAsset(this.URL[0]);\n      }\n      imageTexture.generateMipmaps = false;\n      imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      this.imagewidth = imageTexture.image.width;\n      this.imageheight = imageTexture.image.height;\n      const material2d = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB,\n        // Make the material visible from both sides of the plane (if needed)\n        toneMapped: false\n      });\n      material2d.needsUpdate = true;\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(this.imagewidth / this.scale2d, this.imageheight / this.scale2d, this.imagewidth / this.scale2d);\n      this.planeMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n      this.planeMesh.renderOrder = 2;\n      this.planeMesh.name = "glasses";\n    } else {\n      // if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n      if (!assetsCache_hasGlobalAssetKey(this.URL[0])) {\n        try {\n          await loadModel(this.URL[0]);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      await this.waitForGlobalAssetKey(this.URL[0]);\n      if (getCurrentTryon().id !== CategoryFactories.glasses) {\n        this.remove();\n        return;\n      }\n      this.glasses = assetsCache_getGlobalCacheAsset(this.URL[0]);\n      const bbox = new three_module/* Box3 */.NRn().setFromObject(this.glasses);\n      const size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n      this.scaleFactor = 5.4;\n      this.glasses.name = "glasses";\n      this.glasses.traverse(child => {\n        if (child.isMesh) {\n          child.renderOrder = 2;\n        }\n      });\n\n      // this.fill.material.colorWrite = false;\n    }\n    let geometry = new three_module/* SphereGeometry */.Gu$(0.1);\n    let material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      colorWrite: false\n    });\n    this.fill = new three_module/* Mesh */.eaF(geometry, material);\n    this.fill.renderOrder = 1;\n    let geometryHead = new three_module/* CapsuleGeometry */.qU7(2.9, 1.5, 4, 16);\n    let materialHead = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      colorWrite: false\n    });\n    this.head = new three_module/* Mesh */.eaF(geometryHead, materialHead);\n    this.head.renderOrder = 1;\n    let geometryEarLeft = new three_module/* SphereGeometry */.Gu$(1);\n    let materialEarLeft = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0x00ff00,\n      colorWrite: false\n    });\n    this.earLeft = new three_module/* Mesh */.eaF(geometryEarLeft, materialEarLeft);\n    this.earLeft.renderOrder = 1;\n    let geometryEarRight = new three_module/* SphereGeometry */.Gu$(1);\n    let materialEarRight = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0x0000ff,\n      colorWrite: false\n    });\n    this.earRight = new three_module/* Mesh */.eaF(geometryEarRight, materialEarRight);\n    this.earRight.renderOrder = 1;\n    let geometryHair = new three_module/* SphereGeometry */.Gu$(1);\n    let materialHair = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0x0000ff,\n      colorWrite: false\n    });\n    this.hair = new three_module/* Mesh */.eaF(geometryHair, materialHair);\n    this.hair.renderOrder = 1;\n    let geometrynose = new three_module/* CapsuleGeometry */.qU7(0.5, 1.9, 4, 16);\n    let materialnose = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0x00ff00,\n      colorWrite: false\n    });\n    this.nose = new three_module/* Mesh */.eaF(geometrynose, materialnose);\n    this.nose.renderOrder = 1;\n    this.nose.scale.set(0.1, 1, 0.8);\n    this.nose.rotation.set(0.9, 0, 0);\n    this.nose.position.set(-0.15, -0.29, 4.73);\n    this.head.add(this.earLeft);\n    this.head.add(this.earRight);\n    this.head.add(this.hair);\n    this.head.add(this.nose);\n    // this.nose.material.colorWrite = false;\n\n    // let geometrynosepoint = new THREE.SphereGeometry(1.5);\n    // let materialnosepoint = new THREE.MeshBasicMaterial({\n    //   color: 0x00ff00,\n    // });\n    // this.nosepoint = new THREE.Mesh(geometrynosepoint, materialnosepoint);\n    // this.nosepoint.renderOrder = 1;\n    // this.nosepoint.scale.set(1, 1, 0.2);\n\n    // this.nosepoint.position.set(0.45, 0, 0.9);\n    // this.nosepoint.material.colorWrite = false;\n    //this.nose.add(this.nosepoint);\n\n    // if (this.sceneManager.isVideo) {\n    //   this.flickerSmoother.currentvector.y = 1.5;\n    // } else {\n    //   this.flickerSmoother.currentvector.y = 10;\n    // }\n    hideLoadingModelPanel();\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  updateGlasses() {\n    if (!this.skuAppliedSuccessfully) return;\n    // Points for reference\n    // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n\n    // if (this.filter < this.flickerSmoother.currentvector.x) {\n    //   this.filter += 1;\n    //   return;\n    // }\n    // this.filter = 0;\n    if (!this.landmarks) return;\n    let distanceOffset = 0;\n\n    //this.flickerSmoother.params.floatValue = 1;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 0.02;\n    } else {\n      distanceOffset = 0;\n    }\n    if (this.sceneManager.shouldForceHideTryons()) {\n      this.calculateDistance(scaleLandmark(this.landmarks[300], this.width, this.height).x, scaleLandmark(this.landmarks[70], this.width, this.height).x);\n    } else {\n      this.distanceState = -1;\n      this.prevdistanceState = -1;\n    }\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let midEyes = scaleLandmark(smoothedLandkmarks[168], this.width, this.height);\n    let midEyes5 = scaleLandmark(smoothedLandkmarks[151], this.width, this.height);\n    let rightEyeInnerCorner5 = scaleLandmark(smoothedLandkmarks[108], this.width, this.height);\n    let noseBottom5 = scaleLandmark(smoothedLandkmarks[9], this.width, this.height);\n\n    // These points seem appropriate 446, 265, 372, 264\n    let leftEyeUpper1 = scaleLandmark(smoothedLandkmarks[264], this.width, this.height);\n    // These points seem appropriate 226, 35, 143, 34\n    let rightEyeUpper1 = scaleLandmark(smoothedLandkmarks[34], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes5.x, midEyes5.y, midEyes5.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (!this.is2d && this.glasses || this.is2d && this.planeMesh) {\n        if (this.sceneManager.shouldForceHideTryons()) {\n          this.hide();\n        } else {\n          this.show();\n        }\n        const eyeDist = Math.sqrt((leftEyeUpper1.x - rightEyeUpper1.x) ** 2 + (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 + (leftEyeUpper1.z - rightEyeUpper1.z) ** 2);\n        const scale = eyeDist / this.scaleFactor * getScaleSliderValue();\n        this.root.scale.set(scale, scale, scale);\n        this.root.position.set(midEyes.x + 1.5 / scale + getXSliderValue() * 0.7 * scale, midEyes.y - getYSliderValue() * 0.7 * scale, midEyes.z);\n        const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(noseBottom5, midEyes5);\n        const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(rightEyeInnerCorner5, midEyes5);\n        const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n        let quaternion = new three_module/* Quaternion */.PTz();\n        quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n        this.root.quaternion.copy(quaternion);\n        // if (rightDirection.z < -8 || rightDirection.z > 4) {\n        //   let temp = quaternion.clone();\n\n        //   quaternion = new THREE.Quaternion(\n        //     temp.x - 0.1,\n        //     temp.y + 0.05,\n        //     temp.z,\n        //     temp.w\n        //   );\n\n        //   console.log("after", temp, quaternion);\n        // }\n\n        // const euler = new THREE.Euler().setFromQuaternion(quaternion, "XYZ");\n\n        // const xDegrees = THREE.MathUtils.radToDeg(euler.x);\n        // const yDegrees = THREE.MathUtils.radToDeg(euler.y);\n        // const zDegrees = THREE.MathUtils.radToDeg(euler.z);\n        // quaternion.setFromEuler(euler);\n        //TODO ROTATION IS THE ISSUE\n\n        this.head.rotation.set(1.4, -0.05, -0.02);\n        this.head.position.set(0.35, 4.4, 0.2);\n        if (!this.is2d) this.glasses.rotation.set(1.42, -0.07, 3.14);\n        // this.glasses.rotation.set(\n        //   this.currentvector.x,\n        //   this.currentvector.y,\n        //   this.currentvector.z\n        // );\n\n        // if (getIsVideo() && this.smoothObejct != null) {\n        //   this.smoothObejct.setTargetScale(scale);\n        //   this.smoothObejct.setTargetPosition(targetPosition);\n        //   this.smoothObejct.setTargetRotation(quaternion);\n        // } else {\n        //   this.root.position.copy(targetPosition);\n        //   this.root.quaternion.copy(quaternion);\n        //   const scaleVector = new THREE.Vector3(scale, scale, scale);\n        //   this.root.scale.copy(scaleVector);\n        // }\n\n        // if (rightDirection.z < -12 || rightDirection.z > 8) {\n        //   setAlignMsg("Turn on your camera and keep your face align to it.");\n        //   setAlignIcon("face");\n        //   showAlignMessagePanel();\n\n        //   if (!this.is2d) this.glasses.visible = false;\n        //   else this.planeMesh.visible = false;\n        // } else {\n        hideAlignMessagePanel();\n        if (!this.is2d) this.glasses.visible = true;else this.planeMesh.visible = true;\n        // }\n\n        if (this.is2d) {\n          this.planeMesh.position.set(0.015, 0.1, 0.2);\n          this.planeMesh.rotation.set(1.42, -0.07, 3.14);\n          this.planeMesh1.rotation.set(0, -1.56, 0);\n          this.planeMesh1.position.set(2.75, 0, -2.81);\n          this.planeMesh2.position.set(-2.72, 0, -2.8);\n          this.planeMesh2.rotation.set(0, -1.6, 0);\n          // this.planeMesh4.rotation.set(0, -1.56, 0);\n          // this.planeMesh4.position.set(2.74, 0, -2.81);\n          // this.planeMesh5.position.set(-2.71, 0, -2.8);\n          // this.planeMesh5.rotation.set(0, -1.6, 0);\n        }\n        this.Prevlandmark = tempPrevlandmark;\n        this.previousLandmarks = smoothedLandkmarks;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  addGlasses() {\n    if (this.planeMesh) {\n      this.scene.add(this.root);\n      this.root.add(this.planeMesh);\n      this.planeMesh.add(this.planeMesh1);\n      this.planeMesh.add(this.planeMesh2);\n      // this.planeMesh.add(this.planeMesh3);\n      // this.planeMesh.add(this.planeMesh4);\n      // this.planeMesh.add(this.planeMesh5);\n\n      this.root.position.set(0, 0, -999);\n    }\n    if (this.glasses) {\n      this.scene.add(this.fill);\n      this.scene.add(this.root);\n      this.root.add(this.glasses);\n      this.root.add(this.head);\n      this.glasses.rotation.set(0.84, -0.25, 2.93);\n      this.head.position.set(1.2, 3.7, -2.3);\n      this.head.rotation.set(0.8, -0.2, -0.2);\n      this.head.scale.set(1, 1, 1);\n      this.earLeft.scale.set(0.05, 1.5, 1);\n      this.earLeft.position.set(-3, -0.2, -0.5);\n      this.earLeft.rotation.set(-1, 0.3, 0);\n      this.earRight.scale.set(0.05, 1.5, 1);\n      this.earRight.position.set(2.9, -0.2, -0.5);\n      this.earRight.rotation.set(-1, -0.3, 0);\n      this.hair.scale.set(4, 1, 3.8);\n      this.hair.position.set(0, -2, 0);\n      this.hair.rotation.set(0, 0, 0);\n    }\n  }\n  remove() {\n    //console.log("removing");\n    if (this.is2d) {\n      //console.log("removing 2d");\n      if (this.planeMesh) {\n        // console.log(this.planeMesh.children.length);\n        this.planeMesh.remove(this.planeMesh1);\n        this.planeMesh.remove(this.planeMesh2);\n        // this.planeMesh.remove(this.planeMesh3);\n        // this.planeMesh.remove(this.planeMesh4);\n        // this.planeMesh.remove(this.planeMesh5);\n        //console.log("removing root");\n\n        this.root.remove(this.planeMesh);\n        this.scene.remove(this.root);\n      }\n    } else {\n      if (this.glasses) {\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        this.scene.remove(this.root);\n        this.scene.remove(this.fill);\n      }\n    }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n  }\n  hide() {\n    if (this.root) {\n      this.root.visible = false;\n    }\n  }\n  show() {\n    if (this.root) {\n      this.root.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("glasses");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateGlasses() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addGlasses();\n          this.updateGlasses();\n        }\n      }\n    }\n  }\n  focalLength(depthToFace, eyeToEye, eyeToEyeInPixel) {\n    return eyeToEyeInPixel * depthToFace / eyeToEye;\n  }\n\n  // Function to find distance based on focal length, eye-to-eye in pixels, and width calculated\n  distanceFinder(focalLength, eyeToEyeInPixel, widthCalculated) {\n    var distance = eyeToEyeInPixel * focalLength / widthCalculated;\n    return distance - 6;\n  }\n\n  // Function to categorize depth based on distance\n  categorizeDepth(distance) {\n    const smallThreshold = 70;\n    const mediumThreshold = 110;\n    let msg = null;\n    if (distance < smallThreshold) {\n      this.distanceState = 0;\n      msg = "TOO_CLOSE";\n    } else if (distance > mediumThreshold) {\n      this.distanceState = 1;\n      msg = "TOO_FAR";\n    } else {\n      this.distanceState = 2;\n      msg = "PERFECT";\n    }\n    if (this.distanceState !== this.prevdistanceState) {\n      if (msg) {\n        emitRecognizationDistanceAlert(msg);\n      }\n      this.prevdistanceState = this.distanceState;\n    }\n    return distance > smallThreshold && distance < mediumThreshold ? false : true;\n  }\n  calculateDistance(lefteye, righteyes) {\n    const eyeToEye = 13.0;\n    const depthToFace = 48.0;\n    const eyeToEyeInPixel = 384.5;\n\n    // Calculate focal length\n    const calculatedFocalLength = this.focalLength(depthToFace, eyeToEye, eyeToEyeInPixel);\n\n    // Calculate eye measurement (assuming x_300 and x_70 are defined)\n    let x_300 = lefteye;\n    let x_70 = righteyes;\n    const eyeMeasurement = Math.abs(x_300 - x_70);\n\n    // Calculate distance\n    const calculatedDistance = this.distanceFinder(calculatedFocalLength, eyeToEye, eyeMeasurement);\n\n    // Categorize depth based on distance\n    const categorizedDepth = this.categorizeDepth(calculatedDistance);\n  }\n  removeFaces() {\n    this.remove();\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\n;// ./src/virtualTryOns/watch.js\n\n\n\n\n\n\n\n\n// import {\n//   hideLoadingModelPanel,\n//   showLoadingModelPanel,\n// } from "../utils/loadingModelPanel";\n\n\n\n\n\n\n\n\nclass Watch extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.handedness = null;\n    this.flickerSmoother = new FlickerSmoother();\n    this.flickerSmoother.currentvector1.z = 0.08;\n    this.flickerSmoother.currentvector.z = 3.5;\n    this.flickerSmoother.currentvector1.x = 0.4;\n    this.flickerSmoother.currentvector.x = 0.4;\n    this.localURL = `${PUBLIC_PATH}/3d/watches/01.glb`;\n    this.localURL2d = `${PUBLIC_PATH}/3d/watches/01.png`;\n    this.URL = `${PUBLIC_PATH}/3d/watches/01.glb`;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(5); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      // Enable transparency\n      opacity: 0 // Set the opacity level (0.0 - fully transparent, 1.0 - fully opaque)\n    });\n    this.root;\n    this.fill;\n    this.refobj;\n    this.spheres = [];\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.refobj = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.refobj.position.set(1, 1, 1);\n    this.filter = 0.0;\n    this.previousLandmarks = [];\n    this.Prevlandmark;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.SpriteMesh = null;\n    this.Posetest1 = null;\n    this.imageWidth = null;\n    this.imageHeight = null;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.is2d = true;\n    this.clock = new three_module/* Clock */.zD7();\n\n    //const gui = new GUI();\n\n    // this.currentvector = new THREE.Vector3(0.1, 0.1, 1);\n    // const vectorFolder2 = gui.addFolder(\'Vector Controls\');\n    // vectorFolder2.add(this.currentvector, \'x\', -Math.PI, Math.PI).step(0.001);\n    // vectorFolder2.add(this.currentvector, \'y\', -Math.PI, Math.PI).step(0.001);\n    // vectorFolder2.add(this.currentvector, \'z\', -Math.PI, Math.PI).step(0.001);\n\n    // // Add a controller to the GUI\n    // const smooth = gui.add(this.flickerSmoother.params, \'floatValue\', -1, 1).step(0.001);\n\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    //AssetURL = null;\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      if (!is2d) this.URL = this.localURL;else this.URL = this.localURL2d;\n    }\n    showLoadingModelPanel(`watch`);\n    this.Posetest = null;\n    this.SpriteMesh = null;\n    this.filter = Number.MAX_VALUE;\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadPosetest(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadPosetest(AssetURL) {\n    if (this.is2d) {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n\n      let imageTexture = null;\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          imageTexture = await loadTexture(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL, imageTexture);\n      } else {\n        imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n      }\n      hideLoadingModelPanel();\n      this.scaleFactor = 0.0385;\n      imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      imageTexture.needsUpdate = true;\n      //imageTexture.generateMipmaps = false;\n      this.imageWidth = imageTexture.image.width;\n      this.imageHeight = imageTexture.image.height;\n      const material2d = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n      });\n      material2d.metalness = 1;\n      material2d.envMapIntensity = 1;\n      material2d.needsUpdate = true;\n      material2d.toneMapped = false;\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n      this.SpriteMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n      this.SpriteMesh.renderOrder = 2;\n      this.SpriteMesh.name = "Posetest";\n    } else {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          await loadModel(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.watch) {\n        this.remove();\n        return;\n      }\n      this.Posetest = assetsCache_getGlobalCacheAsset(this.URL).scene;\n      console.log(assetsCache_getGlobalCacheAsset(this.URL).animations);\n      const animations = assetsCache_getGlobalCacheAsset(this.URL).animations;\n      this.animateMixers = [];\n      if (animations && animations.length > 0) {\n        // Create an AnimationMixer and play the animations\n        const mixer = new three_module/* AnimationMixer */.Iw4(this.Posetest);\n        animations.forEach(clip => {\n          const action = mixer.clipAction(clip);\n          action.play();\n        });\n\n        // Store the mixer for updating in the animation loop\n        this.animateMixers.push(mixer);\n      }\n      hideLoadingModelPanel();\n\n      // scale glasses\n      // const bbox = new THREE.Box3().setFromObject(this.Posetest);\n      // const size = bbox.getSize(new THREE.Vector3());\n      this.scaleFactor = 0.0385;\n      this.Posetest.name = "Posetest";\n      this.Posetest.traverse(child => {\n        if (child.isMesh) {\n          // Check if the material has metallicness property\n          if (child.material) {\n            // if (child.material.metalness > 1) child.material.metalness = 1;\n            //child.material.envMapIntensity = 1;\n            child.renderOrder = 2;\n          }\n        }\n      });\n      const radiusTop = 0.022; // Adjust the top radius\n      const radiusBottom = 0.022; // Adjust the bottom radius\n      const height = 0.1; // Adjust the height\n      const radialSegments = 16; // Adjust the number of radial segments\n      const heightSegments = 1; // Adjust the number of height segments\n      const openEnded = false; // Set to true for an open-ended cylinder\n\n      const cylinderGeometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded);\n      // let geometry = new THREE.SphereGeometry(0.03); // Adjust the size of the sphere as needed\n      let material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000\n      });\n      this.fill = new three_module/* Mesh */.eaF(cylinderGeometry, material);\n      this.fill.renderOrder = 1;\n      this.fill.receiveShadow = true;\n      this.fill.envMapIntensity = 1;\n      this.fill.material.colorWrite = false;\n      this.Posetest.add(this.fill);\n    }\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks, handedness) {\n    this.landmarks = landmarks;\n    if (handedness.length > 0) this.handedness = handedness[0];\n    this.needsUpdate = true;\n  }\n  updatePosetest() {\n    //this.trackingmsg.style.display = "none";\n    //this.flickerSmoother.currentvector.x = 4;\n    if (!this.landmarks || !this.skuAppliedSuccessfully) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 2.75;\n    } else {\n      distanceOffset = 0;\n    }\n    // if (this.filter < this.flickerSmoother.currentvector.x) {\n    //   this.filter += 1;\n    //   return;\n    // }\n    // this.filter = 0;\n\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n\n    // Points for reference\n    // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n    let base = scaleLandmark(smoothedLandkmarks[0], this.width, this.height);\n    let indexbase = scaleLandmark(smoothedLandkmarks[9], this.width, this.height);\n    let middlebase = scaleLandmark(smoothedLandkmarks[13], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (this.Posetest && !this.is2d && this.animateMixers && this.animateMixers.length > 0) {\n      const delta = this.clock.getDelta();\n      this.animateMixers.forEach(mixer => mixer.update(delta));\n    }\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Posetest || this.SpriteMesh) {\n        this.show();\n        let shoulderDist = Math.sqrt((base.x - indexbase.x) ** 2 + (base.y - indexbase.y) ** 2 + (base.z - indexbase.z) ** 2);\n        let shoulderDist2 = Math.sqrt((middlebase.x - base.x) ** 2 + (middlebase.y - base.y) ** 2 + (middlebase.z - base.z) ** 2);\n        if (this.is2d) {\n          shoulderDist = Math.sqrt((base.x - indexbase.x) ** 2 + (base.y - indexbase.y) ** 2 + 0);\n          shoulderDist2 = Math.sqrt((middlebase.x - base.x) ** 2 + (middlebase.y - base.y) ** 2 + 0);\n        }\n        let val = base.z - this.refobj.position.z;\n        let val2 = indexbase.z - this.refobj.position.z;\n        let avg2;\n        let avg2offset;\n        avg2 = (val + val2) / 2;\n        avg2offset = avg2 / 10;\n        let avg = (shoulderDist2 + shoulderDist) / 2;\n        let prescale = avg / this.scaleFactor / 130 + avg2offset;\n        let rotThresold = prescale / 1.2;\n        let handRotation = rotThresold;\n        let xdistnace = 0;\n        let ydistnace = 0;\n        let handorientation = indexbase.y - base.y;\n        if (this.is2d) {\n          if (this.handedness[0].categoryName === "Left") {\n            if (handorientation > 0) xdistnace = indexbase.x - middlebase.x;else {\n              xdistnace = middlebase.x - indexbase.x;\n            }\n          } else {\n            if (handorientation > 0) xdistnace = middlebase.x - indexbase.x;else {\n              xdistnace = indexbase.x - middlebase.x;\n            }\n          }\n          ydistnace = indexbase.y - middlebase.y;\n          if (Math.abs(xdistnace) >= Math.abs(ydistnace)) {\n            handRotation = xdistnace;\n          } else {\n            handRotation = ydistnace;\n          }\n          if (handRotation > rotThresold) {\n            handRotation = rotThresold;\n          }\n          if (handRotation < 0) {\n            handRotation = 0;\n          }\n          base.z = 0;\n          indexbase.z = 0;\n          middlebase.z = 0;\n        }\n        let scale;\n        if (this.is2d) {\n          scale = (avg / this.scaleFactor / 130 + avg2offset) * 0.0059 * (handRotation / rotThresold) * getScaleSliderValue();\n          this.root.scale.set(scale, scale, scale);\n          this.root.position.set(base.x + getXSliderValue() * 300 * scale, base.y - getYSliderValue() * 300 * scale, 0);\n        } else {\n          scale = avg / (this.scaleFactor / 0.52) *\n          //(handRotation / rotThresold) *\n          getScaleSliderValue();\n          this.root.scale.set(scale, scale, scale);\n          this.root.position.set(base.x + getXSliderValue() * 0.02 * scale, base.y - getYSliderValue() * 0.02 * scale, base.z);\n        }\n        const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(indexbase, base);\n        const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(middlebase, base);\n        const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n        const quaternion = new three_module/* Quaternion */.PTz();\n        quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n        this.root.quaternion.copy(quaternion);\n        if (!this.is2d) {\n          this.fill.position.set(0, 0.0, -0.003);\n          this.fill.rotation.set(0, 0, -1.57);\n          this.fill.scale.set(1.39, 1, 0.86);\n        }\n        if (this.handedness[0].categoryName === "Left") {\n          if (!this.is2d) {\n            this.Posetest.rotation.set(-1.4, 0, -1.55);\n            //this.Posetest1.rotation.set(-1.4, 0, -1.5);\n          } else {\n            this.SpriteMesh.rotation.set(1.57, 0, 0);\n          }\n          if (!this.is2d) {\n            this.Posetest.position.set(0, 0.004, -0.01);\n            //this.Posetest1.position.set(0, 0.004, -0.01);\n          }\n        } else {\n          if (!this.is2d) {\n            this.Posetest.rotation.set(1.4, 0, -1.6);\n            //this.Posetest1.rotation.set(1.4, 0, -1.7);\n          } else {\n            this.SpriteMesh.rotation.set(1.57, 0, 0);\n          }\n          if (!this.is2d) {\n            this.Posetest.position.set(0, -0.004, -0.01);\n            // this.Posetest1.position.set(0, -0.004, -0.01);\n          }\n        }\n        if (this.is2d) {\n          if (this.handedness[0].categoryName === "Left") {\n            this.SpriteMesh.position.set(-20, 0, -250);\n          } else {\n            this.SpriteMesh.position.set(20, 0, -250);\n          }\n        }\n        const forwardDirectionNormalized = new three_module/* Vector3 */.Pq0();\n        forwardDirectionNormalized.copy(forwardDirection).normalize();\n        if (forwardDirectionNormalized.z > 0.65 || forwardDirectionNormalized.z < -0.5 || this.is2d && handRotation < 2) {\n          updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n          showAlignMessagePanel();\n          if (!this.is2d) this.Posetest.visible = false;else this.SpriteMesh.visible = false;\n        } else {\n          hideAlignMessagePanel();\n          if (!this.is2d) this.Posetest.visible = true;else this.SpriteMesh.visible = true;\n        }\n        // if (this.Posetest1) this.Posetest1.visible = false;\n        let s = scale / 1000;\n        if (this.is2d) {\n          this.SpriteMesh.scale.set(this.imageWidth + s, this.imageHeight + s, 1);\n        }\n        this.previousLandmarks = smoothedLandkmarks;\n        this.Prevlandmark = tempPrevlandmark;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  addPosetest() {\n    if (this.is2d) {\n      if (this.SpriteMesh) {\n        this.scene.add(this.root);\n        this.root.add(this.SpriteMesh);\n        this.SpriteMesh.position.set(0, 0, 0);\n      }\n    } else {\n      if (this.Posetest) {\n        this.scene.add(this.root);\n        this.root.add(this.Posetest);\n        // this.root.add(this.Posetest1);\n        // this.root.add(this.SpriteMesh);\n\n        // this.Posetest.rotation.set(1.5, 0, -1.57);\n        // this.Posetest.position.set(0, 0.005, -0.01);\n\n        this.fill.position.set(0, 0.0005, -0.001);\n        this.fill.rotation.set(0, 0, -1.57);\n        this.fill.scale.set(1.35, 1, 1);\n      }\n    }\n  }\n  clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n  }\n  remove() {\n    //if (this.is2d) {\n    if (this.SpriteMesh) {\n      while (this.root.children.length > 0) {\n        this.root.remove(this.root.children[0]);\n      }\n      this.scene.remove(this.root);\n    }\n    // } else {\n    if (this.Posetest) {\n      //this.Posetest.remove(this.fill);\n      this.root.remove(this.Posetest);\n      while (this.root.children.length > 0) {\n        this.root.remove(this.root.children[0]);\n      }\n      //this.root.remove(this.SpriteMesh);\n      this.scene.remove(this.root);\n    }\n    // }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.PrevScale = 1;\n  }\n  hide() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = false;\n    }\n    if (this.Posetest) {\n      this.Posetest.visible = false;\n    }\n  }\n  show() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = true;\n    }\n    if (this.Posetest) {\n      this.Posetest.visible = true;\n    }\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Posetest");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updatePosetest() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addPosetest();\n          this.updatePosetest();\n        }\n      }\n    }\n  }\n  updateMask() {}\n  removeFaces() {\n    this.remove();\n  }\n}\n;// ./src/MLModelProviders/hand_landmarks_helpers.js\n//import { FACE_MESH_INDEX_BUFFER, FACE_MESH_UV } from "./face_geom.js";\n\n/**\n * Mediapipe uses different convention for axis\n * than three js. This function adapts mediapipe\n * landmarks for three js.\n * @param {*} landmarks\n */\nconst hand_landmarks_helpers_transformLandmarks = landmarks => {\n  // console.log(landmarks);\n  if (!landmarks) {\n    return landmarks;\n  }\n  let hasVisiblity = !!landmarks.find(l => l.visibility);\n  let minZ = 1e-4;\n\n  //console.log(hasVisiblity);\n  // currently mediapipe facemesh js\n  // has visibility set to undefined\n  // so we use a heuristic to set z position of facemesh\n  if (hasVisiblity) {\n    landmarks.forEach(landmark => {\n      let {\n        z,\n        visibility\n      } = landmark;\n      z = -z;\n      if (z < minZ && visibility) {\n        minZ = z;\n      }\n    });\n  } else {\n    if (landmarks && landmarks[5] !== undefined && landmarks[5].z !== undefined) minZ = Math.max(-landmarks[5].z, -landmarks[17].z);\n  }\n  return landmarks.map(landmark => {\n    let {\n      x,\n      y,\n      z\n    } = landmark;\n    return {\n      x: -0.5 + x,\n      y: 0.5 - y,\n      z: -z - minZ,\n      visibility: landmark.visibility\n    };\n  });\n};\n\n/**\n * Scales landmark by width and height\n * @param {*} landmark\n * @param {*} width\n * @param {*} height\n */\nconst hand_landmarks_helpers_scaleLandmark = (landmark, width, height) => {\n  if (landmark) {\n    let {\n      x,\n      y,\n      z\n    } = landmark;\n    return {\n      ...landmark,\n      x: x * width,\n      y: y * height,\n      z: z * width\n    };\n  } else {\n    // Handle the case where \'landmark\' is undefined by returning default values\n    return {\n      x: 0,\n      y: 0,\n      z: 0\n    }; // Adjust default values as needed\n  }\n};\n\n/**\n * makes buffer geometry from facemesh landmarks\n * @param {*} landmarks\n */\nconst hand_landmarks_helpers_makeGeometry = landmarks => {\n  // const { x, y, z } = landmarks; // Extract the X, Y, Z coordinates of the pose landmark\n  // // Create a Three.js object to represent the pose landmark (e.g., a sphere)\n  // const geometry = new THREE.SphereGeometry(0.05); // Adjust the size of the sphere as needed\n  // const material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Adjust the color as needed\n  // const sphere = new THREE.Mesh(geometry, material);\n  // // Set the position of the sphere based on the pose landmark coordinates\n  // sphere.position.set(x, y, z);\n  // // Add the sphere to the Three.js scene\n  // scene.add(sphere);\n  //return geometry;\n};\n// EXTERNAL MODULE: ./node_modules/three.meshline/src/THREE.MeshLine.js\nvar THREE_MeshLine = __webpack_require__(9304);\n;// ./src/virtualTryOns/Ring.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Ring {\n  constructor() {}\n  createStyle(response, scene, width, height, sceneManager) {\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.handedness = null;\n    this.localURL = `${PUBLIC_PATH}/3d/rings/01.png`;\n    this.URL = `${PUBLIC_PATH}/3d/rings/01.png`;\n    this.sceneManager = sceneManager;\n    this.SpriteMesh = null;\n    this.imageWidth = null;\n    this.imageHeight = null;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.previousLandmarks = [];\n    this.is2d = true;\n    this.root = this.createSphereAndAddToSceneAndGetRef();\n    this.allFingersPoints = {\n      0: [1, 2, 3, 4],\n      1: [5, 6, 7, 8],\n      2: [9, 10, 11, 12],\n      3: [13, 14, 15, 16],\n      4: [17, 18, 19, 20]\n    };\n    this.flickerSmoother = new FlickerSmoother();\n    this.filter = 0;\n    this.Prevlandmark;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n\n    //#region Testing Region\n    // this.gui = new GUI();\n    //#region Basic Position testing\n    this.positionVector = new three_module/* Vector3 */.Pq0(0, 0, 0); //0.001\n    // const posFolder = this.gui.addFolder("Position Vector");\n    // posFolder.add(this.positionVector, "x", -200, 200).step(0.001).listen();\n    // posFolder.add(this.positionVector, "y", -200, 200).step(0.001).listen();\n    // posFolder.add(this.positionVector, "z", -200, 200).step(0.001).listen();\n    //#endregion\n\n    //#region Rotation Testers\n    // this.rotationVector = new THREE.Vector3(0, 0, 0);\n    // const rotationFolder = this.gui.addFolder("Rotation Vector");\n    // rotationFolder.add(this.rotationVector, "x", -50, 50).step(0.001).listen();\n    // rotationFolder.add(this.rotationVector, "y", -50, 50).step(0.001).listen();\n    // rotationFolder.add(this.rotationVector, "z", -50, 50).step(0.001).listen();\n    //#endregion\n\n    //#region Basic Details\n    this.settings = {\n      canSee: false,\n      scaleFactor: 10,\n      scaleOfRing: 450\n    };\n    // const settingsFolder = this.gui.addFolder("Settings");\n    // settingsFolder.add(this.settings, "scaleOfRing", 0, 500).name("Scale of ring").step(0.001).listen();\n    // settingsFolder.add(this.settings, "scaleFactor", 0, 500).name("Scale Factor").step(0.001).listen();\n    // settingsFolder.add(this.settings, "canSee").name("Can See").listen();\n    //#endregion\n\n    //#region Scale Test Vectors\n    this.scaleVector = new three_module/* Vector3 */.Pq0(7, 1, 1.1); //x->9 for images\n    // const scaleFolder = this.gui.addFolder("Scale Vector");\n    // scaleFolder.add(this.scaleVector, "x", -500, 500).step(0.001).listen();\n    // scaleFolder.add(this.scaleVector, "y", -500, 500).step(0.001).listen();\n    // scaleFolder.add(this.scaleVector, "z", -500, 500).step(0.001).listen();\n    //#endregion\n    //#endregion\n\n    this.geom = new three_module/* BufferGeometry */.LoY();\n    this.timeoutId;\n    this.fingerIndex = 2;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    // AssetURL = null;\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      this.URL = this.localURL;\n    }\n    showLoadingModelPanel(`ring`);\n\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n    this.SpriteMesh = null;\n    this.Ring = null;\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadRing(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadRing(AssetURL) {\n    if (this.is2d) {\n      let imageTexture = null;\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          imageTexture = await loadTexture(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL, imageTexture);\n      } else {\n        imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n      }\n      hideLoadingModelPanel();\n      this.settings.scaleFactor = 0.041;\n      imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      imageTexture.needsUpdate = true;\n      //imageTexture.generateMipmaps = false;\n      this.imageWidth = imageTexture.image.width;\n      this.imageHeight = imageTexture.image.height;\n      const material2d = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n      });\n      material2d.metalness = 1;\n      material2d.envMapIntensity = 1;\n      material2d.needsUpdate = true;\n      material2d.toneMapped = false;\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n      this.SpriteMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n      this.SpriteMesh.renderOrder = 2;\n      this.SpriteMesh.name = "Ring";\n    } else {\n      console.log("adding ring", this.URL);\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          await loadModel(this.URL);\n        } catch (error) {\n          console.log(error);\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.ring) {\n        this.remove();\n        return;\n      }\n      console.log("added ring", this.URL);\n      this.Ring = assetsCache_getGlobalCacheAsset(this.URL);\n      this.createOcclusuionLinesAndAddThemToScene();\n      this.settings.scaleFactor = 10;\n      hideLoadingModelPanel();\n      this.Ring.name = "Ring";\n      this.Ring.traverse(child => {\n        if (child.isMesh) {\n          child.renderOrder = 3;\n        }\n      });\n      const radiusTop = 0.0265; // Adjust the top radius\n      const radiusBottom = 0.0265; // Adjust the bottom radius\n      const height = 0.2; // Adjust the height\n      const radialSegments = 16; // Adjust the number of radial segments\n      const heightSegments = 1; // Adjust the number of height segments\n      const openEnded = false; // Set to true for an open-ended cylinder\n\n      const cylinderGeometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded);\n      // let geometry = new THREE.SphereGeometry(0.03); // Adjust the size of the sphere as needed\n      let material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000\n      });\n      this.fill = new three_module/* Mesh */.eaF(cylinderGeometry, material);\n      this.fill.renderOrder = 2;\n      this.fill.material.colorWrite = false;\n    }\n    this.scaleFactor = this.settings.scaleFactor;\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks, handedness) {\n    this.landmarks = landmarks;\n    if (handedness.length > 0) this.handedness = handedness[0];\n    this.needsUpdate = true;\n  }\n  createSphereAndAddToSceneAndGetRef() {\n    const geometry = new three_module/* SphereGeometry */.Gu$(10);\n    const material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xffff00,\n      opacity: 0,\n      transparent: true\n    });\n    const sphere = new three_module/* Mesh */.eaF(geometry, material);\n    return sphere;\n  }\n  createOcclusuionLinesAndAddThemToScene() {\n    this.lineAtThumb = this.createMeshLineAndAddItToScreenAndGetRef("Thumb");\n    this.lineAtIndex = this.createMeshLineAndAddItToScreenAndGetRef("Index");\n    this.lineAtMiddle = this.createMeshLineAndAddItToScreenAndGetRef("Middle");\n    this.lineAtRing = this.createMeshLineAndAddItToScreenAndGetRef("RingF");\n    this.lineAtPinky = this.createMeshLineAndAddItToScreenAndGetRef("Pinky");\n    this.allFingers = [this.lineAtThumb, this.lineAtIndex, this.lineAtMiddle, this.lineAtRing, this.lineAtPinky];\n    this.occlusionLines = [this.lineAtIndex, this.lineAtMiddle, this.lineAtRing, this.lineAtPinky];\n  }\n  createMeshLineAndAddItToScreenAndGetRef(lineName = "Line") {\n    const points = [new three_module/* Vector3 */.Pq0(0, 0, 0), new three_module/* Vector3 */.Pq0(1, 0, 0), new three_module/* Vector3 */.Pq0(2, 0, 0), new three_module/* Vector3 */.Pq0(3, 0, 0)];\n    var geometry = new three_module/* BufferGeometry */.LoY().setFromPoints(points);\n    var meshLine = new THREE_MeshLine.MeshLine();\n    meshLine.setGeometry(geometry);\n    const material = new THREE_MeshLine.MeshLineMaterial({\n      color: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n      lineWidth: 25 // Adjust the line width as needed\n    });\n    const line = new three_module/* Mesh */.eaF(meshLine.geometry, material);\n    // line.name = lineName;\n    line.scale.set(1, 1, 1);\n    line.renderOrder = 1;\n    this.scene.add(line);\n    return line;\n  }\n  updateMeshLine(lineMesh, arrayOfPositions) {\n    let points = [];\n    for (let i = 0; i < arrayOfPositions.length; i++) {\n      const p = arrayOfPositions[i];\n      points.push(new three_module/* Vector3 */.Pq0(p.x, p.y, p.z));\n    }\n    const geometry = new three_module/* BufferGeometry */.LoY().setFromPoints(points);\n    lineMesh.geometry.dispose();\n    var meshLine = new THREE_MeshLine.MeshLine();\n    meshLine.setGeometry(geometry);\n    lineMesh.geometry = meshLine.geometry;\n  }\n  storeFingerPositions(smoothedLandmarks, zFactor) {\n    const vertexMap = {};\n    // Always process the thumb first\n    const thumbPoints = this.allFingersPoints[0];\n    vertexMap[0] = thumbPoints.map(pointIndex => {\n      const pos = hand_landmarks_helpers_scaleLandmark(smoothedLandmarks[pointIndex], this.width, this.height);\n      pos.z -= zFactor;\n      return pos;\n    });\n    for (const fingerIndex in this.allFingersPoints) {\n      if (fingerIndex == 0) continue; // Skip the thumb\n      const fingerPoints = this.allFingersPoints[fingerIndex];\n      vertexMap[fingerIndex] = fingerPoints.map(pointIndex => {\n        const pos = hand_landmarks_helpers_scaleLandmark(smoothedLandmarks[pointIndex], this.width, this.height);\n        // const sign = fingerIndex == this.fingerIndex ? -1 : fingerIndex < this.fingerIndex ? -1 : 1;\n        // const specificZFactor = zFactor * sign;\n        const specificZFactor = zFactor;\n        pos.z += specificZFactor;\n        return pos;\n      });\n    }\n    return vertexMap;\n  }\n  updateOcclusionVisibility(targetIndex) {\n    this.occlusionLines.forEach((line, index) => line.visible = index !== targetIndex);\n  }\n  setMaterialVisibiltyForLines() {\n    this.allFingers.forEach((line, index) => line.material.colorWrite = this.settings.canSee);\n  }\n  updateWidthOfOcclusionLines(smoothedLandkmarks) {\n    let indexOrigin = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[5], this.width, this.height);\n    let pinkyOrigin = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[17], this.width, this.height);\n    this.occlusionLines.forEach((line, index) => {\n      if (index === this.fingerIndex) return;\n      const pinkyIsForward = indexOrigin.z < pinkyOrigin.z;\n      if (pinkyIsForward) {\n        line.material.lineWidth = index < this.fingerIndex ? 0 : 30;\n        return;\n      }\n      line.material.lineWidth = index < this.fingerIndex ? 30 : 0;\n    });\n  }\n  updateRing() {\n    if (!this.landmarks || !this.skuAppliedSuccessfully) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 2.3;\n    } else {\n      distanceOffset = 0;\n    }\n\n    // let smoothedLandkmarks = this.landmarks;\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    this.fingerIndex = getRingIndex();\n    let base = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[fingerConfig[this.fingerIndex].base], this.width, this.height);\n    let indexbase = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[fingerConfig[this.fingerIndex].index], this.width, this.height);\n    let middlebase = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[fingerConfig[this.fingerIndex].middle], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Ring || this.SpriteMesh) {\n        if (!this.is2d) this.setMaterialVisibiltyForLines();\n        this.show();\n        const shoulderDist = Math.sqrt((base.x - indexbase.x) ** 2 + (base.y - indexbase.y) ** 2 + (base.z - indexbase.z) ** 2);\n        const shoulderDist2 = Math.sqrt((middlebase.x - base.x) ** 2 + (middlebase.y - base.y) ** 2 + (middlebase.z - base.z) ** 2);\n        let avg = (shoulderDist2 + shoulderDist) / 2;\n        let prescale = avg / this.scaleFactor / 3.2;\n        let rotThresold = prescale / 24;\n        let handRotation = rotThresold;\n        let xdistnace = 0;\n        let ydistnace = 0;\n        let handorientation = base.y - indexbase.y;\n        let offsetValue = this.is2d ? 80 : 10;\n        if (this.is2d) {\n          if (this.handedness[0].categoryName === "Left") {\n            if (handorientation > 0) xdistnace = indexbase.x - middlebase.x;else {\n              xdistnace = middlebase.x - indexbase.x;\n            }\n          } else {\n            if (handorientation > 0) xdistnace = middlebase.x - indexbase.x;else {\n              xdistnace = indexbase.x - middlebase.x;\n            }\n          }\n          ydistnace = indexbase.y - middlebase.y;\n          if (Math.abs(xdistnace) >= Math.abs(ydistnace)) {\n            handRotation = xdistnace;\n          } else {\n            handRotation = ydistnace;\n          }\n          if (handRotation > rotThresold) {\n            handRotation = rotThresold;\n          }\n          if (handRotation < 0) {\n            handRotation = 0;\n          }\n          base.z = 0;\n          indexbase.z = 0;\n          middlebase.z = 0;\n          this.positionVector.x = 0;\n          this.positionVector.y = 0;\n          this.positionVector.z = 500;\n          this.scaleVector.x = 3.2;\n          this.scaleVector.y = 0.00008;\n        }\n        let scaleAdjust = this.scaleVector.z = !this.is2d ? fingerConfig[this.fingerIndex].scaleAdjust3d : fingerConfig[this.fingerIndex].scaleAdjust;\n        // let scaleAdjust = this.scaleVector.z;\n\n        const scale = avg / this.scaleFactor / this.scaleVector.x * this.scaleVector.y * scaleAdjust * getScaleSliderValue();\n        const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(base, indexbase);\n        const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(base, middlebase);\n        const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n        const quaternion = new three_module/* Quaternion */.PTz();\n        quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n        this.root.quaternion.copy(quaternion);\n        this.root.scale.set(scale, scale, scale);\n        const zPos = this.handedness[0].categoryName === "Left" ? 5 : -5;\n        const offsetX = getXSliderValue() * offsetValue * scale;\n        const offsetY = -getYSliderValue() * offsetValue * scale;\n        this.root.position.set(base.x + offsetX, base.y + offsetY, zPos);\n        let verticesmap = {};\n        if (this.is2d) {\n          this.SpriteMesh.rotation.set(1.57, 0, fingerConfig[this.fingerIndex].zRot);\n        }\n        if (!this.is2d) {\n          this.positionVector.x = fingerConfig[this.fingerIndex].xPos3d;\n          this.positionVector.z = fingerConfig[this.fingerIndex].zPos3d;\n          const rotationAngle = Math.PI / 2;\n          const zFactor = this.width;\n          let zOffset = fingerConfig[this.fingerIndex].zRot3d;\n          if (this.handedness[0].categoryName === "Left") {\n            zOffset *= -1;\n            this.Ring.rotation.set(rotationAngle, 0, -rotationAngle + zOffset);\n          } else {\n            this.Ring.rotation.set(-rotationAngle, 0, -rotationAngle + zOffset);\n          }\n          this.Ring.scale.set(this.settings.scaleOfRing, this.settings.scaleOfRing, this.settings.scaleOfRing);\n          this.Ring.position.copy(this.positionVector);\n          verticesmap = this.storeFingerPositions(smoothedLandkmarks, zFactor);\n          this.fill.position.set(0, 0, -0.004);\n          this.fill.rotation.set(0, 0, -(Math.PI / 2));\n        } else {\n          if (this.handedness[0].categoryName === "Left") {\n            this.SpriteMesh.position.set(fingerConfig[this.fingerIndex].xPosRight, 0, fingerConfig[this.fingerIndex].zPosRight);\n          } else {\n            this.SpriteMesh.position.set(fingerConfig[this.fingerIndex].xPosLeft, 0, fingerConfig[this.fingerIndex].zPosLeft);\n          }\n        }\n        const forwardDirectionNormalized = new three_module/* Vector3 */.Pq0();\n        forwardDirectionNormalized.copy(forwardDirection).normalize();\n        if (forwardDirectionNormalized.z > 0.3 || forwardDirectionNormalized.z < -0.2 || upDirection.z > -0.7 && upDirection.z < 0.7 || this.is2d && handRotation < 2) {\n          updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n          showAlignMessagePanel();\n          if (!this.is2d) this.Ring.visible = false;else this.SpriteMesh.visible = false;\n        } else {\n          hideAlignMessagePanel();\n          if (!this.is2d) this.Ring.visible = true;else this.SpriteMesh.visible = true;\n        }\n        let s = scale / 1000;\n        if (this.is2d) {\n          this.SpriteMesh.scale.set(this.imageWidth + s, this.imageHeight + s, 1);\n        }\n        if (!this.is2d) {\n          this.updateOcclusionVisibility(this.fingerIndex);\n          for (const fingerIndex in verticesmap) {\n            const vertxPoints = verticesmap[fingerIndex];\n            this.updateMeshLine(this.allFingers[fingerIndex], vertxPoints);\n          }\n          this.updateWidthOfOcclusionLines(smoothedLandkmarks);\n        }\n        this.previousLandmarks = smoothedLandkmarks;\n        this.Prevlandmark = tempPrevlandmark;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  mapRange(value, fromMin, fromMax, toMin, toMax) {\n    return (value - fromMin) * (toMax - toMin) / (fromMax - fromMin) + toMin;\n  }\n  addRing() {\n    if (this.is2d) {\n      if (this.SpriteMesh) {\n        this.scene.add(this.root);\n        this.root.add(this.SpriteMesh);\n        this.SpriteMesh.position.set(fingerConfig[this.fingerIndex].xPosLeft, 0, fingerConfig[this.fingerIndex].zPosLeft);\n      }\n    } else {\n      if (this.Ring) {\n        this.scene.add(this.root);\n        this.root.add(this.Ring);\n        this.Ring.add(this.fill);\n      }\n    }\n  }\n  clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n  }\n  remove() {\n    if (this.is2d) {\n      if (this.SpriteMesh) {\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        this.scene.remove(this.root);\n      }\n    } else {\n      if (this.Ring) {\n        console.log("removing ring", this.URL);\n        this.Ring.remove(this.fill);\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        this.scene.remove(this.root);\n        if (!this.allFingers.length) return;\n        this.allFingers.forEach(line => {\n          this.scene.remove(line);\n        });\n      }\n    }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.PrevScale = 1;\n    // this.SpriteMesh = null;\n  }\n  hide() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = false;\n    }\n    if (this.Ring) {\n      this.Ring.visible = false;\n    }\n  }\n  show() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = true;\n    }\n    if (this.Ring) {\n      this.Ring.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Ring");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateRing() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addRing();\n          this.updateRing();\n        }\n      }\n    }\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  updateMask() {}\n  removeFaces() {\n    this.remove();\n  }\n}\nconst fingerConfig = [{\n  base: 6,\n  index: 5,\n  middle: 9,\n  zRot: 0,\n  xPosRight: 20,\n  xPosLeft: -20,\n  zPosLeft: -700,\n  zPosRight: -700,\n  scaleAdjust: 1,\n  //3d\n  xPos3d: 0,\n  zPos3d: -20,\n  zRot3d: 0,\n  scaleAdjust3d: 1.2\n}, {\n  base: 10,\n  index: 9,\n  middle: 13,\n  zRot: 0,\n  xPosRight: 0,\n  xPosLeft: -20,\n  zPosLeft: -750,\n  zPosRight: -750,\n  scaleAdjust: 0.98,\n  //3d\n  xPos3d: 0,\n  zPos3d: -24,\n  zRot3d: 0,\n  scaleAdjust3d: 1.2\n}, {\n  base: 14,\n  index: 13,\n  middle: 17,\n  zRot: 0.07,\n  xPosRight: 20,\n  xPosLeft: -20,\n  zPosLeft: -630,\n  zPosRight: -630,\n  scaleAdjust: 1,\n  //3d\n  xPos3d: 0,\n  zPos3d: -20,\n  zRot3d: 0,\n  scaleAdjust3d: 1.2\n}, {\n  base: 18,\n  index: 13,\n  middle: 17,\n  zRot: -0.45,\n  xPosRight: -280,\n  xPosLeft: -350,\n  zPosLeft: -550,\n  zPosRight: -520,\n  scaleAdjust: 1.2,\n  //3d\n  xPos3d: -9,\n  zPos3d: -17,\n  zRot3d: 0.52,\n  scaleAdjust3d: 1.28\n}];\n;// ./src/virtualTryOns/bracelet.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Bracelet extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.handedness = null;\n    this.flickerSmoother = new FlickerSmoother();\n    this.flickerSmoother.currentvector1.z = 0.08;\n    this.flickerSmoother.currentvector.z = 3.5;\n    this.flickerSmoother.currentvector1.x = 0.4;\n    this.flickerSmoother.currentvector.x = 0.4;\n    this.localURL = `${PUBLIC_PATH}/3d/watches/01.glb`;\n    this.URL = `${PUBLIC_PATH}/3d/bracelets/01.png`;\n\n    // this.worldLandmarks = null;\n    //this.loadBracelet();\n\n    this.geometry = new three_module/* SphereGeometry */.Gu$(5); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      // Enable transparency\n      opacity: 0 // Set the opacity level (0.0 - fully transparent, 1.0 - fully opaque)\n    });\n    // this.material = new THREE.MeshBasicMaterial({ color: 0xff0000 }); // Adjust the color as needed\n\n    // this.sphere = new THREE.Mesh(this.geometry, this.material);\n    //this.scene.add(this.sphere);\n    this.root;\n    this.fill;\n    this.refobj;\n    this.spheres = [];\n    // for (let i = 0; i < 21; i++) {\n    //   const sphere = new THREE.Mesh(this.geometry, this.material);\n    //   this.scene.add(sphere);\n    //   this.spheres.push(sphere);\n    // }\n\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.refobj = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.refobj.position.set(1, 1, 1);\n\n    // // Set the position of the sphere based on the pose landmark coordinates\n    // sphere.position.set(x, y, z);\n\n    this.filter = 0.0;\n    this.previousLandmarks = [];\n    this.Prevlandmark;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.SpriteMesh = null;\n    this.imageWidth = null;\n    this.imageHeight = null;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.is2d = true;\n\n    //const gui = new GUI();\n\n    // this.currentvector = new THREE.Vector3(0.1, 0.1, 1);\n    // const vectorFolder2 = gui.addFolder(\'Vector Controls\');\n    // vectorFolder2.add(this.currentvector, \'x\', -Math.PI, Math.PI).step(0.001);\n    // vectorFolder2.add(this.currentvector, \'y\', -Math.PI, Math.PI).step(0.001);\n    // vectorFolder2.add(this.currentvector, \'z\', -Math.PI, Math.PI).step(0.001);\n\n    // // Add a controller to the GUI\n    // const smooth = gui.add(this.flickerSmoother.params, \'floatValue\', -1, 1).step(0.001);\n\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    //AssetURL = null;\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      this.URL = this.localURL;\n    }\n    showLoadingModelPanel(`bracelet`);\n    this.SpriteMesh = null;\n    this.Bracelet = null;\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadBracelet(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadBracelet(AssetURL) {\n    if (this.is2d) {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n      let imageTexture = null;\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          imageTexture = await loadTexture(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL, imageTexture);\n      } else {\n        imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n      }\n      hideLoadingModelPanel();\n      this.scaleFactor = 0.0371;\n      imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      imageTexture.needsUpdate = true;\n      //imageTexture.generateMipmaps = false;\n      this.imageWidth = imageTexture.image.width;\n      this.imageHeight = imageTexture.image.height;\n      const material2d = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n      });\n      material2d.metalness = 1;\n      material2d.envMapIntensity = 1;\n      material2d.needsUpdate = true;\n      material2d.toneMapped = false;\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n      this.SpriteMesh = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n      this.SpriteMesh.renderOrder = 2;\n      this.SpriteMesh.name = "Bracelet";\n    } else {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          await loadModel(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.bracelet) {\n        this.remove();\n        return;\n      }\n      this.Bracelet = assetsCache_getGlobalCacheAsset(this.URL);\n      hideLoadingModelPanel();\n\n      // scale glasses\n      // const bbox = new THREE.Box3().setFromObject(this.Bracelet);\n      // const size = bbox.getSize(new THREE.Vector3());\n      this.scaleFactor = 0.0385;\n      if (this.Bracelet) {\n        this.Bracelet.name = "Bracelet";\n        this.Bracelet.traverse(child => {\n          if (child.isMesh) {\n            // Check if the material has metallicness property\n            if (child.material) {\n              child.renderOrder = 2;\n            }\n          }\n        });\n      }\n      const radiusTop = 0.022; // Adjust the top radius\n      const radiusBottom = 0.022; // Adjust the bottom radius\n      const height = 0.1; // Adjust the height\n      const radialSegments = 16; // Adjust the number of radial segments\n      const heightSegments = 1; // Adjust the number of height segments\n      const openEnded = false; // Set to true for an open-ended cylinder\n\n      const cylinderGeometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded);\n      // let geometry = new THREE.SphereGeometry(0.03); // Adjust the size of the sphere as needed\n      let material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000\n      });\n      this.fill = new three_module/* Mesh */.eaF(cylinderGeometry, material);\n      this.fill.renderOrder = 1;\n      this.fill.receiveShadow = true;\n      this.fill.envMapIntensity = 1;\n      this.fill.material.colorWrite = false;\n      this.Bracelet.add(this.fill);\n    }\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    // this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks, handedness) {\n    this.landmarks = landmarks;\n    if (handedness.length > 0) this.handedness = handedness[0];\n    this.needsUpdate = true;\n  }\n  updateBracelet() {\n    //this.trackingmsg.style.display = "none";\n    // if (this.filter < this.flickerSmoother.currentvector.x) {\n    //   this.filter += 1;\n    //   return;\n    // }\n    // this.filter = 0;\n    if (!this.landmarks || !this.skuAppliedSuccessfully) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 2.75;\n    } else {\n      distanceOffset = 0;\n    }\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let base = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[0], this.width, this.height);\n    let indexbase = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[9], this.width, this.height);\n    let middlebase = hand_landmarks_helpers_scaleLandmark(smoothedLandkmarks[13], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(base.x, base.y, base.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Bracelet || this.SpriteMesh) {\n        //console.log("bracelet update 1");\n        this.show();\n        let shoulderDist;\n        let shoulderDist2;\n        shoulderDist = Math.sqrt((base.x - indexbase.x) ** 2 + (base.y - indexbase.y) ** 2 + (base.z - indexbase.z) ** 2);\n        shoulderDist2 = Math.sqrt((middlebase.x - base.x) ** 2 + (middlebase.y - base.y) ** 2 + (middlebase.z - base.z) ** 2);\n        if (this.is2d) {\n          shoulderDist = Math.sqrt((base.x - indexbase.x) ** 2 + (base.y - indexbase.y) ** 2 + 0);\n          shoulderDist2 = Math.sqrt((middlebase.x - base.x) ** 2 + (middlebase.y - base.y) ** 2 + 0);\n        }\n        let val = base.z - this.refobj.position.z;\n        let val2 = indexbase.z - this.refobj.position.z;\n        let avg2;\n        let avg2offset;\n        avg2 = (val + val2) / 2;\n        avg2offset = avg2 / 10;\n        let avg = (shoulderDist2 + shoulderDist) / 2;\n        let prescale = avg / this.scaleFactor / 130 + avg2offset;\n        let rotThresold = prescale / 1.2;\n        let handRotation = rotThresold;\n        let xdistnace = 0;\n        let ydistnace = 0;\n        let handorientation = indexbase.y - base.y;\n        if (this.is2d) {\n          if (this.handedness[0].categoryName === "Left") {\n            if (handorientation > 0) xdistnace = indexbase.x - middlebase.x;else {\n              xdistnace = middlebase.x - indexbase.x;\n            }\n          } else {\n            if (handorientation > 0) xdistnace = middlebase.x - indexbase.x;else {\n              xdistnace = indexbase.x - middlebase.x;\n            }\n          }\n          ydistnace = indexbase.y - middlebase.y;\n          if (Math.abs(xdistnace) >= Math.abs(ydistnace)) {\n            handRotation = xdistnace;\n          } else {\n            handRotation = ydistnace;\n          }\n          if (handRotation > rotThresold) {\n            handRotation = rotThresold;\n          }\n          if (handRotation < 0) {\n            handRotation = 0;\n          }\n          base.z = 0;\n          indexbase.z = 0;\n          middlebase.z = 0;\n        }\n        let scale;\n        if (this.is2d) {\n          scale = (avg / this.scaleFactor / 130 + avg2offset) * 0.0059 * (handRotation / rotThresold) * getScaleSliderValue();\n          this.root.scale.set(scale, scale, scale);\n          this.root.position.set(base.x + getXSliderValue() * 300 * scale, base.y - getYSliderValue() * 300 * scale, 0);\n        } else {\n          scale = avg / (this.scaleFactor / 0.52) *\n          //(handRotation / rotThresold) *\n          getScaleSliderValue();\n          this.root.scale.set(scale, scale, scale);\n          this.root.position.set(base.x + getXSliderValue() * 0.02 * scale, base.y - getYSliderValue() * 0.02 * scale, base.z);\n        }\n        const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(indexbase, base);\n        const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(middlebase, base);\n        const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n        const quaternion = new three_module/* Quaternion */.PTz();\n        quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n        this.root.quaternion.copy(quaternion);\n        if (!this.is2d) {\n          this.fill.position.set(0, 0.0, -0.003);\n          this.fill.rotation.set(0, 0, -1.57);\n          this.fill.scale.set(1.39, 1, 0.86);\n        }\n        if (this.handedness[0].categoryName === "Left") {\n          if (!this.is2d) this.Bracelet.rotation.set(-1.4, 0, -1.55);else this.SpriteMesh.rotation.set(1.57, 0, -0.05);\n          if (!this.is2d) {\n            this.Bracelet.position.set(0, 0.004, -0.01);\n          }\n        } else {\n          if (this.is2d) {\n            this.SpriteMesh.rotation.set(1.57, 0, 0.05);\n          } else {\n            this.Bracelet.rotation.set(1.4, 0, -1.6);\n          }\n          if (!this.is2d) {\n            this.Bracelet.position.set(0, -0.004, -0.01);\n          }\n        }\n        if (this.is2d) {\n          if (this.handedness[0].categoryName === "Left") {\n            this.SpriteMesh.position.set(0, 0, -150);\n          } else {\n            this.SpriteMesh.position.set(20, 0, -250);\n          }\n        }\n        const forwardDirectionNormalized = new three_module/* Vector3 */.Pq0();\n        forwardDirectionNormalized.copy(forwardDirection).normalize();\n        if (forwardDirectionNormalized.z > 0.65 || forwardDirectionNormalized.z < -0.5 || this.is2d && handRotation < 2) {\n          updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n          showAlignMessagePanel();\n          if (!this.is2d) this.Bracelet.visible = false;else this.SpriteMesh.visible = false;\n        } else {\n          hideAlignMessagePanel();\n          if (!this.is2d) this.Bracelet.visible = true;else this.SpriteMesh.visible = true;\n        }\n        let s = scale / 1000;\n        if (this.is2d) {\n          this.SpriteMesh.scale.set(this.imageWidth + s, this.imageHeight + s, 1);\n        }\n        this.Prevlandmark = tempPrevlandmark;\n        this.previousLandmarks = smoothedLandkmarks;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  addBracelet() {\n    if (this.is2d) {\n      if (this.SpriteMesh) {\n        this.scene.add(this.root);\n        this.root.add(this.SpriteMesh);\n        this.SpriteMesh.position.set(0, 0, 0);\n      }\n    } else {\n      if (this.Bracelet) {\n        this.scene.add(this.root);\n        this.root.add(this.Bracelet);\n        // this.root.add(this.SpriteMesh);\n\n        this.fill.position.set(0, 0.0005, -0.001);\n        this.fill.rotation.set(0, 0, -1.57);\n        this.fill.scale.set(1.35, 1, 1);\n      }\n    }\n  }\n  clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n  }\n  remove() {\n    if (this.is2d) {\n      if (this.SpriteMesh) {\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        this.scene.remove(this.root);\n      }\n    } else {\n      if (this.Bracelet) {\n        this.root.remove(this.Bracelet);\n        while (this.root.children.length > 0) {\n          this.root.remove(this.root.children[0]);\n        }\n        //this.root.remove(this.SpriteMesh);\n        this.scene.remove(this.root);\n      }\n    }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.PrevScale = 1;\n    // this.SpriteMesh = null;\n  }\n  hide() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = false;\n    }\n    if (this.Bracelet) {\n      this.Bracelet.visible = false;\n    }\n  }\n  show() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = true;\n    }\n    if (this.Bracelet) {\n      this.Bracelet.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Bracelet");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateBracelet() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addBracelet();\n          this.updateBracelet();\n        }\n      }\n    }\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n  updateMask() {}\n  removeFaces() {\n    this.remove();\n  }\n}\n;// ./src/virtualTryOns/earrings.js\n\n\n\n\n\n\n\n\n\n\n\n\nclass Earrings extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.geometry2 = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material2 = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root2 = new three_module/* Mesh */.eaF(this.geometry2, this.material2);\n    this.Earrings = null;\n    this.Earrings2 = null;\n    this.flickerSmoother = new FlickerSmoother();\n\n    // if (AssetURL)\n    //   this.URL = AssetURL;\n    // else\n    this.localURL = `${PUBLIC_PATH}/3d/earrings/01.png`;\n    this.URL = `${PUBLIC_PATH}/3d/earrings/01.png`;\n    this.Prevlandmark;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.previousLandmarks = [];\n    this.SpriteMeshLeft = null;\n    this.SpriteMeshRight = null;\n    this.imageWidthLeft = null;\n    this.imageHeightleft = null;\n    this.is2d = true;\n    this.Scale = 1;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n    // this.currentvector = new THREE.Vector3(0, 0, 0);\n    // this.currentvector1 = new THREE.Vector3(0, 0, 0);\n    // const gui = new GUI();\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector, "y", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector, "z", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "x", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "y", -10, 10).step(0.001);\n    // vectorFolder2.add(this.currentvector1, "z", -10, 10).step(0.001);\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      this.URL = this.localURL;\n    }\n    showLoadingModelPanel(`earring`);\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n    this.SpriteMeshLeft = null;\n    this.SpriteMeshRight = null;\n    this.Earrings = null;\n    this.Earrings2 = null;\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadEarrings(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadEarrings(AssetURL) {\n    if (this.is2d) {\n      // if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n      this.scaleFactor = 2.4;\n      let imageTexture1 = null;\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          texture = await loadTexture(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL, texture);\n      }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.earring) {\n        this.remove();\n        return;\n      }\n      imageTexture1 = assetsCache_getGlobalCacheAsset(this.URL);\n      hideLoadingModelPanel();\n      imageTexture1.generateMipmaps = false;\n      //imageTexture1.minFilter = THREE.LinearMipMapNearestFilter;\n      imageTexture1.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture1.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture1.colorSpace = three_module/* SRGBColorSpace */.er$;\n      imageTexture1.needsUpdate = true;\n\n      //imageTexture.generateMipmaps = false;\n      this.imageWidthLeft = imageTexture1.image.width;\n      this.imageHeightLeft = imageTexture1.image.height;\n      //imageTexture.colorSpace = THREE.SRGBColorSpace;\n\n      const materialSprite1 = new three_module/* SpriteMaterial */.RoJ({\n        map: imageTexture1,\n        transparent: true,\n        side: three_module/* DoubleSide */.$EB\n      });\n      materialSprite1.precision = "highp";\n      materialSprite1.depthWrite = false;\n      materialSprite1.needsUpdate = true;\n      materialSprite1.toneMapped = false;\n\n      // Create a sprite and set its material\n      this.SpriteMeshLeft = new three_module/* Sprite */.kxk(materialSprite1);\n      this.SpriteMeshLeft.scale.set(this.imageWidthLeft, this.imageHeightLeft, 1); // Set the sprite\'s size\n      this.SpriteMeshLeft.position.set(0, 0, 0); // Set the sprite\'s position in the scene\n\n      // Create a sprite and set its material\n      this.SpriteMeshRight = new three_module/* Sprite */.kxk(materialSprite1);\n      this.SpriteMeshRight.scale.set(this.imageWidthLeft, this.imageHeightLeft, 1); // Set the sprite\'s size\n      this.SpriteMeshRight.position.set(0, 0, 0); // Set the sprite\'s position in the scene\n\n      this.SpriteMeshRight.name = "Earrings";\n      this.SpriteMeshLeft.name = "Earrings";\n    } else {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          await loadModel(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.earring) {\n        this.remove();\n        return;\n      }\n      this.Earrings = assetsCache_getGlobalCacheAsset(this.URL);\n      hideLoadingModelPanel();\n      // scale glasses\n      const bbox = new three_module/* Box3 */.NRn().setFromObject(this.Earrings);\n      const size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n      this.scaleFactor = 26;\n      this.Earrings.name = "Earrings";\n      this.Earrings.traverse(child => {\n        if (child.isMesh) {\n          child.renderOrder = 2;\n        }\n      });\n      // console.log("alkhsdlha", this.Earrings.clone());\n      this.Earrings2 = this.Earrings.clone();\n      this.Earrings2.name = "Earrings";\n      let geometryEarRight = new three_module/* SphereGeometry */.Gu$(2);\n      let materialEarRight = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0x0000ff,\n        colorWrite: false\n      });\n      this.earRight = new three_module/* Mesh */.eaF(geometryEarRight, materialEarRight);\n      this.earRight.renderOrder = 1;\n      this.Earrings.add(this.earRight);\n      this.earRight.scale.set(0.2, 1, 1);\n      let geometryEarLeft = new three_module/* SphereGeometry */.Gu$(2);\n      let materialEarLeft = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0x0000ff,\n        colorWrite: false\n      });\n      this.earLeft = new three_module/* Mesh */.eaF(geometryEarLeft, materialEarLeft);\n      this.earLeft.renderOrder = 1;\n      this.Earrings2.add(this.earLeft);\n      this.earLeft.scale.set(0.2, 1, 1);\n      this.earLeft.position.set(0, 1.4, -0.2);\n      this.earRight.position.set(0, 1.4, -0.2);\n      this.earRight.rotation.set(0, Math.PI / 2, 0);\n      this.earLeft.rotation.set(0, Math.PI / 2, 0);\n    }\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  updateEarrings() {\n    // Points for reference\n    // https://raw.githubusercontent.com/google/mediapipe/master/mediapipe/modules/face_geometry/data/canonical_face_model_uv_visualization.png\n    if (!this.landmarks || !this.skuAppliedSuccessfully) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 0.02;\n    } else {\n      distanceOffset = 0;\n    }\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let midEyes = scaleLandmark(smoothedLandkmarks[168], this.width, this.height);\n    let chin = scaleLandmark(smoothedLandkmarks[152], this.width, this.height);\n    let Leftear = scaleLandmark(smoothedLandkmarks[454], this.width, this.height);\n    let rightear = scaleLandmark(smoothedLandkmarks[234], this.width, this.height);\n    let leftEyeInnerCorner = scaleLandmark(smoothedLandkmarks[463], this.width, this.height);\n    let rightEyeInnerCorner = scaleLandmark(smoothedLandkmarks[243], this.width, this.height);\n\n    // // These points seem appropriate 446, 265, 372, 264\n    let leftEyeUpper1 = scaleLandmark(smoothedLandkmarks[264], this.width, this.height);\n    // These points seem appropriate 226, 35, 143, 34\n    let rightEyeUpper1 = scaleLandmark(smoothedLandkmarks[34], this.width, this.height);\n    let midEyes5 = scaleLandmark(smoothedLandkmarks[151], this.width, this.height);\n    let rightEyeInnerCorner5 = scaleLandmark(smoothedLandkmarks[108], this.width, this.height);\n    let noseBottom5 = scaleLandmark(smoothedLandkmarks[9], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Earrings || this.SpriteMeshRight) {\n        this.show();\n        const eyeDist = Math.sqrt((leftEyeUpper1.x - rightEyeUpper1.x) ** 2 + (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 + (leftEyeUpper1.z - rightEyeUpper1.z) ** 2);\n        if (!this.is2d) {\n          this.scale = eyeDist / this.scaleFactor * 1.2 * getScaleSliderValue();\n          this.root.scale.set(this.scale, this.scale, this.scale);\n          this.root2.scale.set(this.scale, this.scale, this.scale);\n          const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(noseBottom5, midEyes5);\n          const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(rightEyeInnerCorner5, midEyes5);\n          const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          const quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          this.root.position.set(Leftear.x + getXSliderValue() * 1.2 * this.scale, Leftear.y + upDirection.y * 10 - getYSliderValue() * 1.2 * this.scale, Leftear.z);\n          this.root2.position.set(rightear.x + getXSliderValue() * 1.2 * this.scale, rightear.y + upDirection.y * 10 - getYSliderValue() * 1.2 * this.scale, rightear.z);\n          this.root.quaternion.copy(quaternion);\n          this.root2.quaternion.copy(quaternion);\n\n          // this.Earrings.rotation.set(-1.57, 0, 0);\n          // this.Earrings2.rotation.set(1.57, -0.2, Math.PI);\n          // this.Earrings.position.set(0.7, 2, 1.5);\n          // this.Earrings2.position.set(-0.2, 2, 1.5);\n\n          this.Earrings.position.set(0.8, 4, 4.1);\n          this.Earrings2.position.set(0, 4, 4.1);\n          this.Earrings.rotation.set(-Math.PI / 2, -2, 0);\n          this.Earrings2.rotation.set(-Math.PI / 2, 2.2, 0);\n\n          // this.earRight.position.set(\n          //   this.currentvector.x,\n          //   this.currentvector.y,\n          //   this.currentvector.z\n          // );\n          // this.earLeft.position.set(\n          //   this.currentvector1.x,\n          //   this.currentvector1.y,\n          //   this.currentvector1.z\n          // );\n        } else {\n          this.Scale = eyeDist / this.scaleFactor / 1.2 * getScaleSliderValue();\n          this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n          this.SpriteMeshRight.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n          let upVector = new three_module/* Vector3 */.Pq0(midEyes.x - chin.x, midEyes.y - chin.y, midEyes.z - chin.z).normalize();\n          let sideVector = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x - rightEyeInnerCorner.x, leftEyeInnerCorner.y - rightEyeInnerCorner.y, leftEyeInnerCorner.z - rightEyeInnerCorner.z).normalize();\n          let zRot = new three_module/* Vector3 */.Pq0(1, 0, 0).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1))) - Math.PI / 2;\n          let xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n          let yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n          this.SpriteMeshLeft.position.set(Leftear.x - (0.3 - zRot / 2) * this.Scale * yRot + 0.5 * this.Scale * zRot + this.Scale * 0.05 + getXSliderValue() * 0.7 * this.Scale, Leftear.y + 0.4 * this.Scale * xRot + 0.1 * this.Scale * yRot - this.Scale / 1.45 - getYSliderValue() * 0.7 * this.Scale, -110);\n          this.SpriteMeshRight.position.set(rightear.x - (0.3 + zRot / 2) * this.Scale * yRot + 0.5 * this.Scale * zRot - this.Scale * 0.05 + getXSliderValue() * 0.7 * this.Scale, rightear.y + 0.4 * this.Scale * xRot - 0.2 * this.Scale * yRot - this.Scale / 1.45 - getYSliderValue() * 0.7 * this.Scale, -110);\n        }\n        this.Prevlandmark = tempPrevlandmark;\n        this.previousLandmarks = smoothedLandkmarks;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  addEarrings() {\n    if (this.Earrings) {\n      this.scene.add(this.root);\n      this.scene.add(this.root2);\n      this.root.add(this.Earrings);\n      this.root2.add(this.Earrings2);\n      this.Earrings.position.set(0, 0, 0);\n      this.Earrings2.position.set(0, 0, 0);\n      this.Earrings.rotation.set(0, 90, 0);\n      this.Earrings2.rotation.set(0, 0, 0);\n    } else if (this.SpriteMeshRight) {\n      this.scene.add(this.SpriteMeshLeft);\n      this.scene.add(this.SpriteMeshRight);\n      this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n      this.SpriteMeshRight.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n    }\n  }\n  clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n  }\n  remove() {\n    if (this.Earrings) {\n      while (this.root.children.length > 0) {\n        this.root.remove(this.root.children[0]);\n      }\n      this.scene.remove(this.root);\n      while (this.root2.children.length > 0) {\n        this.root2.remove(this.root2.children[0]);\n      }\n      this.scene.remove(this.root2);\n    } else if (this.SpriteMeshRight || this.SpriteMeshLeft) {\n      while (!!this.scene.getObjectByName("Earrings")) {\n        this.scene.remove(this.scene.getObjectByName("Earrings"));\n      }\n      //this.scene.remove(this.SpriteMeshLeft);\n      //this.scene.remove(this.SpriteMeshRight);\n    }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.PrevScale = 1;\n    // this.SpriteMeshRight = null;\n    // this.SpriteMeshLeft = null;\n  }\n  hide() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = false;\n    }\n    if (this.Earrings) {\n      this.Earrings.visible = false;\n    }\n  }\n  show() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = true;\n    }\n    if (this.Earrings) {\n      this.Earrings.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Earrings");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateEarrings() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addEarrings();\n          this.updateEarrings();\n        }\n      }\n    }\n  }\n  removeFaces() {\n    this.remove();\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\n;// ./src/virtualTryOns/headwear.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Headwear extends StyleFactory {\n  constructor(scene, width, height, sceneManager) {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.fill;\n    this.localURL = `${PUBLIC_PATH}/3d/caps/01.gltf`;\n    this.URL = `${PUBLIC_PATH}/3d/caps/01.gltf`;\n    //this.loadHeadwear();\n    this.flickerSmoother = new FlickerSmoother();\n    //this.flickerSmoother.currentvector.y = 4;\n    this.filter = 0;\n    this.Prevlandmark;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.previousLandmarks = [];\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    return this;\n  }\n  async debounceLoad(AssetURL) {\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      this.URL = this.localURL;\n    }\n    showLoadingModelPanel(`cap`);\n    this.Headwear = null;\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadHeadwear(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadHeadwear(AssetURL) {\n    //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n    if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n      try {\n        await loadModel(this.URL);\n      } catch (error) {\n        handleDownloadOrApiError(error, "Could not load Model");\n        return;\n      }\n    }\n    await this.waitForGlobalAssetKey(this.URL);\n    if (getCurrentTryon().id !== CategoryFactories.cap) {\n      this.remove();\n      return;\n    }\n    const skuAppliedSuccessfully = await emitSKUApplied();\n    if (!skuAppliedSuccessfully) return;\n    this.Headwear = assetsCache_getGlobalCacheAsset(this.URL);\n    hideLoadingModelPanel();\n    // scale glasses\n    // const bbox = new THREE.Box3().setFromObject(this.Headwear);\n    // const size = bbox.getSize(new THREE.Vector3());\n    this.scaleFactor = 2;\n    this.Headwear.name = "Headwear";\n    this.Headwear.traverse(child => {\n      if (child.isMesh) {\n        // Check if the material has metallicness property\n        if (child.material) {\n          // if (child.material.metalness > 1)\n          //   child.material.metalness = 1; // Set metallicness to 0\n          // if (child.material.metalness > 1) child.material.metalness = 1;\n          // child.material.envMapIntensity = 1;\n          child.renderOrder = 2;\n\n          // if (child.material.normalMap) {\n          //   // Adjust other normal map properties if needed\n          //   child.material.normalScale.set(5, 5); // Adjust the strength of the normals\n          // }\n        }\n      }\n    });\n    const radiusTop = 0.029; // Adjust the top radius\n    const radiusBottom = 0.029; // Adjust the bottom radius\n    const height = 0.1; // Adjust the height\n    const radialSegments = 16; // Adjust the number of radial segments\n    const heightSegments = 1; // Adjust the number of height segments\n    const openEnded = false; // Set to true for an open-ended cylinder\n\n    let geometry = new three_module/* SphereGeometry */.Gu$(1);\n    let material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000\n    });\n    this.fill = new three_module/* Mesh */.eaF(geometry, material);\n    this.fill.renderOrder = 1;\n    this.fill.material.colorWrite = false;\n    this.Headwear.add(this.fill);\n    this.fill.position.set(0.02, 0.3, -0.95);\n    this.fill.rotation.set(0, 0, 0);\n    this.fill.scale.set(0.95, 1.2, 1.2);\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  updateHeadwear() {\n    if (!this.landmarks) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 0.5;\n    } else {\n      distanceOffset = 0;\n    }\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let midEyes = scaleLandmark(smoothedLandkmarks[168], this.width, this.height);\n\n    // These points seem appropriate 446, 265, 372, 264\n    let leftEyeUpper1 = scaleLandmark(smoothedLandkmarks[264], this.width, this.height);\n    // These points seem appropriate 226, 35, 143, 34\n    let rightEyeUpper1 = scaleLandmark(smoothedLandkmarks[34], this.width, this.height);\n    let midEyes5 = scaleLandmark(smoothedLandkmarks[197], this.width, this.height);\n    let rightEyeInnerCorner5 = scaleLandmark(smoothedLandkmarks[196], this.width, this.height);\n    let noseBottom5 = scaleLandmark(smoothedLandkmarks[195], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes5.x, midEyes5.y, midEyes5.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Headwear) {\n        this.show();\n        const eyeDist = Math.sqrt((leftEyeUpper1.x - rightEyeUpper1.x) ** 2 + (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 + (leftEyeUpper1.z - rightEyeUpper1.z) ** 2);\n        const scale = eyeDist / this.scaleFactor * 1.2 * getScaleSliderValue();\n        // const scale = (eyeDist / this.scaleFactor) * 1.2 * 1;\n        this.root.scale.set(scale, scale, scale);\n        this.root.position.set(midEyes.x + getXSliderValue() * 1.2 * scale, midEyes.y - getYSliderValue() * 1.2 * scale, midEyes.z);\n\n        // this.root.position.set(\n        //   midEyes.x + 0 * 1.2 * scale,\n        //   midEyes.y - 0 * 1.2 * scale,\n        //   midEyes.z\n        // );\n\n        // this.fill.position.set(0.02, 0.3, -0.95);\n        // this.fill.rotation.set(0, 0, 0);\n        // this.fill.scale.set(0.95, 1.2, 1.2);\n\n        const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(noseBottom5, midEyes5);\n        const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(rightEyeInnerCorner5, midEyes5);\n        const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n        const quaternion = new three_module/* Quaternion */.PTz();\n        quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n        // quaternion.set(quaternion.x, quaternion.y, quaternion.z);\n\n        //const finalrot = new THREE.Quaternion().slerp(rotateRoot.quaternion, quaternion, animationCurve.evaluate(speedcal * time.deltaTime));\n        this.root.quaternion.copy(quaternion);\n        if (rightDirection.z < -13.5 || rightDirection.z > 8) {\n          updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n          showAlignMessagePanel();\n          // setTrackingMsg("Tracking lost. <br>Point your hand towards camera.");\n          // showTrackingMsg();\n          if (!this.is2d) this.Headwear.visible = false;\n          //else this.planeMesh.visible = false;\n        } else {\n          hideAlignMessagePanel();\n          if (!this.is2d) this.Headwear.visible = true;\n          //else this.planeMesh.visible = true;\n        }\n        this.Prevlandmark = tempPrevlandmark;\n        this.previousLandmarks = smoothedLandkmarks;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  addHeadwear() {\n    if (this.Headwear) {\n      this.scene.add(this.root);\n      this.root.add(this.Headwear);\n      // this.Headwear.add(this.fill);\n\n      this.Headwear.rotation.set(1, -0.29, 2.95);\n      this.Headwear.position.set(0.08, 0.24, -0.17);\n    }\n  }\n  remove() {\n    if (this.Headwear) {\n      this.Headwear.remove(this.fill);\n      while (this.root.children.length > 0) {\n        this.root.remove(this.root.children[0]);\n      }\n      this.scene.remove(this.root);\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n    }\n  }\n  hide() {\n    if (this.root) {\n      this.root.visible = false;\n    }\n  }\n  show() {\n    if (this.root) {\n      this.root.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Headwear");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateHeadwear() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addHeadwear();\n          this.updateHeadwear();\n        }\n      }\n    }\n  }\n  removeFaces() {\n    this.remove();\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\n;// ./src/virtualTryOns/mangtika.js\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Mangtika extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.flickerSmoother = new FlickerSmoother();\n    this.localURL = `${PUBLIC_PATH}/3d/mangtika/01.png`;\n    this.URL = `${PUBLIC_PATH}/3d/mangtika/01.png`;\n    this.Prevlandmark;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.previousLandmarks = [];\n    this.SpriteMeshLeft = null;\n    this.imageWidthLeft = null;\n    this.imageHeightleft = null;\n    this.is2d = true;\n    this.Scale = 1;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n    // this.currentvector = new THREE.Vector3(0.08, 0.24, -0.17);\n    // const gui = new GUI();\n    // const vectorFolder2 = gui.addFolder("Vector Controls");\n    // vectorFolder2.add(this.currentvector, "x", -20, 20).step(0.001);\n    // vectorFolder2.add(this.currentvector, "y", -20, 20).step(0.001);\n    // vectorFolder2.add(this.currentvector, "z", -20, 20).step(0.001);\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      this.URL = this.localURL;\n    }\n    showLoadingModelPanel(`mangtika`);\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n    this.SpriteMeshLeft = null;\n    this.Mangtika = null;\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadEarrings(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadEarrings(AssetURL) {\n    if (this.is2d) {\n      // if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n      this.scaleFactor = 0.5;\n      let imageTexture1 = null;\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          imageTexture1 = await loadTexture(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL, imageTexture1);\n      } else {\n        imageTexture1 = assetsCache_getGlobalCacheAsset(this.URL);\n      }\n      hideLoadingModelPanel();\n      imageTexture1.generateMipmaps = false;\n      //imageTexture1.minFilter = THREE.LinearMipMapNearestFilter;\n      imageTexture1.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture1.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture1.colorSpace = three_module/* SRGBColorSpace */.er$;\n      imageTexture1.needsUpdate = true;\n\n      //imageTexture.generateMipmaps = false;\n      this.imageWidthLeft = imageTexture1.image.width;\n      this.imageHeightLeft = imageTexture1.image.height;\n      //imageTexture.colorSpace = THREE.SRGBColorSpace;\n\n      const material2d = new three_module/* MeshBasicMaterial */.V9B({\n        map: imageTexture1,\n        // Assign the loaded texture\n        transparent: true,\n        // Enable transparency\n        side: three_module/* DoubleSide */.$EB // Make the material visible from both sides of the plane (if needed)\n      });\n      material2d.metalness = 1;\n      material2d.envMapIntensity = 1;\n      material2d.needsUpdate = true;\n      material2d.toneMapped = false;\n      const planeGeometry = new three_module/* PlaneGeometry */.bdM(1, 1);\n      this.SpriteMeshLeft = new three_module/* Mesh */.eaF(planeGeometry, material2d);\n      this.SpriteMeshLeft.renderOrder = 2;\n      this.SpriteMeshLeft.name = "Mangtika";\n    } else {\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          await loadModel(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.mangtika) {\n        this.remove();\n        return;\n      }\n      this.Mangtika = assetsCache_getGlobalCacheAsset(this.URL);\n      hideLoadingModelPanel();\n      this.scaleFactor = 3;\n      this.Mangtika.name = "Mangtika";\n      this.Mangtika.traverse(child => {\n        if (child.isMesh) {\n          if (child.material) {\n            child.renderOrder = 2;\n          }\n        }\n      });\n      const radiusTop = 0.029; // Adjust the top radius\n      const radiusBottom = 0.029; // Adjust the bottom radius\n      const height = 0.1; // Adjust the height\n      const radialSegments = 16; // Adjust the number of radial segments\n      const heightSegments = 1; // Adjust the number of height segments\n      const openEnded = false; // Set to true for an open-ended cylinder\n\n      let geometry = new three_module/* SphereGeometry */.Gu$(1);\n      let material = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xff0000\n      });\n      this.fill = new three_module/* Mesh */.eaF(geometry, material);\n      this.fill.renderOrder = 1;\n      this.fill.material.colorWrite = false;\n    }\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    //this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  updateEarrings() {\n    if (!this.landmarks || !this.skuAppliedSuccessfully) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 0.5;\n    } else {\n      distanceOffset = 0;\n    }\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let midEyes = scaleLandmark(smoothedLandkmarks[10], this.width, this.height);\n    let midEyes3d = scaleLandmark(smoothedLandkmarks[168], this.width, this.height);\n    let chin = scaleLandmark(smoothedLandkmarks[152], this.width, this.height);\n    let leftEyeInnerCorner = scaleLandmark(smoothedLandkmarks[463], this.width, this.height);\n    let rightEyeInnerCorner = scaleLandmark(smoothedLandkmarks[243], this.width, this.height);\n\n    // // These points seem appropriate 446, 265, 372, 264\n    let leftEyeUpper1 = scaleLandmark(smoothedLandkmarks[264], this.width, this.height);\n    // These points seem appropriate 226, 35, 143, 34\n    let rightEyeUpper1 = scaleLandmark(smoothedLandkmarks[34], this.width, this.height);\n    let midEyes5 = scaleLandmark(smoothedLandkmarks[197], this.width, this.height);\n    let rightEyeInnerCorner5 = scaleLandmark(smoothedLandkmarks[196], this.width, this.height);\n    let noseBottom5 = scaleLandmark(smoothedLandkmarks[195], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Mangtika || this.SpriteMeshLeft) {\n        this.show();\n        const eyeDist = Math.sqrt((leftEyeUpper1.x - rightEyeUpper1.x) ** 2 + (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 + (leftEyeUpper1.z - rightEyeUpper1.z) ** 2);\n        if (!this.is2d) {\n          this.scale = eyeDist / this.scaleFactor * 1.2 * getScaleSliderValue();\n          this.root.scale.set(this.scale, this.scale, this.scale);\n          this.root.position.set(midEyes3d.x + getXSliderValue() * 1.2 * this.scale, midEyes3d.y - getYSliderValue() * 1.2 * this.scale, midEyes3d.z);\n          const forwardDirection = new three_module/* Vector3 */.Pq0().subVectors(noseBottom5, midEyes5);\n          const rightDirection = new three_module/* Vector3 */.Pq0().subVectors(rightEyeInnerCorner5, midEyes5);\n          const upDirection = new three_module/* Vector3 */.Pq0().crossVectors(forwardDirection, rightDirection).normalize();\n          const quaternion = new three_module/* Quaternion */.PTz();\n          quaternion.setFromRotationMatrix(new three_module/* Matrix4 */.kn4().lookAt(forwardDirection, new three_module/* Vector3 */.Pq0(0, 0, 0), upDirection));\n          this.root.quaternion.copy(quaternion);\n          hideAlignMessagePanel();\n        } else {\n          let upVector = new three_module/* Vector3 */.Pq0(midEyes.x - chin.x, midEyes.y - chin.y, midEyes.z - chin.z).normalize();\n          let sideVector = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x - rightEyeInnerCorner.x, leftEyeInnerCorner.y - rightEyeInnerCorner.y, leftEyeInnerCorner.z - rightEyeInnerCorner.z).normalize();\n          let zRot = new three_module/* Vector3 */.Pq0(1, 0, 0).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1))) - Math.PI / 2;\n          let xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n          let yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n          this.Scale = eyeDist / this.scaleFactor / 1.2 * getScaleSliderValue() * (Math.PI / 3 - Math.abs(yRot / 1.7));\n          this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n          if (Math.abs(yRot) > 0.5) {\n            updateAlignUI(getCurrentTryon().alignIcon, getCurrentTryon().alignMessageLive);\n            showAlignMessagePanel();\n            this.SpriteMeshLeft.visible = false;\n          } else {\n            hideAlignMessagePanel();\n            this.SpriteMeshLeft.visible = true;\n          }\n          let clampedYRot = this.clamp(yRot, -0.5, 0.5);\n          let clampedZRot = this.clamp(zRot, -0.1, 0.1);\n          if (!this.is2d) this.Mangtika.rotation.set(-0.3, clampedYRot, clampedZRot);\n          this.SpriteMeshLeft.rotation.set(0, 0, zRot);\n          let ypos;\n          ypos = chin.y + (5 + this.Scale / 1.1 + (5 + this.Scale / 1.1) * xRot);\n          this.SpriteMeshLeft.position.set(midEyes.x - 0.07 * this.Scale * zRot + getXSliderValue() * 0.1 * this.Scale, midEyes.y + -0.1 * this.Scale * Math.abs(zRot) + this.Scale / 14 - getYSliderValue() * 0.1 * this.Scale, 0);\n        }\n        this.Prevlandmark = tempPrevlandmark;\n        this.previousLandmarks = smoothedLandkmarks;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n        //*/\n      }\n    }\n  }\n  addEarrings() {\n    if (this.Mangtika) {\n      this.scene.add(this.root);\n      this.root.add(this.Mangtika);\n      this.Mangtika.add(this.fill);\n      this.Mangtika.rotation.set(1, -0.29, 2.95);\n      this.Mangtika.position.set(-0.15, -0.4, -0.1);\n      this.fill.position.set(0.02, 0.3, -5);\n      this.fill.rotation.set(0, 0, 0);\n      this.fill.scale.set(0.95, 1.2, 1.2);\n    } else if (this.SpriteMeshLeft) {\n      this.scene.add(this.SpriteMeshLeft);\n      this.SpriteMeshLeft.scale.set(this.imageWidthLeft / 1350 * this.Scale, this.imageHeightLeft / 1350 * this.Scale, 1);\n    }\n  }\n  clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n  }\n  remove() {\n    if (this.Mangtika) {\n      this.Mangtika.remove(this.fill);\n      while (this.root.children.length > 0) {\n        this.root.remove(this.root.children[0]);\n      }\n      this.scene.remove(this.root);\n    } else if (this.SpriteMeshLeft) {\n      while (!!this.scene.getObjectByName("Mangtika")) {\n        this.scene.remove(this.scene.getObjectByName("Mangtika"));\n      }\n      //this.scene.remove(this.SpriteMeshLeft);\n    }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.PrevScale = 1;\n    // this.SpriteMeshLeft = null;\n  }\n  hide() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = false;\n    }\n    if (this.Mangtika) {\n      this.Mangtika.visible = false;\n    }\n  }\n  show() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = true;\n    }\n    if (this.Mangtika) {\n      this.Mangtika.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Mangtika");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateEarrings() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addEarrings();\n          this.updateEarrings();\n        }\n      }\n    }\n  }\n  removeFaces() {\n    this.remove();\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\n;// ./src/virtualTryOns/necklace.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass Necklace extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.flickerSmoother = new FlickerSmoother();\n    this.localURL = `${PUBLIC_PATH}/3d/necklace/01.png`;\n    this.URL = `${PUBLIC_PATH}/3d/necklace/01.png`;\n    this.Prevlandmark;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevbase = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid2 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid3 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid4 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevmid5 = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.planeMesh = null;\n    this.SpriteMesh = null;\n    // this.SpriteMeshLeft = null;\n    // this.SpriteMeshRight = null;\n    this.imageWidth = null;\n    this.imageHeight = null;\n    this.imageWidthLeft = null;\n    this.imageHeightleft = null;\n    this.is2d = true;\n    this.Scale = 1;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.previousLandmarks = [];\n    this.headAndNeckCyclinder = null;\n    this.shouldRemove = false;\n\n    //this.loadNecklace(this.URL);\n\n    // this.gui = new GUI();\n\n    //#region Basic Position testing\n    // this.currentvector = new THREE.Vector3(-0.015, -0.37, 0);\n    // const vectorFolder1 = this.gui.addFolder("Position Vector");\n    // vectorFolder1.add(this.currentvector, "x", -500, 500).step(0.001).listen();\n    // vectorFolder1.add(this.currentvector, "y", -500, 500).step(0.001).listen();\n    // vectorFolder1.add(this.currentvector, "z", -5000, 5000).step(0.001).listen();\n    //#endregion\n\n    //#region Occlusion Test Vectors\n    // this.currentvector = new THREE.Vector3(0, -0.57, 3);\n    // const vectorFolder1 = this.gui.addFolder("Position Vector");\n    // vectorFolder1.add(this.currentvector, "x", -500, 500).step(0.01).listen();\n    // vectorFolder1.add(this.currentvector, "y", -500, 500).step(0.01).listen();\n    // vectorFolder1.add(this.currentvector, "z", -5000, 5000).step(0.01).listen();\n\n    // this.currentvector2 = new THREE.Vector3(0, 0, 0);\n    // const vectorFolder2 = this.gui.addFolder("Rotation Vector");\n    // vectorFolder2.add(this.currentvector2, "x", -500, 500).step(0.01).listen();\n    // vectorFolder2.add(this.currentvector2, "y", -500, 500).step(0.01).listen();\n    // vectorFolder2.add(this.currentvector2, "z", -5000, 5000).step(0.01).listen();\n\n    // this.settings = {\n    //   canSee: false,\n    // };\n    // vectorFolder2.add(this.settings, "canSee").name("Can See").listen();\n\n    // this.currentvector3 = new THREE.Vector3(0.23, 0.25, 0.65);\n    // const vectorFolder3 = this.gui.addFolder("Scale Vector");\n    // vectorFolder3.add(this.currentvector3, "x", -500, 500).step(0.01).listen();\n    // vectorFolder3.add(this.currentvector3, "y", -500, 500).step(0.01).listen();\n    // vectorFolder3.add(this.currentvector3, "z", -5000, 5000).step(0.01).listen();\n    //#endregion\n\n    // Add a controller to the GUI\n\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.skuAppliedSuccessfully = false;\n    return this;\n  }\n  async debounceLoad(AssetURL, is2d) {\n    //AssetURL = null;\n    if (is2d !== undefined && is2d !== null) this.is2d = is2d;\n    if (AssetURL) this.URL = AssetURL;else {\n      return;\n      this.URL = this.localURL;\n    }\n    this.shouldRemove = false;\n    showLoadingModelPanel(`necklace`);\n    this.SpriteMesh = null;\n    this.Necklace = null;\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadNecklace(AssetURL);\n      this.update();\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadNecklace(AssetURL) {\n    if (this.is2d) {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n\n      let imageTexture = null;\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          imageTexture = await loadTexture(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load texture");\n          return;\n        }\n        assetsCache_addToGlobalCache(this.URL, imageTexture);\n      } else {\n        imageTexture = assetsCache_getGlobalCacheAsset(this.URL);\n      }\n      hideLoadingModelPanel();\n      imageTexture.generateMipmaps = false;\n      imageTexture.minFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.magFilter = three_module/* LinearFilter */.k6q;\n      imageTexture.colorSpace = three_module/* SRGBColorSpace */.er$;\n      imageTexture.needsUpdate = true;\n      //imageTexture.generateMipmaps = false;\n      this.imageWidth = imageTexture.image.width;\n      this.imageHeight = imageTexture.image.height;\n      this.scaleFactor = 1.8;\n\n      //imageTexture.colorSpace = THREE.SRGBColorSpace;\n\n      const materialSprite = new three_module/* SpriteMaterial */.RoJ({\n        map: imageTexture,\n        transparent: true,\n        side: three_module/* DoubleSide */.$EB\n      });\n      // materialSprite.precision = \'highp\';\n      materialSprite.depthWrite = false;\n      materialSprite.needsUpdate = true;\n      materialSprite.toneMapped = false;\n\n      // Create a sprite and set its material\n      this.SpriteMesh = new three_module/* Sprite */.kxk(materialSprite);\n      this.SpriteMesh.scale.set(this.imageWidth, this.imageHeight, 1); // Set the sprite\'s size\n      this.SpriteMesh.position.set(0, 0, 0); // Set the sprite\'s position in the scene\n\n      this.SpriteMesh.name = "Necklace";\n    } else {\n      //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n\n      if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n        try {\n          await loadModel(this.URL);\n        } catch (error) {\n          handleDownloadOrApiError(error, "Could not load Model");\n          return;\n        }\n      }\n      // else {\n      //   this.Necklace = getGlobalCacheAsset(this.URL);\n      // }\n      await this.waitForGlobalAssetKey(this.URL);\n      if (getCurrentTryon().id !== CategoryFactories.necklace) {\n        this.remove();\n        return;\n      }\n      this.Necklace = assetsCache_getGlobalCacheAsset(this.URL);\n\n      // scale glasses\n      const bbox = new three_module/* Box3 */.NRn().setFromObject(this.Necklace);\n      const size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n      this.scaleFactor = size.x;\n      this.scaleFactor = 1.5;\n      this.Necklace.name = "Necklace";\n      this.Necklace.traverse(child => {\n        if (child.isMesh) {\n          if (child.material) {\n            child.renderOrder = 2;\n          }\n        }\n      });\n      let geometryCyclinder = new three_module/* CylinderGeometry */.Ho_(2.6, 2.4, 5, 32, 32, false);\n      let materialCyclinder = new three_module/* MeshBasicMaterial */.V9B({\n        color: 0xffff00,\n        colorWrite: false\n      });\n      this.headAndNeckCyclinder = new three_module/* Mesh */.eaF(geometryCyclinder, materialCyclinder);\n      this.headAndNeckCyclinder.renderOrder = 1;\n      this.headAndNeckCyclinder.rotation.set(0, 0, 0);\n      this.headAndNeckCyclinder.scale.set(0.25, 0.25, 0.1);\n      this.headAndNeckCyclinder.position.set(0, -0.5, 0);\n    }\n    hideLoadingModelPanel();\n    this.skuAppliedSuccessfully = await emitSKUApplied();\n\n    //this.sceneManager.onConfigChange();\n  }\n  async waitForGlobalAssetKey(url, interval = 100) {\n    while (!assetsCache_hasGlobalAssetKey(url)) {\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n  }\n  updateDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n  }\n  updateLandmarks(landmarks) {\n    this.landmarks = landmarks;\n    this.needsUpdate = true;\n  }\n  updateNecklace() {\n    if (!this.landmarks || !this.skuAppliedSuccessfully) return;\n    let distanceOffset = 0;\n    if (sdkEngine_getIsVideo()) {\n      distanceOffset = 0.5;\n    } else {\n      distanceOffset = 0;\n    }\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAll(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let midEyes = scaleLandmark(smoothedLandkmarks[168], this.width, this.height);\n    let chin = scaleLandmark(smoothedLandkmarks[152], this.width, this.height);\n    let leftEyeInnerCorner = scaleLandmark(smoothedLandkmarks[463], this.width, this.height);\n    let rightEyeInnerCorner = scaleLandmark(smoothedLandkmarks[243], this.width, this.height);\n    let leftEyeUpper1 = scaleLandmark(smoothedLandkmarks[264], this.width, this.height);\n    let rightEyeUpper1 = scaleLandmark(smoothedLandkmarks[34], this.width, this.height);\n    let tempPrevlandmark = new three_module/* Vector3 */.Pq0(midEyes.x, midEyes.y, midEyes.z);\n    let difference = this.Prevlandmark.distanceTo(tempPrevlandmark);\n    if (difference > distanceOffset || this.PrevScale !== getScaleSliderValue() || this.PrevXValue !== getXSliderValue() || this.PrevYValue !== getYSliderValue()) {\n      if (this.Necklace || this.SpriteMesh) {\n        this.show();\n        // let tempbase = new THREE.Vector3(midEyes.x, midEyes.y, midEyes.z);\n        // let tempmid1 = new THREE.Vector3(chin.x, chin.y, chin.z);\n        // let tempmid2 = new THREE.Vector3(leftEyeInnerCorner.x, leftEyeInnerCorner.y, leftEyeInnerCorner.z);\n        // let tempmid3 = new THREE.Vector3(rightEyeInnerCorner.x, rightEyeInnerCorner.y, rightEyeInnerCorner.z);\n        // let tempmid4 = new THREE.Vector3(leftEyeUpper1.x, leftEyeUpper1.y, leftEyeUpper1.z);\n        // let tempmid5 = new THREE.Vector3(rightEyeUpper1.x, rightEyeUpper1.y, rightEyeUpper1.z);\n\n        // midEyes = this.flickerSmoother.smoothAndFilterLandmarks(this.prevbase, tempbase);\n        // chin = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid, tempmid1);\n        // leftEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid2, tempmid2);\n        // rightEyeInnerCorner = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid3, tempmid3);\n        // leftEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid4, tempmid4);\n        // rightEyeUpper1 = this.flickerSmoother.smoothAndFilterLandmarks(this.prevmid5, tempmid5);\n\n        // this.prevbase = tempbase;\n        // this.prevmid = tempmid1;\n        // this.prevmid2 = tempmid2;\n        // this.prevmid3 = tempmid3;\n        // this.prevmid4 = tempmid4;\n        // this.prevmid5 = tempmid5;\n\n        const eyeDist = Math.sqrt((leftEyeUpper1.x - rightEyeUpper1.x) ** 2 + (leftEyeUpper1.y - rightEyeUpper1.y) ** 2 + (leftEyeUpper1.z - rightEyeUpper1.z) ** 2);\n        // this.scaleFactor = this.currentvector.z;\n        this.Scale = eyeDist / (this.scaleFactor / 0.83) * getScaleSliderValue();\n        // this.Scale = (eyeDist / (this.scaleFactor / 0.83)) * 1;\n        if (!this.is2d) {\n          this.Necklace.scale.set(this.Scale, this.Scale, this.Scale);\n        } else {\n          this.SpriteMesh.scale.set(this.imageWidth / 460 * this.Scale, this.imageHeight / 460 * this.Scale, 1);\n        }\n        let upVector = new three_module/* Vector3 */.Pq0(midEyes.x - chin.x, midEyes.y - chin.y, midEyes.z - chin.z).normalize();\n        let sideVector = new three_module/* Vector3 */.Pq0(leftEyeInnerCorner.x - rightEyeInnerCorner.x, leftEyeInnerCorner.y - rightEyeInnerCorner.y, leftEyeInnerCorner.z - rightEyeInnerCorner.z).normalize();\n        let zRot = new three_module/* Vector3 */.Pq0(1, 0, 0).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1))) - Math.PI / 2;\n        let xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n        let yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n        let clampedYRot = this.clamp(yRot, -0.1, 0.1);\n        let clampedZRot = 0; //this.clamp(zRot, -0.02, 0.02);\n\n        // if (!this.is2d) this.Necklace.rotation.set(-0.3, clampedYRot, clampedZRot);\n        if (!this.is2d) this.Necklace.rotation.set(0, clampedYRot, clampedZRot);\n        let xPosScaleMultiplier = eyeDist < 90 ? -0.08 : -0.0;\n        let yPosScaleMultiplier = eyeDist < 90 ? -0.62 : -0.4;\n        const xPos = chin.x - (1.3 + zRot / 2.5) * this.Scale * yRot - 0.4 * this.Scale * zRot - this.Scale * xPosScaleMultiplier + getXSliderValue() * 0.7 * this.Scale;\n        // const xPos = chin.x - (20 + this.Scale) * yRot + (10 - this.Scale) * zRot;\n\n        const ypos = chin.y + 1.5 * this.Scale * xRot - 0.05 * this.Scale * yRot - 0.01 * this.Scale * zRot - this.Scale * yPosScaleMultiplier - getYSliderValue() * 0.7 * this.Scale;\n        // const ypos = chin.y + (5 + this.Scale / 1.1 + (5 + this.Scale / 1.1) * xRot) - this.Scale / 2;\n\n        // this.headAndNeckCyclinder.rotation.set(this.currentvector2.x, this.currentvector2.y, this.currentvector2.z);\n        // this.headAndNeckCyclinder.material.colorWrite = this.settings.canSee;\n        // this.headAndNeckCyclinder.scale.set(this.currentvector3.x, this.currentvector3.y, this.currentvector3.z);\n\n        if (!this.is2d) {\n          this.Necklace.position.set(xPos, ypos, 0);\n          // this.headAndNeckCyclinder.position.set(this.currentvector.x, this.currentvector.y, this.currentvector.z);\n        } else {\n          xPosScaleMultiplier = eyeDist < 90 ? -0.05 : 0.02;\n          yPosScaleMultiplier = eyeDist < 90 ? 1 : 0.75;\n          this.SpriteMesh.position.set(chin.x - (1.42 + zRot / 2.5) * this.Scale * yRot - 0.4 * this.Scale * zRot - this.Scale * xPosScaleMultiplier + getXSliderValue() * 0.7 * this.Scale, chin.y + 1.5 * this.Scale * xRot - 0.05 * this.Scale * yRot - 0.01 * this.Scale * zRot - this.Scale / yPosScaleMultiplier - getYSliderValue() * 0.7 * this.Scale, 2000);\n        }\n        this.Prevlandmark = tempPrevlandmark;\n        this.previousLandmarks = smoothedLandkmarks;\n        this.PrevScale = getScaleSliderValue();\n        this.PrevXValue = getXSliderValue();\n        this.PrevYValue = getYSliderValue();\n      }\n    }\n  }\n  addNecklace() {\n    if (this.Necklace) {\n      this.scene.add(this.Necklace);\n      if (this.headAndNeckCyclinder) this.Necklace.add(this.headAndNeckCyclinder);\n    } else if (this.SpriteMesh) {\n      this.scene.add(this.SpriteMesh);\n      this.SpriteMesh.scale.set(this.imageWidth / 460 * this.Scale, this.imageHeight / 460 * this.Scale, 1);\n    }\n  }\n  clamp(num, min, max) {\n    return num <= min ? min : num >= max ? max : num;\n  }\n  remove() {\n    if (this.Necklace) {\n      this.Necklace.remove(this.headAndNeckCyclinder);\n      this.scene.remove(this.Necklace);\n    } else if (this.SpriteMesh) {\n      while (!!this.scene.getObjectByName("Necklace")) {\n        this.scene.remove(this.scene.getObjectByName("Necklace"));\n      }\n    }\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.PrevScale = 1;\n    this.shouldRemove = true;\n    // this.SpriteMesh = null;\n  }\n  hide() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = false;\n    }\n    if (this.Necklace) {\n      this.Necklace.visible = false;\n    }\n  }\n  show() {\n    if (this.SpriteMesh) {\n      this.SpriteMesh.visible = true;\n    }\n    if (this.Necklace) {\n      this.Necklace.visible = true;\n    }\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Necklace");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateNecklace() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addNecklace();\n          this.updateNecklace();\n        }\n      }\n    }\n  }\n  removeFaces() {\n    this.remove();\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/dat.gui/build/dat.gui.module.js\nvar dat_gui_module = __webpack_require__(7924);\n;// ./src/virtualTryOns/shoes.js\n\n\n\n\n\n\n\n\n\n\n\n\nfunction shoes_loadModel(file) {\n  return new Promise((res, rej) => {\n    const loader = new GLTFLoader/* GLTFLoader */.B();\n    loader.load(file, function (gltf) {\n      res(gltf.scene);\n      assetsCache_addToGlobalCache(file, gltf.scene);\n    }, undefined, function (error) {\n      rej(error);\n    });\n  });\n}\nclass Shoes extends StyleFactory {\n  constructor() {\n    super();\n  }\n  createStyle(response, scene, width, height, sceneManager) {\n    this.sceneManager = sceneManager;\n    this.scene = scene;\n    this.width = width;\n    this.height = height;\n    this.needsUpdate = false;\n    this.landmarks = null;\n    this.bounds = null;\n    this.geometry = new three_module/* SphereGeometry */.Gu$(0.1); // Adjust the size of the sphere as needed\n    this.material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000,\n      transparent: true,\n      opacity: 0\n    });\n    this.root = new three_module/* Mesh */.eaF(this.geometry, this.material);\n    this.root1 = this.root.clone();\n    this.fill;\n    this.localURL = `${PUBLIC_PATH}/3d/shoes/05.glb`;\n    this.URL = `${PUBLIC_PATH}/3d/shoes/05.glb`;\n    this.URL1 = `${PUBLIC_PATH}/3d/shoes/04.glb`;\n    this.flickerSmoother = new FlickerSmoother();\n    this.flickerSmoother.currentvector1.z = 0.08;\n    this.flickerSmoother.currentvector.z = 22;\n    this.flickerSmoother.currentvector1.x = 0.4;\n    this.flickerSmoother.currentvector.x = 0.4;\n    this.filter = 0;\n    this.previousLandmarks = [];\n    this.Prevlandmark;\n    this.PrevScale = 1;\n    this.PrevXValue = 0;\n    this.PrevYValue = 0;\n    this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevLaces_L = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevHeel_L = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevTip_L = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevLeftLaces_L = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevRightLaces_L = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevLaces_R = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevHeel_R = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevTip_R = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevLeftLaces_R = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    this.prevRightLaces_R = new three_module/* Vector3 */.Pq0(0, 0, 0);\n    const gui = new dat_gui_module/* GUI */.cL();\n    //this.currentvector = new THREE.Vector3(2.9, -1, 1.32);\n    // this.currentvector = new THREE.Vector3(3.14, -0.6, 1.57);\n    // this.currentvector = new THREE.Vector3(-2.55, -0.2, 2.77);\n    this.currentvector = new three_module/* Vector3 */.Pq0(-2.55, 0, 3.14);\n    this.currentvector1 = new three_module/* Vector3 */.Pq0(0, 0, 3.14);\n    this.currentvector2 = new three_module/* Vector3 */.Pq0(3.14, 0, 3.14);\n    const vectorFolder2 = gui.addFolder("Vector Controls");\n    vectorFolder2.add(this.currentvector, "x", -Math.PI, Math.PI).step(0.001);\n    vectorFolder2.add(this.currentvector1, "x", -Math.PI, Math.PI).step(0.001);\n    vectorFolder2.add(this.currentvector2, "x", -Math.PI, Math.PI).step(0.001);\n    this.timeoutId;\n    this.debounceLoad(response.sku.attributes[0].effectAssets, response.sku.subCategory === "2d" ? true : false);\n    this.alsflahflha = 0;\n    return this;\n  }\n  async debounceLoad(AssetURL) {\n    if (AssetURL) {\n      this.URL = AssetURL[0];\n      this.URL1 = AssetURL[1];\n    } else {\n      return;\n      this.URL = this.localURL;\n    }\n    showLoadingModelPanel(`glasses`);\n    this.Shoes = null;\n    this.Shoes1 = null;\n    // Clear the previous timeout (if any) to cancel the previous call\n    clearTimeout(this.timeoutId);\n\n    // Set a new timeout to trigger the function after a delay\n    this.timeoutId = setTimeout(async () => {\n      await this.loadShoes(AssetURL);\n    }, 0); // Adjust the delay as needed (e.g., 500 milliseconds)\n  }\n  async loadShoes(AssetURL) {\n    //if (AssetURL) this.URL = AssetURL; else this.URL = this.localURL;\n    if (!assetsCache_hasGlobalAssetKey(this.URL)) {\n      this.Shoes = await shoes_loadModel(this.URL);\n    } else {\n      this.Shoes = assetsCache_getGlobalCacheAsset(this.URL);\n    }\n    hideLoadingModelPanel();\n    emitSKUApplied();\n    // scale glasses\n    const bbox = new three_module/* Box3 */.NRn().setFromObject(this.Shoes);\n    const size = bbox.getSize(new three_module/* Vector3 */.Pq0());\n    this.scaleFactor = 2;\n    this.scaleFactorR = 2;\n    this.Shoes.name = "Shoes";\n    this.Shoes.traverse(child => {\n      if (child.isMesh) {\n        // Check if the material has metallicness property\n        if (child.material) {\n          child.renderOrder = 2;\n        }\n      }\n    });\n    if (!assetsCache_hasGlobalAssetKey(this.URL1)) {\n      this.Shoes1 = await shoes_loadModel(this.URL1);\n    } else {\n      this.Shoes1 = assetsCache_getGlobalCacheAsset(this.URL1);\n    }\n    hideLoadingModelPanel();\n    emitSKUApplied();\n    // scale glasses\n    const bbox1 = new three_module/* Box3 */.NRn().setFromObject(this.Shoes1);\n    const size1 = bbox1.getSize(new three_module/* Vector3 */.Pq0());\n    this.Shoes1.name = "Shoes";\n    this.Shoes1.traverse(child => {\n      if (child.isMesh) {\n        // Check if the material has metallicness property\n        if (child.material) {\n          child.renderOrder = 2;\n        }\n      }\n    });\n    //this.shoes2 = this.Shoes.clone();\n\n    const radiusTop = 0.029; // Adjust the top radius\n    const radiusBottom = 0.029; // Adjust the bottom radius\n    const height = 0.1; // Adjust the height\n    const radialSegments = 16; // Adjust the number of radial segments\n    const heightSegments = 1; // Adjust the number of height segments\n    const openEnded = false; // Set to true for an open-ended cylinder\n\n    let geometry = new three_module/* CylinderGeometry */.Ho_(radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded);\n    let material = new three_module/* MeshBasicMaterial */.V9B({\n      color: 0xff0000\n    });\n    this.fill = new three_module/* Mesh */.eaF(geometry, material);\n    this.fill.renderOrder = 1;\n    this.fill.material.colorWrite = false;\n    this.fill1 = this.fill.clone();\n  }\n  updateDimensions(width, height, offset) {\n    this.width = width;\n    this.height = height;\n    this.offset = offset;\n    // this.needsUpdate = true;\n  }\n  updateLandmarks(landmarks, bounds) {\n    this.landmarks = landmarks;\n    this.bounds = bounds;\n    this.needsUpdate = true;\n  }\n  updateShoes() {\n    if (!this.landmarks) return;\n    if (!this.bounds && this.bounds.length < 1) return;\n    let smoothedLandkmarks = null;\n    if (!this.previousLandmarks.length) {\n      this.previousLandmarks = this.landmarks;\n      smoothedLandkmarks = this.landmarks;\n    } else {\n      smoothedLandkmarks = this.flickerSmoother.smoothAndFilterLandmarksAllShoe(this.previousLandmarks, this.landmarks);\n    }\n    if (!sdkEngine_getIsVideo()) smoothedLandkmarks = this.landmarks;\n    let shoeLaces = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[10], smoothedLandkmarks[11], 1);\n    let heel = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[12], smoothedLandkmarks[13], 1);\n    let ankl = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[14], smoothedLandkmarks[15], 1);\n    let shoeLacesLeft = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[16], smoothedLandkmarks[17], 1);\n    let shoeLacesRight = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[18], smoothedLandkmarks[19], 1);\n    let tip = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[4], smoothedLandkmarks[5], 1);\n    let shoeLacesR = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[30], smoothedLandkmarks[31], 1);\n    let heelR = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[32], smoothedLandkmarks[33], 1);\n    let anklR = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[34], smoothedLandkmarks[35], 1);\n    let shoeLacesLeftR = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[36], smoothedLandkmarks[37], 1);\n    let shoeLacesRightR = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[38], smoothedLandkmarks[39], 1);\n    let tipR = new three_module/* Vector3 */.Pq0(smoothedLandkmarks[24], smoothedLandkmarks[25], 1);\n\n    // if (this.prevLaces_L) {\n    //   shoeLaces = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevLaces_L,\n    //     shoeLaces.clone()\n    //   );\n    //   shoeLacesLeft = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevLeftLaces_L,\n    //     shoeLacesLeft.clone()\n    //   );\n    //   shoeLacesRight = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevRightLaces_L,\n    //     shoeLacesRight.clone()\n    //   );\n    //   tip = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevTip_L,\n    //     tip.clone()\n    //   );\n    //   heel = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevHeel_L,\n    //     heel.clone()\n    //   );\n    // }\n\n    // if (this.prevLaces_R) {\n    //   shoeLacesR = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevLaces_R,\n    //     shoeLacesR.clone()\n    //   );\n    //   shoeLacesLeftR = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevLeftLaces_R,\n    //     shoeLacesLeftR.clone()\n    //   );\n    //   shoeLacesRightR = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevRightLaces_R,\n    //     shoeLacesRightR.clone()\n    //   );\n    //   tipR = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevTip_R,\n    //     tipR.clone()\n    //   );\n    //   heelR = this.flickerSmoother.smoothAndFilterLandmarks(\n    //     this.prevHeel_L,\n    //     heelR.clone()\n    //   );\n    // }\n\n    // this.prevLaces_L = shoeLaces;\n    // this.prevLeftLaces_L = shoeLacesLeft;\n    // this.prevRightLaces_L = shoeLacesRight;\n    // this.prevTip_L = tip;\n    // this.prevHeel_L = heel;\n    // /////////////////////////////////////////////////////////////////\n    // this.prevLaces_R = shoeLacesR;\n    // this.prevLeftLaces_R = shoeLacesLeftR;\n    // this.prevRightLaces_R = shoeLacesRightR;\n    // this.prevTip_R = tipR;\n    // this.prevHeel_R = heelR;\n    if (this.Shoes && this.Shoes1) {\n      this.show();\n      let eyeDist;\n      if (this.bounds && this.bounds.length > 0) eyeDist = (smoothedLandkmarks[2] + smoothedLandkmarks[3]) / 2;else {\n        eyeDist = 400;\n      }\n      const scale = eyeDist / this.scaleFactor;\n      if (sdkEngine_getIsVideo()) {\n        this.root.scale.set(scale / this.offset * (getVideoEl()?.videoWidth / 600), scale / this.offset * (getVideoEl()?.videoWidth / 600), scale / this.offset * (getVideoEl()?.videoWidth / 600));\n      } else {\n        this.root.scale.set(scale / this.offset * (this.width / 600), scale / this.offset * (this.width / 600), scale / this.offset * (this.width / 600));\n      }\n      let eyeDistR;\n      if (this.bounds && this.bounds.length > 0) eyeDistR = (smoothedLandkmarks[22] + smoothedLandkmarks[23]) / 2;else {\n        eyeDistR = 400;\n      }\n      const scaleR = eyeDistR / this.scaleFactorR;\n      //this.root1.scale.set(scaleR / this.offset, scaleR / this.offset, scaleR);\n      if (sdkEngine_getIsVideo()) {\n        this.root1.scale.set(scaleR / this.offset * (getVideoEl()?.videoWidth / 600), scaleR / this.offset * (getVideoEl()?.videoWidth / 600), scaleR / this.offset * (getVideoEl()?.videoWidth / 600));\n      } else {\n        this.root1.scale.set(scaleR / this.offset * (this.width / 600), scaleR / this.offset * (this.width / 600), scaleR / this.offset * (this.width / 600));\n      }\n      let upVector = new three_module/* Vector3 */.Pq0(heel.x - tip.x, heel.y - tip.y, heel.z - tip.z).normalize();\n      let sideVector = new three_module/* Vector3 */.Pq0(shoeLacesLeft.x - shoeLacesRight.x, shoeLacesLeft.y - shoeLacesRight.y, shoeLacesLeft.z - shoeLacesRight.z).normalize();\n      let projectedUpVector = sideVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1));\n      let zRot = Math.atan2(projectedUpVector.y, projectedUpVector.x);\n      // let projz = Math.atan2(projectedUpVector.y, projectedUpVector.x);\n      // let map = (2 * projz) / Math.PI;\n      // let zRot = map + 1;\n\n      let xRot = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVector.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n      let yRot = new three_module/* Vector3 */.Pq0(sideVector.x, 0, sideVector.z).angleTo(new three_module/* Vector3 */.Pq0(0, 0, 1)) - Math.PI / 2;\n      let midPointX = (shoeLacesLeft.x + shoeLacesRight.x) / 2;\n      let diffX = shoeLaces.x - midPointX;\n      let maxDiffX = Math.abs(shoeLacesLeft.x - shoeLacesRight.x);\n      let normalizedDiff = diffX / maxDiffX;\n      let rotation = Math.PI / 2 * normalizedDiff;\n      this.root.rotation.set(xRot, rotation * 0.7, -zRot - rotation * 0.2);\n      let offsety;\n      offsety = 0.2 * scale;\n      if (sdkEngine_getIsVideo()) {\n        this.root.position.set((shoeLaces.x - getVideoEl()?.videoWidth / 2) / this.offset, (getVideoEl()?.videoHeight / 2 - shoeLaces.y - offsety) / this.offset, scale);\n      } else {\n        this.root.position.set((shoeLaces.x - this.width / 2) / this.offset, (this.height / 2 - shoeLaces.y - offsety) / this.offset, scale);\n      }\n      let upVectorR = new three_module/* Vector3 */.Pq0(heelR.x - tipR.x, heelR.y - tipR.y, heelR.z - tipR.z).normalize();\n      let sideVectorR = new three_module/* Vector3 */.Pq0(shoeLacesLeftR.x - shoeLacesRightR.x, shoeLacesLeftR.y - shoeLacesRightR.y, shoeLacesLeftR.z - shoeLacesRightR.z).normalize();\n      let projectedUpVectorR = sideVectorR.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(0, 0, 1));\n\n      // Step 3: Calculate the rotation angle around the Z-axis using atan2\n      let zRotR = Math.atan2(projectedUpVectorR.y, projectedUpVectorR.x);\n      let xRotR = Math.PI / 2 - new three_module/* Vector3 */.Pq0(0, 0, 1).angleTo(upVectorR.clone().projectOnPlane(new three_module/* Vector3 */.Pq0(1, 0, 0)));\n      let midPointXR = (shoeLacesLeftR.x + shoeLacesRightR.x) / 2;\n      let diffXR = shoeLacesR.x - midPointXR;\n      let maxDiffXR = Math.abs(shoeLacesLeftR.x - shoeLacesRightR.x);\n      let normalizedDiffR = diffXR / maxDiffXR;\n      let rotationR = Math.PI / 2 * normalizedDiffR;\n      this.root1.rotation.set(xRotR, rotationR * 0.7, -zRotR - rotationR * 0.2);\n      let offsetyR;\n      offsetyR = 0.2 * scale;\n      if (sdkEngine_getIsVideo()) {\n        this.root1.position.set((shoeLacesR.x - getVideoEl()?.videoWidth / 2) / this.offset, (getVideoEl()?.videoHeight / 2 - shoeLacesR.y - offsetyR) / this.offset, scaleR);\n      } else {\n        this.root1.position.set((shoeLacesR.x - this.width / 2) / this.offset, (this.height / 2 - shoeLacesR.y - offsetyR) / this.offset, scaleR);\n      }\n      let heelAnkldistance = heel.normalize().distanceTo(ankl.normalize());\n      let heelAnkldistanceR = heelR.normalize().distanceTo(anklR.normalize());\n      this.Shoes.rotation.set(this.currentvector.x + (1 - three_module/* MathUtils */.cj9.clamp(heelAnkldistance * 10, 0, 1)), this.currentvector1.x, this.currentvector2.x);\n      this.Shoes1.rotation.set(this.currentvector.x + (1 - three_module/* MathUtils */.cj9.clamp(heelAnkldistanceR * 10, 0, 1)), this.currentvector1.x, this.currentvector2.x);\n      hideAlignMessagePanel();\n      this.Shoes.visible = true;\n      this.Shoes1.visible = true;\n      this.previousLandmarks = smoothedLandkmarks;\n      this.PrevScale = getScaleSliderValue();\n      this.PrevXValue = getXSliderValue();\n      this.PrevYValue = getYSliderValue();\n    }\n  }\n  addShoes() {\n    if (this.Shoes && this.Shoes1) {\n      this.scene.add(this.root);\n      this.scene.add(this.root1);\n      this.root.add(this.Shoes);\n      this.root1.add(this.Shoes1);\n      this.Shoes.add(this.fill);\n      this.Shoes1.add(this.fill1);\n      this.Shoes.position.set(0, 0, 0);\n      this.Shoes1.position.set(0, 0, 0);\n      this.fill.position.set(0, 0.5, 0.4);\n      this.fill.rotation.set(0.2, 0, 0);\n      this.fill.scale.set(4.8, 10, 5.5);\n      this.fill1.position.set(0, 0.5, 0.4);\n      this.fill1.rotation.set(0.2, 0, 0);\n      this.fill1.scale.set(4.8, 10, 5.5);\n    }\n  }\n  remove() {\n    if (this.Shoes && this.Shoes1) {\n      this.Shoes.remove(this.fill);\n      this.Shoes1.remove(this.fill1);\n      while (this.root.children.length > 0) {\n        this.root.remove(this.root.children[0]);\n      }\n      while (this.root1.children.length > 0) {\n        this.root1.remove(this.root1.children[0]);\n      }\n      this.scene.remove(this.root);\n      this.scene.remove(this.root1);\n      this.Prevlandmark = new three_module/* Vector3 */.Pq0(0, 0, 0);\n      this.PrevScale = 1;\n    }\n  }\n  hide() {\n    if (this.root) {\n      this.root.visible = false;\n    }\n    if (this.root1) {\n      this.root1.visible = false;\n    }\n  }\n  show() {\n    if (this.root) {\n      this.root.visible = true;\n    }\n    if (this.root1) {\n      this.root1.visible = true;\n    }\n  }\n  removeFaces() {\n    this.remove();\n  }\n  update() {\n    if (this.needsUpdate) {\n      let inScene = !!this.scene.getObjectByName("Shoes");\n      let shouldShow = !!this.landmarks;\n      if (inScene) {\n        shouldShow ? this.updateShoes() : this.remove();\n      } else {\n        if (shouldShow) {\n          this.addShoes();\n          this.updateShoes();\n        }\n      }\n    }\n  }\n  setVisibility(state) {\n    if (state) {\n      this.show();\n    } else {\n      this.hide();\n    }\n  }\n}\n;// ./src/makeupVTOs/category_factories.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass CategoryFactories {\n  static lips = "lipstick";\n  static blush = "blush";\n  static eyeshadow = "eyeshadow";\n  static eyeliner = "eyeliner";\n  static masacara = "mascara";\n  static lipliner = "lipliner";\n  static hair = "hair";\n  static nailcolor = "nailcolor";\n  static faceanalysis = "faceanalysis";\n  static eyebrows = "eyebrows";\n  static eyelashes = "eyelashes";\n  static foundation = "foundation";\n  static highlighter = "highlighter";\n  static glasses = "glasses";\n  static watch = "watch";\n  static ring = "ring";\n  static earring = "earring";\n  static necklace = "necklace";\n  static mangtika = "mangtika";\n  static cap = "cap";\n  static bracelet = "bracelet";\n  static shoes = "shoes";\n}\nclass TrackingMode {\n  static None = "none";\n  static Face = "face";\n  static Hand = "hand";\n  static Hair = "hair";\n  static Shoe = "shoe";\n}\nclass BodyType {\n  static None = "none";\n  static Face = "face";\n  static Hand = "hand";\n  static Hair = "hair";\n  static Finger = "finger";\n  static Feet = "feet";\n  static Nail = "nail";\n}\nconst CategoryFactoriesConfig = [{\n  id: CategoryFactories.lips,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "lipstick",\n  subCategoryV2: ["lipstick"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new LipsStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.blush,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "blush",\n  subCategoryV2: ["blush"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new BlushStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.eyeshadow,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "eyeShadow",\n  subCategoryV2: ["eyeshadow"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyeShadowStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.eyeliner,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "eyeliner",\n  subCategoryV2: ["eyeliner"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyeLinerStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.eyebrows,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "eyeBrows",\n  subCategoryV2: ["eyebrows"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyebrowsStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.lipliner,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "lipLiner",\n  subCategoryV2: ["lipliner"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new LiplinerStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.masacara,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "mascara",\n  subCategoryV2: ["mascara"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new MasacaraStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.eyelashes,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "eyelashes",\n  subCategoryV2: ["eyelashes"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new EyelashesStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.foundation,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "foundation",\n  subCategoryV2: ["foundation"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new FoundationStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.highlighter,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "highlighter",\n  subCategoryV2: ["highlighter"],\n  supports: null,\n  modelCategory: "beauty",\n  modelCategoryV2: "makeup",\n  modelSubCategory: "lipstick",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "makeup",\n  factoryClass: new HighlighterStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.hair,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "hair",\n  subCategoryV2: ["haircolor"],\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "hair",\n  bodyType: BodyType.Hair,\n  MLModelInUse: TrackingMode.Hair,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["opacity"],\n  categoryKey: "hair",\n  factoryClass: new HairStyleFactory(),\n  useHDR: false,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.nailcolor,\n  category: "beauty",\n  categoryv2: "makeup",\n  subCategory: "nailColor",\n  subCategoryV2: ["nailcolor"],\n  supports: null,\n  modelCategory: "beauty",\n  modelSubCategory: "nailColor",\n  bodyType: BodyType.Nail,\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: true,\n  ConfigUIType: ["opacity"],\n  categoryKey: "nailColor",\n  factoryClass: new NailStyleFactory(),\n  useHDR: false,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveHand,\n  alignMessageUpload: globalVariables_errorMessages.invalidHandUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.glasses,\n  category: "glasses",\n  categoryv2: "eyewear",\n  subCategory: "2d/3d",\n  subCategoryV2: ["sunglasses", "eyeglasses"],\n  supports: ["2d", "3d"],\n  modelCategory: "glasses",\n  modelCategoryV2: "eyewear",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "glasses",\n  factoryClass: new Glasses(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.earring,\n  category: "earring",\n  categoryv2: "jewellery",\n  subCategory: "2d/3d",\n  subCategoryV2: ["earring"],\n  supports: ["2d"],\n  modelCategory: "earring",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "earring",\n  factoryClass: new Earrings(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.cap,\n  category: "cap",\n  categoryv2: "accessories",\n  subCategory: "2d/3d",\n  subCategoryV2: ["caps", "hats"],\n  supports: ["3d"],\n  modelCategory: "cap",\n  modelCategoryV2: "accessories",\n  modelSubCategory: "3d",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.7,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "cap",\n  factoryClass: new Headwear(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.earring,\n  category: "earring",\n  categoryv2: "jewellery",\n  subCategory: "2d/3d",\n  subCategoryV2: ["earring"],\n  supports: ["2d"],\n  modelCategory: "earring",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "earring",\n  factoryClass: new Earrings(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.mangtika,\n  category: "mangtika",\n  categoryv2: "jewellery",\n  subCategory: "2d/3d",\n  subCategoryV2: ["mangtika"],\n  supports: ["2d"],\n  modelCategory: "mangtika",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "mangtika",\n  factoryClass: new Mangtika(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.necklace,\n  category: "necklace",\n  categoryv2: "jewellery",\n  subCategory: "2d/3d",\n  subCategoryV2: ["necklace"],\n  supports: ["2d"],\n  modelCategory: "necklace",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Face,\n  MLModelInUse: TrackingMode.Face,\n  usesFaceMaskOcclusion: true,\n  faceMaskOffset: 0.13,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "necklace",\n  factoryClass: new Necklace(),\n  useHDR: true,\n  alignIcon: "face",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveFace,\n  alignMessageUpload: globalVariables_errorMessages.invalidFaceUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.watch,\n  category: "watch",\n  categoryv2: "accessories",\n  subCategory: "2d/3d",\n  subCategoryV2: ["watches"],\n  supports: ["2d", "3d"],\n  modelCategory: "watch",\n  modelCategoryV2: "accessories",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Hand,\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "watch",\n  factoryClass: new Watch(),\n  useHDR: true,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveHand,\n  alignMessageUpload: globalVariables_errorMessages.invalidHandUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.ring,\n  category: "ring",\n  categoryv2: "jewellery",\n  subCategory: "2d/3d",\n  subCategoryV2: ["rings"],\n  supports: ["2d"],\n  modelCategory: "ring",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Finger,\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "ring",\n  factoryClass: new Ring(),\n  useHDR: true,\n  alignIcon: "ring",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveRing,\n  alignMessageUpload: globalVariables_errorMessages.invalidRingUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.bracelet,\n  category: "bracelet",\n  categoryv2: "jewellery",\n  subCategory: "2d/3d",\n  subCategoryV2: ["bracelets"],\n  supports: ["2d"],\n  modelCategory: "bracelet",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Hand,\n  MLModelInUse: TrackingMode.Hand,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "bracelet",\n  factoryClass: new Bracelet(),\n  useHDR: true,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveHand,\n  alignMessageUpload: globalVariables_errorMessages.invalidHandUpload,\n  idealCamera: "user"\n}, {\n  id: CategoryFactories.shoes,\n  category: "shoes",\n  categoryv2: "shoes",\n  subCategory: "2d/3d",\n  subCategoryV2: ["shoes"],\n  supports: ["3d"],\n  modelCategory: "bracelet",\n  modelCategoryV2: "jewellery",\n  modelSubCategory: "2d",\n  bodyType: BodyType.Feet,\n  MLModelInUse: TrackingMode.Shoe,\n  usesFaceMaskOcclusion: false,\n  faceMaskOffset: 0,\n  usesCaptureUI: false,\n  ConfigUIType: ["transform"],\n  categoryKey: "bracelet",\n  factoryClass: new Shoes(),\n  useHDR: true,\n  alignIcon: "hand",\n  alignMessageLive: globalVariables_errorMessages.invisbileLiveHand,\n  alignMessageUpload: globalVariables_errorMessages.invalidHandUpload,\n  idealCamera: "environment"\n}];\nfunction getCategoryFactorybyID(id_) {\n  return CategoryFactoriesConfig.find(x => x.id === id_);\n}\nfunction getCategoryFactoryV2(subCategory) {\n  return CategoryFactoriesConfig.find(x => x.subCategoryV2.includes(subCategory));\n}\nfunction getCategoryFactorybyIndex(index) {\n  return CategoryFactoriesConfig[index];\n}\n;// ./src/threeComponents/scene_manager.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst cameraDistance = (height, fov) => {\n  return height / 2 / Math.tan(fov / 2 * Math.PI / 180);\n};\nlet response = null;\nclass SceneManager {\n  constructor(canvas, debug = false, useOrtho = true) {\n    this.canvas = canvas;\n    this.scene = new three_module/* Scene */.Z58();\n    this.ambientLight;\n    this.directionalLight;\n\n    // Set up ambient light\n    this.ambientLight = new three_module/* AmbientLight */.$p8(0xffffff, 0.7);\n    this.ambientLight.castShadow = false;\n    this.scene.add(this.ambientLight);\n\n    // Set up directional light\n    this.directionalLight = new three_module/* DirectionalLight */.ZyN(0xffffff, 1);\n    this.directionalLight.position.set(0, 5, 500);\n    this.directionalLight.castShadow = false;\n    this.scene.add(this.directionalLight);\n    this.scene.fog = null;\n    this.debug = debug;\n    this.useOrtho = useOrtho;\n\n    // Initialize renderer\n    this.renderer = new three_module/* WebGLRenderer */.JeP({\n      canvas: this.canvas,\n      devicePixelRatio: window.devicePixelRatio || 1,\n      antialias: true,\n      preserveDrawingBuffer: true\n    });\n    this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.renderer.setClearColor(0xfefefe);\n    this.renderer.shadowMap.enabled = false;\n    this.pmremGenerator = new three_module/* PMREMGenerator */.BdL(this.renderer);\n    this.roomEnvironment = new RoomEnvironment/* RoomEnvironment */.l(this.renderer);\n\n    // Set up lighting environment\n    this.lightingEnv = this.pmremGenerator.fromScene(this.roomEnvironment, 10, 0, 2000).texture;\n\n    // Load HDR environment\n    this.loader = new RGBELoader/* RGBELoader */.Y();\n    this.loader.load(glasses, texture => {\n      texture.mapping = three_module/* EquirectangularReflectionMapping */.wfO;\n      this.envMap = this.pmremGenerator.fromEquirectangular(texture).texture;\n      texture.needsUpdate = true;\n      this.scene.background = this.envMap;\n      this.scene.environment = this.envMap;\n      texture.dispose();\n      this.pmremGenerator.dispose();\n      this.scene.remove(this.ambientLight);\n      this.scene.remove(this.directionalLight);\n    });\n    this.renderer.toneMapping = three_module/* ACESFilmicToneMapping */.FV;\n    this.renderer.toneMappingExposure = 1;\n    this.CurrentTryon = "";\n    this.fov = 63;\n    this.videoBg = null;\n    this.styles = [];\n    this.factories = [];\n    this.modelsData = [];\n    this.lastLandmarks = null;\n    this.lastOGFaceLandmarks = null;\n    this.lastHairMask = null;\n    this.lastNailMask = null;\n    this.lastImageFrame = null;\n\n    // Initialize camera and controls\n    this.buildCamera();\n    this.buildControls();\n    this.buildVideoBg();\n\n    // Set default video properties\n    this.isVideo = true;\n    this.trueVideoWidth = 640;\n    this.trueVideoHeight = 480;\n    this.calculatedWidth = 640;\n    this.calculatedHeight = 480;\n    this.calculatedOffset = 0;\n\n    // Initialize camera zoom settings\n    this.cameraZoom = 1;\n    this.cameraZoomFactor = 0.1;\n    this.cameraZoomMax = 1.3;\n    this.modelsMap = {};\n    this.currentML = null;\n    this.buildFaceMask();\n    this.faceMask.hide();\n  }\n  buildFaceMask() {\n    // This component draws faces\n    this.faceMask = new FaceMask(this.scene, this.renderer.domElement.width / 2, this.renderer.domElement.height / 2);\n  }\n  takeScreenShot() {\n    this.renderer.render(this.scene, this.camera);\n    const screenshotDataURL = this.renderer.domElement.toDataURL("image/jpeg");\n    return screenshotDataURL;\n  }\n  setAPIResponse(apiResponse) {\n    response = apiResponse;\n    if (response && response.sku.subCategory) {\n      const categoryName = response.sku.category.toLowerCase();\n      this.buildStyles();\n    } else {\n      errorPanel_showErrorPermissionPanel();\n      emitModuleClosed();\n    }\n  }\n  setModelAPIResponse(apiResponse) {\n    response = apiResponse;\n    if (response && response.length > 0) {\n      this.buildModels(response);\n    }\n  }\n  buildVideoBg() {\n    this.videoBg = new VideoBackground(this.scene, this.renderer.domElement.width / 2, this.renderer.domElement.height / 2);\n  }\n  buildControls() {\n    if (this.debug) {\n      this.controls = new OrbitControls/* OrbitControls */.N(this.camera, this.renderer.domElement);\n      this.controls.enableDamping = true;\n      this.controls.update();\n    }\n  }\n  buildCamera() {\n    this.useOrtho ? this.buildOrthoCamera() : this.buildPerspectiveCamera();\n  }\n  buildOrthoCamera() {\n    const aspect = window.innerWidth / window.innerHeight;\n    this.camera = new three_module/* OrthographicCamera */.qUd(1 * aspect / -2, 1 * aspect / 2, 1 / 2, 1 / -2, -2000, 2000);\n    this.camera.position.z = 1;\n  }\n  buildPerspectiveCamera() {\n    this.camera = new three_module/* PerspectiveCamera */.ubm(this.fov, this.renderer.domElement.width / this.renderer.domElement.height, 1.0,\n    // near\n    10000 // far\n    );\n    this.camera.position.z = cameraDistance(this.renderer.domElement.height, this.fov);\n  }\n  buildStyles() {\n    let naildata;\n    if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n      this.styles.forEach(style => {\n        if (style.classType.isNailStyleFactoryInstance) {\n          naildata = style.classType.getNailData();\n        }\n      });\n    }\n\n    // Clear previous styles\n    this.styles.forEach(style => {\n      style.classType.removeFaces();\n    });\n    this.styles = [];\n    this.faceMask.hide();\n    this.currentML = getCurrentTryon().MLModelInUse;\n    if (getCurrentTryon().useHDR) {\n      this.scene.remove(this.directionalLight);\n      this.scene.remove(this.ambientLight);\n      this.scene.environment = this.envMap;\n      this.renderer.toneMapping = three_module/* ACESFilmicToneMapping */.FV;\n      if (response.sku.arEffect && response.sku.arEffect.envSettings && !response.sku.arEffect.envSettings.useDefaultEnvironment) {\n        console.log("Changing HDR environment");\n        this.loader.load(response.sku.arEffect.envSettings.hdr, texture => {\n          texture.mapping = three_module/* EquirectangularReflectionMapping */.wfO;\n          const env = this.pmremGenerator.fromEquirectangular(texture).texture;\n          texture.needsUpdate = true;\n          this.scene.background = env;\n          this.scene.environment = env;\n          texture.dispose();\n          this.pmremGenerator.dispose();\n        });\n      }\n    } else {\n      this.scene.add(this.directionalLight);\n      this.scene.add(this.ambientLight);\n      this.scene.environment = this.lightingEnv;\n      this.renderer.toneMapping = three_module/* NoToneMapping */.y_p;\n    }\n    const factory = {\n      MLType: getCurrentTryon().MLModelInUse,\n      classType: getCurrentTryon().factoryClass.createStyle(response, this.scene, this.renderer.domElement.width / 2, this.renderer.domElement.height / 2, this)\n    };\n    this.styles.push(factory);\n    if (getCurrentTryon().usesFaceMaskOcclusion) {\n      this.faceMask.show();\n      this.faceMask.setConfigOffset(getCurrentTryon().faceMaskOffset);\n    } else {\n      this.faceMask.hide();\n    }\n    if (naildata) {\n      this.styles.forEach(style => {\n        style.classType.setNailData(naildata);\n        style.classType.addrendring();\n        if (this.isVideo) {\n          style.classType.updateDimensions(this.calculatedWidth, this.calculatedHeight, this.calculatedOffset);\n        } else {\n          style.classType.updateDimensions(this.videoWidth, this.videoHeight, 1);\n        }\n        style.classType.update();\n      });\n    }\n    if (!this.isVideo) {\n      if (getCurrentTryon().MLModelInUse === TrackingMode.Hair) {\n        this.onHairSegment(this.lastImageFrame, this.lastHairMask, false);\n      } else if (getCurrentTryon().MLModelInUse === TrackingMode.Face) {\n        this.onLandmarks(null, this.lastLandmarks, this.lastOGFaceLandmarks, this.isVideo);\n      } else if (getCurrentTryon().MLModelInUse === TrackingMode.Hand) {\n        this.onHandsLandmarks(this.lastImageFrame, this.lastHandLandmarks, this.lastHandedness, this.isVideo, this.lastNailMask[0], this.lastNailMask[1], this.lastNailMask[2], this.lastNailMask[3], this.lastNailMask[4], this.lastNailMask[5]);\n      }\n      this.setImageTryonSettings(this.videoWidth, this.videoHeight);\n    } else {\n      if (getCurrentTryon().MLModelInUse === TrackingMode.Hand) {\n        if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n          this.onHandsLandmarks(this.lastImageFrame, this.lastHandLandmarks, this.lastHandedness, this.isVideo, this.lastNailMask[0], this.lastNailMask[1], this.lastNailMask[2], this.lastNailMask[3], this.lastNailMask[4], this.lastNailMask[5]);\n        }\n      }\n    }\n    hideErrorPermissionPanel();\n    emitSKUApplied();\n  }\n  buildModels(_models) {\n    if (getAPIVersion() === "v2.0") {\n      _models.forEach(modelElements => {\n        const items = modelElements.items;\n        items.forEach(item => {\n          let modelAssets;\n          if (isMobileDevice()) {\n            modelAssets = item.mobileModels;\n          } else {\n            modelAssets = item.desktopModels;\n          }\n          modelAssets.forEach(model => {\n            const provider = new modelDataProvider(model);\n            this.modelsData.push({\n              ...provider\n            });\n          });\n        });\n      });\n    } else {\n      _models.forEach(modelElements => {\n        const modelAssets = modelElements.items;\n        modelAssets.forEach(itemElements => {\n          const provider = new modelDataProvider(itemElements);\n          this.modelsData.push({\n            ...provider\n          });\n        });\n      });\n    }\n  }\n  getModelData() {\n    if (getAPIVersion() === "v2.0") {\n      return this.modelsData.filter(model => model.type === getCurrentTryon().bodyType && model.category === getCurrentTryon().modelCategoryV2);\n    } else {\n      return this.modelsData.filter(model => model.category === getCurrentTryon().modelCategory && model.subCategory === getCurrentTryon().modelSubCategory);\n    }\n  }\n  updateCamera() {\n    const aspect = window.innerWidth / window.innerHeight;\n    let width, height;\n    const scale = Math.min(this.trueVideoWidth, this.trueVideoHeight);\n    if (window.innerWidth > window.innerHeight) {\n      width = scale / 2;\n      height = scale / aspect / 2;\n    } else {\n      width = scale * aspect / 2;\n      height = scale / 2;\n    }\n\n    // Update orthographic camera\'s bounds\n    this.camera.right = width;\n    this.camera.left = -width;\n    this.camera.top = height;\n    this.camera.bottom = -height;\n  }\n  updateCameraZoom(state) {\n    let video = getVideo();\n    let img = sdkEngine_getInputImage();\n    let isVideoMode = sdkEngine_getIsVideo();\n    let {\n      canvas\n    } = getHtmlElements();\n    let currentZoom = this.cameraZoom;\n    if (state === "up") {\n      let total = parseFloat((currentZoom + this.cameraZoomFactor)?.toPrecision(2));\n      if (total <= this.cameraZoomMax) {\n        enableSettingIcon("zoomOut");\n        if (total === this.cameraZoomMax) {\n          disableSettingIcon("zoomIn");\n        }\n        if (isVideoMode) {\n          video.style.transform = `scale(${total})`;\n          canvas.style.transform = `scaleX(-1) scale(${total})`;\n        } else {\n          img.style.transform = `scale(${total})`;\n          canvas.style.transform = `scaleX(1) scale(${total})`;\n        }\n        this.cameraZoom = total;\n      } else {\n        disableSettingIcon("zoomIn");\n      }\n    } else if (state === "down") {\n      let total = parseFloat((currentZoom - this.cameraZoomFactor)?.toPrecision(2));\n      if (total >= 1) {\n        enableSettingIcon("zoomIn");\n        if (total === 1) {\n          disableSettingIcon("zoomOut");\n        }\n        if (isVideoMode) {\n          video.style.transform = `scale(${total})`;\n          canvas.style.transform = `scaleX(-1) scale(${total})`;\n        } else {\n          img.style.transform = `scale(${total})`;\n          canvas.style.transform = `scaleX(1) scale(${total})`;\n        }\n        this.cameraZoom = total;\n      } else {\n        disableSettingIcon("zoomOut");\n      }\n    }\n  }\n  resetZoomChanges() {\n    this.camera.zoom = 1;\n    this.cameraZoom = this.camera.zoom;\n    this.camera.updateProjectionMatrix();\n  }\n  updateCameraForImage() {\n    if (!this.videoWidth || !this.videoHeight) return;\n    this.camera.aspect = this.videoWidth / this.videoHeight;\n    if (this.camera.type === "OrthographicCamera") {\n      this.camera.top = this.videoHeight / 2;\n      this.camera.bottom = -this.videoHeight / 2;\n      this.camera.left = -this.videoWidth / 2;\n      this.camera.right = this.videoWidth / 2;\n    } else {\n      this.camera.position.z = cameraDistance(this.videoHeight, this.fov);\n    }\n  }\n  animate(isVideo) {\n    this.isVideo = isVideo;\n    if (!isVideo) this.updateCameraForImage();\n    if (this.scene && this.camera) {\n      this.renderer.render(this.scene, this.camera);\n    }\n    if (this.controls) {\n      this.controls.update();\n    }\n  }\n  clear() {\n    this.styles.forEach(style => {\n      style.classType.removeFaces();\n    });\n    this.styles = [];\n    if (getCurrentTryon().usesFaceMaskOcclusion) this.faceMask.hide();\n  }\n  forceUpdateCurrentStyle() {\n    this.styles.forEach(style => {\n      style.classType.update();\n    });\n    if (getCurrentTryon().usesFaceMaskOcclusion) this.faceMask.forceUpdate();\n  }\n  setForceHideTryons(state) {\n    this.isForceHideTryon = state;\n    if (state) {\n      if (this.styles && this.styles.length > 0) {\n        this.styles.forEach(style => {\n          style.classType.hide();\n        });\n      }\n    } else {\n      this.styles.forEach(style => {\n        style.classType.show();\n      });\n    }\n  }\n  shouldForceHideTryons() {\n    return this.isForceHideTryon;\n  }\n  createNewPlane(video) {\n    this.videoBg.createNewPlane(video);\n    this.videoBg.update();\n  }\n  updatePlaneWithImage(texture) {\n    this.videoBg.updatePlaneWithImage(texture);\n    this.videoBg.updateDimensions(this.videoWidth, this.videoHeight);\n    if (this.scene && this.camera) this.camera.updateProjectionMatrix();\n    this.renderer.render(this.scene, this.camera);\n  }\n  resize(videoWidth, videoHeight) {\n    this.videoWidth = videoWidth;\n    this.videoHeight = videoHeight;\n  }\n  onLandmarks(image, landmarks, ogLandmarks, isVideo) {\n    this.isVideo = isVideo;\n    if (landmarks) {\n      this.lastLandmarks = landmarks;\n      this.lastOGFaceLandmarks = ogLandmarks;\n      if (this.faceMask) {\n        if (getCurrentTryon().usesFaceMaskOcclusion) {\n          this.faceMask.updateLandmarks(landmarks);\n          this.faceMask.updateDimensions(isVideo ? this.calculatedWidth : this.videoWidth, isVideo ? this.calculatedHeight : this.videoHeight);\n          this.faceMask.update();\n          this.faceMask.show();\n          this.faceMask.setConfigOffset(getCurrentTryon().faceMaskOffset);\n        } else {\n          this.faceMask.hide();\n        }\n      }\n      this.styles.forEach(style => {\n        style.classType.updateLandmarks(landmarks, ogLandmarks);\n        style.classType.setVisibility(true);\n        style.classType.updateDimensions(isVideo ? this.calculatedWidth : this.videoWidth, isVideo ? this.calculatedHeight : this.videoHeight);\n        style.classType.update();\n      });\n      if (getCurrentTryon().id !== CategoryFactories.mangtika || this.styles.length <= 0) {\n        hideAlignMessagePanel();\n      }\n    } else {\n      this.styles.forEach(style => {\n        style.classType.setVisibility(false);\n      });\n      updateAlignUI("face", isVideo ? globalVariables_errorMessages.invisibleLiveFace : globalVariables_errorMessages.invalidFaceUpload);\n      showAlignMessagePanel();\n      event_emitError(isVideo ? globalVariables_errorMessages.invisibleLiveFace : globalVariables_errorMessages.invalidFaceUpload);\n    }\n  }\n  onImageFrame(image, isVideo) {\n    if (image) {\n      this.styles.forEach(style => {\n        style.classType.removeFaces();\n      });\n      this.videoBg.setImage(image, isVideo);\n    }\n  }\n  onHairSegment(image, maskData, isVideo) {\n    this.isVideo = isVideo;\n    if (maskData) {\n      this.lastHairMask = maskData;\n      this.lastImageFrame = image;\n      this.styles.forEach(style => {\n        style.classType.updateMask(image, maskData, isVideo);\n        style.classType.setVisibility(true);\n        style.classType.updateDimensions(isVideo ? this.calculatedWidth : this.videoWidth, isVideo ? this.calculatedHeight : this.videoHeight);\n        style.classType.update();\n      });\n      hideAlignMessagePanel();\n    } else {\n      this.styles.forEach(style => {\n        style.classType.setVisibility(false);\n      });\n      updateAlignUI(getCurrentTryon().alignIcon, isVideo ? getCurrentTryon().alignMessageLive : getCurrentTryon().alignMessageUpload);\n      showAlignMessagePanel();\n    }\n  }\n  onHandsLandmarks(image, landmarks, handedness, isVideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle) {\n    this.isVideo = isVideo;\n    if (landmarks && maskData) {\n      this.lastNailMask = [maskData, x_cord, y_cord, x2_cord, y2_cord, angle];\n      this.lastImageFrame = image;\n      this.lastHandLandmarks = landmarks;\n      this.lastHandedness = handedness;\n      if (getCurrentTryon().id === CategoryFactories.watch || this.styles.length <= 0) {\n        hideAlignMessagePanel();\n      }\n      this.styles.forEach(style => {\n        style.classType.updateLandmarks(landmarks, handedness);\n        style.classType.updateMask(image, maskData, x_cord, y_cord, x2_cord, y2_cord, angle, this.isVideo);\n        style.classType.updateDimensions(this.isVideo ? this.calculatedWidth : this.videoWidth, this.isVideo ? this.calculatedHeight : this.videoHeight);\n        style.classType.update();\n      });\n    } else {\n      if (getCurrentTryon().id !== CategoryFactories.nailcolor) {\n        this.styles.forEach(style => {\n          style.classType.setVisibility(false);\n        });\n        updateAlignUI(getCurrentTryon().alignIcon, isVideo ? getCurrentTryon().alignMessageLive : getCurrentTryon().alignMessageUpload);\n        showAlignMessagePanel();\n      }\n    }\n  }\n  onShoeLandMark(image, landmarks, bounds, isVideo) {\n    this.isVideo = isVideo;\n    if (image) {\n      this.styles.forEach(style => {\n        style.classType.updateLandmarks(landmarks, bounds);\n        style.classType.setVisibility(true);\n        style.classType.updateDimensions(isVideo ? this.calculatedWidth : this.videoWidth, isVideo ? this.calculatedHeight : this.videoHeight, isVideo ? this.calculatedOffset : 1);\n        style.classType.update();\n      });\n    }\n  }\n  downloadSnap() {\n    this.styles.forEach(style => {\n      style.classType.downloadSnap();\n    });\n  }\n  resetHandLandmark() {\n    this.resetTryons();\n  }\n  resetTryons() {\n    this.styles.forEach(style => {\n      style.classType.removeFaces();\n    });\n  }\n  resetNailData() {\n    this.styles.forEach(style => {\n      style.classType.clearNailData();\n    });\n  }\n  setImageTryonSettings(width, height) {\n    this.videoWidth = width;\n    this.videoHeight = height;\n    this.calculatedWidth = width;\n    this.calculatedHeight = width;\n    this.styles.forEach(style => {\n      style.classType.updateDimensions(width, height);\n    });\n    if (this.faceMask) this.faceMask.updateDimensions(width, height);\n    this.updateCameraForImage();\n    this.renderer.setSize(width, height);\n    this.camera.updateProjectionMatrix();\n  }\n  clearSceneCanvas() {\n    this.videoBg.removePlaneFromScene();\n  }\n  setVideoTryonSettings(width, height) {\n    this.trueVideoWidth = width;\n    this.trueVideoHeight = height;\n    this.videoWidth = window.innerWidth;\n    this.videoHeight = window.innerHeight;\n    this.updateCamera();\n    this.calculatedVideoDimensions();\n    console.log(this.styles);\n    this.styles.forEach(style => {\n      style.classType.updateDimensions(this.calculatedWidth, this.calculatedHeight);\n    });\n    this.camera.updateProjectionMatrix();\n    this.videoBg.update(this.calculatedWidth, this.calculatedHeight);\n    this.renderer.setSize(window.innerWidth, window.innerHeight, true);\n  }\n  resizeCamera() {\n    if (this.isVideo) {\n      this.videoWidth = window.innerWidth;\n      this.videoHeight = window.innerHeight;\n      this.updateCamera();\n      this.calculatedVideoDimensions();\n      this.styles.forEach(style => {\n        style.classType.updateDimensions(this.calculatedWidth, this.calculatedHeight, this.calculatedOffset);\n      });\n      this.camera.updateProjectionMatrix();\n      this.videoBg.update(this.calculatedWidth, this.calculatedHeight);\n      this.renderer.setSize(window.innerWidth, window.innerHeight, true);\n    }\n  }\n  calculatedVideoDimensions() {\n    let windowAspect;\n    let mql = window.matchMedia("(orientation: portrait)");\n    if (this.trueVideoWidth > this.trueVideoHeight) {\n      mql = false;\n    } else {\n      mql = true;\n    }\n    let cw = this.trueVideoWidth;\n    let ch = this.trueVideoHeight;\n    let videoAspect;\n    if (mql && isMobileDevice()) {\n      windowAspect = window.innerHeight / window.innerWidth;\n      videoAspect = ch / cw;\n    } else {\n      windowAspect = window.innerWidth / window.innerHeight;\n      videoAspect = cw / ch;\n    }\n    let offset = 1;\n    let diff = 0;\n    if (mql && isMobileDevice()) {\n      offset = videoAspect;\n      if (videoAspect > windowAspect) {\n        offset = windowAspect;\n      }\n    } else {\n      if (windowAspect < videoAspect) {\n        diff = videoAspect - windowAspect;\n        offset = videoAspect - diff;\n        if (windowAspect < 1) offset = 1;\n      } else {\n        offset = videoAspect;\n      }\n    }\n    this.calculatedWidth = cw / offset;\n    this.calculatedHeight = ch / offset;\n    this.calculatedOffset = offset;\n  }\n}\n;// ./src/htmlService/modelService.js\n\n\n\nlet models;\nlet isPortrait = false;\nlet modelsContainerDiv = null;\nlet modelsElementsList = (/* unused pure expression or super */ null && ([]));\nlet modelsElementsSelectedList = (/* unused pure expression or super */ null && ([]));\nlet modelsElementsDiv = (/* unused pure expression or super */ null && ([]));\nconst initModelContainer = container => {\n  modelsContainerDiv = container;\n};\nconst createModels = (modelsList, handler) => {\n  var mql = window.matchMedia("(orientation: portrait)");\n  isPortrait = mql.matches;\n  modelsContainerDiv.innerHTML = "";\n  models = modelsList;\n  for (const [index, value] of modelsList.entries()) {\n    const modelIconDiv = document.createElement("div");\n    if (isPortrait) {\n      modelIconDiv.style.width = "50px";\n      modelIconDiv.style.height = "65.5px";\n    } else {\n      modelIconDiv.style.width = "70px";\n      modelIconDiv.style.height = "92px";\n    }\n    modelsContainerDiv.appendChild(modelIconDiv);\n    const imgElement = document.createElement("img");\n    imgElement.id = "model" + index.toString();\n    imgElement.style.width = "100%";\n    imgElement.style.height = "100%";\n    if (hasGlobalAssetKey(value.imageUrl)) {\n      let cachedImgsrc = getGlobalCacheAsset(value.imageUrl);\n      imgElement.src = cachedImgsrc;\n    } else {\n      imgElement.src = value.imageUrl;\n      addToGlobalCache(value.imageUrl, imgElement.src);\n      // document.body.appendChild(imgElement);\n    }\n    modelIconDiv.appendChild(imgElement);\n    const imgEyeElement = document.createElement("img");\n    imgEyeElement.style.position = "relative";\n    imgEyeElement.style.top = "-75%";\n    imgEyeElement.style.left = "25%";\n    imgEyeElement.style.width = "50%";\n    imgEyeElement.style.height = "50%";\n    imgEyeElement.src = modelSelectionIcons.selected;\n    modelIconDiv.appendChild(imgEyeElement);\n    imgEyeElement.style.display = "none";\n    imgElement.addEventListener("click", () => {\n      handleClickEvent(value, index, handler);\n      //handler(value);\n    });\n    modelsElementsDiv.push(modelIconDiv);\n    modelsElementsList.push(imgElement);\n    modelsElementsSelectedList.push(imgEyeElement);\n  }\n};\nvar handleClickEvent = (value, index, handler) => {\n  toggleModelsSelectedImage(index);\n  handler(value);\n};\nconst toggleModelsSelectedImage = index => {\n  //  console.log("index" + index);\n  modelsElementsSelectedList[index].style.display = "block";\n  modelsElementsList[index].style.filter = "brightness(0.5)";\n  models.forEach((each, idx) => {\n    if (index !== idx) {\n      modelsElementsSelectedList[idx].style.display = "none";\n      modelsElementsList[idx].style.filter = "none";\n    }\n  });\n};\nconst modelService_setVisibilityOfModels = (modelsList, type) => {\n  for (let i = 0; i < modelsList.length; i++) {\n    if (modelsList[i].subCategory === type) {\n      //let model = document.getElementById(`model${i}`);\n      let model = modelsElementsDiv[i];\n      if (model) model.style.display = "block";\n    } else {\n      let model = modelsElementsDiv[i];\n      //let model = document.getElementById(`model${i}`);\n      if (model) model.style.display = "none";\n    }\n  }\n};\nconst imageTrackingWithDefaultModel = (modelsList, type) => {\n  if (modelsList.length > 0) {\n    for (let i = 0; i < modelsList.length; i++) {\n      if (modelsList[i].subCategory === type) {\n        toggleModelsSelectedImage(i);\n        return modelsList[i].imageUrl;\n      }\n    }\n  }\n};\nconst showModelContainer = () => {\n  if (globalVariables_isShouldHideInternalUI()) return;\n  if (modelsContainerDiv) modelsContainerDiv.style.display = "flex";\n};\nconst hideModelContainer = () => {\n  if (modelsContainerDiv) modelsContainerDiv.style.display = "none";\n};\n;// ./src/MLModels/selfie_multiclass_256x256.tflite\n/* harmony default export */ const selfie_multiclass_256x256_tflite = (__webpack_require__.p + "assets/src/MLModels/selfie_multiclass_256x256.tflite");\n;// ./src/MLModels/hair_segmenter.tflite\n/* harmony default export */ const hair_segmenter_tflite = (__webpack_require__.p + "assets/src/MLModels/hair_segmenter.tflite");\n;// ./src/MLModelProviders/hair_segment_provider.js\nconst {\n  ImageSegmenter,\n  SegmentationMask,\n  FilesetResolver\n} = __webpack_require__(9848);\n\n\n\nconst legendColors = [[0, 0, 0, 0],\n// Vivid Yellow\n[0, 255, 0, 255],\n// Strong Purple\n[0, 0, 0, 0],\n// Vivid Orange\n[0, 0, 0, 0],\n// Very Light Blue\n[0, 0, 0, 0],\n// Vivid Red\n[0, 0, 0, 0] // Grayish Yellow\n];\nclass HairSegmentProvider {\n  canvas;\n  maskCanvas;\n  canvasCtx;\n  maskcanvasCtx;\n  video;\n  callback;\n  imageSegmenter;\n  labels;\n  image;\n  runningMode = "VIDEO";\n  constructor(callback) {\n    this.callback = callback;\n    this.canvas = document.createElement("canvas");\n    this.maskCanvas = document.createElement("canvas");\n    this.canvasCtx = this.canvas.getContext("2d", {\n      willReadFrequently: true\n    });\n    this.maskcanvasCtx = this.maskCanvas.getContext("2d", {\n      willReadFrequently: true\n    });\n\n    // Ensure that the required properties are available\n    if (!this.canvas || !this.maskCanvas || !this.canvasCtx || !this.maskcanvasCtx) {\n      throw new Error("Canvas or context creation failed.");\n    }\n  }\n  async callbackForVideo(result) {\n    try {\n      let imageData = this.canvasCtx.getImageData(0, 0, this.video.videoWidth, this.video.videoHeight).data;\n      let uint8ArrayInput = new Uint8ClampedArray(imageData);\n      let dataNewInput = new ImageData(uint8ArrayInput, this.video.videoWidth, this.video.videoHeight);\n      this.canvasCtx.putImageData(dataNewInput, 0, 0);\n      let mask = result.categoryMask.getAsFloat32Array();\n      let j = 0;\n      //console.log("mask", mask);\n      for (let i = 0; i < mask.length; ++i) {\n        const maskVal = Math.round(mask[i] * 255.0);\n        let index = maskVal % legendColors.length;\n        const legendColor = legendColors[index];\n        imageData[j] = legendColor[0];\n        imageData[j + 1] = legendColor[1];\n        imageData[j + 2] = legendColor[2];\n        imageData[j + 3] = legendColor[3];\n        j += 4;\n      }\n      let uint8Array = new Uint8ClampedArray(imageData.buffer);\n      let dataNew = new ImageData(uint8Array, this.video.videoWidth, this.video.videoHeight);\n      this.callback(this.canvas, dataNew, true);\n    } catch (error) {\n      // console.error("Callback processing failed:", error);\n    }\n  }\n  async callbackForImage(result) {\n    try {\n      let imageData = this.canvasCtx.getImageData(0, 0, this.video.width, this.video.height).data;\n\n      // let uint8ArrayInput = new Uint8ClampedArray(imageData);\n      // let dataNewInput = new ImageData(\n      //   uint8ArrayInput,\n      //   this.video.width,\n      //   this.video.height\n      // );\n\n      // this.canvasCtx.putImageData(dataNewInput, 0, 0);\n\n      let mask = result.categoryMask.getAsFloat32Array();\n      let j = 0;\n      for (let i = 0; i < mask.length; ++i) {\n        const maskVal = Math.round(mask[i] * 255.0);\n        let index = maskVal % legendColors.length;\n        const legendColor = legendColors[index];\n        imageData[j] = legendColor[0];\n        imageData[j + 1] = legendColor[1];\n        imageData[j + 2] = legendColor[2];\n        imageData[j + 3] = legendColor[3];\n        j += 4;\n      }\n      let uint8Array = new Uint8ClampedArray(imageData.buffer);\n      let dataNew = new ImageData(uint8Array, this.video.width, this.video.height);\n      this.callback(this.canvas, dataNew, false);\n    } catch (error) {\n      // console.error("Callback processing failed:", error);\n    }\n  }\n  async send(video, isVideo) {\n    try {\n      if (video) {\n        if (isVideo) {\n          this.video = video;\n          if (!this.video) {\n            throw new Error("Video element is not provided.");\n          }\n          this.canvas.width = video.videoWidth;\n          this.canvas.height = video.videoHeight;\n          this.canvasCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n          let startTimeMs = performance.now();\n          await this.imageSegmenter.segmentForVideo(video, startTimeMs, this.callbackForVideo.bind(this));\n        } else {\n          this.video = video;\n          this.canvas.width = this.video.width;\n          this.canvas.height = this.video.height;\n          this.canvasCtx.drawImage(this.video, 0, 0, this.video.width, this.video.height);\n\n          // Get ImageData from the canvas\n          const imageData = this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n          await this.imageSegmenter.segment(imageData, this.callbackForImage.bind(this));\n        }\n      }\n    } catch (error) {\n      // console.error("Error in sending:", error);\n      //throw new Error("Failed to process video.");\n    }\n  }\n  async createImageSegmenter() {\n    try {\n      let response;\n      let details = navigator.userAgent;\n      let regexp = /android|iphone|kindle|ipad|webOS|iPod|BlackBerry|Windows Phone/i;\n      let isMobileDevice = regexp.test(details);\n      let hairModel;\n      if (isMobileDevice) {\n        response = await fetch(`${"https://cdn.pixelbin.io/v2/glamar-fynd-835885/"}original/glamar-ml-models/hair_segmenter.tflite`);\n        //hairModel = hairml2;\n      } else {\n        response = await fetch(`${"https://cdn.pixelbin.io/v2/glamar-fynd-835885/"}original/glamar-ml-models/selfie_multiclass_256x256.tflite`);\n        // hairModel = hairml;\n      }\n      if (!response.ok) {\n        throw new Error("Failed to fetch the model file from CDN");\n        return;\n      }\n      const vision = await FilesetResolver.forVisionTasks(`${PUBLIC_PATH}/mediapipe/task-vision/wasm`);\n      this.imageSegmenter = await ImageSegmenter.createFromOptions(vision, {\n        baseOptions: {\n          modelAssetPath: response.url,\n          delegate: "GPU"\n        },\n        outputCategoryMask: true,\n        outputConfidenceMasks: false,\n        runningMode: this.runningMode\n      });\n      this.labels = this.imageSegmenter.getLabels();\n      this.init = true;\n    } catch (error) {\n      showErrorPermissionPanel();\n      this.init = false;\n      // Handle errors here\n      // console.error("Error in createImageSegmenter:", error);\n      // You might want to throw the error again to propagate it to the caller\n      //throw error;\n    }\n  }\n  async initialize() {\n    await this.createImageSegmenter();\n  }\n  IsInit() {\n    return this.init;\n  }\n  async setSelfieMode(state) {\n    if (!this.IsInit()) return;\n    if (this.imageSegmenter) {\n      if (this.getState() === state) return;\n      if (state) this.runningMode = "VIDEO";else this.runningMode = "IMAGE";\n      await this.imageSegmenter.setOptions({\n        runningMode: this.runningMode\n      });\n    }\n  }\n  getState() {\n    if (this.runningMode === "IMAGE") return false;else return true;\n  }\n  isSelfieMode() {\n    if (this.runningMode === "IMAGE") return true;else return false;\n  }\n  setMode(state) {\n    if (!state) this.runningMode = "IMAGE";else this.runningMode = "VIDEO";\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@mediapipe/hands/hands.js\nvar hands = __webpack_require__(8554);\n;// ./src/apiService/api-nail.js\n\n\n\nconst APINail = axios_default().create({\n  baseURL: "https://nail.glamarz0.de",\n  // baseURL: `https://3fae-125-22-237-50.ngrok-free.app`,\n  headers: {}\n});\nconst api_nail_setAuthorization = () => {\n  APINail.defaults.headers["Authorization"] = getAPIKey();\n};\nconst getNailSegmentation = async (imageFile, stringAngle, stringX, stringY) => {\n  try {\n    const isConnected = await api_nail_getConnectionStatus();\n    if (!isConnected) throw new Error(globalVariables_errorMessages.noInternetConnection);\n    const formData = new FormData();\n    formData.append("image", imageFile);\n    const headers = {\n      "Content-Type": "multipart/form-data"\n    };\n    return APINail.post("/api/v1/predict/allImage", formData, {\n      headers\n    }).then(response => {\n      return response;\n    }).catch(error => {\n      throw error;\n    });\n  } catch (error) {\n    throw error;\n  }\n};\nconst sendMeta = async (requestId, tryOnType) => {\n  try {\n    const isConnected = await api_nail_getConnectionStatus();\n    if (!isConnected) throw new Error(errorMessages.noInternetConnection);\n    return APINail.post("/meta", null, {\n      headers: {\n        "x-request-id": requestId,\n        "x-try-on-type": tryOnType\n      }\n    }).catch(error => {\n      throw error;\n    });\n  } catch (error) {\n    throw error;\n  }\n};\nconst api_nail_getSKUData = async (id, apiKey) => {\n  try {\n    const isConnected = await api_nail_getConnectionStatus();\n    if (!isConnected) throw new Error(errorMessages.noInternetConnection);\n    return APINail.get(`/sku?id=${id}`).then(response => {\n      return response;\n    }).catch(error => {\n      throw error;\n    });\n  } catch (error) {\n    throw error;\n  }\n};\nconst api_nail_getConnectionStatus = async () => {\n  try {\n    const response = await APINail.get("/_healthz", {\n      timeout: 4000\n    });\n    if (response.status === 200) return true;\n    throw false;\n  } catch (error) {\n    throw false;\n  }\n};\n;// ./src/MLModels/hand_landmarker.task\n/* harmony default export */ const hand_landmarker = (__webpack_require__.p + "assets/src/MLModels/hand_landmarker.task");\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/chooseTryOn.css\nvar chooseTryOn = __webpack_require__(1510);\n;// ./src/htmlService/styles/chooseTryOn.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar chooseTryOn_options = {};\n\nchooseTryOn_options.styleTagTransform = (styleTagTransform_default());\nchooseTryOn_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      chooseTryOn_options.insert = insertBySelector_default().bind(null, "head");\n    \nchooseTryOn_options.domAPI = (styleDomAPI_default());\nchooseTryOn_options.insertStyleElement = (insertStyleElement_default());\n\nvar chooseTryOn_update = injectStylesIntoStyleTag_default()(chooseTryOn/* default */.A, chooseTryOn_options);\n\n\n\n\n       /* harmony default export */ const styles_chooseTryOn = (chooseTryOn/* default */.A && chooseTryOn/* default */.A.locals ? chooseTryOn/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./src/assets/svg/powered_by.svg\nvar powered_by = __webpack_require__(6509);\n;// ./src/htmlService/ChooseTryOn.js\n\n\n\nlet chooseTryOnConfig = {\n  tryOnScreen: {\n    hideTryOnScreen: false,\n    mode: "light",\n    tryOnTypeConfig: {\n      hideLiveCamera: false,\n      hideModelTryOn: false,\n      hideUploadMode: false\n    }\n  }\n};\nfunction overrideChooseTryOnConfig(config) {\n  chooseTryOnConfig = config;\n}\nfunction getChooseTryOnConfig() {\n  return chooseTryOnConfig;\n}\nconst ModelsList = [{\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}, {\n  imageUrl: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/HJkINV/original/cxr_assets/models/makeup/05.png",\n  isActive: true\n}];\nconst modeMap = {\n  dark: "dark",\n  light: "light"\n};\nconst themeStyles = {\n  dark: {\n    heading_text: "#fff",\n    heading_subtext: "#DBDBDB",\n    live_tryon: "#404141",\n    live_tryon_left_text: "#DBDBDB",\n    arrow_right: "white",\n    choose_model_heading: "#fff",\n    model_tryon_upload: "#343536",\n    model_tryon_upload_icon: "#E7E7E7",\n    model_tryon_text: "#B7B8B8",\n    model_tryon_upload_border: "0.6px dashed #707071",\n    upload_image: "#404141",\n    upload_image_left_text: "#DBDBDB"\n  },\n  light: {\n    heading_text: "#101112",\n    heading_subtext: "#888889",\n    live_tryon: "#F1F1F1",\n    live_tryon_left_text: "#4C4D4D",\n    arrow_right: "#4C4D4D",\n    choose_model_heading: "#101112",\n    model_tryon_upload: "#E7E7E7",\n    model_tryon_upload_icon: "#4C4D4D",\n    model_tryon_text: "#888889",\n    model_tryon_upload_border: "1px dashed #9FA0A0",\n    upload_image: "#F1F1F1",\n    upload_image_left_text: "#4C4D4D"\n  },\n  default: {\n    heading_text: "#101112",\n    heading_subtext: "#888889",\n    live_tryon: "#F1F1F1",\n    live_tryon_left_text: "#4C4D4D",\n    arrow_right: "#4C4D4D",\n    choose_model_heading: "#101112",\n    model_tryon_upload: "#E7E7E7",\n    model_tryon_upload_icon: "#4C4D4D",\n    model_tryon_text: "#888889",\n    model_tryon_upload_border: "1px dashed #9FA0A0",\n    upload_image: "#F1F1F1",\n    upload_image_left_text: "#4C4D4D"\n  }\n};\nfunction getLiveTryOnHtml(mode) {\n  return `<div style="background:${themeStyles?.[mode || "default"]?.live_tryon};" class="tryon_container_live_tryon">\n            <div class="tryon_container_live_tryon_left">\n                <div class="tryon_container_live_tryon_left_camera">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none">\n                        <path d="M19 6.99994H17.72L17.4 5.99994C17.1926 5.41317 16.8077 4.90544 16.2989 4.5471C15.7901 4.18876 15.1824 3.99754 14.56 3.99994H9.44C8.81155 4.00111 8.19933 4.19962 7.68977 4.56744C7.1802 4.93527 6.79901 5.45383 6.6 6.04994L6.28 7.04994H5C4.20435 7.04994 3.44129 7.36601 2.87868 7.92862C2.31607 8.49123 2 9.25429 2 10.0499V18.0499C2 18.8456 2.31607 19.6087 2.87868 20.1713C3.44129 20.7339 4.20435 21.0499 5 21.0499H19C19.7956 21.0499 20.5587 20.7339 21.1213 20.1713C21.6839 19.6087 22 18.8456 22 18.0499V10.0499C22.0066 9.65179 21.9339 9.2563 21.7862 8.88653C21.6384 8.51676 21.4184 8.18011 21.1392 7.89622C20.86 7.61233 20.527 7.38687 20.1597 7.23299C19.7924 7.07911 19.3982 6.99988 19 6.99994ZM20 17.9999C20 18.2652 19.8946 18.5195 19.7071 18.707C19.5196 18.8946 19.2652 18.9999 19 18.9999H5C4.73478 18.9999 4.48043 18.8946 4.29289 18.707C4.10536 18.5195 4 18.2652 4 17.9999V9.99994C4 9.73472 4.10536 9.48037 4.29289 9.29283C4.48043 9.1053 4.73478 8.99994 5 8.99994H7C7.21807 9.01132 7.43386 8.95101 7.61443 8.82822C7.795 8.70544 7.93042 8.52692 8 8.31994L8.54 6.67994C8.60709 6.48132 8.7349 6.3088 8.90537 6.18678C9.07584 6.06476 9.28036 5.9994 9.49 5.99994H14.61C14.8196 5.9994 15.0242 6.06476 15.1946 6.18678C15.3651 6.3088 15.4929 6.48132 15.56 6.67994L16.1 8.31994C16.1642 8.51068 16.2844 8.67763 16.445 8.79895C16.6055 8.92027 16.799 8.99032 17 8.99994H19C19.2652 8.99994 19.5196 9.1053 19.7071 9.29283C19.8946 9.48037 20 9.73472 20 9.99994V17.9999ZM12 8.99994C11.2089 8.99994 10.4355 9.23453 9.77772 9.67406C9.11992 10.1136 8.60723 10.7383 8.30448 11.4692C8.00173 12.2001 7.92252 13.0044 8.07686 13.7803C8.2312 14.5562 8.61216 15.269 9.17157 15.8284C9.73098 16.3878 10.4437 16.7687 11.2196 16.9231C11.9956 17.0774 12.7998 16.9982 13.5307 16.6955C14.2616 16.3927 14.8864 15.88 15.3259 15.2222C15.7654 14.5644 16 13.7911 16 12.9999C16 11.9391 15.5786 10.9217 14.8284 10.1715C14.0783 9.42137 13.0609 8.99994 12 8.99994ZM12 14.9999C11.6044 14.9999 11.2178 14.8826 10.8889 14.6629C10.56 14.4431 10.3036 14.1308 10.1522 13.7653C10.0009 13.3999 9.96126 12.9977 10.0384 12.6098C10.1156 12.2218 10.3061 11.8654 10.5858 11.5857C10.8655 11.306 11.2219 11.1155 11.6098 11.0384C11.9978 10.9612 12.3999 11.0008 12.7654 11.1522C13.1308 11.3036 13.4432 11.5599 13.6629 11.8888C13.8827 12.2177 14 12.6044 14 12.9999C14 13.5304 13.7893 14.0391 13.4142 14.4142C13.0391 14.7892 12.5304 14.9999 12 14.9999Z" fill="#DA0E64"/>\n                    </svg>\n                </div>\n                <div style="color:${themeStyles?.[mode || "default"]?.live_tryon_left_text};" class="tryon_container_live_tryon_left_text">\n                     Live Camera\n                </div>\n            </div>\n            <div class="tryon_container_live_tryon_right">\n                <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <g clip-path="url(#clip0_10465_112862)">\n                    <path fill-rule="evenodd" clip-rule="evenodd" d="M14.7071 13.207C15.0976 12.8165 15.0976 12.1833 14.7071 11.7928L9.70711 6.79278C9.31658 6.40225 8.68342 6.40225 8.29289 6.79278C7.90237 7.1833 7.90237 7.81647 8.29289 8.20699L12.5858 12.4999L8.29289 16.7928C7.90237 17.1833 7.90237 17.8165 8.29289 18.207C8.68342 18.5975 9.31658 18.5975 9.70711 18.207L14.7071 13.207Z" fill=${themeStyles?.[mode || "default"]?.arrow_right} />\n                    </g>\n                    <defs>\n                    <clipPath id="clip0_10465_112862">\n                    <rect width="24" height="24" fill="white" transform="translate(0 0.499939)"/>\n                    </clipPath>\n                    </defs>\n                </svg>\n            </div>\n          </div>`;\n}\nfunction getModelTryOnHtml(models, hideUploadTryOn, mode) {\n  const ModelsHtml = `<div>\n            <div style="color:${themeStyles?.[mode || "default"]?.choose_model_heading};" class="tryon_container_choose_model_heading">\n                Choose A Model\n            </div>\n            <div class="tryon_container_model_tryon">\n                        ${models?.map((eachModel, index) => {\n    return `\n                                    ${eachModel?.isActive ? `<div class="tryon_container_model_tryon_container" ">\n                                                <img class="tryon_container_model_tryon_image" id="${index}" src="${eachModel?.imageUrl}" />\n                                           </div>` : null}\n                                `;\n  }).filter(eachModel => Boolean(eachModel)).join("")}\n                        ${!hideUploadTryOn ? `\n                                <div style="\n                                    background:${themeStyles?.[mode || "default"]?.model_tryon_upload};\n                                    border:${themeStyles?.[mode || "default"]?.model_tryon_upload_border};" id="tryon_container_model_tryon_upload" class="tryon_container_model_tryon_upload">\n                                    <div>\n                                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none">\n                                        <path d="M8.71 7.71L11 5.41V15C11 15.2652 11.1054 15.5196 11.2929 15.7071C11.4804 15.8946 11.7348 16 12 16C12.2652 16 12.5196 15.8946 12.7071 15.7071C12.8946 15.5196 13 15.2652 13 15V5.41L15.29 7.71C15.383 7.80372 15.4936 7.87812 15.6154 7.92889C15.7373 7.97966 15.868 8.00579 16 8.00579C16.132 8.00579 16.2627 7.97966 16.3846 7.92889C16.5064 7.87812 16.617 7.80372 16.71 7.71C16.8037 7.61703 16.8781 7.50643 16.9289 7.38457C16.9797 7.26271 17.0058 7.13201 17.0058 7C17.0058 6.86798 16.9797 6.73728 16.9289 6.61542C16.8781 6.49356 16.8037 6.38296 16.71 6.29L12.71 2.29C12.6149 2.19895 12.5028 2.12759 12.38 2.08C12.1365 1.97998 11.8635 1.97998 11.62 2.08C11.4972 2.12759 11.3851 2.19895 11.29 2.29L7.29 6.29C7.19676 6.38323 7.1228 6.49392 7.07234 6.61575C7.02188 6.73757 6.99591 6.86814 6.99591 7C6.99591 7.13186 7.02188 7.26242 7.07234 7.38424C7.1228 7.50607 7.19676 7.61676 7.29 7.71C7.38324 7.80323 7.49393 7.87719 7.61575 7.92766C7.73757 7.97812 7.86814 8.00409 8 8.00409C8.13186 8.00409 8.26243 7.97812 8.38425 7.92766C8.50607 7.87719 8.61676 7.80323 8.71 7.71ZM21 14C20.7348 14 20.4804 14.1054 20.2929 14.2929C20.1054 14.4804 20 14.7348 20 15V19C20 19.2652 19.8946 19.5196 19.7071 19.7071C19.5196 19.8946 19.2652 20 19 20H5C4.73478 20 4.48043 19.8946 4.29289 19.7071C4.10536 19.5196 4 19.2652 4 19V15C4 14.7348 3.89464 14.4804 3.70711 14.2929C3.51957 14.1054 3.26522 14 3 14C2.73478 14 2.48043 14.1054 2.29289 14.2929C2.10536 14.4804 2 14.7348 2 15V19C2 19.7956 2.31607 20.5587 2.87868 21.1213C3.44129 21.6839 4.20435 22 5 22H19C19.7957 22 20.5587 21.6839 21.1213 21.1213C21.6839 20.5587 22 19.7956 22 19V15C22 14.7348 21.8946 14.4804 21.7071 14.2929C21.5196 14.1054 21.2652 14 21 14Z" fill=${themeStyles?.[mode || "default"]?.model_tryon_upload_icon} />\n                                        </svg>\n                                        </div>\n                                    <div style="color:${themeStyles?.[mode || "default"]?.model_tryon_text};">\n                                        Upload Image\n                                    </div>\n                                </div>\n                            ` : ""}\n            </div>\n        </div>\n        `;\n  return ModelsHtml;\n}\nfunction getUploadTryOnHtml(mode) {\n  return `<div style="background:${themeStyles?.[mode || "default"]?.upload_image};" class="tryon_container_upload_tryon">\n            <div class="tryon_container_upload_tryon_left">\n                <div class="tryon_container_upload_tryon_left_camera">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="25" viewBox="0 0 24 25" fill="none">\n                        <path d="M19 6.99994H17.72L17.4 5.99994C17.1926 5.41317 16.8077 4.90544 16.2989 4.5471C15.7901 4.18876 15.1824 3.99754 14.56 3.99994H9.44C8.81155 4.00111 8.19933 4.19962 7.68977 4.56744C7.1802 4.93527 6.79901 5.45383 6.6 6.04994L6.28 7.04994H5C4.20435 7.04994 3.44129 7.36601 2.87868 7.92862C2.31607 8.49123 2 9.25429 2 10.0499V18.0499C2 18.8456 2.31607 19.6087 2.87868 20.1713C3.44129 20.7339 4.20435 21.0499 5 21.0499H19C19.7956 21.0499 20.5587 20.7339 21.1213 20.1713C21.6839 19.6087 22 18.8456 22 18.0499V10.0499C22.0066 9.65179 21.9339 9.2563 21.7862 8.88653C21.6384 8.51676 21.4184 8.18011 21.1392 7.89622C20.86 7.61233 20.527 7.38687 20.1597 7.23299C19.7924 7.07911 19.3982 6.99988 19 6.99994ZM20 17.9999C20 18.2652 19.8946 18.5195 19.7071 18.707C19.5196 18.8946 19.2652 18.9999 19 18.9999H5C4.73478 18.9999 4.48043 18.8946 4.29289 18.707C4.10536 18.5195 4 18.2652 4 17.9999V9.99994C4 9.73472 4.10536 9.48037 4.29289 9.29283C4.48043 9.1053 4.73478 8.99994 5 8.99994H7C7.21807 9.01132 7.43386 8.95101 7.61443 8.82822C7.795 8.70544 7.93042 8.52692 8 8.31994L8.54 6.67994C8.60709 6.48132 8.7349 6.3088 8.90537 6.18678C9.07584 6.06476 9.28036 5.9994 9.49 5.99994H14.61C14.8196 5.9994 15.0242 6.06476 15.1946 6.18678C15.3651 6.3088 15.4929 6.48132 15.56 6.67994L16.1 8.31994C16.1642 8.51068 16.2844 8.67763 16.445 8.79895C16.6055 8.92027 16.799 8.99032 17 8.99994H19C19.2652 8.99994 19.5196 9.1053 19.7071 9.29283C19.8946 9.48037 20 9.73472 20 9.99994V17.9999ZM12 8.99994C11.2089 8.99994 10.4355 9.23453 9.77772 9.67406C9.11992 10.1136 8.60723 10.7383 8.30448 11.4692C8.00173 12.2001 7.92252 13.0044 8.07686 13.7803C8.2312 14.5562 8.61216 15.269 9.17157 15.8284C9.73098 16.3878 10.4437 16.7687 11.2196 16.9231C11.9956 17.0774 12.7998 16.9982 13.5307 16.6955C14.2616 16.3927 14.8864 15.88 15.3259 15.2222C15.7654 14.5644 16 13.7911 16 12.9999C16 11.9391 15.5786 10.9217 14.8284 10.1715C14.0783 9.42137 13.0609 8.99994 12 8.99994ZM12 14.9999C11.6044 14.9999 11.2178 14.8826 10.8889 14.6629C10.56 14.4431 10.3036 14.1308 10.1522 13.7653C10.0009 13.3999 9.96126 12.9977 10.0384 12.6098C10.1156 12.2218 10.3061 11.8654 10.5858 11.5857C10.8655 11.306 11.2219 11.1155 11.6098 11.0384C11.9978 10.9612 12.3999 11.0008 12.7654 11.1522C13.1308 11.3036 13.4432 11.5599 13.6629 11.8888C13.8827 12.2177 14 12.6044 14 12.9999C14 13.5304 13.7893 14.0391 13.4142 14.4142C13.0391 14.7892 12.5304 14.9999 12 14.9999Z" fill="#DA0E64"/>\n                    </svg>\n                </div>\n                <div style="color:${themeStyles?.[mode || "default"]?.upload_image_left_text};" class="tryon_container_upload_tryon_left_text">\n                     Upload Image\n                </div>\n            </div>\n            <div class="tryon_container_upload_tryon_right">\n                <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">\n                    <g clip-path="url(#clip0_10465_112862)">\n                    <path fill-rule="evenodd" clip-rule="evenodd" d="M14.7071 13.207C15.0976 12.8165 15.0976 12.1833 14.7071 11.7928L9.70711 6.79278C9.31658 6.40225 8.68342 6.40225 8.29289 6.79278C7.90237 7.1833 7.90237 7.81647 8.29289 8.20699L12.5858 12.4999L8.29289 16.7928C7.90237 17.1833 7.90237 17.8165 8.29289 18.207C8.68342 18.5975 9.31658 18.5975 9.70711 18.207L14.7071 13.207Z" fill=${themeStyles?.[mode || "default"]?.arrow_right} />\n                    </g>\n                    <defs>\n                    <clipPath id="clip0_10465_112862">\n                    <rect width="24" height="24" fill="white" transform="translate(0 0.499939)"/>\n                    </clipPath>\n                    </defs>\n                </svg>\n            </div>\n          </div>`;\n}\nfunction buildTryOnScreen(handler) {\n  const {\n    tryOnScreen\n  } = getHtmlElements();\n  const hideTryOnScreen = chooseTryOnConfig.tryOnScreen.hideTryOnScreen;\n  const hideLiveTryOn = chooseTryOnConfig.tryOnScreen.tryOnTypeConfig.hideLiveCamera;\n  const hideModelTryOn = chooseTryOnConfig.tryOnScreen.tryOnTypeConfig.hideModelTryOn;\n  const hideUploadTryOn = chooseTryOnConfig.tryOnScreen.tryOnTypeConfig.hideUploadMode;\n  const mode = chooseTryOnConfig.tryOnScreen.mode === "dark" ? "dark" : "light";\n  let TryOnHtml = "";\n  tryOnScreen.classList.add(`tryon_screen_${modeMap[mode || "light"]}`);\n  if (!hideTryOnScreen) {\n    TryOnHtml = `\n            <div class="tryon_container">\n                <div class="tryon_container_heading">\n                    <div style="color:${themeStyles?.[mode || "default"]?.heading_text};" class="tryon_container_heading_text">\n                        Choose a Try-on Mode\n                    </div>\n                    <div style="color:${themeStyles?.[mode || "default"]?.heading_subtext};" class="tryon_container_heading_subtext">\n                        Select and immerse yourself in personalized try-on experiences with ease.\n                    </div>\n                </div>\n                ${!hideLiveTryOn ? getLiveTryOnHtml(mode) : ""}\n                ${!hideModelTryOn ? getModelTryOnHtml(ModelsList, hideUploadTryOn, mode) : ""} \n                ${hideModelTryOn ? !hideUploadTryOn ? getUploadTryOnHtml(mode) : "" : ""}\n\n            </div>\n        `;\n  }\n  // add html to div\n  tryOnScreen.innerHTML += TryOnHtml;\n  // attach eventhandlers\n  const liveTryOnContainer = document.querySelector(".tryon_container_live_tryon");\n  liveTryOnContainer?.addEventListener("click", () => {\n    handler("live");\n  });\n  const modelTryOnContainer = document.querySelector(".tryon_container_model_tryon");\n  modelTryOnContainer?.addEventListener("click", e => {\n    const ModelId = e?.target?.id;\n    if (!ModelId) return;\n    if (ModelId !== "tryon_container_model_tryon_upload") handler("modelTryOn", ModelId, null);\n  });\n  const uploadTryOnContainer = document.querySelector(".tryon_container_model_tryon_upload");\n  uploadTryOnContainer?.addEventListener("click", () => {\n    handler("upload");\n  });\n  const uploadTryOnContainerSeparate = document.querySelector(".tryon_container_upload_tryon");\n  uploadTryOnContainerSeparate?.addEventListener("click", () => {\n    handler("upload");\n  });\n}\nfunction showTryOnScreen() {\n  const {\n    tryOnScreen\n  } = getHtmlElements();\n  tryOnScreen.style.display = "flex";\n}\nfunction hideTryOnScreen() {\n  const {\n    tryOnScreen\n  } = getHtmlElements();\n  tryOnScreen.style.display = "none";\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/statusPill.css\nvar styles_statusPill = __webpack_require__(3412);\n;// ./src/htmlService/styles/statusPill.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar statusPill_options = {};\n\nstatusPill_options.styleTagTransform = (styleTagTransform_default());\nstatusPill_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      statusPill_options.insert = insertBySelector_default().bind(null, "head");\n    \nstatusPill_options.domAPI = (styleDomAPI_default());\nstatusPill_options.insertStyleElement = (insertStyleElement_default());\n\nvar statusPill_update = injectStylesIntoStyleTag_default()(styles_statusPill/* default */.A, statusPill_options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_statusPill = (styles_statusPill/* default */.A && styles_statusPill/* default */.A.locals ? styles_statusPill/* default */.A.locals : undefined);\n\n;// ./src/htmlService/statusPill.js\n\n\n\nconst StatusPills = {\n  pillTypes: [{\n    type: "lighting",\n    index: 0,\n    type: {\n      default: {\n        text: "Lighting"\n      }\n    },\n    status: {\n      good: {\n        text: "Good",\n        color: "#06F93B",\n        tag: "good",\n        lightModeColor: "#00DF80"\n      },\n      avg: {\n        text: "Not Good",\n        color: "#FFC122",\n        tag: "avg",\n        lightModeColor: "#FFD21E"\n      },\n      bad: {\n        text: "Bad",\n        color: "#FF1A1A",\n        tag: "bad",\n        lightModeColor: "#F04248"\n      }\n    }\n  }, {\n    type: "position",\n    index: 1,\n    type: {\n      default: {\n        text: "Hand Position"\n      },\n      face: {\n        text: "Face Position"\n      },\n      hand: {\n        text: "Hand Position"\n      },\n      nail: {\n        text: "Hand Position"\n      }\n    },\n    status: {\n      PERFECT: {\n        text: "Perfect",\n        color: "#06F93B",\n        tag: "PERFECT",\n        lightModeColor: "#00DF80"\n      },\n      avg: {\n        text: "Better",\n        color: "#FFC122",\n        tag: "avg",\n        lightModeColor: "#FFD21E"\n      },\n      OUT: {\n        text: "Align to center",\n        color: "#FF1A1A",\n        tag: "OUT",\n        lightModeColor: "#F04248"\n      }\n    }\n  }, {\n    type: "distance",\n    index: 2,\n    type: {\n      default: {\n        text: "Hand Distance"\n      }\n    },\n    status: {\n      PERFECT: {\n        text: "Perfect",\n        color: "#06F93B",\n        tag: "PERFECT",\n        lightModeColor: "#00DF80"\n      },\n      TOO_FAR: {\n        text: "Too Far",\n        color: "#FFC122",\n        tag: "TOO_FAR",\n        lightModeColor: "#FFD21E"\n      },\n      TOO_CLOSE: {\n        text: "Too Close",\n        color: "#FF1A1A",\n        tag: "TOO_CLOSE",\n        lightModeColor: "#F04248"\n      }\n    }\n  }]\n};\nconst statusPill_ElementsList = [];\nfunction createStatusPill() {\n  const {\n    statusPill\n  } = getHtmlElements();\n  StatusPills.pillTypes.forEach(statusPillType => {\n    const ContainerDiv = document.createElement("div");\n    ContainerDiv.style.display = "none";\n    ContainerDiv.classList.add("pill-container");\n    const PillTextDiv = document.createElement("div");\n    PillTextDiv.classList.add("pill-text");\n    const PillStatusTextDiv = document.createElement("div");\n    PillStatusTextDiv.classList.add("pill-status-text");\n    ContainerDiv.appendChild(PillTextDiv);\n    ContainerDiv.appendChild(PillStatusTextDiv);\n    statusPill_ElementsList.push({\n      container: ContainerDiv,\n      pillText: PillTextDiv,\n      statusText: PillStatusTextDiv\n    });\n    statusPill.appendChild(ContainerDiv);\n  });\n}\nfunction showPills(pills) {\n  pills?.forEach(({\n    pillId,\n    pillType\n  }) => {\n    statusPill_ElementsList[pillId].container.style.display = "flex";\n    statusPill_ElementsList[pillId].pillText.innerText = StatusPills.pillTypes[pillId]?.type?.[pillType]?.text || StatusPills.pillTypes[pillId].type.default.text;\n    statusPill_ElementsList[pillId].statusText.innerText = StatusPills.pillTypes[pillId].status.PERFECT.text;\n    if (getChooseTryOnConfig()?.tryOnScreen?.mode === "light") {\n      setLightModeStyle(pillId);\n    } else {\n      setDarkModeStyle(pillId);\n    }\n  });\n}\nfunction hideAllPills() {\n  statusPill_ElementsList?.forEach(eachPill => {\n    if (eachPill?.container) {\n      eachPill.container.style.display = "none";\n    }\n  });\n}\nfunction changeStatusOfPill(pillId, pillStatus) {\n  statusPill_ElementsList[pillId].statusText.innerText = StatusPills.pillTypes[pillId].status?.[pillStatus].text;\n  if (getChooseTryOnConfig()?.tryOnScreen?.mode === "light") {\n    setLightModeStyle(pillId, pillStatus);\n  } else {\n    setDarkModeStyle(pillId, pillStatus);\n  }\n}\nfunction setLightModeStyle(pillId, pillStatus) {\n  if (!pillStatus) {\n    statusPill_ElementsList[pillId].container.style.background = `${StatusPills.pillTypes[pillId].status?.PERFECT.lightModeColor}`;\n  } else {\n    statusPill_ElementsList[pillId].container.style.background = `${StatusPills.pillTypes[pillId].status?.[pillStatus].lightModeColor}`;\n  }\n}\nfunction setDarkModeStyle(pillId, pillStatus) {\n  if (!pillStatus) {\n    statusPill_ElementsList[pillId].container.style.border = `1px solid ${StatusPills.pillTypes[pillId].status.PERFECT.color}`;\n    statusPill_ElementsList[pillId].statusText.style.color = `${StatusPills.pillTypes[pillId].status.PERFECT.color}`;\n  } else {\n    statusPill_ElementsList[pillId].container.style.border = `1px solid ${StatusPills.pillTypes[pillId].status?.[pillStatus].color}`;\n    statusPill_ElementsList[pillId].statusText.style.color = `${StatusPills.pillTypes[pillId].status?.[pillStatus].color}`;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/captureTimer.css\nvar styles_captureTimer = __webpack_require__(6062);\n;// ./src/htmlService/styles/captureTimer.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar captureTimer_options = {};\n\ncaptureTimer_options.styleTagTransform = (styleTagTransform_default());\ncaptureTimer_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      captureTimer_options.insert = insertBySelector_default().bind(null, "head");\n    \ncaptureTimer_options.domAPI = (styleDomAPI_default());\ncaptureTimer_options.insertStyleElement = (insertStyleElement_default());\n\nvar captureTimer_update = injectStylesIntoStyleTag_default()(styles_captureTimer/* default */.A, captureTimer_options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_captureTimer = (styles_captureTimer/* default */.A && styles_captureTimer/* default */.A.locals ? styles_captureTimer/* default */.A.locals : undefined);\n\n;// ./src/htmlService/captureTimer.js\n\n\nlet captureTimerDiv = null;\nlet timerDiv = null;\nlet intervalId = null;\nfunction initCaptureTimer() {\n  let {\n    captureTimer\n  } = getHtmlElements();\n  captureTimerDiv = captureTimer;\n  let captureTimerHeading = document.createElement("div");\n  captureTimerHeading.classList.add("capture-timer-heading");\n  captureTimerHeading.innerText = "Taking Picture in";\n  timerDiv = document.createElement("div");\n  timerDiv.innerText = 3;\n  timerDiv.classList.add("capture-timer-div");\n  captureTimerDiv.appendChild(captureTimerHeading);\n  captureTimerDiv.appendChild(timerDiv);\n}\n\n// export let showCaptureTimer = debounce(nativeShowCaptureTimer, 0);\n\nfunction nativeShowCaptureTimer(callback) {\n  if (intervalId) return;\n  if (!captureTimerDiv) {\n    initCaptureTimer();\n  }\n  captureTimerDiv.style.display = "flex";\n  runTimerDiv(callback, 3);\n}\nfunction hideCaptureTimer() {\n  resetTimer();\n  if (captureTimerDiv) captureTimerDiv.style.display = "none";\n}\nfunction runTimerDiv(callback, delay) {\n  let count = 0;\n  // console.log("show timer called 1", intervalId);\n  clearInterval(intervalId);\n  timerDiv.innerText = delay;\n  intervalId = setInterval(() => {\n    count++;\n    timerDiv.innerText = delay - count;\n    if (count === delay) {\n      callback();\n      clearInterval(intervalId);\n    }\n  }, 1000);\n}\nfunction captureTimer_debounce(func, delay) {\n  let timerId;\n  return function (...args) {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeout(() => func.apply(this, args), delay);\n  };\n}\nfunction changeCaptureTimerStatus(state, callback) {\n  debouncedChangeStatus(state, callback);\n}\nconst debouncedChangeStatus = captureTimer_debounce((state, callback) => {\n  if (state) nativeShowCaptureTimer(callback);else hideCaptureTimer();\n}, 50);\nfunction resetTimer() {\n  if (intervalId) {\n    clearInterval(intervalId);\n    intervalId = null;\n  }\n}\n;// ./src/MLModelProviders/Hands_landmarks_provider.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet captureTimerStatus = false;\nclass HandsLandmarkProvider {\n  canvas;\n  maskCanvas;\n  canvasCtx;\n  maskcanvasCtx;\n  video;\n  canvasData;\n  base64OrignalImageData;\n  isOnce = false;\n  image;\n  landmarks;\n  segmentationmask;\n  handedness;\n  originalWidth;\n  originalHeight;\n  offsetX;\n  offsetY;\n  clicked = false;\n  constructor(callback) {\n    this.isold = false;\n    this.callback = callback;\n    this.hands = null;\n    this.init = false;\n    this.isBeingLoaded = false;\n    this.selfieMode = false;\n    this.distanceState = -1;\n    this.prevdistanceState = -1;\n    this.positionState = -1;\n    this.prevPositionState = -1;\n    this.prevHandDetection = -1;\n    this.handDetection = -1;\n    this.isVideo = true;\n    this.runningMode = "VIDEO";\n    this.result;\n    this.lastVideoTime = -1;\n    this.canvas = document.createElement("canvas");\n    this.maskCanvas = document.createElement("canvas");\n    let contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.canvas.getContext("2d", contextAttributes);\n    this.maskcanvasCtx = this.maskCanvas.getContext("2d", contextAttributes);\n  }\n  async send(image, clicked, isVideo) {\n    this.clicked = clicked;\n    this.video = image;\n    this.isVideo = isVideo;\n    if (isVideo) {\n      this.width = this.video.videoWidth;\n      this.height = this.video.videoHeight;\n      this.originalWidth = this.video.videoWidth;\n      this.originalHeight = this.video.videoHeight;\n      let x = this.width; //360;\n      let y = this.height; //640;\n      this.offsetX = this.width; //;(this.width - x) / 2;\n      this.offsetY = this.height; //;(this.height - y) / 2;\n      // this.width = x;\n      // this.height = y;\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      if (!this.isOnce) {\n        this.canvasCtx.drawImage(image, 0, 0, this.width, this.height);\n        this.canvasData = this.canvasCtx.getImageData(0, 0, this.width, this.height);\n      }\n      if (!this.isold) {\n        if (this.lastVideoTime !== image.currentTime) {\n          this.lastVideoTime = image.currentTime;\n          this.result = this.handLandmarker.detectForVideo(image, performance.now());\n        }\n      }\n    } else {\n      // console.log(this.video.width, this.video.height);\n      this.width = this.video.width;\n      this.height = this.video.height;\n      this.originalWidth = this.video.width;\n      this.originalHeight = this.video.height;\n      this.canvas.width = this.width;\n      this.canvas.height = this.height;\n      if (!this.isOnce) {\n        this.canvasCtx.drawImage(image, 0, 0, this.width, this.height);\n        this.canvasData = this.canvasCtx.getImageData(0, 0, this.width, this.height);\n      }\n      if (!this.isold) this.result = this.handLandmarker.detect(image);\n    }\n    this.maskCanvas.width = this.width;\n    this.maskCanvas.height = this.height;\n    if (this.isold) return this.hands.send({\n      image: image\n    });else {\n      let multiHandLandmarks = this.result.landmarks;\n      let multiHandWorldLandmarks = this.result.worldLandmarks;\n      let multiHandedness = this.result.handedness;\n      this.onResults({\n        image,\n        multiHandLandmarks,\n        multiHandWorldLandmarks,\n        multiHandedness\n      });\n      return;\n      // let multiHandLandmarks = transformLandmarks(this.result.landmarks[0]);\n\n      // this.callback({\n      //   image: image,\n      //   landmarks: multiHandLandmarks,\n      //   multiHandWorldLandmarks: this.result.worldLandmarks,\n      //   handedness: this.result.handedness,\n      //   isVideo,\n      // });\n    }\n  }\n  flipImageData(data, width, height) {\n    const flippedData = new Uint8Array(data.length);\n    const rowSize = width * 4; // Assuming 4 channels (RGBA)\n\n    for (let row = 0; row < height; row++) {\n      const srcOffset = row * rowSize;\n      const destOffset = (height - row - 1) * rowSize;\n      flippedData.set(data.subarray(srcOffset, srcOffset + rowSize), destOffset);\n    }\n    return flippedData;\n  }\n  downloadScreenshotImage(src) {\n    const downloadLink = document.createElement("a");\n    downloadLink.href = src;\n    downloadLink.download = "screenshot.png"; // Specify the desired filename\n    downloadLink.style.display = "none"; // Hide the link\n    document.body.appendChild(downloadLink);\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n  }\n  async SnapNailImage() {\n    setClicked(true);\n    await new Promise(resolve => setTimeout(resolve, 200));\n    const base64ImageOrignalData = this.canvas.toDataURL("image/png");\n\n    // this.downloadScreenshotImage(base64ImageOrignalData);\n\n    await this.fetchNailImage2(base64ImageOrignalData);\n    // } catch (error) {\n    //   console.log(error);\n    //   // console.log("SnapNailImage failed:", error);\n    //   // Handle the error here\n    // }\n  }\n  fetchNailImage2 = async base64ImageCropped => {\n    const canvasPngData = base64ImageCropped; // Encodes as PNG\n    const decodedData = atob(canvasPngData.split(",")[1]);\n    const binaryData = new ArrayBuffer(decodedData.length);\n    const view = new Uint8Array(binaryData);\n    for (let i = 0; i < decodedData.length; i++) {\n      view[i] = decodedData.charCodeAt(i);\n    }\n    const imageBlob = new Blob([binaryData], {\n      type: "image/png"\n    });\n\n    // let stringAngle = this.getAllAngles();\n    // let cordinate = this.getMiddleCordinate();\n\n    //console.log("nail api hit");\n    await getNailSegmentation(imageBlob, null, null, null).then(data => {\n      try {\n        if (data.data.image === null && data.data.statusCode === 81) {\n          throw new Error(data.data.statusMessage);\n        }\n        if (data.data.isFar) {\n          throw new Error("hand is too far");\n        }\n        emitNailColorEvent("result", data.data);\n        hideAllPills();\n        hideCaptureTimer();\n        enableSettingIcon("reset");\n        enableSettingIcon("capture");\n        this.prevHandDetection = 1;\n        this.prevdistanceState = -1;\n        this.prevPositionState = -1;\n\n        // console.log(data.data);\n        let repositionAngle = data.data.angle;\n        let maskDataArray = [];\n        for (let i = 0; i < data.data.mask.length; i++) {\n          let nailPaint = data.data.mask[i];\n          var base64ImageData = "data:image/png;base64," + nailPaint;\n          const img = new Image();\n          img.onload = () => {\n            //   let alldata =data.data.mask_b64;\n            this.maskcanvasCtx.drawImage(img, 0, 0, this.width, this.height);\n            let dilatedMaskCanvas = this.dilateMask(this.maskCanvas, 30, 70); // Adjust dilation radius as needed\n\n            //Get the image data of the dilated mask canvas\n            let imageData = dilatedMaskCanvas.getContext("2d", {\n              willReadFrequently: true\n            }).getImageData(0, 0, this.width, this.height).data;\n\n            // let imageData = this.maskcanvasCtx.getImageData(\n            //   0,\n            //   0,\n            //   this.width,\n            //   this.height\n            // ).data;\n            let uint8Array = new Uint8ClampedArray(imageData.buffer);\n            let maskData = new ImageData(uint8Array, this.width, this.height);\n\n            // console.log(maskData.width);\n            let maskTexture = new three_module/* DataTexture */.GYF(this.flipImageData(maskData.data, maskData.width, maskData.height), maskData.width, maskData.height, three_module/* RGBAFormat */.GWd);\n            maskDataArray.push(maskTexture);\n            if (maskDataArray.length == data.data.mask.length) {\n              this.callback(this.image, this.landmarks, this.handedness, this.isVideo, maskDataArray, data.data.x_cord, data.data.y_cord, data.data.x2_cord, data.data.y2_cord, repositionAngle);\n            }\n          };\n          img.src = base64ImageData;\n        }\n      } catch (error) {\n        emitNailColorEvent("error", globalVariables_errorMessages.nailDetectionIssue);\n        hideAllPills();\n        hideCaptureTimer();\n        enableSettingIcon("reset");\n        this.prevHandDetection = 1;\n        errorPanel_showErrorPermissionPanel(globalVariables_errorMessages.nailDetectionIssue + error + "api response");\n      }\n    }).catch(error => {\n      if (error?.message === globalVariables_errorMessages.noInternetConnection) {\n        errorPanel_showErrorPermissionPanel(error.message);\n        return;\n      }\n      emitNailColorEvent("error", globalVariables_errorMessages.nailDetectionIssue);\n      errorPanel_showErrorPermissionPanel(globalVariables_errorMessages.nailDetectionIssue + error + "api Call");\n    });\n  };\n  dilateMask = (maskCanvas, blurRadius, threshold) => {\n    if (!maskCanvas || !maskCanvas.width || !maskCanvas.height) {\n      throw new Error("Invalid mask canvas");\n    }\n    let dilatedMaskCanvas = document.createElement("canvas");\n    let dilatedMaskCtx = dilatedMaskCanvas.getContext("2d", {\n      willReadFrequently: true\n    });\n    dilatedMaskCanvas.width = maskCanvas.width;\n    dilatedMaskCanvas.height = maskCanvas.height;\n\n    // Draw the original mask onto the dilated mask canvas\n    dilatedMaskCtx.drawImage(maskCanvas, 0, 0);\n\n    // Apply Gaussian blur to smooth the mask edges\n    dilatedMaskCtx.filter = `blur(${blurRadius}px)`;\n    dilatedMaskCtx.drawImage(maskCanvas, 0, 0);\n\n    // Apply threshold to enhance mask edges\n    let imageData = dilatedMaskCtx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);\n    let pixels = imageData.data;\n    for (let i = 0; i < pixels.length; i += 4) {\n      let gray = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3; // Convert to grayscale\n      pixels[i] = pixels[i + 1] = pixels[i + 2] = gray > threshold ? 255 : 0; // Apply threshold\n    }\n    dilatedMaskCtx.putImageData(imageData, 0, 0);\n\n    // Clear filter for future operations\n    dilatedMaskCtx.filter = "none";\n    return dilatedMaskCanvas;\n  };\n  onResults({\n    image,\n    multiHandLandmarks,\n    multiHandWorldLandmarks,\n    multiHandedness\n  }) {\n    // console.log("onResults");\n    if (getCurrentTryon().usesCaptureUI) {\n      if (this.clicked && this.landmarks) return;\n      let detectmessage;\n      if (image != null && (!multiHandLandmarks || multiHandLandmarks && !multiHandLandmarks[0])) {\n        this.handDetection = 1;\n        detectmessage = "OUT";\n        changeStatusOfPill(1, "OUT");\n        changeStatusOfPill(2, "TOO_FAR");\n      } else {\n        this.handDetection = 0;\n        detectmessage = "PERFECT";\n      }\n      if (this.prevHandDetection != this.handDetection) {\n        let json = {\n          state: this.handDetection,\n          message: detectmessage\n        };\n        emitNailColorEvent("handDetection", json);\n        this.prevHandDetection = this.handDetection;\n      }\n      if (image != null && multiHandLandmarks != null) {\n        // multiHandLandmarks = transformLandmarks(multiHandLandmarks[0]);\n\n        multiHandedness = multiHandedness;\n        this.image = image;\n        this.landmarks = multiHandLandmarks[0];\n        this.segmentationmask = multiHandWorldLandmarks;\n        this.handedness = multiHandedness;\n        this.callback(image, multiHandLandmarks[0], multiHandWorldLandmarks, multiHandedness);\n        if (this.landmarks && this.isVideo) {\n          this.calculateDistance(this.landmarks[5].x, this.landmarks[17].x, this.landmarks[5].y, this.landmarks[17].y);\n          this.categorizePosition(this.landmarks[9].x, this.landmarks[9].y);\n          //console.log(this.landmarks[9].x, this.landmarks[9].y);\n        } else {\n          this.positionState = 1;\n          let json = {\n            state: this.positionState,\n            message: "OUT"\n          };\n          if (this.prevPositionState != this.positionState) {\n            emitNailColorEvent("position", json);\n            this.prevPositionState = this.positionState;\n          }\n          this.distanceState = 2;\n          let json1 = {\n            state: this.distanceState,\n            message: "TOO_FAR"\n          };\n          if (this.prevdistanceState != this.distanceState) {\n            emitNailColorEvent("distance", json1);\n            this.prevdistanceState = this.distanceState;\n          }\n        }\n      }\n      if (!captureTimerStatus && this.prevHandDetection === 0 && this.prevdistanceState === 0 && this.prevPositionState === 0) {\n        captureTimerStatus = true;\n        changeCaptureTimerStatus(true, timercallback);\n      } else if (captureTimerStatus && (this.prevHandDetection !== 0 || this.prevdistanceState !== 0 || this.prevPositionState !== 0)) {\n        captureTimerStatus = false;\n        changeCaptureTimerStatus(false, timercallback);\n      }\n    } else {\n      this.landmarks = hand_landmarks_helpers_transformLandmarks(multiHandLandmarks[0]);\n      this.handedness = multiHandedness;\n      this.callback(this.image, this.landmarks, this.handedness, this.isVideo, "maskDataArray");\n    }\n  }\n  focalLength(depthToFace, eyeToEye, eyeToEyeInPixel) {\n    return eyeToEyeInPixel * depthToFace / eyeToEye;\n  }\n\n  // Function to find distance based on focal length, eye-to-eye in pixels, and width calculated\n  distanceFinder(focalLength, eyeToEyeInPixel, widthCalculated) {\n    var distance = eyeToEyeInPixel * focalLength / widthCalculated;\n    return distance - 6;\n  }\n\n  // Function to categorize depth based on distance\n  categorizeDepth(distance) {\n    let smallThreshold;\n    let mediumThreshold;\n    smallThreshold = 80000;\n    mediumThreshold = 160000;\n    if (isMobileDevice()) {\n      smallThreshold = 50000;\n      mediumThreshold = 100000;\n    }\n    let msg = null;\n    //console.log("distance", distance);\n    if (distance < smallThreshold) {\n      this.distanceState = 1;\n      //emitRecognizationDistanceAlert("TOO_CLOSE");\n      msg = "TOO_CLOSE";\n      // showDistanceMessagePanel();\n      // setDistanceMsg("Too Close");\n    } else if (distance > mediumThreshold) {\n      this.distanceState = 2;\n      //emitRecognizationDistanceAlert("TOO_FAR");\n      msg = "TOO_FAR";\n      // showDistanceMessagePanel();\n      // setDistanceMsg("Too far");\n    } else {\n      this.distanceState = 0;\n      //emitRecognizationDistanceAlert("PERFECT");\n      msg = "PERFECT";\n      //hideDistanceMessagePanel();\n    }\n    if (this.distanceState !== this.prevdistanceState) {\n      if (msg) {\n        let json = {\n          state: this.distanceState,\n          message: msg\n        };\n        emitNailColorEvent("distance", json);\n        changeStatusOfPill(2, msg);\n        //emitRecognizationDistanceAlert(msg);\n      }\n      this.prevdistanceState = this.distanceState;\n    }\n    return distance > smallThreshold && distance < mediumThreshold ? false : true;\n  }\n  categorizePosition(xdist, ydist) {\n    const xMinThresold = 0.35;\n    const xMaxThresold = 0.65;\n    const yMinThresold = 0.35;\n    const yMaxThresold = 0.9;\n    let msg = null;\n    //console.log("distance", distance);\n    if (xdist > xMinThresold && xdist < xMaxThresold && ydist > yMinThresold && ydist < yMaxThresold) {\n      this.positionState = 0;\n      msg = "PERFECT";\n    } else {\n      this.positionState = 1;\n      msg = "OUT";\n    }\n    if (this.positionState !== this.prevPositionState) {\n      if (msg) {\n        let json = {\n          state: this.positionState,\n          message: msg\n        };\n        emitNailColorEvent("position", json);\n        changeStatusOfPill(1, msg);\n      }\n      this.prevPositionState = this.positionState;\n    }\n  }\n  calculateDistance(lefteye, righteyes, lefteyeY, righteyesY) {\n    const eyeToEye = 13.0;\n    const depthToFace = 48.0;\n    const eyeToEyeInPixel = 384.5;\n\n    // Calculate focal length\n    const calculatedFocalLength = this.focalLength(depthToFace, eyeToEye, eyeToEyeInPixel);\n\n    // Calculate eye measurement (assuming x_300 and x_70 are defined)\n    let x_300 = lefteye;\n    let x_70 = righteyes;\n    let y_300 = lefteyeY;\n    let y_70 = righteyesY;\n    let distance;\n    if (Math.abs(x_300 - x_70) > Math.abs(y_300 - y_70)) {\n      distance = Math.abs(x_300 - x_70);\n    } else {\n      distance = Math.abs(y_300 - y_70);\n    }\n    const eyeMeasurement = distance; //Math.abs(x_300 - x_70);\n\n    // Calculate distance\n    const calculatedDistance = this.distanceFinder(calculatedFocalLength, eyeToEye, eyeMeasurement);\n\n    // Categorize depth based on distance\n    const categorizedDepth = this.categorizeDepth(calculatedDistance);\n  }\n  async createHandLandmark() {\n    try {\n      const response = await fetch(`${"https://cdn.pixelbin.io/v2/glamar-fynd-835885/"}original/glamar-ml-models/hand_landmarker.task`);\n      if (!response.ok) {\n        throw new Error("Failed to fetch the model file from CDN");\n        return;\n      }\n      const vision = await vision_bundle/* FilesetResolver */.Ps.forVisionTasks(`${PUBLIC_PATH}/mediapipe/task-vision/wasm`);\n      this.handLandmarker = await vision_bundle/* HandLandmarker */.Vb.createFromOptions(vision, {\n        baseOptions: {\n          modelAssetPath: response.url,\n          delegate: "GPU"\n        },\n        runningMode: this.runningMode,\n        numHands: 1\n      });\n      this.init = true;\n      //console.log("success");\n    } catch (error) {\n      errorPanel_showErrorPermissionPanel();\n      this.init = false;\n      //console.log("error");\n      // Handle errors here\n      // console.error("Error in createImageSegmenter:", error);\n      // You might want to throw the error again to propagate it to the caller\n      //throw error;\n    }\n  }\n  async initialize() {\n    if (this.isold) {\n      await this.initializeOld();\n    } else {\n      await this.createHandLandmark();\n    }\n  }\n  async initializeOld() {\n    this.isBeingLoaded = true;\n    let onResults = this.onResults.bind(this);\n    this.hands = new hands.Hands({\n      locateFile: file => {\n        // console.log(file);\n        let url = `${PUBLIC_PATH}/mediapipe/hands/${file}`;\n        return url;\n      }\n    });\n    this.hands.setOptions({\n      selfieMode: true,\n      maxNumHands: 1,\n      modelComplexity: 1,\n      minDetectionConfidence: 0.5,\n      minTrackingConfidence: 0.5\n    });\n    this.selfieMode = true;\n    this.hands.onResults(onResults);\n    await this.hands.initialize();\n    this.init = true;\n    this.isBeingLoaded = false;\n  }\n  IsBeingLoaded() {\n    return this.isBeingLoaded;\n  }\n  IsInit() {\n    return this.init;\n  }\n  async setSelfieMode(state) {\n    if (!this.IsInit()) return;\n    if (this.isold) {\n      this.hands.setOptions({\n        selfieMode: state\n      });\n    } else {\n      if (this.getState() === state) return;\n      if (state) this.runningMode = "VIDEO";else this.runningMode = "IMAGE";\n\n      // console.error(this.runningMode);\n      await this.handLandmarker.setOptions({\n        runningMode: this.runningMode\n      });\n    }\n  }\n  getState() {\n    if (this.runningMode === "IMAGE") return false;else return true;\n  }\n  reset() {\n    this.hands.reset();\n  }\n  async close() {\n    await this.hands.close();\n  }\n}\n;// ./src/MLModelProviders/nailmask_provider.js\n\n\n// import cv from \'@techstark/opencv-js\';\n\n\n\n\nclass NailMaskProvider {\n  canvas;\n  maskCanvas;\n  canvasCtx;\n  maskcanvasCtx;\n  video;\n  canvasData;\n  base64OrignalImageData;\n  isOnce = false;\n  constructor(callback) {\n    this.callback = callback;\n    this.canvas = document.createElement("canvas");\n    this.maskCanvas = document.createElement("canvas");\n    let contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.canvas.getContext("2d", contextAttributes);\n    this.maskcanvasCtx = this.maskCanvas.getContext("2d", contextAttributes);\n  }\n  imageSegmenter;\n  labels;\n  image;\n  runningMode = "VIDEO";\n  async callbackForVideo() {\n    this.callback({\n      image: this.canvas\n    });\n  }\n  async send(video) {\n    this.video = video;\n    this.canvas.width = video.videoWidth;\n    this.canvas.height = video.videoHeight;\n    this.maskCanvas.width = video.videoWidth;\n    this.maskCanvas.height = video.videoHeight;\n    // console.log("width",video.videoWidth,video.videoHeight)\n    if (!this.isOnce) {\n      this.canvasCtx.drawImage(video, 0, 0, video.videoWidth, video.videoHeight);\n      this.canvasData = this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height);\n      let startTimeMs = performance.now();\n    }\n\n    // this.callback({\n    //     image: this.canvas,isMask: 0\n    //   });\n  }\n  async createImageSegmenter() {\n    // console.log("Initilize imageSegmenter");\n  }\n  async downloadSnap() {\n    // Down load image\n    // console.log("Download image");\n    const link = document.createElement("a");\n    link.href = this.canvas.toDataURL();\n    link.download = "nailSnap.jpg";\n    link.click();\n  }\n  dataURLtoBlob(dataURL) {\n    // Split the data URL to get the MIME type and data\n    const parts = dataURL.split(";base64,");\n    const contentType = parts[0].split(":")[1];\n    const base64Data = parts[1];\n\n    // Convert the base64 data to a Uint8Array\n    const arrayBuffer = Uint8Array.from(atob(base64Data), c => c.charCodeAt(0));\n\n    // Create a Blob from the Uint8Array with the specified content type\n    return new Blob([arrayBuffer], {\n      type: contentType\n    });\n  }\n  fetchNailImage2 = (color = "b76e79") => {\n    const base64ImageOrignalData = this.canvas.toDataURL("image/jpeg");\n    const imageBlob = new Blob([base64ImageOrignalData.replace(/^data:image\\/jpeg;base64,/, "")], {\n      type: "image/jpeg"\n    });\n    getNailSegmentation(imageBlob, color).then(data => {\n      try {\n        // let nailPaint = data.data.mask[0] ;\n        let nailPaint = data.data.mask_b64;\n        var base64ImageData = "data:image/png;base64," + nailPaint;\n        const img = new Image();\n        img.onload = () => {\n          this.maskcanvasCtx.drawImage(img, 0, 0, this.video.videoWidth, this.video.videoHeight);\n\n          // let imageData = this.maskcanvasCtx.getImageData(\n          //   0,\n          //   0,\n          //   this.video.videoWidth,\n          //   this.video.videoHeight\n          // ).data;\n          // let uint8Array = new Uint8ClampedArray(imageData.buffer);\n          // let maskData = new ImageData(\n          //   uint8Array,\n          //   this.video.videoWidth,\n          //   this.video.videoHeight\n          // );\n\n          // this.canvasCtx.drawImage(img, 0, 0);\n          // console.log("fetch mask result");\n          this.callback({\n            image: this.canvas,\n            isMask: 1,\n            maskData: this.maskCanvas\n          });\n        };\n        img.src = base64ImageData; // base64ImageData;//base64ImageOrignalData\n        // console.log("fetch mask called");\n      } catch (error) {\n        // console.error("Invalid API response data. Please enter valid JSON.");\n        return;\n      }\n    }).catch(error => {\n      // showSnackbar(error).then(() => {\n      //   setTimeout(() => {\n      //     //emitModuleClosed();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      if (error?.message === errorMessages.noInternetConnection) {\n        errorPanel_showErrorPermissionPanel(error.message);\n        return;\n      }\n      errorPanel_showErrorPermissionPanel(error?.msg);\n    });\n  };\n  async initialize() {\n    // console.log("called init");\n\n    await this.createImageSegmenter();\n  }\n}\n;// ./src/apiService/api-faceAnalysis.js\n\n\n\n\n\n\nconst api_faceAnalysis_APINail = axios_default().create({\n  // baseURL: `${environment.SNELLO_URL}/api/v1/core/sdk/`,\n  baseURL: `https://skin.glamarz0.de/`,\n  headers: {\n    // \'Content-Type\': \'application/json\',\n    //Source: "web",\n    // "ngrok-skip-browser-warning": "your-custom-value", // for skiping the  ngrok in between page\n  }\n});\nconst api_faceAnalysis_setAuthorization = () => {\n  api_faceAnalysis_APINail.defaults.headers["Authorization"] = getAPIKey();\n};\nconst sendPoreSegmentation = imageFile => {\n  const formData = new FormData();\n  formData.append("image", imageFile);\n  const headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  return api_faceAnalysis_APINail.post("/pore", formData, {\n    headers: headers\n  }).then(response => {\n    return response;\n  }).catch(error => {\n    //console.error("Error fetching helth data:", error);\n    throw error;\n  });\n};\nconst sendAcneSegmentation = imageFile => {\n  const formData = new FormData();\n  formData.append("image", imageFile);\n  const headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  return api_faceAnalysis_APINail.post("/acne", formData, {\n    headers: headers\n  }).then(response => {\n    return response;\n  }).catch(error => {\n    //console.error("Error fetching helth data:", error);\n    throw error;\n  });\n};\n\n// export const sendFaceAnalysisSegmentation = (imageFile, endpoint) => {\n//   console.log("hitting api", endpoint);\n//   const formData = new FormData();\n//   formData.append("image", imageFile);\n//   console.log("hitting api with form data", formData);\n\n//   const headers = {\n//     "Content-Type": "multipart/form-data",\n//   };\n//   return APINail.post("/" + endpoint, formData, { headers: headers })\n//     .then((response) => {\n//       console.log("api success", response);\n//       return response;\n//     })\n//     .catch((error) => {\n//       console.error("Error fetching api data:", error);\n//       return error;\n//     });\n// };\n\nconst sendFaceAnalysisSegmentation = (imageFile, endpoint) => {\n  // console.log("hitting api", endpoint);\n  // console.log("hitting api with file image", imageFile);\n  let formData = new FormData();\n  formData.append("image", imageFile);\n  //console.log("hitting api with form data", formData);\n\n  const headers = {\n    "Content-Type": "multipart/form-data"\n  };\n  const timeout = 120000; // 120 seconds timeout (adjust as needed)\n\n  return api_faceAnalysis_APINail.post("/" + endpoint, formData, {\n    headers: headers,\n    timeout: timeout\n  }).then(response => {\n    // console.log("api success", response);\n    return response;\n  }).catch(error => {\n    // Handle timeout or other errors here\n    if (axios_default().isCancel(error)) {\n      // console.error("Request timed out:", error);\n    } else {\n      // console.error("Error sending request:", error);\n    }\n    // showSnackbar(errorMessages.faceAnalysisIssue).then(() => {\n    //   setTimeout(() => {\n    //     //emitModuleClosed();\n    //     hideSnackbar();\n    //   }, 2000);\n    // });\n    errorPanel_showErrorPermissionPanel(globalVariables_errorMessages.faceAnalysisIssue);\n    emitFaceAnalysisEvent("error", globalVariables_errorMessages.faceAnalysisIssue);\n    throw error; // Rethrow the error to propagate it further if needed\n  });\n};\nconst checkHelth = () => {\n  return api_faceAnalysis_APINail.get("/_healthz").then(response => {\n    return response;\n  }).catch(error => {\n    //console.error("Error fetching helth data:", error);\n    throw error;\n  });\n};\n;// ./src/assets/svg/Camera_denied.svg\n/* harmony default export */ const Camera_denied = (__webpack_require__.p + "assets/src/assets/svg/Camera_denied.svg");\n;// ./src/htmlService/cameraPermissionPanel.js\n\n\nlet cameraPermissionPanel_Panel = null;\nlet cameraPermissionPanel_msg = null;\nlet cameraPermissionPanel_img = null;\nlet cameraPermissionPanel_btn = null;\nfunction hideCameraPermissionPanel() {\n  cameraPermissionPanel_Panel.style.display = "none";\n}\nfunction showCameraPermissionPanel(url) {\n  cameraPermissionPanel_Panel.style.display = "flex";\n}\nfunction setCameraPermissionElement(handler) {\n  cameraPermissionPanel_Panel = document.querySelector(".camera-permission-panel");\n  cameraPermissionPanel_msg = document.querySelector(".camera-permission-message");\n  cameraPermissionPanel_img = document.getElementById("camera-permission-icon");\n  cameraPermissionPanel_btn = document.getElementById("camera-permission-btn");\n  cameraPermissionPanel_img.src = Camera_denied;\n  cameraPermissionPanel_msg.innerHTML = globalVariables_errorMessages.cameraPermissionNotGranted;\n  cameraPermissionPanel_btn.addEventListener("click", () => {\n    handleCameraPermissionClickEvent(handler);\n  });\n}\nvar handleCameraPermissionClickEvent = handler => {\n  handler();\n};\n;// ./src/htmlService/billingPanel.js\n\n\nlet billingPanel_Panel = null;\nlet billingPanel_msg = null;\nlet billingPanel_img = null;\nlet billingPanel_btn = null;\nfunction hideBillingPanel() {\n  billingPanel_Panel.style.display = "none";\n}\nfunction showBillingPanel(message = globalVariables_errorMessages.billingIssue) {\n  billingPanel_Panel.style.display = "flex";\n  billingPanel_msg.innerHTML = message;\n}\nfunction setBillingElement(handler) {\n  billingPanel_Panel = document.querySelector(".billing-panel");\n  billingPanel_msg = document.querySelector(".billing-message");\n  billingPanel_img = document.getElementById("billing-icon");\n  billingPanel_btn = document.getElementById("billing-btn");\n  billingPanel_img.src = svg_Error;\n  billingPanel_msg.innerHTML = globalVariables_errorMessages.cameraPermissionNotGranted;\n  billingPanel_btn.addEventListener("click", () => {\n    handleBillingClickEvent(handler);\n  });\n  hideBillingPanel();\n}\nvar handleBillingClickEvent = handler => {\n  handler();\n};\n;// ./src/assets/svg/compare_icon1.svg\n/* harmony default export */ const compare_icon1 = (__webpack_require__.p + "assets/src/assets/svg/compare_icon1.svg");\n;// ./src/htmlService/comparisonSlider.js\n\n// import comparisonIcon from "../assets/svg/compare_icon.svg";\n\n\nlet isDragging = false;\nlet comparisonSlider_dragContainer = null;\nlet comparisonSlider_dragLineSpan = null;\nlet comparisonSlider_video_Container = null;\nlet dragBtnIcon = null;\nlet isSliderVisible = false;\nfunction addComparisonSliderEvents(video_container) {\n  comparisonSlider_dragContainer = document.querySelector(".drag-container");\n  comparisonSlider_dragLineSpan = document.querySelector(".drag-line-container");\n  dragBtnIcon = document.querySelector(".drag-btn-icon");\n  dragBtnIcon.style.backgroundImage = `url(${compare_icon1})`;\n  comparisonSlider_video_Container = video_container;\n  comparisonSlider_dragLineSpan.addEventListener("mousedown", function (e) {\n    isDragging = true;\n  });\n  comparisonSlider_dragLineSpan.addEventListener("touchstart", function (e) {\n    isDragging = true;\n  });\n  comparisonSlider_dragContainer.addEventListener("mousemove", function (e) {\n    if (isDragging) {\n      if (sdkEngine_getIsVideo()) {\n        if (e?.clientX <= 64) {\n          //restricting dragging in left\n          comparisonSlider_video_Container.style.clipPath = `inset(0 0 0 ${comparisonSlider_dragContainer?.clientWidth - 64}px)`;\n          comparisonSlider_dragLineSpan.style.left = `${64}px`;\n        } else if (e?.clientX >= comparisonSlider_dragContainer?.clientWidth - 78) {\n          //restricting dragging in right\n          comparisonSlider_video_Container.style.clipPath = `inset(0 0 0 ${78}px)`;\n          comparisonSlider_dragLineSpan.style.left = `${comparisonSlider_dragContainer?.clientWidth - 78}px`;\n        } else {\n          comparisonSlider_video_Container.style.clipPath = `inset(0 0 0 ${comparisonSlider_dragContainer?.clientWidth - e?.clientX}px)`;\n          comparisonSlider_dragLineSpan.style.left = `${e?.clientX}px`;\n        }\n      } else {\n        if (e?.clientX <= 64) {\n          //restricting dragging in left\n          comparisonSlider_video_Container.style.clipPath = `inset(0 ${comparisonSlider_dragContainer?.clientWidth - 64}px 0 0)`;\n          comparisonSlider_dragLineSpan.style.left = `${64}px`;\n        } else if (e?.clientX >= comparisonSlider_dragContainer?.clientWidth - 78) {\n          //restricting dragging in right\n          comparisonSlider_video_Container.style.clipPath = `inset(0 ${78}px 0 0)`;\n          comparisonSlider_dragLineSpan.style.left = `${comparisonSlider_dragContainer?.clientWidth - 78}px`;\n        } else {\n          comparisonSlider_video_Container.style.clipPath = `inset(0 ${comparisonSlider_dragContainer?.clientWidth - e?.clientX}px 0 0)`;\n          comparisonSlider_dragLineSpan.style.left = `${e?.clientX}px`;\n        }\n      }\n    }\n  });\n  comparisonSlider_dragContainer.addEventListener("touchmove", function (e) {\n    if (isDragging) {\n      if (e.touches && e.touches.length) {\n        if (sdkEngine_getIsVideo()) {\n          comparisonSlider_video_Container.style.clipPath = `inset(0 0 0 ${comparisonSlider_dragContainer?.clientWidth - e?.touches[0]?.clientX}px)`;\n          comparisonSlider_dragLineSpan.style.left = `${e?.touches[0]?.clientX}px`;\n        } else {\n          comparisonSlider_video_Container.style.clipPath = `inset(0 ${comparisonSlider_dragContainer?.clientWidth - e?.touches[0]?.clientX}px 0 0)`;\n          comparisonSlider_dragLineSpan.style.left = `${e?.touches[0]?.clientX}px`;\n        }\n      }\n    }\n  });\n  comparisonSlider_dragContainer.addEventListener("mouseup", function (e) {\n    isDragging = false;\n  });\n  comparisonSlider_dragContainer.addEventListener("mouseleave", function (e) {\n    isDragging = false;\n  });\n  comparisonSlider_dragContainer.addEventListener("touchend", function (e) {\n    isDragging = false;\n  });\n  comparisonSlider_dragContainer.addEventListener("touchcancel", function (e) {\n    isDragging = false;\n  });\n}\nfunction showComparisonSlider(initialSliderPos = "50%", showDrag = "block") {\n  isSliderVisible = true;\n  comparisonSlider_dragContainer.style.display = showDrag;\n  comparisonSlider_video_Container.style.visibility = "visible";\n  resetComparisonSlider();\n}\nfunction resetComparisonSlider(initialSliderPos = "50%", comparisonState, isvideo) {\n  //console.error("resetComparisonSlider");\n  if (comparisonState === 1) initialSliderPos = "0%";\n  if (sdkEngine_getIsVideo()) {\n    comparisonSlider_video_Container.style.clipPath = `inset(0 0 0 ${initialSliderPos})`;\n    comparisonSlider_dragLineSpan.style.left = `${initialSliderPos}`;\n    comparisonSlider_video_Container.style.transform = "scaleX(1)";\n  } else {\n    comparisonSlider_video_Container.style.clipPath = `inset(0 ${initialSliderPos} 0 0)`;\n    comparisonSlider_dragLineSpan.style.left = `${initialSliderPos}`;\n    comparisonSlider_video_Container.style.transform = "scaleX(1)";\n  }\n}\nfunction toggleComparisonSlider() {\n  if (isSliderVisible) {\n    hideComparisonSlider();\n    isSliderVisible = false;\n    emitInteractionUI("comparison", "closed");\n  } else {\n    showComparisonSlider();\n    isSliderVisible = true;\n    emitInteractionUI("comparison", "opened");\n  }\n}\nfunction hideComparisonSlider() {\n  isSliderVisible = false;\n  resetComparisonSlider();\n  comparisonSlider_dragContainer.style.display = "none";\n  comparisonSlider_video_Container.style.visibility = "hidden";\n}\n;// ./src/env.js\n\nlet environment = window._conf || {\n  // ENV: "dev",\n  WASM_BUILD_URL: "https://cdn-1.glamar.io/js/wasm/v0.1.42",\n  GlamAR_CDN: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/",\n  HIDAN_MAIN_URL: `https://api.pixelbin.io/service/${getPlatformMode()}/misc/`,\n  //z0\n  BILLING_MAIN_URL: "https://api.pixelbin.io/service/private/billing/v1.0",\n  GOKU_URL: "https://nail.glamar.io",\n  //Development\n  // WASM_BUILD_URL: "https://cdn-1.glamaz0.de/js/wasm/v0.1.42",\n  // GlamAR_CDN: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/",\n  // HIDAN_MAIN_URL: `https://api.pixelbinz0.de/service/${getPlatformMode()}/misc/v1.0`, //z0\n  // BILLING_MAIN_URL: "https://api.pixelbinz0.de/service/private/billing/v1.0",\n  // GOKU_URL: "https://nail.glamarz0.de",\n\n  sdkname: ""\n};\nfunction updateEnvironmentURL() {\n  // environment.HIDAN_MAIN_URL = `https://api.pixelbinz0.de/service/${getPlatformMode()}/misc/v1.0`;\n  environment.HIDAN_MAIN_URL = `https://api.pixelbin.io/service/${getPlatformMode()}/misc/`;\n}\n/* harmony default export */ const env = ((/* unused pure expression or super */ null && (environment)));\n;// ./src/moduleConfig/moduleConfig.js\n\n\n\n\n\n\n\n\n\n\nconst fetchModuleConfig = async sceneManager => {\n  let errorOccurred = false;\n  let subscriptionIssueOccurred = false;\n  let currentmessage;\n  let modelApiArray;\n\n  //console.log(getCurrentTryon());\n  modelApiArray = CategoriesTypes?.map(eachModelCategory => {\n    return getModelsConfig(getAPIVersion() === "v2.0" ? getCurrentTryon().modelCategoryV2 : getCurrentTryon().modelCategory, getAPIVersion() === "v2.0" ? getCurrentTryon().bodyType : getCurrentTryon().modelSubCategory, "desktop").catch(error => {\n      if (error.response && error.response.status && error.response.status === 403) {\n        emitSubscriptionIssue(error.response.data);\n        subscriptionIssueOccurred = true;\n      } else {\n        if (error.response && error.response.data && error.response.data.error) currentmessage = error.response.data.error;else currentmessage = error.message;\n      }\n      // emitSubscriptionIssue(error.response.data); // Emitting issue r\n\n      // showSnackbar(currentmessage).then(() => {\n      //   setTimeout(() => {\n      //     //CloseModule();\n      //     hideSnackbar();\n      //   }, 2000);\n      // });\n      errorOccurred = true; // Set flag to true indicating an error occurred\n    });\n  });\n  let res = await Promise.all(modelApiArray);\n  if (errorOccurred) {\n    if (subscriptionIssueOccurred) showBillingPanel(globalVariables_errorMessages.billingIssue);\n    // showSnackbar(currentmessage).then(() => {\n    //   setTimeout(() => {\n    //     hideSnackbar();\n    //   }, 2000);\n    // });\n    else errorPanel_showErrorPermissionPanel(currentmessage);\n    return;\n  }\n  if (res?.some(response => response?.data?.status === "403")) {\n    // If any response has status code 403\n    emitInitComplete();\n    emitSubscriptionIssue(res.find(response => response?.data?.status === "403")?.data); // Emitting issue related to first occurrence of 403 status\n    const errorMessage = res.find(response => response?.data?.status === "403")?.data?.message || "SKU configuration failed due to an error.";\n    showBillingPanel(globalVariables_errorMessages.billingIssue);\n    // showSnackbar(errorMessage).then(() => {\n    //   setTimeout(() => {\n    //     //CloseModule();\n    //     hideSnackbar();\n    //   }, 2000);\n    // });\n    // You can return here or perform any other necessary actions\n  } else {\n    let modelsdata = res?.map(eachResponse => eachResponse?.data);\n    sceneManager.setModelAPIResponse(modelsdata);\n\n    //buildTryOnScreen(sceneManager.getModelData(), tryOnEventHandler);\n    //createModels(sceneManager.getModelData(), modelsEventHandler);\n    emitInitComplete();\n  }\n};\n;// ./src/makeupVTOs/face-analysis/faceAnalysis.js\n\n\n\n\n\n\n\n\n\n\n\n\n// export async function faceAnalysisSnapShot() {\n//   if (getSceneManagerInstance()) {\n//     const ss = getSceneManagerInstance().takeScreenShot();\n//     //console.log("screenshot successfull");\n//     const imageBlob = new Blob([ss.replace(/^data:image\\/jpeg;base64,/, "")], {\n//       type: "image/jpeg",\n//     });\n//     //console.log("image capture success for face analysis");\n//     let errorOccurred;\n//     let ApiName = [\n//       "skinreport",\n//       // "pore",\n//       // "acne",\n//       // "wrinkles",\n//       // "eyebag",\n//       // "darkcircles",\n//     ];\n//     try {\n//       let modelApiArray = ApiName?.map((eachapi) => {\n//         return sendFaceAnalysisSegmentation(imageBlob, eachapi).catch(\n//           (error) => {\n//             // errorOccurred = true;\n//             // console.error("Error occurred for API:", eachapi, error);\n//           }\n//         );\n//       });\n//       setClicked(true);\n\n//       if (errorOccurred) {\n//         showSnackbar(currentmessage).then(() => {\n//           setTimeout(() => {\n//             //CloseModule();\n//             hideSnackbar();\n//           }, 2000);\n//         });\n//         return;\n//       }\n\n//       Promise.all(modelApiArray)\n//         .then((res) => {\n//           const faceAnalysisData = res?.map(\n//             (eachResponse) => eachResponse?.data\n//           );\n//           emitFaceAnalysisEvent("result", faceAnalysisData);\n//         })\n//         .catch((error) => {});\n//     } catch (error) {}\n//   }\n// }\n\nasync function faceAnalysisSnapShot() {\n  if (getSceneManagerInstance()) {\n    const ss = getSceneManagerInstance().takeScreenShot();\n    //console.log("screenshot successfull");\n    const imageBlob = new Blob([ss.replace(/^data:image\\/jpeg;base64,/, "")], {\n      type: "image/jpeg"\n    });\n    //console.log("image capture success for face analysis");\n    let errorOccurred;\n    let ApiName = ["skinreport"\n    // "pore",\n    // "acne",\n    // "wrinkles",\n    // "eyebag",\n    // "darkcircles",\n    ];\n    try {\n      setClicked(true);\n      let res = await sendFaceAnalysisSegmentation(imageBlob, "skinreport");\n      // if any error occurs that want to catch it. other wise\n      // want to take the response from above api and add it to\n      emitFaceAnalysisEvent("result", res.data);\n    } catch (error) {\n      // console.log(error);\n    }\n  }\n}\nasync function openFaceAnalysis() {\n  const {\n    canvas\n  } = getHtmlElements();\n  setTrackingMode(TrackingMode.Face);\n  if (getTrackingMode() === TrackingMode.Face) {\n    if (!getProviders().facemeshLandmarksProvider) {\n      setProvider("face", new FacemeshLandmarksProvider(onLandmarks, canvas));\n      await getProviders().facemeshLandmarksProvider.initialize();\n    } else {\n      getProviders().facemeshLandmarksProvider.setSelfieMode(sdkEngine_getIsVideo);\n    }\n  }\n  onClearClick();\n  hideModelContainer();\n  // hideOptionsContainer();\n  // if (isConfigContainerActive()) toggleOptionsButton(3);\n  hideConfigContainer();\n  tryOnEventHandler("live");\n  let faceanalysisapiResponse = faceAnalysisSkuConfig;\n  setCurrentTryon(faceanalysisapiResponse.sku.subCategory.toLowerCase());\n  // console.log(faceanalysisapiResponse);\n\n  if (getSceneManagerInstance()) {\n    getSceneManagerInstance().setAPIResponse(faceanalysisapiResponse);\n  }\n}\nasync function closeFaceAnalysis() {\n  onClearClick();\n  if (!globalVariables_isShouldHideInternalUI()) {\n    // showOptionsContainer();\n    showModelContainer();\n  }\n}\nasync function resetFaceAnalysis() {\n  onClearClick();\n}\n;// ./src/assets/svg/arrowLeft.svg\n/* harmony default export */ const arrowLeft = (__webpack_require__.p + "assets/src/assets/svg/arrowLeft.svg");\n;// ./src/assets/svg/crossIcon.svg\n/* harmony default export */ const crossIcon = (__webpack_require__.p + "assets/src/assets/svg/crossIcon.svg");\n;// ./src/assets/svg/crossIconBlack.svg\n/* harmony default export */ const crossIconBlack = (__webpack_require__.p + "assets/src/assets/svg/crossIconBlack.svg");\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/navigationButtons.css\nvar navigationButtons = __webpack_require__(2262);\n;// ./src/htmlService/styles/navigationButtons.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar navigationButtons_options = {};\n\nnavigationButtons_options.styleTagTransform = (styleTagTransform_default());\nnavigationButtons_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      navigationButtons_options.insert = insertBySelector_default().bind(null, "head");\n    \nnavigationButtons_options.domAPI = (styleDomAPI_default());\nnavigationButtons_options.insertStyleElement = (insertStyleElement_default());\n\nvar navigationButtons_update = injectStylesIntoStyleTag_default()(navigationButtons/* default */.A, navigationButtons_options);\n\n\n\n\n       /* harmony default export */ const styles_navigationButtons = (navigationButtons/* default */.A && navigationButtons/* default */.A.locals ? navigationButtons/* default */.A.locals : undefined);\n\n;// ./src/htmlService/navigationButtons.js\n\n\n\n\n\n\nlet LeftIconContainer = null;\nlet CrossIconContainer = null;\nlet LeftIcon = null;\nlet CrossIcon = null;\nlet disableLeftIcon = false;\nlet disableCrossIcon = false;\nfunction setPrevIconState(state) {\n  disableLeftIcon = state;\n}\nfunction setCrossIconState(state) {\n  disableCrossIcon = state;\n}\nfunction createNavigationButtons(onPrevIconClick, onCrossIconClick) {\n  const {\n    videoContainer\n  } = getHtmlElements();\n  LeftIconContainer = document.createElement("div");\n  CrossIconContainer = document.createElement("div");\n  LeftIcon = document.createElement("img");\n  CrossIcon = document.createElement("img");\n  LeftIcon.src = arrowLeft;\n  CrossIcon.src = crossIcon;\n  LeftIconContainer.appendChild(LeftIcon);\n  CrossIconContainer.appendChild(CrossIcon);\n  LeftIconContainer.addEventListener("click", onPrevIconClick);\n  CrossIconContainer.addEventListener("click", onCrossIconClick);\n  // using fragment for performance gain\n  const iconContainerFragment = document.createDocumentFragment();\n  LeftIconContainer.classList.add("left-nav-icon", "icon-blur-bg");\n  CrossIconContainer.classList.add("cross-nav-icon", "icon-blur-bg");\n  iconContainerFragment.appendChild(LeftIconContainer);\n  iconContainerFragment.appendChild(CrossIconContainer);\n  videoContainer.appendChild(iconContainerFragment);\n}\nfunction showPrevIcon() {\n  if (LeftIconContainer && !disableLeftIcon) {\n    LeftIconContainer.style.display = "flex";\n  }\n}\nfunction showCrossIcon({\n  blurredBg = false,\n  blackIcon = false\n}) {\n  if (CrossIconContainer && !disableCrossIcon) {\n    CrossIconContainer.style.display = "flex";\n    if (!blurredBg) {\n      CrossIconContainer.classList.remove("icon-blur-bg");\n    } else {\n      CrossIconContainer.classList.add("icon-blur-bg");\n    }\n    if (blackIcon) {\n      CrossIcon.src = crossIconBlack;\n    } else {\n      CrossIcon.src = crossIcon;\n    }\n  }\n}\nfunction hidePrevIcon() {\n  if (LeftIconContainer) {\n    LeftIconContainer.style.display = "none";\n  }\n}\nfunction hideCrossIcon() {\n  if (CrossIconContainer) {\n    CrossIconContainer.style.display = "none";\n  }\n}\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/fyndStyleConfigBottomSheet.css\nvar fyndStyleConfigBottomSheet = __webpack_require__(4495);\n;// ./src/htmlService/styles/fyndStyleConfigBottomSheet.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar fyndStyleConfigBottomSheet_options = {};\n\nfyndStyleConfigBottomSheet_options.styleTagTransform = (styleTagTransform_default());\nfyndStyleConfigBottomSheet_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      fyndStyleConfigBottomSheet_options.insert = insertBySelector_default().bind(null, "head");\n    \nfyndStyleConfigBottomSheet_options.domAPI = (styleDomAPI_default());\nfyndStyleConfigBottomSheet_options.insertStyleElement = (insertStyleElement_default());\n\nvar fyndStyleConfigBottomSheet_update = injectStylesIntoStyleTag_default()(fyndStyleConfigBottomSheet/* default */.A, fyndStyleConfigBottomSheet_options);\n\n\n\n\n       /* harmony default export */ const styles_fyndStyleConfigBottomSheet = (fyndStyleConfigBottomSheet/* default */.A && fyndStyleConfigBottomSheet/* default */.A.locals ? fyndStyleConfigBottomSheet/* default */.A.locals : undefined);\n\n;// ./src/htmlService/fyndStyleConfigBottomSheet.js\n\n\n\n\n\n\n\n\nlet configSheetHeaderElements = []; // {pillDiv,pillIcon,subComponent}\nlet ringElements = [];\nlet sliderElements = {};\nlet selectedTab = null;\nlet activeTab = null;\nlet defaultRingIndex = configBottomSheetConfig.tabs[0].subComponent[0].defaultValue;\nfunction createConfigSettings(settingsHeaderHandler, settingsContentHandler, actionsHandler) {\n  const {\n    configSettings\n  } = getHtmlElements();\n  hideConfigSettingBottomSheet(true);\n  let configBottomSheetFragment = document.createDocumentFragment();\n  const configBottomSheetDiv = document.createElement("div");\n  const configBottomSheetHeaderDiv = document.createElement("div");\n  const configBottomSheetDividerDiv = document.createElement("div");\n  const configBottomSheetContentDiv = document.createElement("div");\n  const configBottomSheetActionsDiv = document.createElement("div");\n  configBottomSheetDiv.classList.add("config-bottom-sheet-container-fs");\n  configBottomSheetHeaderDiv.classList.add("config-bottom-sheet-header-fs");\n  configBottomSheetDividerDiv.classList.add("config-bottom-sheet-divider-fs");\n  configBottomSheetContentDiv.classList.add("config-bottom-sheet-content-fs");\n  configBottomSheetActionsDiv.classList.add("config-bottom-sheet-actions-fs");\n  const HeaderElements = fyndStyleConfigBottomSheet_getHeaderElements(settingsHeaderHandler);\n  configBottomSheetHeaderDiv.append(HeaderElements);\n  const SheetContent = fyndStyleConfigBottomSheet_getSheetTabContent(settingsContentHandler);\n  configBottomSheetContentDiv.append(SheetContent);\n  const SheetActionsElements = fyndStyleConfigBottomSheet_getSheetActionsContent(actionsHandler, settingsContentHandler);\n  configBottomSheetActionsDiv.append(SheetActionsElements);\n  configBottomSheetDiv.append(configBottomSheetHeaderDiv, configBottomSheetDividerDiv, configBottomSheetContentDiv, configBottomSheetActionsDiv);\n  configBottomSheetFragment.append(configBottomSheetDiv);\n  configSettings.appendChild(configBottomSheetFragment);\n  //to auto select the first allowed tab\n  let initialDisplayTabIndex = 0;\n  for (let [index, config] of configBottomSheetConfig.tabs.entries()) {\n    if (config.allowedCategory?.includes(getCurrentTryon().category)) {\n      initialDisplayTabIndex = index;\n      break;\n    }\n  }\n  activeTab = initialDisplayTabIndex;\n  configSheetHeaderElements[initialDisplayTabIndex].pillDiv.click();\n}\nfunction fyndStyleConfigBottomSheet_getHeaderElements(settingsHeaderHandler) {\n  let headerFragment = document.createDocumentFragment();\n  for (let [index, config] of configBottomSheetConfig.tabs.entries()) {\n    let pillDiv = document.createElement("div");\n    pillDiv.classList.add("config-bottom-sheet-pill-fs");\n    if (!config.allowedCategory?.includes(getCurrentTryon().category)) {\n      pillDiv.classList.add("hide-pill-fs");\n    }\n    let pillIconWrapper = document.createElement("div");\n    pillIconWrapper.classList.add("config-bottom-sheet-pill-icon-wrapper-fs");\n    let pillIcon = document.createElement("img");\n    pillIcon.src = config.unSelectedIcon;\n    pillIconWrapper.appendChild(pillIcon);\n    let pillTextDiv = document.createElement("div");\n    pillTextDiv.innerText = config.label;\n    pillTextDiv.classList.add("config-bottom-sheet-pill-text-fs");\n    pillDiv.append(pillIconWrapper, pillTextDiv);\n    pillDiv.addEventListener("click", () => {\n      pillClickHandler(index);\n      settingsHeaderHandler(index, config);\n    });\n    headerFragment.append(pillDiv);\n    configSheetHeaderElements.push({\n      pillDiv,\n      pillIcon\n    });\n  }\n  return headerFragment;\n}\nfunction fyndStyleConfigBottomSheet_getSheetTabContent(handler) {\n  let sheetTabContentfrag = document.createDocumentFragment();\n  for (let [index, config] of configBottomSheetConfig.tabs.entries()) {\n    let subComponentElement = getSubComponent(config.subComponent, handler);\n    sheetTabContentfrag.append(subComponentElement);\n    configSheetHeaderElements[index].subComponent = subComponentElement;\n  }\n  return sheetTabContentfrag;\n}\nfunction getSubComponent(subComponentConfig, handler) {\n  let subComponentDiv = document.createElement("div");\n  for (let [index, eachSubComponentConfig] of subComponentConfig.entries()) {\n    switch (eachSubComponentConfig.type) {\n      case "fingers":\n        subComponentDiv.classList.add("ring-row-container-fs");\n        subComponentDiv.style.display = "none";\n        subComponentDiv.append(getRings(handler));\n        return subComponentDiv;\n      case "slider":\n        subComponentDiv.classList.add("slider-main-container-fs");\n        subComponentDiv.style.display = "none";\n        subComponentDiv.append(getSliderDiv(eachSubComponentConfig, handler));\n    }\n  }\n  return subComponentDiv;\n}\nfunction getRings(handler) {\n  let ringRowContainer = document.createDocumentFragment();\n  //   ringRowContainer.classList.add("ring-row-container");\n  for (let [index, eachRingConfig] of ringIconConfig.entries()) {\n    let ringDiv = document.createElement("div");\n    ringDiv.classList.add("config-bottom-sheet-ring-divs-fs");\n    let ringIconDiv = document.createElement("div");\n    ringIconDiv.classList.add("config-bottom-sheet-ringicon-divs-fs");\n    let ringIcon = document.createElement("img");\n    ringIcon.src = eachRingConfig.unSelectedIcon;\n    ringIconDiv.appendChild(ringIcon);\n    let ringLabelDiv = document.createElement("div");\n    ringLabelDiv.classList.add("config-bottom-sheet-ringicon-label-fs");\n    ringLabelDiv.innerText = eachRingConfig.label;\n    // to handle and toggle clicks and change icon\n    ringElements.push({\n      ringIconDiv,\n      ringIcon\n    });\n    ringIconDiv.addEventListener("click", () => handleRingClick(index, handler));\n    ringDiv.appendChild(ringIconDiv);\n    ringDiv.appendChild(ringLabelDiv);\n    ringRowContainer.append(ringDiv);\n  }\n  return ringRowContainer;\n}\nfunction handleRingClick(index, handler) {\n  ringElements.forEach((element, idx) => {\n    element.ringIcon.src = ringIconConfig[idx].unSelectedIcon;\n    element.ringIconDiv.classList.remove("ring-selected-fs");\n  });\n  ringElements[index].ringIcon.src = ringIconConfig[index].selectedIcon;\n  ringElements[index].ringIconDiv.classList.add("ring-selected-fs");\n  handler("fingers", index);\n}\nfunction getSliderDiv(eachSubComponentConfig, handler) {\n  let sliderContainer = document.createElement("div");\n  sliderContainer.classList.add("slider-container-fs");\n  let leftText = document.createElement("div");\n  leftText.classList.add("slider-left-text-fs");\n  leftText.innerText = eachSubComponentConfig.leftText;\n  let rightText = document.createElement("div");\n  rightText.classList.add("slider-right-text-fs");\n  if (eachSubComponentConfig.rightText) {\n    rightText.innerText = eachSubComponentConfig.rightText;\n  } else {\n    rightText.innerText = formula(eachSubComponentConfig.defaultValue, eachSubComponentConfig);\n  }\n  let sliderInputDiv = document.createElement("div");\n  sliderInputDiv.classList.add("slider-input-div-fs");\n  let sliderInput = document.createElement("input");\n  sliderInput.type = "range";\n  sliderInput.defaultValue = `${eachSubComponentConfig.defaultValue}`;\n  sliderInput.step = `${eachSubComponentConfig.step}`;\n  sliderInput.min = `${eachSubComponentConfig.min}`;\n  sliderInput.max = `${eachSubComponentConfig.max}`;\n\n  // to change the slide value\n  sliderElements[eachSubComponentConfig.tag] = {\n    sliderInput,\n    rightText\n  };\n  sliderInput.addEventListener("input", () => {\n    if (!eachSubComponentConfig.rightText) {\n      handleSliderInput(eachSubComponentConfig.tag, sliderInput.value, eachSubComponentConfig);\n    }\n    fyndStyleConfigBottomSheet_handleSliderCss(eachSubComponentConfig.tag, sliderInput.value, eachSubComponentConfig);\n    handler(eachSubComponentConfig.tag, sliderInput.value);\n  });\n  sliderInputDiv.appendChild(sliderInput);\n  sliderContainer.append(leftText, sliderInputDiv, rightText);\n  return sliderContainer;\n}\nfunction handleSliderInput(tag, value, config) {\n  sliderElements[tag].rightText.innerText = formula(value, config);\n}\nfunction fyndStyleConfigBottomSheet_handleSliderCss(tag, value, config) {\n  let finalValue = formula(value, config);\n  sliderElements[tag].sliderInput.style.background = `linear-gradient(to right, white 0%, white ${finalValue}%, rgba(255, 255, 255, 0.4) ${finalValue}%, rgba(255, 255, 255, 0.4) 100%)`;\n}\nfunction formula(value, config) {\n  let finalValue = (value - config?.min) / (config?.max - config?.min) * 100;\n  return parseInt(finalValue);\n}\nfunction pillClickHandler(index) {\n  activeTab = index;\n  configSheetHeaderElements.forEach((element, idx) => {\n    element.pillDiv.classList.remove("active-config-bottom-sheet-pill-active-fs");\n    element.pillIcon.src = configBottomSheetConfig.tabs[idx].unSelectedIcon;\n  });\n  configSheetHeaderElements[index].pillDiv.classList.add("active-config-bottom-sheet-pill-active-fs");\n  let selectedTab = configBottomSheetConfig.tabs[index];\n  configSheetHeaderElements[index].pillIcon.src = configBottomSheetConfig.tabs[index].selectedIcon;\n  showSubComponent(index);\n  // ring case, click the 1st icon to select itself\n  if (index === 0) {\n    ringElements[defaultRingIndex].ringIconDiv.click();\n  }\n}\nfunction showSubComponent(index) {\n  configSheetHeaderElements.forEach(({\n    subComponent\n  }) => {\n    subComponent.style.display = "none";\n  });\n  configSheetHeaderElements[index].subComponent.style.display = "flex";\n}\nfunction fyndStyleConfigBottomSheet_getSheetActionsContent(actionsHandler, settingsContentHandler) {\n  const SheetActionFragment = document.createDocumentFragment();\n  const ResetIconDiv = document.createElement("div");\n  const CloseIconDiv = document.createElement("div");\n  ResetIconDiv.classList.add("config-bottom-sheet-reset-button-fs");\n  CloseIconDiv.classList.add("config-bottom-sheet-close-button-fs");\n  ResetIconDiv.addEventListener("click", () => {\n    resetSubComponent(settingsContentHandler);\n    actionsHandler("", "reset");\n  });\n  CloseIconDiv.addEventListener("click", () => {\n    actionsHandler("", "close");\n    hideConfigSettingBottomSheet();\n  });\n  const ResetIcon = document.createElement("img");\n  const CloseIcon = document.createElement("img");\n  ResetIcon.src = resetBig;\n  CloseIcon.src = Angle_Right;\n  ResetIconDiv.append(ResetIcon);\n  CloseIconDiv.append(CloseIcon);\n  SheetActionFragment.append(ResetIconDiv, CloseIconDiv);\n  return SheetActionFragment;\n}\n\n// show hide features\n\nfunction showConfigSettingBottomSheet() {\n  const {\n    configSettings\n  } = getHtmlElements();\n  configSettings.classList.add("show-config-settings-fs");\n  emitInteractionUI("config", "opened");\n}\nfunction hideConfigSettingBottomSheet(initial = false) {\n  const {\n    configSettings\n  } = getHtmlElements();\n  configSettings.classList.remove("show-config-settings-fs");\n  if (!initial) emitInteractionUI("config", "closed");\n}\n\n// for resetting the UI after initial creation\nfunction updateConfigSettingsUi() {\n  let initialDisplayTabIndex;\n  activeTab = null;\n  for (let [index, config] of configBottomSheetConfig.tabs.entries()) {\n    // setting all tabs as hidden initially so that when the category sets, we may know which one to show\n    configSheetHeaderElements[index].pillDiv.classList.add("hide-pill-fs");\n  }\n  for (let [index, config] of configBottomSheetConfig.tabs.entries()) {\n    if (config.allowedCategory?.includes(getCurrentTryon().category)) {\n      initialDisplayTabIndex = index;\n      configSheetHeaderElements[index].pillDiv.classList.remove("hide-pill-fs");\n      if (activeTab === null) {\n        activeTab = initialDisplayTabIndex;\n      }\n      // break;\n    } else {\n      configSheetHeaderElements[index].pillDiv.classList.add("hide-pill-fs");\n    }\n  }\n  pillClickHandler(activeTab);\n}\n\n// resetting things\nfunction resetEverySubComponent(ContentHandler) {\n  resetTab();\n  configBottomSheetConfig.tabs?.forEach((eachTab, idx) => {\n    resetSubComponent(ContentHandler, idx);\n  });\n}\nfunction resetSubComponent(handler, idx) {\n  // ok so if called from reset icon it takes the current active tab else if every thing needs to be reset then\n  let currentTabConfig = configBottomSheetConfig.tabs[idx || activeTab];\n  currentTabConfig?.subComponent.forEach(eachSubComponent => {\n    if (eachSubComponent.type === "fingers") {\n      resetFinger(handler);\n    } else if (eachSubComponent.type === "slider") {\n      fyndStyleConfigBottomSheet_resetSliderValues(eachSubComponent.tag, eachSubComponent.defaultValue, handler, eachSubComponent);\n    }\n  });\n}\nfunction fyndStyleConfigBottomSheet_resetSliderValues(tag, defaultValue, handler, config) {\n  sliderElements[tag].sliderInput.value = defaultValue;\n  fyndStyleConfigBottomSheet_handleSliderCss(tag, defaultValue, config);\n  if (!config?.rightText) {\n    handleSliderInput(tag, defaultValue, config);\n  }\n  handler(tag, defaultValue);\n}\nfunction resetFinger(handler) {\n  handleRingClick(defaultRingIndex, handler);\n}\nfunction resetTab() {\n  for (let [index, config] of configBottomSheetConfig.tabs.entries()) {\n    if (!configSheetHeaderElements[index]?.pillDiv?.classList?.contains("hide-pill-fs")) {\n      pillClickHandler(index);\n      break;\n    }\n  }\n}\n;// ./src/utils/messageEvents.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet isClosed = true;\nlet isFirstInitialize = false;\nfunction setIsClosed(value) {\n  isClosed = value;\n}\nfunction CaptureSnapShot() {\n  const {\n    screenShotTag\n  } = getHtmlElements();\n  if (getSceneManagerInstance()) {\n    try {\n      const ss = getSceneManagerInstance().takeScreenShot();\n      const base64Data = btoa(ss);\n      screenShotTag.href = `${atob(base64Data)}`;\n      screenShotTag.download = "NewScreenshot.jpeg";\n      screenShotTag.click();\n      // Create a Blob object using the base64 encoded data\n      // const imageBlob = new Blob([base64Data], { type: "image/jpeg" });\n      emitPhotoLoaded(base64Data);\n    } catch {\n      emitPhotoLoadedFailed(base64Data);\n    }\n  }\n}\nvar methods = {\n  applyMakeupBySDK: async skuId => {\n    //Add api calls here and set configuration on model\n    //Emit loaded event to parent\n    let skuConfig;\n    try {\n      skuConfig = await getSKUData(skuId);\n      if (skuConfig.data.status && skuConfig.data.status === "403") {\n        emitSKUFailed();\n        emitSubscriptionIssue(skuConfig.data);\n        showBillingPanel(errorMessages.billingIssue);\n      } else {\n        handleApiResponse(skuConfig.data);\n      }\n    } catch (error) {\n      emitSKUFailed();\n      if (error.response && error.response.status && error.response.status === 403) {\n        showBillingPanel(errorMessages.billingIssue);\n        emitSubscriptionIssue(error.response.data);\n      } else {\n        let errorMessage;\n        if (error.response && error.response.data && error.response.data.error) errorMessage = error.response.data.error;else errorMessage = error.message;\n\n        // showSnackbar(errorMessage).then(() => {\n        //   setTimeout(() => {\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel(errorMessage);\n      }\n    }\n  },\n  applyMakeupByConfig: skuConfig => {\n    if (!skuConfig) {\n      emitSKUFailed();\n      return;\n    }\n    handleApiResponse(skuConfig);\n  },\n  clearSku: () => {\n    if (getSceneManagerInstance()) {\n      setAppliedSKU(null);\n      getSceneManagerInstance().clear();\n      emitReset();\n    }\n  },\n  snapshot: () => {\n    CaptureSnapShot();\n  },\n  closePreview: () => {\n    if (getIsInitialized()) CloseModule();\n    // route("/");\n  },\n  resumePreview: payload => {\n    setIsPause(false);\n    if (payload && payload.mode === "liveTryOn") {\n      sdkEngine_tryOnEventHandler("live");\n    }\n    emitModuleResume();\n  },\n  pausePreview: () => {\n    setIsPause(true);\n    emitModulePause();\n  },\n  openLivePreview: payload => {\n    //console.log("openLivePreview", payload);\n    setIsPause(false);\n    if (isClosed) {\n      emitModuleOpened();\n      isClosed = false;\n    }\n    if (payload && payload.mode === "modelTryOn") {\n      if (globalVariables_isShouldHideInternalUI()) {\n        if (payload.imgURL) {\n          hideCameraPermissionPanel();\n          sdkEngine_tryOnEventHandler("modelTryOn", null, payload.imgURL);\n        } else {\n          errorPanel_showErrorPermissionPanel("Invalid Image URL");\n        }\n      } else {\n        sdkEngine_tryOnEventHandler("modelTryOn", null, payload.imgURL);\n      }\n    } else if (payload && payload.mode === "imgTryOn") {\n      if (payload.imgURL) {\n        hideCameraPermissionPanel();\n        sdkEngine_tryOnEventHandler("modelTryOn", null, payload.imgURL);\n        emitUploadStarted();\n      } else {\n        // showSnackbar("Invalid Image URL").then(() => {\n        //   setTimeout(() => {\n        //     hideSnackbar();\n        //   }, 2000);\n        // });\n        errorPanel_showErrorPermissionPanel("Invalid Image URL");\n      }\n    } else {\n      sdkEngine_tryOnEventHandler("live");\n    }\n  },\n  disableInternalUI: () => {\n    // setShouldHideInternalUI(true);\n    // // hideOptionsContainer();\n    // hideModelContainer();\n    // hideConfigContainer();\n    // setVisibilityStateOfUploadInput("none");\n  },\n  onConfigChange: payload => {\n    if (payload) {\n      if (payload.options) configSliderHandler(payload.value, payload.options);\n    }\n  },\n  initializeSDK: payload => {\n    //console.log("initializeSDK");\n\n    if (payload) {\n      if (isFirstInitialize) return;\n      if (payload.platform) {\n        setWrapperType(payload.platform);\n      }\n      if (payload.apiKey) setAPIKey(payload.apiKey);\n      if (payload.chooseTryOnConfig) overrideChooseTryOnConfig(payload.chooseTryOnConfig);\n      if (payload.mode) {\n        if (payload.mode === "platform") {\n          setPlatformMode("platform");\n        }\n        if (payload.mode === "console") {\n          setPlatformMode("panel");\n        }\n        if (payload.mode === "private") {\n          setPlatformMode("private");\n        }\n      } else {\n        setPlatformMode("platform");\n      }\n      if (payload.apiVersion) setAPIVersion(payload.apiVersion);\n      networkStateHandler.startPeriodicCheck();\n      if (getAPIVersion() === "v2.0") {\n        if (payload.category) {\n          let currentTryOn = getCategoryFactoryV2(payload.category.toLowerCase());\n          console.log(currentTryOn);\n          setCurrentTryon(currentTryOn);\n          if (!["opacity"].includes(currentTryOn?.ConfigUIType[0])) updateConfigSettingsUi();\n        } else {\n          setCurrentTryon(getCategoryFactoryV2("lipstick"));\n        }\n      } else {\n        if (payload.category) {\n          let currentTryOn = getCategoryFactorybyID(payload.category.toLowerCase());\n          setCurrentTryon(currentTryOn);\n          if (!["opacity"].includes(currentTryOn?.ConfigUIType[0])) updateConfigSettingsUi();\n        } else {\n          setCurrentTryon(getCategoryFactorybyID("lipstick"));\n        }\n      }\n      if (payload.openLiveOnInit) {\n        setOpenLiveOnInit(true);\n      }\n      if (payload.openImageOnInit) {\n        setOpenImageOnInit(payload.openImageOnInit);\n      }\n      if (payload.disableCrossIcon) {\n        setCrossIconState(true);\n        hideCrossIcon();\n      }\n      if (payload.disablePrevIcon) {\n        setPrevIconState(true);\n        hidePrevIcon();\n      }\n      updateEnvironmentURL();\n      updateAPIURL();\n      if (!globalVariables_isShouldHideInternalUI()) {\n        fetchModuleConfig(getSceneManagerInstance());\n      } else emitInitComplete();\n      loadML();\n      isFirstInitialize = true;\n    }\n  },\n  onNailColorEvents: payload => {\n    if (payload) {\n      if (payload.options == "clickSnapShot") onImageClick();\n      if (payload.options == "resetSnapShot") {\n        onClearClick();\n        if (getSceneManagerInstance()) {\n          getSceneManagerInstance().resetNailData();\n        }\n      }\n    }\n  },\n  onFaceAnalysisEvents: payload => {\n    if (payload) {\n      if (payload.options == "opened") openFaceAnalysis();\n      if (payload.options == "closed") closeFaceAnalysis();\n      if (payload.options == "resetSnapShot") resetFaceAnalysis();\n      if (payload.options == "clickSnapShot") faceAnalysisSnapShot();\n    }\n  },\n  onComparisonEvents: payload => {\n    if (payload) {\n      if (payload.options == "sliderUI") {\n        setComparisonState(0);\n        if (payload.value == "show") {\n          showComparisonSlider();\n        } else {\n          hideComparisonSlider();\n        }\n      } else if (payload.options == "touch") {\n        setComparisonState(1);\n        if (payload.value == "show") {\n          showComparisonSlider("0%", "none");\n        } else {\n          hideComparisonSlider();\n        }\n      }\n    }\n  },\n  webDemoSettings: payload => {\n    //onVideoMode();\n    let {\n      configurationContainer\n    } = getHtmlElements();\n    if (payload && payload) {\n      configurationContainer.style.bottom = `${payload}px`;\n    } else {\n      configurationContainer.style.bottom = "187.5px";\n    }\n  }\n};\nfunction addMessageEventListener() {\n  window.addEventListener("message", e => {\n    const {\n      data: {\n        type,\n        payload\n      }\n    } = e;\n    switch (type) {\n      case "initialize":\n        methods.initializeSDK(payload);\n        return;\n      case "applyBySku":\n        methods.applyMakeupBySDK(payload.skuId); //, payload.styleId);\n        return;\n      case "applyByConfig":\n        methods.applyMakeupByConfig(payload);\n        return;\n      case "clearSku":\n        methods.clearSku();\n        return;\n      case "snapshot":\n        methods.snapshot();\n        return;\n      case "closePreview":\n        methods.closePreview();\n        return;\n      case "openLivePreview":\n        methods.openLivePreview(payload);\n        return;\n      case "webDemo":\n        methods.webDemoSettings(payload);\n        return;\n      case "pausePreview":\n        methods.pausePreview();\n        return;\n      case "resumePreview":\n        methods.resumePreview(payload);\n        return;\n      case "disableInternalUI":\n        methods.disableInternalUI();\n        return;\n      case "configChange":\n        methods.onConfigChange(payload);\n        return;\n      case "nailColor":\n        methods.onNailColorEvents(payload);\n        return;\n      case "faceAnalysis":\n        methods.onFaceAnalysisEvents(payload);\n        return;\n      case "comparison":\n        methods.onComparisonEvents(payload);\n        return;\n      default:\n        return;\n    }\n  }, false);\n}\n;// ./src/assets/lottie/loader.json\nconst loader_namespaceObject = /*#__PURE__*/JSON.parse(\'{"v":"4.8.0","meta":{"g":"LottieFiles AE 3.5.7","a":"","k":"","d":"","tc":""},"fr":24,"ip":0,"op":60,"w":300,"h":300,"nm":"Glam AR Loader","ddd":0,"assets":[],"layers":[{"ddd":0,"ind":1,"ty":4,"nm":"four","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":22.9,"s":[20]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":40,"s":[30]},{"t":57,"s":[20]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,152,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[120,120,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-1.283,0],[0,0],[-0.682,-1.366],[0,0],[0,0],[1.213,-1.402],[0,0],[0,0],[1.444,1.67],[0,0],[-0.871,1.745],[0,0]],"o":[[0,0],[0.682,-1.366],[0,0],[1.283,0],[0,0],[0,0],[0.871,1.743],[0,0],[0,0],[-1.444,1.67],[0,0],[-1.212,-1.402],[0,0],[0,0]],"v":[[-61.403,-91.778],[-61.403,-91.778],[-58.206,-93.938],[58.648,-93.938],[61.845,-91.778],[96.924,-21.497],[96.924,-21.497],[96.322,-16.152],[96.322,-16.152],[2.221,92.685],[-2.971,92.685],[-96.323,-15.28],[-96.924,-20.627],[-96.924,-20.627]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":2,"ty":4,"nm":"three","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":16,"s":[30]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":33.9,"s":[60]},{"t":51,"s":[30]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-1.283,0],[0,0],[-0.682,-1.366],[0,0],[0,0],[1.213,-1.402],[0,0],[0,0],[1.444,1.67],[0,0],[-0.871,1.745],[0,0]],"o":[[0,0],[0.682,-1.366],[0,0],[1.283,0],[0,0],[0,0],[0.871,1.743],[0,0],[0,0],[-1.444,1.67],[0,0],[-1.212,-1.402],[0,0],[0,0]],"v":[[-61.403,-91.778],[-61.403,-91.778],[-58.206,-93.938],[58.648,-93.938],[61.845,-91.778],[96.924,-21.497],[96.924,-21.497],[96.322,-16.152],[96.322,-16.152],[2.221,92.685],[-2.971,92.685],[-96.323,-15.28],[-96.924,-20.627],[-96.924,-20.627]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":3,"ty":4,"nm":"two","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":9,"s":[40]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":26.601,"s":[80]},{"t":44,"s":[40]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-0.964,0],[0,0],[-0.521,-1.041],[0,0],[0,0],[0.926,-1.066],[0,0],[0,0],[1.094,1.262],[0,0],[-0.667,1.333],[0,0]],"o":[[0,0],[0.521,-1.041],[0,0],[0.964,0],[0,0],[0,0],[0.668,1.331],[0,0],[0,0],[-1.094,1.262],[0,0],[-0.924,-1.066],[0,0],[0,0]],"v":[[-48.477,-76.427],[-48.477,-76.427],[-46.055,-78.062],[46.28,-78.062],[48.701,-76.427],[76.419,-21.067],[76.419,-21.067],[75.96,-16.989],[75.96,-16.989],[1.604,68.741],[-2.321,68.741],[-76.086,-16.302],[-76.544,-20.381],[-76.544,-20.381]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":4,"ty":4,"nm":"one","sr":1,"ks":{"o":{"a":1,"k":[{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":2,"s":[50]},{"i":{"x":[0.667],"y":[1]},"o":{"x":[0.333],"y":[0]},"t":15.828,"s":[100]},{"t":30,"s":[50]}],"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[-0.678,0],[0,0],[-0.379,-0.756],[0,0],[0,0],[0.669,-0.771],[0,0],[0,0],[0.781,0.902],[0,0],[0,0],[0,0],[-0.486,0.971],[0,0]],"o":[[0,0],[0.378,-0.756],[0,0],[0.678,0],[0,0],[0,0],[0.486,0.97],[0,0],[0,0],[-0.781,0.902],[0,0],[0,0],[0,0],[-0.668,-0.771],[0,0],[0,0]],"v":[[-36.869,-61.888],[-36.869,-61.888],[-35.142,-63.062],[35.283,-63.062],[37.011,-61.888],[58.152,-19.636],[58.152,-19.636],[57.82,-16.67],[57.82,-16.67],[1.108,48.761],[-1.684,48.761],[-2.109,49.13],[-1.684,48.761],[-57.946,-16.146],[-58.277,-19.113],[-58.277,-19.113]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gs","o":{"a":0,"k":100,"ix":9},"w":{"a":0,"k":1.125,"ix":10},"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":8}},"s":{"a":0,"k":[-34.75,-85.873],"ix":4},"e":{"a":0,"k":[46.156,40.537],"ix":5},"t":1,"lc":1,"lj":1,"ml":4,"ml2":{"a":0,"k":4,"ix":13},"bm":0,"nm":"Gradient Stroke 1","mn":"ADBE Vector Graphic - G-Stroke","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":5,"ty":4,"nm":"logo center","parent":6,"sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[0,0,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":0,"k":[100,100,100],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0.328,-0.572],[0,0],[-0.591,-0.591],[0,0],[0,0],[-0.725,0.72],[0,0],[0.415,0.725],[0,0],[0.656,0]],"o":[[0,0],[-0.66,0],[0,0],[-0.42,0.725],[0,0],[0,0],[0.72,0.72],[0,0],[0.591,-0.591],[0,0],[-0.327,-0.572],[0,0]],"v":[[6.529,-12.24],[-4.332,-12.24],[-5.93,-11.317],[-8.03,-7.68],[-7.734,-5.45],[-4.559,-2.275],[-0.206,2.078],[2.407,2.078],[9.935,-5.45],[10.231,-7.68],[8.13,-11.317],[6.533,-12.24]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":9}},"s":{"a":0,"k":[-42.176,-66.036],"ix":5},"e":{"a":0,"k":[22.915,21.512],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0},{"ddd":0,"ind":6,"ty":4,"nm":"logo","sr":1,"ks":{"o":{"a":0,"k":100,"ix":11},"r":{"a":0,"k":0,"ix":10},"p":{"a":0,"k":[150,150,0],"ix":2},"a":{"a":0,"k":[0,0,0],"ix":1},"s":{"a":1,"k":[{"i":{"x":[0.113,0.113,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":0,"s":[100,100,100]},{"i":{"x":[0.184,0.184,0.667],"y":[1,1,1]},"o":{"x":[0.333,0.333,0.333],"y":[0,0,0]},"t":30,"s":[104,104,100]},{"t":60,"s":[100,100,100]}],"ix":6}},"ao":0,"shapes":[{"ty":"gr","it":[{"ind":0,"ty":"sh","ix":1,"ks":{"a":0,"k":{"i":[[0,0],[0,0],[0.66,0],[0,0],[0.328,-0.572],[0,0],[-0.591,-0.591],[0,0],[-0.605,1.052],[0,0],[-0.66,0],[0,0],[-0.328,-0.572],[0,0],[0,0],[1.421,0],[0,0],[0.332,0.572],[0,0],[0,0],[0.66,0],[0,0],[0.328,-0.572],[0,0],[-0.591,-0.591],[0,0],[-0.724,0.72],[0,0],[1.648,0],[0,0],[0.346,-0.346],[0,0],[0.725,0.72],[0,0],[-0.415,0.725],[0,0],[-0.655,0],[0,0],[-0.328,-0.572],[0,0],[-0.66,0],[0,0],[-0.346,0.346],[0,0],[0.416,0.725]],"o":[[0,0],[-0.328,-0.572],[0,0],[-0.66,0],[0,0],[-0.42,0.725],[0,0],[0.859,0.859],[0,0],[0.328,-0.572],[0,0],[0.66,0],[0,0],[0,0],[0.711,1.232],[0,0],[-0.66,0],[0,0],[0,0],[-0.327,-0.572],[0,0],[-0.66,0],[0,0],[-0.42,0.725],[0,0],[0.72,0.72],[0,0],[1.163,-1.163],[0,0],[-0.489,0],[0,0],[-0.72,0.72],[0,0],[-0.591,-0.591],[0,0],[0.328,-0.572],[0,0],[0.66,0],[0,0],[0.328,0.572],[0,0],[0.489,0],[0,0],[0.591,-0.591],[0,0]],"v":[[45.546,-18.712],[29.188,-47.04],[27.591,-47.963],[-25.39,-47.963],[-26.988,-47.04],[-43.346,-18.712],[-43.051,-16.483],[-39.169,-12.601],[-36.265,-12.984],[-21.813,-38.016],[-20.216,-38.939],[22.407,-38.939],[24.004,-38.02],[34.879,-19.178],[35.174,-18.666],[33.573,-15.896],[27.498,-15.896],[25.897,-16.82],[24.535,-19.178],[18.82,-29.07],[17.223,-29.993],[-15.046,-29.993],[-16.643,-29.07],[-30.209,-5.575],[-29.914,-3.346],[-0.206,26.362],[2.406,26.362],[26.769,1.999],[25.463,-1.153],[17.92,-1.153],[16.614,-0.613],[2.402,13.594],[-0.211,13.594],[-18.665,-4.86],[-18.96,-7.089],[-11.483,-20.046],[-9.886,-20.969],[12.067,-20.969],[13.665,-20.046],[18.871,-11.027],[20.468,-10.104],[38.092,-10.104],[39.398,-10.644],[45.242,-16.487],[45.537,-18.717]],"c":true},"ix":2},"nm":"Path 1","mn":"ADBE Vector Shape - Group","hd":false},{"ty":"gf","o":{"a":0,"k":100,"ix":10},"r":1,"bm":0,"g":{"p":3,"k":{"a":0,"k":[0,0.902,0.373,0.431,0.5,0.878,0.214,0.412,1,0.855,0.055,0.392],"ix":9}},"s":{"a":0,"k":[-42.176,-66.036],"ix":5},"e":{"a":0,"k":[22.915,21.512],"ix":6},"t":1,"nm":"Gradient Fill 1","mn":"ADBE Vector Graphic - G-Fill","hd":false},{"ty":"tr","p":{"a":0,"k":[0,0],"ix":2},"a":{"a":0,"k":[0,0],"ix":1},"s":{"a":0,"k":[100,100],"ix":3},"r":{"a":0,"k":0,"ix":6},"o":{"a":0,"k":100,"ix":7},"sk":{"a":0,"k":0,"ix":4},"sa":{"a":0,"k":0,"ix":5},"nm":"Transform"}],"nm":"Group 1","np":2,"cix":2,"bm":0,"ix":1,"mn":"ADBE Vector Group","hd":false}],"ip":0,"op":240,"st":0,"bm":0}],"markers":[]}\');\n;// ./src/htmlService/lottieLoader.js\n\n\nvar animation = null;\nfunction showLottieLoader() {\n  let {\n    lottieLoader\n  } = getHtmlElements();\n  if (!animation) {\n    initLottieLoader();\n  }\n  lottieLoader.style.display = "flex";\n}\nfunction hideLottieLoader() {\n  let {\n    lottieLoader\n  } = getHtmlElements();\n  if (animation) animation.destroy();\n  animation = null;\n  lottieLoader.style.display = "none";\n}\nfunction initLottieLoader() {\n  if (!animation) {\n    animation = lottie.loadAnimation({\n      container: document.getElementById("lottie"),\n      // the DOM element\n      renderer: "svg",\n      loop: true,\n      autoplay: true,\n      animationData: loader_namespaceObject // the path to the animation json\n    });\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs/dist/index.js + 547 modules\nvar dist = __webpack_require__(1262);\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-webgl/dist/index.js + 286 modules\nvar tfjs_backend_webgl_dist = __webpack_require__(438);\n// EXTERNAL MODULE: ./node_modules/@tensorflow/tfjs-backend-wasm/dist/index.js + 168 modules\nvar tfjs_backend_wasm_dist = __webpack_require__(6554);\n;// ./src/threeComponents/renderBox.js\n/**\n * Render prediction boxes\n * @param {HTMLCanvasElement} canvasRef canvas tag reference\n * @param {Array} boxes_data boxes array\n * @param {Array} scores_data scores array\n * @param {Array} classes_data class array\n * @param {Array[Number]} ratios boxes ratio [xRatio, yRatio]\n */\n\nconst colors = {\n  nose: "red",\n  leftEye: "blue",\n  rightEye: "green",\n  leftEar: "orange",\n  rightEar: "purple",\n  leftShoulder: "yellow",\n  rightShoulder: "pink",\n  leftElbow: "cyan",\n  rightElbow: "magenta",\n  leftWrist: "lime",\n  rightWrist: "indigo",\n  leftHip: "teal",\n  rightHip: "violet",\n  leftKnee: "gold",\n  rightKnee: "silver",\n  leftAnkle: "brown",\n  rightAnkle: "black"\n};\nconst renderPoints2 = (canvasRef, adjustedKeypoints, fps, bounds, finalClassLabels, finalScores) => {\n  const ctx = canvasRef.getContext("2d");\n\n  // Define colors for different classes\n  const classColors = {\n    0: "rgba(255, 0, 0, 0.7)",\n    // Left Shoe - Red\n    1: "rgba(0, 255, 0, 0.7)" // Right Shoe - Green\n  };\n  // Define keypoint color\n  const keypointColor = "rgba(0, 0, 255, 0.9)"; // Blue\n  const keypointdebug = ["blue", "green", "yellow", "white", "red", "black", "purple", "orange"]; // Blue\n\n  // Define line color for connections between keypoints\n  ctx.strokeStyle = "rgba(0, 255, 255, 0.8)"; // Cyan for lines\n  ctx.lineWidth = 2; // Set line width for connections\n\n  // Define font for labels\n  ctx.font = "18px Arial";\n  ctx.textBaseline = "top";\n  bounds.forEach((box, index) => {\n    const color = classColors[finalClassLabels[index]] || "rgba(255, 255, 0, 0.7)"; // Default to Yellow\n    // Draw bounding box\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.strokeRect(box.x1, box.y1, box.x2 - box.x1, box.y2 - box.y1);\n    // Draw label with score\n    const label = finalClassLabels[index] === 0 ? "Left Shoe" : "Right Shoe";\n    const score = (finalScores[index] * 100).toFixed(1) + "%";\n    ctx.fillStyle = color;\n    ctx.fillText(`${label} (${score})`, box.x1, box.y1 - 25);\n\n    // Draw keypoints and connections\n    const keypoints = adjustedKeypoints[index];\n    keypoints.forEach((kp, kpIndex) => {\n      // Draw keypoint\n      ctx.beginPath();\n      ctx.arc(kp.x, kp.y, 4, 0, 2 * Math.PI); // Radius of 4 for better visibility\n      ctx.fillStyle = keypointdebug[kpIndex];\n      ctx.fill();\n      ctx.closePath();\n    });\n    // Draw connections between keypoints\n    ctx.strokeStyle = "yellow";\n    drawLineBetweenPoints(ctx, keypoints, 0, 1);\n    ctx.strokeStyle = "pink";\n    drawLineBetweenPoints(ctx, keypoints, 0, 2);\n    ctx.strokeStyle = "magenta";\n    drawLineBetweenPoints(ctx, keypoints, 0, 3);\n    ctx.strokeStyle = "indigo";\n    drawLineBetweenPoints(ctx, keypoints, 4, 5);\n    ctx.strokeStyle = "silver";\n    drawLineBetweenPoints(ctx, keypoints, 5, 3);\n    ctx.strokeStyle = "brown";\n    drawLineBetweenPoints(ctx, keypoints, 6, 3);\n    ctx.strokeStyle = "black";\n    drawLineBetweenPoints(ctx, keypoints, 7, 3);\n  });\n  drawFPS(ctx, fps);\n};\nconst renderPoints = (canvasRef, keypoints, fps, bounds) => {\n  const ctx = canvasRef.getContext("2d");\n  ctx.strokeStyle = "green";\n\n  // Set the stroke line width\n  ctx.lineWidth = 4; // Set line width to 5 pixels\n\n  // // Draw a rectangle with just a stroke (no fill)\n  // ctx.strokeRect(50, 50, 200, 150);\n  bounds.forEach(box => {\n    const [x, y, width, height] = box;\n    // Draw the rectangle on the canvas\n    ctx.strokeRect(x, y, width, height);\n  });\n  // ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\n  drawLineBetweenPoints(ctx, keypoints, 0, 1);\n  drawLineBetweenPoints(ctx, keypoints, 0, 2);\n  drawLineBetweenPoints(ctx, keypoints, 0, 3);\n  drawLineBetweenPoints(ctx, keypoints, 4, 5);\n  drawLineBetweenPoints(ctx, keypoints, 5, 3);\n  drawLineBetweenPoints(ctx, keypoints, 6, 3);\n  drawLineBetweenPoints(ctx, keypoints, 7, 3);\n  drawFPS(ctx, fps);\n  if (keypoints.length > 8) {\n    ctx.strokeStyle = "blue";\n    drawLineBetweenPoints(ctx, keypoints, 8, 9);\n    drawLineBetweenPoints(ctx, keypoints, 8, 10);\n    drawLineBetweenPoints(ctx, keypoints, 8, 11);\n    drawLineBetweenPoints(ctx, keypoints, 12, 13);\n    drawLineBetweenPoints(ctx, keypoints, 13, 11);\n    drawLineBetweenPoints(ctx, keypoints, 14, 11);\n    drawLineBetweenPoints(ctx, keypoints, 15, 11);\n  }\n};\nconst drawBoxAndPoints = (allKeypoints, imgKeypoints, boundingBox, imgBboxes, xi, yi, currentWidth, currentHeight) => {\n  for (let i = 0; i < imgKeypoints.length; i++) {\n    for (let j = 0; j < 16; j += 2) {\n      // Adjust the x-coordinate\n      let x = imgKeypoints[i][j] * xi;\n      x *= currentWidth / 160.0;\n\n      // Adjust the y-coordinate\n      let y = imgKeypoints[i][j + 1] * yi;\n      y *= currentHeight / 160.0;\n\n      // Create a 2D point and push it to the allKeypoints array\n      allKeypoints.push([x, y]);\n    }\n  }\n\n  // Ensure the length of allKeypoints is 16 by adding placeholders if necessary\n  while (allKeypoints.length < 16) {\n    allKeypoints.push([-1, -1]);\n  }\n  for (let i = 0; i < 2; i++) {\n    if (i < imgBboxes.length) {\n      let x1 = imgBboxes[i][0] * xi * (currentWidth / 160.0);\n      let y1 = imgBboxes[i][1] * yi * (currentHeight / 160.0);\n      let x2 = imgBboxes[i][2] * xi * (currentWidth / 160.0);\n      let y2 = imgBboxes[i][3] * yi * (currentHeight / 160.0);\n\n      // console.log("detected", x1, y1, x2, y2);\n\n      // Calculate width and height\n      const width = x2 - x1;\n      const height = y2 - y1;\n      boundingBox.push([x1, y1, width, height]);\n    } else {\n      // If fewer than 2 bounding boxes, add a placeholder\n      boundingBox.push([0, 0, 0, 0]);\n    }\n  }\n};\nconst renderAllBoxes = (canvasRef, allKeypoints, landmarks_data, boxes_data, scores_data, landmarks_data2, boxes_data2, scores_data2, xi, yi, fps, currentWidth, currentHeight, boundingBox, imgKeypoints) => {\n  // landmarks_data, boxes_data, scores_data,landmarks_data2, boxes_data2, scores_data2, xi, yi,\n  const ctx = canvasRef.getContext("2d");\n  // ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\n\n  for (let i = 0; i < scores_data.length; ++i) {\n    // filter based on class threshold\n    const score = (scores_data[i] * 100).toFixed(1);\n    let [y1, x1, y2, x2] = boxes_data.slice(i * 4, (i + 1) * 4);\n    x1 *= xi * (currentWidth / 160.0);\n    x2 *= xi * (currentWidth / 160.0);\n    y1 *= yi * (currentHeight / 160.0);\n    y2 *= yi * (currentHeight / 160.0);\n    const width = x2 - x1;\n    const height = y2 - y1;\n    ctx.fillStyle = colors["rightEye"];\n\n    // draw border box.\n    ctx.strokeStyle = colors["rightEye"];\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\n    ctx.strokeRect(x1, y1, width, height);\n    boundingBox.push([x1, y1, width, height]);\n    let keypoints = landmarks_data.slice([i, 0, 0], [1, -1, -1]).reshape([8, 2]).arraySync();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = "green";\n    //console.log("keypoints", keypoints);\n    for (let j = 0; j < keypoints.length; j++) {\n      keypoints[j][0] *= xi; // Multiply x-coordinate\n      keypoints[j][0] *= currentWidth / 160.0;\n      keypoints[j][1] *= yi; // Multiply y-coordinate\n      keypoints[j][1] *= currentHeight / 160.0;\n      // allKeypoints.push(keypoints[j]);\n    }\n    drawLineBetweenPoints(ctx, keypoints, 0, 1);\n    drawLineBetweenPoints(ctx, keypoints, 0, 2);\n    drawLineBetweenPoints(ctx, keypoints, 0, 3);\n    drawLineBetweenPoints(ctx, keypoints, 4, 5);\n    drawLineBetweenPoints(ctx, keypoints, 5, 3);\n    drawLineBetweenPoints(ctx, keypoints, 6, 3);\n    drawLineBetweenPoints(ctx, keypoints, 7, 3);\n  }\n  if (allKeypoints.length == 0) {\n    for (let j = 0; j < 8; j++) {\n      // allKeypoints.push([-1, -1]);\n    }\n    // allKeypoints.push(keypoints[j]);\n  }\n  drawFPS(ctx, fps);\n  for (let i = 0; i < scores_data2.length; ++i) {\n    // filter based on class threshold\n    const score = (scores_data2[i] * 100).toFixed(1);\n    let [y1, x1, y2, x2] = boxes_data2.slice(i * 4, (i + 1) * 4);\n    x1 *= xi * (currentWidth / 160.0);\n    x2 *= xi * (currentWidth / 160.0);\n    y1 *= yi * (currentHeight / 160.0);\n    y2 *= yi * (currentHeight / 160.0);\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    // draw box.\n    ctx.fillStyle = colors["nose"];\n\n    // draw border box.\n    ctx.strokeStyle = colors["nose"];\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\n    ctx.strokeRect(x1, y1, width, height);\n    boundingBox.push([x1, y1, width, height]);\n    let keypoints = landmarks_data2.slice([i, 0, 0], [1, -1, -1]).reshape([8, 2]).arraySync();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = "green";\n    for (let j = 0; j < keypoints.length; j++) {\n      keypoints[j][0] *= xi; // Multiply x-coordinate\n      keypoints[j][0] *= currentWidth / 160.0;\n      keypoints[j][1] *= yi; // Multiply y-coordinate\n      keypoints[j][1] *= currentHeight / 160.0;\n      allKeypoints.push(keypoints[j]);\n    }\n    drawLineBetweenPoints(ctx, keypoints, 0, 1);\n    drawLineBetweenPoints(ctx, keypoints, 0, 2);\n    drawLineBetweenPoints(ctx, keypoints, 0, 3);\n    drawLineBetweenPoints(ctx, keypoints, 4, 5);\n    drawLineBetweenPoints(ctx, keypoints, 5, 3);\n    drawLineBetweenPoints(ctx, keypoints, 6, 3);\n    drawLineBetweenPoints(ctx, keypoints, 7, 3);\n  }\n  if (allKeypoints.length == 8) {\n    for (let j = 0; j < 8; j++) {\n      // allKeypoints.push([-1, -1]);\n    }\n  }\n  console.log("currentWidth", currentWidth, currentHeight, xi, yi);\n  if (imgKeypoints.length == 1) {\n    for (let j = 0; j < 16; j += 2) {\n      // Adjust the x-coordinate\n      let x = imgKeypoints[0][j] * xi;\n      x *= currentWidth / 160.0;\n\n      // Adjust the y-coordinate\n      let y = imgKeypoints[0][j + 1] * yi;\n      y *= currentHeight / 160.0;\n\n      // Create a 2D point and push it to the allKeypoints array\n      // allKeypoints.push([x, y]);\n    }\n  }\n  for (let i = 0; i < imgKeypoints.length; i++) {\n    for (let j = 0; j < 16; j += 2) {\n      // Adjust the x-coordinate\n      let x = imgKeypoints[i][j] * xi;\n      x *= currentWidth / 160.0;\n\n      // Adjust the y-coordinate\n      let y = imgKeypoints[i][j + 1] * yi;\n      y *= currentHeight / 160.0;\n\n      // Create a 2D point and push it to the allKeypoints array\n      allKeypoints.push([x, y]);\n    }\n  }\n\n  // Ensure the length of allKeypoints is 16 by adding placeholders if necessary\n  while (allKeypoints.length < 16) {\n    allKeypoints.push([-1, -1]);\n  }\n  console.log("imgKeypoints", imgKeypoints);\n  console.log("allKeypoints", allKeypoints);\n};\nconst renderBoxes = (canvasRef, landmarks_data, boxes_data, scores_data, xi, yi, fps) => {\n  // console.log(landmarks_data)\n  const ctx = canvasRef.getContext("2d");\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // clean canvas\n  drawFPS(ctx, fps);\n  for (let i = 0; i < scores_data.length; ++i) {\n    // filter based on class threshold\n    const score = (scores_data[i] * 100).toFixed(1);\n    let [y1, x1, y2, x2] = boxes_data.slice(i * 4, (i + 1) * 4);\n    x1 *= xi;\n    x2 *= xi;\n    y1 *= yi;\n    y2 *= yi;\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    // draw box.\n    ctx.fillStyle = colors["nose"];\n\n    // draw border box.\n    ctx.strokeStyle = colors["nose"];\n    ctx.lineWidth = Math.max(Math.min(ctx.canvas.width, ctx.canvas.height) / 200, 2.5);\n    ctx.strokeRect(x1, y1, width, height);\n    let keypoints = landmarks_data.slice([i, 0, 0], [1, -1, -1]).reshape([8, 2]).arraySync();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = "green";\n    drawLineBetweenPoints(ctx, keypoints, 0, 1);\n    drawLineBetweenPoints(ctx, keypoints, 0, 2);\n    drawLineBetweenPoints(ctx, keypoints, 0, 3);\n    drawLineBetweenPoints(ctx, keypoints, 4, 5);\n    drawLineBetweenPoints(ctx, keypoints, 5, 3);\n    drawLineBetweenPoints(ctx, keypoints, 6, 3);\n    drawLineBetweenPoints(ctx, keypoints, 7, 3);\n  }\n};\nfunction drawLineBetweenPoints(ctx, keypoints, index1, index2) {\n  // const x1 = keypoints[index1][0];\n  // const y1 = keypoints[index1][1];\n  // const x2 = keypoints[index2][0];\n  // const y2 = keypoints[index2][1];\n  const x1 = keypoints[index1].x;\n  const y1 = keypoints[index1].y;\n  const x2 = keypoints[index2].x;\n  const y2 = keypoints[index2].y;\n  ctx.beginPath();\n  ctx.moveTo(x1, y1);\n  ctx.lineTo(x2, y2);\n  ctx.stroke();\n  ctx.closePath();\n}\n// function drawFPS(ctx, fps) {\n//   // Adjust these values for desired position and style\n//   const fontSize = 22;\n//   const x = 250;\n//   const y = 300;\n\n//   ctx.font = `${fontSize}px sans-serif`;\n//   ctx.fillStyle = "red"; // Adjust color as needed\n//   ctx.fillText(`FPS: ${fps.toFixed(2)}`, x, y);\n// }\n\nfunction drawFPS(ctx, fps) {\n  // Adjust these values for desired position and style\n  const fontSize = 22;\n  const x = 250;\n  const y = 300;\n\n  // Save the current context state\n  ctx.save();\n\n  // Translate to the desired x position\n  ctx.translate(x, 0);\n\n  // Scale horizontally by -1 to mirror the text\n  ctx.scale(-1, 1);\n\n  // Translate back\n  ctx.translate(-x, 0);\n\n  // Set up the text style\n  ctx.font = `${fontSize}px sans-serif`;\n  ctx.fillStyle = "red"; // Adjust color as needed\n\n  // Draw the mirrored text\n  ctx.fillText(`FPS: ${fps.toFixed(2)}`, x, y);\n\n  // Restore the context to its original state\n  ctx.restore();\n}\n// EXTERNAL MODULE: ./node_modules/jsfeat/build/jsfeat.js\nvar jsfeat = __webpack_require__(7254);\n;// ./src/MLModelProviders/Shoe_landmarks_provider.js\n\n // set backend to webgl\n\n\n\n\n// import shoeML from "../MLModels/best_web_model_81_224/model.json";\nclass ShoeLandMarkProvider {\n  model;\n  canvas;\n  canvasCtx;\n  canvasData;\n  video;\n  modelPath;\n  data;\n  thresholdFloor;\n  thresholdSeil;\n  skipCall;\n  win_size;\n  epsilon;\n  min_eigen;\n  max_iterations;\n  totalDifference;\n  curr_img_pyr;\n  prev_img_pyr;\n  point_count;\n  point_status;\n  prev_xy;\n  curr_xy;\n  canvasWidth;\n  canvasHeight;\n  modelWidth;\n  modelHeight;\n  previousTime;\n  fps;\n  frames;\n  threshCount;\n  mSize;\n  // Exponential Moving Average smoothing factor (alpha)\n  SMOOTHING_ALPHA = 0.5;\n\n  // Array to hold smoothed keypoints (2 * point_count)\n  smoothed_xy; // Initialized to zeros\n\n  constructor(callback) {\n    this.callback = callback;\n    this.canvas = document.createElement("canvas");\n    let contextAttributes = {\n      willReadFrequently: true\n    };\n    this.canvasCtx = this.canvas.getContext("2d", contextAttributes);\n    this.mSize = 224;\n    this.inputSize = [1, this.mSize, this.mSize, 3];\n    this.originalSize = [1, 800, 920, 3];\n    this.resizedImg;\n    this.thresholdFloor = 25.0;\n    this.thresholdSeil = 50.0;\n    this.skipCall = 0;\n    this.win_size = 20;\n    this.epsilon = 0.01;\n    this.min_eigen = 0.001;\n    this.max_iterations = 30;\n    this.totalDifference = 0;\n    this.canvasWidth = 480;\n    this.canvasHeight = 360;\n    this.curr_img_pyr = new jsfeat.pyramid_t(3);\n    this.prev_img_pyr = new jsfeat.pyramid_t(3);\n    this.curr_img_pyr.allocate(this.canvasWidth, this.canvasHeight, jsfeat.U8_t | jsfeat.C1_t);\n    this.prev_img_pyr.allocate(this.canvasWidth, this.canvasHeight, jsfeat.U8_t | jsfeat.C1_t);\n    this.point_count = 20;\n    this.point_status = new Uint8Array(20);\n    this.prev_xy = new Float32Array(20 * 2);\n    this.curr_xy = new Float32Array(20 * 2);\n    this.modelWidth = this.mSize;\n    this.modelHeight = this.mSize;\n    this.bounds;\n    this.SMOOTHING_ALPHA = 0.5;\n    this.smoothed_xy = new Float32Array(20 * 2).fill(0);\n    this.previousTime = 0;\n    this.fps = 0;\n    this.frames = 0;\n    this.threshCount = 0;\n  }\n  async send(video, isVideo) {\n    //console.log(video, isVideo);\n    // this.data=imageData;\n    this.video = video;\n    if (isVideo) {\n      this.width = video.videoWidth;\n      this.height = video.videoHeight;\n    } else {\n      this.width = this.video.width;\n      this.height = this.video.height;\n    }\n    this.canvas.width = this.width;\n    this.canvas.height = this.height;\n    this.canvasCtx.scale(-1, 1);\n    this.canvasCtx.translate(-this.canvas.width, 0);\n    this.canvasCtx.drawImage(video, 0, 0, this.width, this.height);\n    this.canvasData = this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height); //await this.loadImageData(imagePath);\n\n    // const [modelWidth, modelHeight] = this.model.inputShape.slice(1, 3); // get model width and height\n    // console.log("modelWidth, modelHeight ",modelWidth,modelHeight)\n\n    dist/* engine */.Hi9().startScope(); // start scoping tf engine\n    const [input, xRatio, yRatio] = this.preprocess(this.video, this.modelWidth, this.modelHeight); // preprocess image\n\n    if (this.threshCount >= this.skipCall) {\n      // Force model inference after skipCall frames\n      // console.log(\n      //   "Skipping tracking due to consecutive tracked frames. Forcing model inference.",\n      //   this.threshCount\n      // );\n      this.threshCount = 0;\n      // Proceed to perform model inference below\n    } else if (this.prev_xy[0] !== 0 || this.prev_xy[1] !== 0) {\n      const trackingValid = this.trackKeypoints();\n      if (trackingValid && this.threshCount < this.skipCall) {\n        // console.log(\n        //   "Tracking valid. Using tracked keypoints.",\n        //   this.threshCount\n        // );\n        this.threshCount += 1;\n\n        //Split back keypoints\n        // const { adjustedBoxes, adjustedKeypoints } = this.splitTrackedPoints(this.curr_xy, this.point_count);\n        const finalClassLabels = [0, 1]; // Example class labels\n        const finalScores = [1.0, 1.0]; // Example scores\n\n        // **Temporal Smoothing Integration**\n        // Update smoothed_xy using EMA\n        for (let i = 0; i < this.point_count * 2; i++) {\n          this.smoothed_xy[i] = this.SMOOTHING_ALPHA * this.curr_xy[i] + (1 - this.SMOOTHING_ALPHA) * this.smoothed_xy[i];\n        }\n        const {\n          adjustedBoxes,\n          adjustedKeypoints\n        } = this.splitTrackedPoints(this.smoothed_xy, this.point_count);\n        this.bounds = adjustedBoxes;\n        // console.log(\n        //   "Tracking valid. renderPoints2",\n        //   this.point_count,\n        //   this.curr_xy\n        // );\n        renderPoints2(this.canvas, adjustedKeypoints, this.fps, adjustedBoxes, finalClassLabels, finalScores);\n        // Update previous image and keypoints for next tracking\n        const temp = this.prev_img;\n        this.prev_img = this.curr_img;\n        this.curr_img = temp;\n\n        // Swap pyramids\n        const temp_pyr = this.prev_img_pyr;\n        this.prev_img_pyr = this.curr_img_pyr;\n        this.curr_img_pyr = temp_pyr;\n\n        // Update previous keypoints\n        this.prev_xy.set(this.curr_xy);\n\n        // Update prediction output\n        // predictionOutput.innerText = `Using tracked keypoints. \\nConsecutive Tracked Frames: ${tracking.consecutiveTrackedFrames} \\n\\nFPS: ${fps.toFixed(1)}\\n`+ camerafps;\n        const currentTime = performance.now();\n        const elapsedTime = currentTime - this.previousTime;\n        this.frames++;\n        if (elapsedTime >= 1000) {\n          // Update FPS every second\n          this.fps = this.frames / (elapsedTime / 1000);\n          this.frames = 0; // Reset frame count for next calculation\n          this.previousTime = currentTime;\n        }\n        this.callback({\n          image: this.canvas,\n          landmarks: this.curr_xy,\n          bounds: this.bounds\n        });\n        return; // Exit performInference without model inference\n      } else {\n        // console.log(\n        //   "Tracking invalid or threshold exceeded. Performing model inference."\n        // );\n        tracking.consecutiveTrackedFrames = 0;\n        // Proceed to perform model inference below\n      }\n    }\n    // if (\n    //   this.ispointValid(this.prev_xy, this.curr_xy, this.point_status) &&\n    //   this.threshCount < this.skipCall\n    // ) {\n    //   console.log("called tracking valid")\n    //   this.threshCount = this.threshCount + 1;\n    //   if (this.totalDifference < this.thresholdFloor) {\n    //     // curr_xy=prev_xy\n    //     // renderPoints(this.canvas, this.prev_xy, this.fps,this.bounds);\n    //   } else {\n    //     // renderPoints(this.canvas, this.curr_xy, this.fps,this.bounds);\n    //   }\n    // } else {\n\n    this.threshCount = 0;\n    const res = this.model.execute(input);\n    const transRes = res.transpose([0, 2, 1]); // [1, 1029, 22]\n    // console.log(`Transpose completed.`);\n    const squeezed = transRes.squeeze(); // [1029, 22]\n    // console.log(`Squeezed completed.`);\n    // // Slice into boxes, scores, and landmarks\n    const boxes = squeezed.slice([0, 0], [-1, 4]); // [1029, 4]\n    const scores = squeezed.slice([0, 4], [-1, 2]); // [1029, 2]\n    const landmarks = squeezed.slice([0, 6], [-1, 16]); // [1029, 16]\n    // console.log(`Sliced tensors into boxes, scores, and landmarks.`);\n    // // Convert tensors to arrays\n    // console.log(\'Converting tensors to JavaScript arrays.\');\n    const {\n      boxesData,\n      scoresData,\n      landmarksData\n    } = await this.processTensors(boxes, scores, landmarks);\n    // console.log(\'Converted tensors to JavaScript arrays.\');\n    // Dispose intermediate tensors to free memory\n    dist/* dispose */.ASo([transRes, squeezed, boxes, scores, landmarks]);\n    // Process detections\n    const {\n      finalBoxes,\n      finalScores,\n      finalClassLabels,\n      finalLandmarks\n    } = await this.processDetections(boxesData, scoresData, landmarksData);\n    // console.log(`Process detections completed. Total detections: ${finalBoxes.length}`);\n    // console.log("finalClassLabels ",finalClassLabels)\n    // console.log("finalScores ",finalScores)\n    // console.log("finalBoxes ",finalBoxes)\n    const scaleFactorW = yRatio * (this.canvas.height / 224.0);\n    const scaleFactorH = xRatio * (this.canvas.width / 224.0);\n    const {\n      adjustedBoxes,\n      adjustedKeypoints\n    } = this.scaleDetections(finalBoxes, finalLandmarks, scaleFactorW, scaleFactorH);\n    // console.log("adjustedKeypoints ", adjustedKeypoints);\n    // console.log("adjustedBoxes ", adjustedBoxes);\n    // console.log("adjustedBoxes length", adjustedBoxes.length);\n    this.initializeKeypoints(adjustedKeypoints, adjustedBoxes, finalClassLabels);\n    this.bounds = adjustedBoxes;\n\n    // const { bboxes, scoress, labels, keypoints } = await this.processPredictions(res);\n\n    // const bestPreds = await this.selectBestPredictions(bboxes, scoress, labels, keypoints);\n    // const [imgBboxes, imgScores, imgLabels, imgKeypoints] = bestPreds;\n\n    // const allKeypoints = [];\n    // const boundingBox = [];\n    // console.log("Canvas Width :",this.canvas.width," Canvas height :",this.canvas.height)\n    // drawBoxAndPoints(allKeypoints, imgKeypoints,boundingBox, imgBboxes,xRatio,\n    //     yRatio,\n    //   this.canvas.width,this.canvas.height )\n\n    // this.curr_xy = allKeypoints;\n    // this.bounds = boundingBox;\n\n    // console.log("boundingBox:",boundingBox)\n    renderPoints2(this.canvas, adjustedKeypoints, this.fps, adjustedBoxes, finalClassLabels, finalScores);\n    dist/* dispose */.ASo([res]);\n    // }\n    const currentTime = performance.now();\n    const elapsedTime = currentTime - this.previousTime;\n    this.frames++;\n    if (elapsedTime >= 1000) {\n      // Update FPS every second\n      this.fps = this.frames / (elapsedTime / 1000);\n      this.frames = 0; // Reset frame count for next calculation\n      this.previousTime = currentTime;\n    }\n    // console.log(this.curr_xy);\n    this.callback({\n      image: this.canvas,\n      landmarks: this.prev_xy,\n      bounds: this.bounds\n    });\n\n    // tf.engine().endScope();\n  }\n  /**\n   * Splits the tracking.curr_xy array into adjustedBoxes and adjustedKeypoints.\n   * Assumes that for each class:\n   * - The first 2 points are the bounding box coordinates (x1, y1, x2, y2).\n   * - The next 8 points are the keypoints (x, y) for each keypoint.\n   *\n   * @param {Float32Array} curr_xy - The flat array containing all tracked points.\n   * @param {number} point_count - The total number of points being tracked.\n   * @returns {Object} An object containing adjustedBoxes and adjustedKeypoints arrays.\n   */\n  splitTrackedPoints(curr_xy, point_count) {\n    const adjustedBoxes = [];\n    const adjustedKeypoints = [];\n    const pointsPerClass = 10; // 2 box points + 8 keypoints per class\n\n    // Calculate the number of classes based on point_count\n    const numClasses = Math.floor(point_count / pointsPerClass);\n    for (let classIndex = 0; classIndex < numClasses; classIndex++) {\n      const baseIndex = classIndex * pointsPerClass;\n\n      // Extract bounding box coordinates\n      const box = {\n        x1: curr_xy[baseIndex * 2],\n        y1: curr_xy[baseIndex * 2 + 1],\n        x2: curr_xy[(baseIndex + 1) * 2],\n        y2: curr_xy[(baseIndex + 1) * 2 + 1]\n      };\n      adjustedBoxes.push(box);\n\n      // Extract keypoints\n      const keypoints = [];\n      for (let kp = 0; kp < 8; kp++) {\n        const kpIndex = baseIndex + 2 + kp;\n        keypoints.push({\n          x: curr_xy[kpIndex * 2],\n          y: curr_xy[kpIndex * 2 + 1]\n        });\n      }\n      adjustedKeypoints.push(keypoints);\n    }\n    return {\n      adjustedBoxes,\n      adjustedKeypoints\n    };\n  }\n  // Function to track keypoints using jsfeat\n  trackKeypoints() {\n    // Perform optical flow tracking\n    jsfeat.optical_flow_lk.track(this.prev_img_pyr, this.curr_img_pyr, this.prev_xy, this.curr_xy, this.point_count, this.win_size | 0, this.max_iterations | 0, this.point_status, this.epsilon, this.min_eigen);\n    // console.log(\'Tracking:: tracking.prev_xy\',this.prev_xy);\n    // console.log(\'Tracking:: tracking.curr_xy\',this.curr_xy);\n    // console.log(\'Tracking:: tracking.point_count\',this.point_count);\n    // console.log(\'Tracking:: tracking.curpoint_statusr_xy\',this.point_status);\n    // Validate tracked points\n    this.totalDifference = 0;\n    let valid = true;\n    for (let i = 0; i < this.point_count; i++) {\n      // if (tracking.point_status[i] === 1) {\n      const prevX = this.prev_xy[i * 2];\n      const prevY = this.prev_xy[i * 2 + 1];\n      const currX = this.curr_xy[i * 2];\n      const currY = this.curr_xy[i * 2 + 1];\n      if (isNaN(currX) || isNaN(currY)) {\n        valid = false;\n        break;\n      }\n      this.totalDifference += Math.abs(prevX - currX) + Math.abs(prevY - currY);\n      // } else {\n      //     valid = false;\n      //     break;\n      // }\n    }\n    // console.log("tracking.totalDifference ",this.totalDifference,)\n    return valid && this.totalDifference < this.thresholdSeil;\n  }\n  /**\n   * Initializes the tracking.prev_xy array with bounding box points and keypoints for each class.\n   * Ensures that the sequence is maintained as:\n   * [Class 0 Bounding Box (x1, y1, x2, y2), Class 0 Keypoints (8x [x, y]),\n   *  Class 1 Bounding Box (x1, y1, x2, y2), Class 1 Keypoints (8x [x, y])]\n   *\n   * If a class is not present in classArray, its bounding box and keypoints are filled with zeros.\n   *\n   * @param {Array<Array<{x: number, y: number}>>} finalLandmarks - Array of landmarks per detection.\n   * @param {Array<{x1: number, y1: number, x2: number, y2: number}>} finalBoxes - Array of bounding boxes per detection.\n   * @param {Array<number>} classArray - Array indicating which classes are present, e.g., [0, 1], [0], [1].\n   */\n  initializeKeypoints(finalLandmarks, finalBoxes, classArray) {\n    // Define the list of desired classes in order: Class 0 (Left Shoe), Class 1 (Right Shoe)\n    const desiredClasses = [0, 1]; // Adjust as needed for more classes\n\n    // Check if there are any detections\n    if (finalLandmarks.length > 0) {\n      // console.log(\n      //   "initializeKeypoints - Number of Classes Detected:",\n      //   finalLandmarks.length\n      // );\n\n      // Initialize all points to zero to handle missing classes\n      this.prev_xy.fill(0);\n\n      // Iterate through each desired class in order\n      for (let cls of desiredClasses) {\n        if (classArray.includes(cls)) {\n          // Find the index of the current class in classArray\n          const detectionIndex = classArray.indexOf(cls);\n\n          // Retrieve the corresponding landmarks and bounding box\n          const classKeypoints = finalLandmarks[detectionIndex]; // Array of 8 keypoints for this class\n          const classBox = finalBoxes[detectionIndex]; // Corresponding bounding box for this class\n\n          // console.log(`initializeKeypoints - Processing Class ${cls}:`, classBox, classKeypoints);\n\n          // Calculate the base index in tracking.prev_xy for this class\n          // Each class has 2 bounding box points + 8 keypoints = 10 points\n          const basePointIndex = cls * 10; // Class 0: 0, Class 1: 10\n\n          // Assign Bounding Box Points\n          this.prev_xy[basePointIndex * 2] = classBox.x1;\n          this.prev_xy[basePointIndex * 2 + 1] = classBox.y1;\n          this.prev_xy[(basePointIndex + 1) * 2] = classBox.x2;\n          this.prev_xy[(basePointIndex + 1) * 2 + 1] = classBox.y2;\n\n          // Assign Keypoints\n          for (let kp = 0; kp < 8; kp++) {\n            this.prev_xy[(basePointIndex + 2 + kp) * 2] = classKeypoints[kp].x;\n            this.prev_xy[(basePointIndex + 2 + kp) * 2 + 1] = classKeypoints[kp].y;\n          }\n        } else {\n          // If the class is not present, its points remain as zeros\n          const basePointIndex = cls * 10; // Class 0: 0, Class 1: 10\n\n          // console.log(`initializeKeypoints - Class ${cls} not detected. Filling with zeros.`);\n\n          // Optional: Explicitly set to zero (already done by fill)\n          this.prev_xy[basePointIndex * 2] = 0;\n          this.prev_xy[basePointIndex * 2 + 1] = 0;\n          this.prev_xy[(basePointIndex + 1) * 2] = 0;\n          this.prev_xy[(basePointIndex + 1) * 2 + 1] = 0;\n          for (let kp = 0; kp < 8; kp++) {\n            this.prev_xy[(basePointIndex + 2 + kp) * 2] = 0;\n            this.prev_xy[(basePointIndex + 2 + kp) * 2 + 1] = 0;\n          }\n        }\n      }\n\n      // Reset threshold count after initializing keypoints\n      this.threshCount = 0;\n\n      // console.log("initializeKeypoints - Keypoints Initialized:", this.prev_xy);\n    } else {\n      // console.log("initializeKeypoints - No landmarks to initialize.");\n    }\n  }\n\n  // ====================== Process Tensors Function ======================\n  async processTensors(boxes, scores, landmarks) {\n    // Start timing\n    const t0 = performance.now();\n\n    // Initiate all data retrievals concurrently using asynchronous methods\n    const boxesDataPromise = boxes.dataSync();\n    const scoresDataPromise = scores.dataSync();\n    const landmarksDataPromise = landmarks.dataSync();\n\n    // Await all conversions simultaneously\n    const [boxesDataFlat, scoresDataFlat, landmarksDataFlat] = await Promise.all([boxesDataPromise, scoresDataPromise, landmarksDataPromise]);\n\n    // Reshape flat arrays into the desired shapes\n    const boxesData = this.reshapeFlatArray(Array.from(boxesDataFlat), boxes.shape[0], boxes.shape[1]); // [1029, 4]\n    const scoresData = this.reshapeFlatArray(Array.from(scoresDataFlat), scores.shape[0], scores.shape[1]); // [1029, 2]\n    const landmarksData = this.reshapeFlatArray(Array.from(landmarksDataFlat), landmarks.shape[0], landmarks.shape[1]); // [1029, 16]\n\n    const processTime = performance.now() - t0;\n    // console.log(`Process Tensors Time: ${processTime.toFixed(1)} ms`);\n\n    return {\n      boxesData,\n      scoresData,\n      landmarksData\n    };\n  }\n  drawDetections(adjustedBoxes, adjustedKeypoints, finalClassLabels, finalScores, canvasRef) {\n    // console.log("drawDetections called");\n    // Clear the overlay canvas before drawing\n    const ctx = canvasRef.getContext("2d");\n\n    // Define colors for different classes\n    const classColors = {\n      0: "rgba(255, 0, 0, 0.7)",\n      // Left Shoe - Red\n      1: "rgba(0, 255, 0, 0.7)" // Right Shoe - Green\n    };\n\n    // Define keypoint color\n    const keypointColor = "rgba(0, 0, 255, 0.9)"; // Blue\n\n    const keypointdebug = ["blue", "green", "yellow", "white", "red", "black", "purple", "orange"]; // Blue\n\n    // Define line color for connections between keypoints\n    ctx.strokeStyle = "rgba(0, 255, 255, 0.8)"; // Cyan for lines\n    ctx.lineWidth = 2; // Set line width for connections\n\n    // Define font for labels\n    ctx.font = "18px Arial";\n    ctx.textBaseline = "top";\n    // console.log("drawDetections called", adjustedBoxes.length);\n    adjustedBoxes.forEach((box, index) => {\n      const color = classColors[finalClassLabels[index]] || "rgba(255, 255, 0, 0.7)"; // Default to Yellow\n\n      // Draw bounding box\n      ctx.strokeStyle = color;\n      ctx.lineWidth = 2;\n      ctx.strokeRect(box.x1, box.y1, box.x2 - box.x1, box.y2 - box.y1);\n      // Draw label with score\n      const label = finalClassLabels[index] === 0 ? "Left Shoe" : "Right Shoe";\n      const score = (finalScores[index] * 100).toFixed(1) + "%";\n      ctx.fillStyle = color;\n      ctx.fillText(`${label} (${score})`, box.x1, box.y1 - 25);\n\n      // Draw keypoints and connections\n      const keypoints = adjustedKeypoints[index];\n      keypoints.forEach((kp, kpIndex) => {\n        // Draw keypoint\n        ctx.beginPath();\n        ctx.arc(kp.x, kp.y, 4, 0, 2 * Math.PI); // Radius of 4 for better visibility\n        ctx.fillStyle = keypointdebug[kpIndex];\n        // console.log(keypointdebug[kpIndex]);\n        ctx.fill();\n        ctx.closePath();\n      });\n\n      // Draw connections between keypoints\n      ctx.strokeStyle = "yellow";\n      this.drawLineBetweenPoints(ctx, keypoints, 0, 1);\n      ctx.strokeStyle = "pink";\n      this.drawLineBetweenPoints(ctx, keypoints, 0, 2);\n      ctx.strokeStyle = "magenta";\n      this.drawLineBetweenPoints(ctx, keypoints, 0, 3);\n      ctx.strokeStyle = "indigo";\n      this.drawLineBetweenPoints(ctx, keypoints, 4, 5);\n      ctx.strokeStyle = "silver";\n      this.drawLineBetweenPoints(ctx, keypoints, 5, 3);\n      ctx.strokeStyle = "brown";\n      this.drawLineBetweenPoints(ctx, keypoints, 6, 3);\n      ctx.strokeStyle = "black";\n      this.drawLineBetweenPoints(ctx, keypoints, 7, 3);\n    });\n  }\n  drawLineBetweenPoints(ctx, keypoints, index1, index2) {\n    if (index1 < keypoints.length && index2 < keypoints.length) {\n      const x1 = keypoints[index1].x;\n      const y1 = keypoints[index1].y;\n      const x2 = keypoints[index2].x;\n      const y2 = keypoints[index2].y;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.closePath();\n    }\n  }\n  // Shared Function: Scale Detections\n  scaleDetections(finalBoxes, finalLandmarks, scaleFactorW, scaleFactorH) {\n    // Adjust boxes to original image size (160 -> display size)\n    const t0 = performance.now(); // Start timing\n    const adjustedBoxes = finalBoxes.map(box => {\n      const [center_x, center_y, width, height] = box;\n      // Convert from normalized center coordinates to corner coordinates\n      const x1 = (center_x - width / 2) * scaleFactorW;\n      const y1 = (center_y - height / 2) * scaleFactorH;\n      const x2 = (center_x + width / 2) * scaleFactorW;\n      const y2 = (center_y + height / 2) * scaleFactorH;\n      return {\n        x1: x1,\n        y1: y1,\n        x2: x2,\n        y2: y2\n      };\n    });\n\n    // Adjust keypoints to original image size (160 -> display size)\n    const adjustedKeypoints = finalLandmarks.map(landmark => {\n      const keypoints = [];\n      for (let j = 0; j < 8; j++) {\n        // Assuming 8 keypoints, each with x and y\n        const x = landmark[j * 2] * scaleFactorW;\n        const y = landmark[j * 2 + 1] * scaleFactorH;\n        keypoints.push({\n          x: x,\n          y: y\n        });\n      }\n      return keypoints;\n    });\n    const scaleTime = performance.now() - t0; // End timing\n    // console.log(`Scale Detections Time: ${scaleTime.toFixed(1)} ms`);\n\n    return {\n      adjustedBoxes,\n      adjustedKeypoints,\n      scaleTime\n    };\n  }\n  reshapeFlatArray(flatArray, numRows, numCols) {\n    const reshapedArray = new Array(numRows);\n    for (let i = 0; i < numRows; i++) {\n      const start = i * numCols;\n      const end = start + numCols;\n      reshapedArray[i] = flatArray.slice(start, end);\n    }\n    return reshapedArray;\n  }\n  // Shared Function: Process Detections (Image and Video)\n  async processDetections(boxesData, scoresData, landmarksData) {\n    const t0 = performance.now(); // Start timing\n\n    // Define confidence threshold\n    const confidenceThreshold = 0.5;\n\n    // Prepare combined scores, class labels, and landmarks\n    const detectionsByClass = {};\n    for (let i = 0; i < scoresData.length; i++) {\n      for (let c = 0; c < scoresData[i].length; c++) {\n        if (scoresData[i][c] >= confidenceThreshold) {\n          if (!detectionsByClass[c]) {\n            detectionsByClass[c] = {\n              boxes: [],\n              scores: [],\n              landmarks: []\n            };\n          }\n          detectionsByClass[c].boxes.push(boxesData[i]);\n          detectionsByClass[c].scores.push(scoresData[i][c]);\n          detectionsByClass[c].landmarks.push(landmarksData[i]);\n        }\n      }\n    }\n    const finalBoxes = [];\n    const finalScores = [];\n    const finalClassLabels = [];\n    const finalLandmarks = [];\n    const nmsPromises = [];\n    for (const cls in detectionsByClass) {\n      const clsDetections = detectionsByClass[cls];\n      if (clsDetections.boxes.length === 0) continue;\n      const clsBoxesTensor = dist/* tensor2d */.KtR(clsDetections.boxes);\n      const clsScoresTensor = dist/* tensor1d */.tGX(clsDetections.scores);\n      const maxOutputSize = 1; // Only one detection per class\n      const iouThreshold = 0.45;\n      const scoreThresholdNMS = 0.5;\n      const nmsPromise = dist/* image */.Slp.nonMaxSuppressionAsync(clsBoxesTensor, clsScoresTensor, maxOutputSize, iouThreshold, scoreThresholdNMS).then(clsNmsIndices => {\n        return clsNmsIndices.array().then(clsNmsIndicesData => {\n          clsNmsIndicesData.forEach(idx => {\n            finalBoxes.push(clsDetections.boxes[idx]);\n            finalScores.push(clsDetections.scores[idx]);\n            finalClassLabels.push(parseInt(cls));\n            finalLandmarks.push(clsDetections.landmarks[idx]);\n          });\n        }).finally(() => {\n          dist/* dispose */.ASo([clsBoxesTensor, clsScoresTensor]);\n        });\n      });\n      nmsPromises.push(nmsPromise);\n    }\n    await Promise.all(nmsPromises);\n    const processTime = performance.now() - t0; // End timing\n\n    // console.log(`Process Detections Time: ${processTime.toFixed(1)} ms`);\n\n    return {\n      finalBoxes: finalBoxes,\n      finalScores: finalScores,\n      finalClassLabels: finalClassLabels,\n      finalLandmarks: finalLandmarks,\n      processTime: processTime // Return the time taken\n    };\n  }\n  async processPredictions(preds) {\n    return dist/* tidy */.DZQ(() => {\n      // Reshape from [1, 22, 525] to [525, 22]\n      const reshaped = preds.squeeze([0]).transpose([1, 0]);\n      const bboxes = reshaped.slice([0, 0], [-1, 4]);\n      const classScores = reshaped.slice([0, 4], [-1, 2]);\n      const keypoints = reshaped.slice([0, 6]);\n      const [scoress, labels] = dist/* tidy */.DZQ(() => {\n        const maxScores = classScores.max(1);\n        const maxIndices = classScores.argMax(1);\n        return [maxScores, maxIndices];\n      });\n      // console.log("Scores shape:", scoress.shape);\n      // console.log("Scores (first 5):", Array.from(scoress.dataSync().slice(0, 5)));\n      // console.log("Labels shape:", labels.shape);\n      // console.log("Labels (first 5):", Array.from(labels.dataSync().slice(0, 5)));\n\n      // console.log("Bboxes shape:", bboxes.shape);\n      // console.log("Bboxes (first 5 rows):", Array.from(bboxes.dataSync().slice(0, 20)));  // 4 values per box, so 20 for 5 boxes\n\n      // console.log("Keypoints shape:", keypoints.shape);\n      // console.log("Keypoints (first 5 values):", Array.from(keypoints.dataSync().slice(0, 5)));\n\n      Array.from(scoress.dataSync().slice(0, 5));\n      Array.from(labels.dataSync().slice(0, 5));\n      Array.from(bboxes.dataSync().slice(0, 20));\n      Array.from(keypoints.dataSync().slice(0, 5));\n      // const classScores2 =  this.processClass(labels, scores, 0);\n\n      // console.log("Shapes:", {\n      //   bboxes: bboxes.shape,\n      //   scores: scoress.shape,\n      //   labels: labels.shape,\n      //   keypoints: keypoints.shape\n      // });\n\n      return {\n        bboxes,\n        scoress,\n        labels,\n        keypoints\n      };\n    });\n  }\n  async selectBestPredictions(bboxes, scores, labels, keypoints) {\n    // console.log("Entering selectBestPredictions");\n    // console.log("Shapes:", {\n    //   bboxes: bboxes.shape,\n    //   scores: scores.shape,\n    //   labels: labels.shape,\n    //   keypoints: keypoints.shape\n    // });\n\n    // Initialize arrays to store predictions for two classes\n    const bestBboxes = [[], []]; // Index 0 for class 0, Index 1 for class 1\n    const bestScores = [-1, -1]; // Initialize with -1 to indicate no score\n    const bestLabels = [-1, -1]; // Initialize with -1 to indicate no label\n    const bestKeypoints = [[-1, -1], [-1, -1]]; // Initialize with [-1, -1] for missing keypoints\n\n    try {\n      // Convert tensors to regular arrays\n      const [bboxesArray, scoresArray, labelsArray, keypointsArray] = await Promise.all([bboxes.array(), scores.array(), labels.array(), keypoints.array()]);\n\n      // Filter, sort, and assign predictions\n      const filteredPredictions = scoresArray.map((score, i) => ({\n        score,\n        bbox: bboxesArray[i],\n        label: labelsArray[i],\n        keypoint: keypointsArray[i]\n      })).filter(pred => pred.score > 0.5) // Filter by confidence threshold\n      .sort((a, b) => b.score - a.score); // Sort by score descending\n\n      // Assign predictions to the respective class (0 or 1) based on label\n      filteredPredictions.forEach(pred => {\n        const classIndex = pred.label;\n        if (bestScores[classIndex] === -1) {\n          // Check if no prediction for this class yet\n          bestBboxes[classIndex] = pred.bbox;\n          bestScores[classIndex] = pred.score;\n          bestLabels[classIndex] = pred.label;\n          bestKeypoints[classIndex] = pred.keypoint;\n        }\n      });\n\n      // console.log(`Final predictions:`);\n      // console.log("bestBboxes", bestBboxes);\n      // console.log("bestScores", bestScores);\n      // console.log("bestLabels", bestLabels);\n      // console.log("bestKeypoints", bestKeypoints);\n    } catch (error) {\n      // console.error("Error in selectBestPredictions:", error);\n    }\n    return [bestBboxes, bestScores, bestLabels, bestKeypoints];\n  }\n\n  // async selectBestPredictions(bboxes, scores, labels, keypoints) {\n  //   console.log("Entering selectBestPredictions");\n  //   console.log("Shapes:", {\n  //     bboxes: bboxes.shape,\n  //     scores: scores.shape,\n  //     labels: labels.shape,\n  //     keypoints: keypoints.shape\n  //   });\n\n  //   const bestBboxes = [];\n  //   const bestScores = [];\n  //   const bestLabels = [];\n  //   const bestKeypoints = [];\n\n  //   try {\n  //     // Convert tensors to regular arrays\n  //     const bboxesArray = await bboxes.array();\n  //     const scoresArray = await scores.array();\n  //     const labelsArray = await labels.array();\n  //     const keypointsArray = await keypoints.array();\n\n  //     // Filter and store predictions above the threshold\n  //     const filteredPredictions = [];\n  //     for (let i = 0; i < scoresArray.length; i++) {\n  //       const score = scoresArray[i];\n  //       if (score > 0.5) {\n  //         filteredPredictions.push({\n  //           bbox: bboxesArray[i],\n  //           score: score,\n  //           label: labelsArray[i],\n  //           keypoint: keypointsArray[i]\n  //         });\n  //       }\n  //     }\n\n  //     // Sort the filtered predictions by score in descending order\n  //     filteredPredictions.sort((a, b) => b.score - a.score);\n\n  //     // Select top 2 predictions (if more than 2 exist)\n  //     const topPredictions = filteredPredictions.slice(0, 2);\n\n  //     // Push the top predictions to the result arrays\n  //     for (let pred of topPredictions) {\n  //       bestBboxes.push(pred.bbox);\n  //       bestScores.push(pred.score);\n  //       bestLabels.push(pred.label);\n  //       bestKeypoints.push(pred.keypoint);\n  //     }\n\n  //     console.log(`Found ${bestBboxes.length} predictions above confidence threshold`);\n  //     console.log("bestBboxes", bestBboxes);\n  //     console.log("bestScores", bestScores);\n  //     console.log("bestLabels", bestLabels);\n  //     console.log("bestKeypoints", bestKeypoints);\n  //   } catch (error) {\n  //     console.error("Error in selectBestPredictions:", error);\n  //   }\n  //   return [\n  //     bestBboxes,\n  //     bestScores,\n  //     bestLabels,\n  //   bestKeypoints\n  //   ];\n  // }\n\n  createEmptyPredictions() {\n    return [dist/* zeros */.Ul9([0, 4]), dist/* zeros */.Ul9([0]), dist/* zeros */.Ul9([0], "int32"), dist/* zeros */.Ul9([0, 8, 2]) // Assuming nk keypoints with 2 coordinates each\n    ];\n  }\n  ispointValid = (prev_xy, curr_xy, point_status) => {\n    var n = prev_xy.length;\n    var i = 0;\n    this.totalDifference = 0;\n    if (prev_xy.length == 0 || curr_xy.length == 0 || prev_xy.length !== curr_xy.length) {\n      return false;\n    }\n    // console.log("ispointValid", prev_xy.length, curr_xy.length);\n    // console.log("point_status ", point_status);\n\n    for (; i < n; ++i) {\n      // if(point_status[i] == 1) {\n      if (prev_xy[i].length !== 2 || curr_xy[i].length !== 2) {\n        // console.error(\n        //   "Invalid input: Each element in prev_xy and curr_xy must be a pair of [x, y]"\n        // );\n        return false; // Early return if invalid\n      }\n      this.totalDifference += Math.abs(prev_xy[i][0] - curr_xy[i][0]) + Math.abs(prev_xy[i][1] - curr_xy[i][1]);\n\n      // }else{\n      // console.log("ispointValid return error",i,prev_xy[i],curr_xy[i])\n      // return false;\n      // }\n    }\n\n    // console.log("totalDifference", this.totalDifference);\n    return this.totalDifference < this.thresholdSeil;\n  };\n  async processClass(labels, scores, classId) {\n    try {\n      // Create a boolean mask for the current class\n      const classMask = labels.equal(dist/* scalar */.d_2(classId));\n\n      // Check if there are any true values in the mask\n      const anyTrue = await classMask.any().data();\n      if (anyTrue[0]) {\n        // Use boolean mask to select scores for this class\n        const classScores = await dist/* booleanMaskAsync */.ftb(scores, classMask);\n\n        // console.log(`Class ${classId} scores type:`, classScores.constructor.name);\n        // console.log(`Class ${classId} scores shape:`, classScores.shape);\n        // console.log(`Class ${classId} scores:`, await classScores.data());\n\n        return classScores;\n      } else {\n        // console.log(`No scores for class ${classId}`);\n        return null;\n      }\n    } catch (error) {\n      // console.error(`Error processing class ${classId}:`, error);\n      return null;\n    }\n  }\n  // async loadImageData(imagePath) {\n  //   return new Promise((resolve, reject) => {\n  //     const image = new Image();\n  //     image.onload = () => {\n  //       const canvas = document.createElement(\'canvas\');\n  //       canvas.width = image.width;\n  //       canvas.height = image.height;\n  //       const ctx = canvas.getContext(\'2d\');\n  //       ctx.drawImage(image, 0, 0);\n  //       const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n  //       resolve(imageData);\n  //     };\n  //     image.onerror = (error) => {\n  //       console.log("TFLite loadImageData ",error);\n  //       reject(error);\n  //     };\n  //     image.src = imagePath;\n  //     console.log("TFLite loadImageData done ",image);\n  //   });\n  // }\n\n  // // Function to preprocess image\n  // preprocessImage(imageData, angle)\n  //  {\n  //   const imgTensor = tf.browser.fromPixels(imageData);\n  //   console.log(imgTensor.shape);\n  //   const radians = (angle * Math.PI) / 180;\n  //   const expandedTensor = tf.expandDims(imgTensor, 0)\n  //   // Perform rotation with offset\n  //   const rotatedTensor = tf.image.rotateWithOffset(expandedTensor.toFloat(), radians);\n  //   const rotatedTensorReshaped = tf.squeeze(rotatedTensor);\n  //   console.log("TFLite imgTensor ",rotatedTensorReshaped);\n  //   this.resizedImg = tf.image.resizeBilinear(rotatedTensorReshaped, [512, 288]).toFloat();\n  //   console.log(this.resizedImg);\n  //   const bgrResizedImg = tf.reverse(this.resizedImg, [-1]);\n  //   //const normalizedImg = tf.sub(tf.div(tf.expandDims(this.resizedImg), 255.0), 1);\n  //   const normalizedImg = tf.sub(tf.div(tf.expandDims(bgrResizedImg), 127.5), 1);\n  //   const preprocessedTensor = normalizedImg.reshape(this.inputSize); //normalizedImg.reshape(this.inputSize);\n  //   return preprocessedTensor\n  // }\n\n  // async  runInference(imageData) {\n  //   try {\n  //     //const imagePath = sampleImg;\n  //     // Load the static image\n  //     //console.log(imagePath);\n  //     //  const imageData =this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height);//await this.loadImageData(imagePath);\n\n  //     //  const pixelsdata = imageData.data;\n  //     // const imageData =this.canvasCtx.getImageData(0, 0, this.canvas.width, this.canvas.height);//await this.loadImageData(imagePath);\n\n  //     // const imageData1 = picaInstance.resizeBuffer({\n  //     //   src: imageData, // Use the image buffer directly\n  //     //   width: sWidth,\n  //     //   height: sHeight,\n  //     //   toWidth: 640,\n  //     //   toHeight: 640\n  //     // })\n  //     // const pixels =this.resizeCanvasData(pixelsdata,this.canvas.width, this.canvas.height)\n\n  //     // const pixels = await Jimp.read(this.modelPath.href).then(imageBuffer => {\n  //     //   return imageBuffer.resize(640, 640);\n  //     // });\n  //     // console.log(pixels)\n  //     var dims = [1, 3, 640, 640]\n  //     const imageTensor = this.imageDataToTensor(imageData,dims)\n  //     const start = new Date();\n  //     const output = await this.run_model(this.model,imageTensor);\n  //     const end = new Date();\n  //     const time = (end.getTime() - start.getTime()) / 1000;\n  //     var cordinate= process_output(output,726,968);\n  //     console.log(cordinate)\n  //     this.callback({\n  //         image: this.canvas\n  //     });\n\n  //   } catch (error) {\n  //     console.error(\'Error:\', error);\n  //   }\n  // }\n\n  // async imageDataToTensor(image, dims) {\n  //     // 1. Get buffer data from image and create R, G, and B arrays.\n  //     var imageBufferData = image.bitmap.data;;\n  //     const redArray = [];\n  //     const greenArray = [];\n  //     const blueArray = [];\n\n  //     // 2. Loop through the image buffer and extract the R, G, and B channels\n  //     for (let i = 0; i < imageBufferData.length; i += 4) {\n  //       redArray.push(imageBufferData[i]/ 255.0);\n  //       greenArray.push(imageBufferData[i + 1]/ 255.0);\n  //       blueArray.push(imageBufferData[i + 2]/ 255.0);\n  //       // skip data[i + 3] to filter out the alpha channel\n  //     }\n\n  //     // 3. Concatenate RGB to transpose [224, 224, 3] -> [3, 224, 224] to a number array\n  //     const transposedData = redArray.concat(greenArray).concat(blueArray);\n\n  //     // 4. create the tensor object from onnxruntime-web.\n  //     const inputTensor = new ort.Tensor(\'float32\', transposedData, dims);\n  //     return inputTensor;\n  // }\n  // async resizeCanvasData(imageCanvasData, sWidth,sHeight){\n  //   const buffer = Buffer.from(imageCanvasData);\n  //   // const imageData = picaInstance.resizeBuffer({\n  //   //     src: imageCanvasData, // Use the image buffer directly\n  //   //     width: sWidth,\n  //   //     height: sHeight,\n  //   //     toWidth: 640,\n  //   //     toHeight: 640\n  //   //   })\n\n  //   const imageData = await  Jimp.read(imageCanvasData).then(imageBuffer => {\n  //       return imageBuffer.resize(640, 640);\n  //   });\n\n  //    // return imageData;\n  //     return imageData;\n  //     // Jimp.read(imageData.Buffer)\n  //     // const jimpImage = new Jimp(imageData.width, imageData.height);\n  //     // jimpImage.bitmap.data = Buffer.from(imageData.data);\n\n  //     // // Resize the image to 640x640 pixels\n  //     // const resizedWidth = 640;\n  //     // const resizedHeight = 640;\n  //     // jimpImage.resize(resizedWidth, resizedHeight);\n  //     // return jimpImage\n  // }\n\n  // async loadImagefromPath(path, width = 224, height = 224) {\n  //     // Use Jimp to load the image and resize it.\n  //     const imageData = await Jimp.default.read(path).then(imageBuffer => {\n  //         return imageBuffer.resize(width, height);\n  //     });\n\n  //     return imageData;\n  // }\n\n  // iou(box1,box2) {\n  //     return intersection(box1,box2)/union(box1,box2);\n  // }\n\n  // union(box1,box2) {\n  //     const [box1_x1,box1_y1,box1_x2,box1_y2] = box1;\n  //     const [box2_x1,box2_y1,box2_x2,box2_y2] = box2;\n  //     const box1_area = (box1_x2-box1_x1)*(box1_y2-box1_y1)\n  //     const box2_area = (box2_x2-box2_x1)*(box2_y2-box2_y1)\n  //     return box1_area + box2_area - intersection(box1,box2)\n  // }\n\n  // intersection(box1,box2) {\n  //     const [box1_x1,box1_y1,box1_x2,box1_y2] = box1;\n  //     const [box2_x1,box2_y1,box2_x2,box2_y2] = box2;\n  //     const x1 = Math.max(box1_x1,box2_x1);\n  //     const y1 = Math.max(box1_y1,box2_y1);\n  //     const x2 = Math.min(box1_x2,box2_x2);\n  //     const y2 = Math.min(box1_y2,box2_y2);\n  //     return (x2-x1)*(y2-y1)\n  // }\n\n  // process_output(output, img_width, img_height,threshold,iouThreshold) {\n  //     let boxes = [];\n  //     for (let index=0;index<8400;index++) {\n\n  //         const confidence = output[4*8400+index];\n  //         if (confidence < threshold) {\n  //             continue;\n  //         }\n  //         const xc = output[index];\n  //         const yc = output[8400+index];\n  //         const w = output[2*8400+index];\n  //         const h = output[3*8400+index];\n  //         const x1 = (xc-w/2);//640*img_width;\n  //         const y1 = (yc-h/2);//640*img_height;\n  //         const x2 = (xc+w/2);//640*img_width;\n  //         const y2 = (yc+h/2);//640*img_height;\n  //         const xp1 = output[5*8400+index];\n  //         const yp1 = output[6*8400+index];\n  //         const xp2 = output[7*8400+index];\n  //         const yp2 = output[8*8400+index];\n  //         const xp3 = output[9*8400+index];\n  //         const yp3 = output[10*8400+index];\n  //         const xp4 = output[11*8400+index];\n  //         const yp4 = output[12*8400+index];\n  //         boxes.push([x1,y1,x2,y2,confidence,xp1,yp1,xp2,yp2,xp3,yp3,xp4,yp4]);\n  //     }\n\n  //     boxes = boxes.sort((box1,box2) => box2[4]-box1[4])\n  //     const result = [];\n  //     while (boxes.length>0) {\n  //         result.push(boxes[0]);\n  //         boxes = boxes.filter(box => iou(boxes[0],box)<iouThreshold);\n  //     }\n  //     return result;\n  // }\n\n  // async run_model(model,input) {\n  //   //const model = await ort.InferenceSession.create("./shoe.onnx");\n  //   //input = new ort.Tensor(Float32Array.from(input),[1, 3, 640, 640]);\n  //   const outputs = await model.run({images:input});\n  //   return outputs["output0"].data;\n  // }\n  /**\n   * Preprocess image / frame before forwarded into the model\n   * @param {HTMLVideoElement|HTMLImageElement} source\n   * @param {Number} modelWidth\n   * @param {Number} modelHeight\n   * @returns input tensor, xRatio and yRatio\n   */\n  preprocess = (source, modelWidth, modelHeight) => {\n    let xRatio, yRatio; // ratios for boxes\n    const input = dist/* tidy */.DZQ(() => {\n      const img = dist/* browser.fromPixels */.TaL.fromPixels(source);\n      // seeting current image in gray\n      var _pt_xy = this.prev_xy;\n      this.prev_xy = this.curr_xy;\n      this.curr_xy = _pt_xy;\n      var _pyr = this.prev_img_pyr;\n      this.prev_img_pyr = this.curr_img_pyr;\n      this.curr_img_pyr = _pyr;\n      jsfeat.imgproc.grayscale(img.dataSync(), this.canvasWidth, this.canvasHeight, this.curr_img_pyr.data[0]);\n      this.curr_img_pyr.build(this.curr_img_pyr.data[0], true);\n      // padding image to square => [n, m] to [n, n], n > m\n      const [h, w] = img.shape.slice(0, 2); // get source width and height\n      //console.log("pre shape", h, w);\n      // 720 1280, 1280 720 \'xRatio \' 1 \' yRatio \' 1.7777777777777777\n      const maxSize = Math.max(w, h); // get max size\n      const imgPadded = img.pad([[0, maxSize - h],\n      // padding y [bottom only]\n      [0, maxSize - w],\n      // padding x [right only]\n      [0, 0]]);\n      xRatio = maxSize / w; // update xRatio\n      yRatio = maxSize / h; // update yRatio\n\n      return dist/* image */.Slp.resizeBilinear(imgPadded, [this.modelWidth, this.modelHeight]) // resize frame\n      .div(255.0) // normalize\n      .expandDims(0); // add batch\n    });\n    return [input, xRatio, yRatio];\n  };\n  async initilizeModel() {\n    try {\n      dist/* ready */.Gc4().then(async () => {\n        // console.log("loading shoe ml", shoeML);\n        const yolov8 = await dist/* loadGraphModel */.ox(`${window.location.href}assets/src/MLModels/best_web_model_81_224/model.json`, {\n          onProgress: fractions => {\n            // console.log("loading", fractions);\n            //  setLoading({ loading: true, progress: fractions }); // set loading fractions\n          }\n        }); // load model\n\n        await dist/* setBackend */.jh6("webgl"); //wasm webgpu webgl\n        // warming up model\n        await dist/* ready */.Gc4();\n        this.model = yolov8;\n        // console.log("model input size ", this.model.inputs[0].shape);\n        const dummyInput = dist/* ones */.SaS(this.model.inputs[0].shape);\n        const warmupResults = this.model.execute(dummyInput);\n        // setLoading({ loading: false, progress: 1 });\n        // this.model = yolov8\n        // console.log(warmupResults.dataSync()[4000]);\n        dist/* dispose */.ASo([warmupResults, dummyInput]); // cleanup memory\n        warmupResults.dispose();\n        dummyInput.dispose();\n\n        // // Profile the model execution\n        // console.log("Profiling model execution...");\n        // const profileInfo = await tf.profile(() => {\n        //   const warmupResults = this.model.execute(dummyInput);\n        //   warmupResults.dispose();\n        // });\n\n        // console.log("Profile Information:");\n        // console.log("- Kernel Names:", profileInfo.kernels.map(k => k.name).join(", "));\n        // console.log("- Total kernels:", profileInfo.kernels.length);\n        // console.log("- Aggregate time (ms):", profileInfo.timeMs.toFixed(2));\n\n        // // Log detailed kernel info\n        // profileInfo.kernels.forEach((kernel, index) => {\n        //   console.log(`Kernel ${index + 1}:`);\n        //   console.log(`  Name: ${kernel.name}`);\n        //   console.log(`  Time (ms): ${kernel.timeMs.toFixed(2)}`);\n        //   console.log(`  Output shape: ${kernel.outputShape}`);\n        // });\n\n        // // Memory usage\n        // console.log("\\nMemory Usage:");\n        // console.log(tf.memory());\n\n        // console.log("initilizeModel done");\n      });\n\n      // Continue with the rest of your initialization logic...\n    } catch (error) {\n      console.error("Error loading local TFJS model:", error);\n    }\n    //  console.log(this.model);\n    // this.runInference()\n  }\n  async initialize() {\n    // Load the model.\n    // console.log("Inside shoe class");\n    await this.initilizeModel();\n  }\n}\n;// ./src/sdkService/tryOnModes.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlet tryOnModes_texture;\nconst loadImage = async src => {\n  return new Promise((resolve, reject) => {\n    const img = getInputImage();\n    if (img.complete) {\n      tryOnModes_texture = new THREE.Texture(img);\n      tryOnModes_texture.needsUpdate = true;\n      resolve(tryOnModes_texture);\n    } else {\n      img.onload = () => {\n        tryOnModes_texture = new THREE.Texture(img);\n        tryOnModes_texture.needsUpdate = true;\n        resolve(tryOnModes_texture);\n      };\n      img.onerror = err => reject(err);\n    }\n  });\n};\nfunction loadImageTag(src) {\n  return new Promise((resolve, reject) => {\n    const img = document.createElement("img");\n    img.alt = "boy in a jacket";\n    img.classList.add("input_Image"); // Add the class "input_Image"\n    img.crossOrigin = "Anonymous";\n    img.src = src;\n    img.onload = () => {\n      resolve(img);\n    };\n    img.onerror = err => {\n      reject(err);\n    };\n  });\n}\nconst tryOnModes_onImageMode = async URL => {\n  let trackingMode = getTrackingMode();\n  hideCameraPermissionPanel();\n  setInputImageTexture(null);\n  const {\n    video_Container,\n    canavas_container\n  } = getHtmlElements();\n  video_Container.style.transform = "scaleX(1)";\n  // loaderContainer.style.display = "flex";\n  showLottieLoader();\n  canavas_container.style.display = "flex";\n  canavas_container.style.justifyContent = "center";\n  //modelsContainer.style.display = "none";\n  const canvas = document.querySelector(".output_canvas");\n  canvas.style.display = "block";\n  canvas.style.transform = "scaleX(1)";\n  cancelAnimationFrame(getAnimationFrameId());\n  if (getCurrentStream()) {\n    let tracks = getCurrentStream().getTracks();\n    tracks.forEach(track => track.stop()); // Stop all tracks\n  }\n  if (getVideo()) {\n    getVideo().pause();\n    getVideo().srcObject = null; // Disconnect the video source\n    video_Container.removeChild(getVideo()); // Remove the video element from DOM\n    setVideo(null);\n  }\n  if (sdkEngine_getInputImage()) {\n    video_Container.removeChild(sdkEngine_getInputImage());\n    setInputImage(null);\n  }\n  if (trackingMode === TrackingMode.Face) {\n    if (!getProviders().facemeshLandmarksProvider) {\n      setProvider("face", new FacemeshLandmarksProvider(onLandmarks, canvas));\n      await getProviders().facemeshLandmarksProvider.initialize();\n    }\n  } else if (trackingMode === TrackingMode.Shoe) {\n    if (!getProviders().shoesProvider) {\n      setProvider("shoe", new ShoeLandMarkProvider(onShoeLandMark));\n      await getProviders().shoesProvider.initialize();\n    }\n  } else if (trackingMode === TrackingMode.Hair) {\n    if (!getProviders().hairSegmentProvider) {\n      setProvider("hair", new HairSegmentProvider(onHairSegment));\n      await getProviders().hairSegmentProvider.initialize();\n      //console.log("hair loaded");\n    }\n  } else if (trackingMode === TrackingMode.Hand) {\n    if (!getProviders().handsLandmarkProvider) {\n      setProvider("hand", new HandsLandmarkProvider(onHandLandsmarks));\n      await getProviders().handsLandmarkProvider.initialize();\n    }\n    if (!getProviders().nailmaskProvider) {\n      setProvider("nail", new NailMaskProvider(onCameraFrame));\n      await getProviders().nailmaskProvider.initialize();\n    }\n  }\n  let img = null;\n  if (!assetsCache_hasGlobalAssetKey(URL)) {\n    try {\n      img = await loadImageTag(URL);\n    } catch (error) {\n      hideLottieLoader();\n      handleDownloadOrApiError(error, "Could not load texture");\n      return;\n    }\n    assetsCache_addToGlobalCache(URL, img);\n  } else {\n    img = assetsCache_getGlobalCacheAsset(URL);\n  }\n  setInputImage(img);\n  video_Container.appendChild(sdkEngine_getInputImage());\n  //addToGlobalCache(URL, getInputImage().src);\n  tryOnModes_texture = new three_module/* Texture */.gPd(img);\n  tryOnModes_texture.needsUpdate = true;\n  let inputImage = img;\n  canvas.width = inputImage.width;\n  canvas.height = inputImage.height;\n  canvas.style.margin = "auto";\n  video_Container.style.width = "100%";\n  video_Container.style.height = "100%";\n  setIsVideo(false);\n  resetComparisonSlider("50%", getComparisonState(), sdkEngine_getIsVideo());\n  if (!getSceneManagerInstance()) {\n    setSceneManager(new SceneManager(canvas, getDebug(), getuseOrtho()));\n  }\n  setVideoEl(inputImage);\n  let inputImageRes = inputImage.width > inputImage.height ? inputImage.width : inputImage.height;\n  let windowRes = inputImage.width > inputImage.height ? window.innerWidth : window.innerHeight;\n  let Difference = windowRes - inputImageRes;\n  let percentageDifference;\n  if (windowRes > inputImageRes) percentageDifference = Difference / windowRes;else percentageDifference = Difference / inputImageRes;\n  let div = 4;\n  if (globalVariables_isShouldHideInternalUI()) div = 1;\n  var vw = window.innerWidth;\n  var vh = window.innerHeight;\n  var imgWidth = inputImage.width;\n  var imgHeight = inputImage.height;\n  var aspectRatio = imgWidth / imgHeight;\n  // console.log(inputImage.width, inputImage.height, aspectRatio);\n\n  if (vw / vh > aspectRatio) {\n    inputImage.style.width = vw + "px";\n    inputImage.style.height = vw / aspectRatio + "px";\n\n    // If the height is still larger than the viewport height, adjust width and height\n    if (parseInt(inputImage.style.height) > vh) {\n      inputImage.style.height = vh + "px";\n      inputImage.style.width = vh * aspectRatio + "px";\n    }\n  } else {\n    inputImage.style.height = vh + "px";\n    inputImage.style.width = vh * aspectRatio + "px";\n\n    // If the width is still larger than the viewport width, adjust width and height\n    if (parseInt(inputImage.style.width) > vw) {\n      inputImage.style.width = vw + "px";\n      inputImage.style.height = vw / aspectRatio + "px";\n    }\n  }\n  // }\n\n  // console.log(inputImage.width, inputImage.height);\n  getSceneManagerInstance().setImageTryonSettings(inputImage.width, inputImage.height);\n\n  // await new Promise((resolve) => setTimeout(resolve, 500));\n  getSceneManagerInstance().updatePlaneWithImage(tryOnModes_texture);\n  if (trackingMode === TrackingMode.Face) {\n    getProviders().facemeshLandmarksProvider.setSelfieMode(sdkEngine_getIsVideo());\n    await getProviders().facemeshLandmarksProvider.send(inputImage, false, false);\n    //}\n  } else if (trackingMode === TrackingMode.Hair) {\n    getProviders().hairSegmentProvider.setSelfieMode(sdkEngine_getIsVideo());\n    await getProviders().hairSegmentProvider.send(inputImage, sdkEngine_getIsVideo());\n  } else if (trackingMode === TrackingMode.Hand) {\n    getProviders().handsLandmarkProvider.setSelfieMode(sdkEngine_getIsVideo());\n    await getProviders().handsLandmarkProvider.send(inputImage, true, sdkEngine_getIsVideo());\n    //////\n    onClearClick();\n    if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n      if (getSceneManagerInstance()) {\n        getSceneManagerInstance().resetNailData();\n      }\n      hideAllPills();\n      hideCaptureTimer();\n      hideSettingIcon("reset");\n      enableSettingIcon("capture");\n      await onImageClick(true);\n    }\n    // await new Promise((resolve) => setTimeout(resolve, 200));\n  } else if (trackingMode === TrackingMode.Shoe) {\n    await getProviders().shoesProvider.send(inputImage, false);\n  }\n\n  // getSceneManagerInstance().updatePlaneWithImage(texture);\n  await initialize(0);\n  hideAlignMessagePanel();\n  //emitModuleOpened();\n};\nconst onVideoMode = async () => {\n  if (!sdkEngine_getIsVideo()) {\n    const {\n      video_Container,\n      canavas_container\n    } = getHtmlElements();\n    // loaderContainer.style.display = "flex";\n    showLottieLoader();\n    setTempWidth(-1);\n    setImageSource(null);\n    let isvideo = sdkEngine_getIsVideo();\n    hideModelContainer();\n    canavas_container.style.display = "flex";\n    canavas_container.style.justifyContent = "center";\n    const canvas = document.querySelector(".output_canvas");\n    canvas.style.margin = "unset";\n    canvas.style.transform = "scaleX(1)";\n    cancelAnimationFrame(getAnimationFrameId());\n    let inputImage = sdkEngine_getInputImage();\n    if (inputImage) {\n      video_Container.removeChild(inputImage);\n      setInputImage(null);\n    }\n    let video = document.createElement("video");\n    setVideo(video);\n    video.controls = true; // Show video controls\n    video.setAttribute("muted", "");\n    video.defaultMuted = true;\n    video.autoplay = false;\n    video.playsInline = true; // Play inline (important for mobile)\n    video.style.width = "100%";\n    video.style.height = "100%";\n    video.style.objectFit = "cover";\n    video_Container.appendChild(video);\n    setIsVideo(true);\n    resetComparisonSlider("50%", getComparisonState(), sdkEngine_getIsVideo());\n    let trackingMode = getTrackingMode();\n    if (trackingMode === TrackingMode.Face) {\n      if (!getProviders().facemeshLandmarksProvider) {\n        setProvider("face", new FacemeshLandmarksProvider(onLandmarks, canvas));\n        await getProviders().facemeshLandmarksProvider.initialize();\n      } else {\n        getProviders().facemeshLandmarksProvider.setSelfieMode(sdkEngine_getIsVideo());\n      }\n    } else if (trackingMode === TrackingMode.Shoe) {\n      if (!getProviders().shoesProvider) {\n        setProvider("shoe", new ShoeLandMarkProvider(onShoeLandMark));\n        await getProviders().shoesProvider.initialize();\n      }\n    } else if (trackingMode === TrackingMode.Hair) {\n      // console.log("switching to hair");\n      if (!getProviders().hairSegmentProvider) {\n        setProvider("hair", new HairSegmentProvider(onHairSegment));\n        await getProviders().hairSegmentProvider.initialize();\n      } else {\n        getProviders().hairSegmentProvider.setSelfieMode(sdkEngine_getIsVideo());\n      }\n    } else if (trackingMode === TrackingMode.Hand) {\n      if (!getProviders().handsLandmarkProvider) {\n        setProvider("hand", new HandsLandmarkProvider(onHandLandsmarks));\n        await getProviders().handsLandmarkProvider.initialize();\n      } else {\n        getProviders().handsLandmarkProvider.setSelfieMode(sdkEngine_getIsVideo());\n      }\n      if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n        if (!getProviders().nailmaskProvider) {\n          setProvider("nail", new NailMaskProvider(onCameraFrame));\n          await getProviders().nailmaskProvider.initialize();\n        }\n        createStatusPill();\n        let pills = [{\n          pillId: 1,\n          pillType: "position"\n        }, {\n          pillId: 2,\n          pillType: "look"\n        }];\n        showPills(pills);\n        showSettingIcon("reset");\n        disableSettingIcon("reset");\n        disableSettingIcon("capture");\n      }\n      onClearClick();\n      if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n        if (getSceneManagerInstance()) {\n          getSceneManagerInstance().resetNailData();\n        }\n      }\n    }\n    if (!getSceneManagerInstance()) {\n      setSceneManager(new SceneManager(canvas, getDebug(), getuseOrtho()));\n    }\n    await initialize();\n    getSceneManagerInstance().setVideoTryonSettings(video.videoWidth, video.videoHeight);\n    if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n      onClearClick();\n      if (getSceneManagerInstance()) {\n        getSceneManagerInstance().resetNailData();\n      }\n    }\n    // videoEl = video;\n    setVideoEl(video);\n  }\n};\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/htmlService/styles/popupModal.css\nvar styles_popupModal = __webpack_require__(4790);\n;// ./src/htmlService/styles/popupModal.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar popupModal_options = {};\n\npopupModal_options.styleTagTransform = (styleTagTransform_default());\npopupModal_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      popupModal_options.insert = insertBySelector_default().bind(null, "head");\n    \npopupModal_options.domAPI = (styleDomAPI_default());\npopupModal_options.insertStyleElement = (insertStyleElement_default());\n\nvar popupModal_update = injectStylesIntoStyleTag_default()(styles_popupModal/* default */.A, popupModal_options);\n\n\n\n\n       /* harmony default export */ const htmlService_styles_popupModal = (styles_popupModal/* default */.A && styles_popupModal/* default */.A.locals ? styles_popupModal/* default */.A.locals : undefined);\n\n;// ./src/htmlService/popupModal.js\n\n\nfunction createPopupModal(positiveHandler, negativeHandler) {\n  const {\n    popupModal\n  } = getHtmlElements();\n  const modalContainerDiv = document.createElement("div");\n  modalContainerDiv.classList.add("modal-container");\n  const modalHeading = document.createElement("div");\n  modalHeading.classList.add("modal-heading");\n  modalHeading.innerText = "Are you sure you want to stop using Virtual Try-on?";\n  const separatorDiv = document.createElement("div");\n  separatorDiv.classList.add("modal-separator");\n  const actionsContainer = document.createElement("div");\n  actionsContainer.classList.add("modal-actions-container");\n  const {\n    NegativeActionButton,\n    PositiveActionButton\n  } = getActionButtons(positiveHandler, negativeHandler);\n  actionsContainer.appendChild(NegativeActionButton);\n  actionsContainer.appendChild(PositiveActionButton);\n  modalContainerDiv.appendChild(modalHeading);\n  modalContainerDiv.appendChild(separatorDiv);\n  modalContainerDiv.appendChild(actionsContainer);\n  popupModal.appendChild(modalContainerDiv);\n}\nfunction getActionButtons(positiveHandler, negativeHandler) {\n  const PositiveActionButton = document.createElement("button");\n  const NegativeActionButton = document.createElement("button");\n  PositiveActionButton.classList.add("modal-positive-action");\n  NegativeActionButton.classList.add("modal-negative-action");\n  PositiveActionButton.addEventListener("click", () => {\n    positiveHandler();\n  });\n  NegativeActionButton.addEventListener("click", () => {\n    negativeHandler();\n  });\n  NegativeActionButton.innerText = "Close";\n  PositiveActionButton.innerText = "Confirm";\n  return {\n    PositiveActionButton,\n    NegativeActionButton\n  };\n}\nfunction showPopupModal() {\n  const {\n    popupModal\n  } = getHtmlElements();\n  popupModal.style.display = "flex";\n}\nfunction hidePopupModal() {\n  const {\n    popupModal\n  } = getHtmlElements();\n  popupModal.style.display = "none";\n}\n;// ./src/utils/skuDataProvider.js\n\nclass skuDataProvider {\n  constructor(data) {\n    this.sku = {\n      _id: data._id,\n      category: this.getCategory(data.subCategory),\n      subCategory: this.getSubCategory(data.arEffect.effectAssets3D),\n      attributes: [{\n        icons: [],\n        colors: [],\n        effectAssets: this.getAssets(data.arEffect.effectAssets3D, data.arEffect.effectAssets2D)\n      }],\n      arEffect: {\n        envSettings: data.arEffect.envSettings\n      }\n    };\n  }\n  getConfig() {\n    return this.sku;\n  }\n  getCategory(subCategory) {\n    if (subCategory === "sunglasses" || subCategory === "eyeglasses") {\n      return CategoryFactories.glasses;\n    } else if (subCategory === "caps") {\n      return CategoryFactories.cap;\n    } else if (subCategory === "hats") {\n      return CategoryFactories.cap;\n    } else if (subCategory === "watches") {\n      return CategoryFactories.watch;\n    } else if (subCategory === "necklace") {\n      return CategoryFactories.necklace;\n    } else if (subCategory === "bracelets") {\n      return CategoryFactories.bracelet;\n    } else if (subCategory === "rings") {\n      return CategoryFactories.ring;\n    } else if (subCategory === "mangtika") {\n      return CategoryFactories.mangtika;\n    }\n  }\n  getSubCategory(assets3d) {\n    if (assets3d && assets3d.length > 0) {\n      return "3d";\n    } else {\n      return "2d";\n    }\n  }\n  getAssets(assets3d, assets2d) {\n    let assets = [];\n    if (assets3d && assets3d.length > 0 && assets3d[0]) {\n      for (let i = 0; i < assets3d.length; i++) {\n        assets.push(assets3d[i].url);\n      }\n      return assets;\n    } else {\n      for (let i = 0; i < assets2d.length; i++) {\n        if (assets2d[i].url) assets.push(assets2d[i].url);\n      }\n      return assets;\n    }\n  }\n}\n;// ./src/assets/shoevid3.mp4\n/* harmony default export */ const shoevid3 = (__webpack_require__.p + "assets/videos/e4591f341556d4c8cd74763aa687152e.mp4");\n;// ./src/sdkService/sdkEngine.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import { setErrorMessageElement } from "../js/utils/errorPanel";\n\nlet videoEl;\nlet isPause = false;\nlet comparisonState = 0;\nlet currentTryon = "";\nlet fps = 0;\nlet isInitialized = false;\nlet appliedSKU = null;\nlet isvideo = false;\nlet UserUploadSrc = null;\nlet video = null;\nlet inputImage = null;\nlet imageSource = null;\nlet inputImageTexture = null;\nlet trackingMode = TrackingMode.Face;\nlet currentStream = null;\nlet clicked = false;\nlet cameraPermissionGranted = true;\nlet sceneManager;\nlet facemeshLandmarksProvider;\nlet hairSegmentProvider;\nlet nailmaskProvider;\nlet shoesProvider;\nlet handsLandmarkProvider;\nlet videoFrameProvider;\nlet isHandVisible = false;\nconst useOrtho = true;\nconst debug = false;\nlet animationFrameId;\nlet tempWidth = -1;\nsetHtmlElements();\nconst {\n  loaderContainer: sdkEngine_loaderContainer,\n  videoContainer: sdkEngine_videoContainer,\n  video_Container: sdkEngine_video_Container,\n  optionsContainer: sdkEngine_optionsContainer,\n  canavas_container: sdkEngine_canavas_container,\n  imageInput: sdkEngine_imageInput,\n  modelsContainer: sdkEngine_modelsContainer,\n  canvas: sdkEngine_canvas,\n  configurationContainer: sdkEngine_configurationContainer,\n  configurationSubContainer: sdkEngine_configurationSubContainer,\n  toastElement: sdkEngine_toastElement\n} = getHtmlElements();\nshowLottieLoader();\nsdkEngine_canvas.style.display = "none";\nsdkEngine_canavas_container.style.display = "none";\nfunction SdkEngine() {\n  addMessageEventListener();\n  emitModuleLoading();\n  addComparisonSliderEvents(sdkEngine_video_Container);\n  setSnackbarElement();\n  initModelContainer(sdkEngine_modelsContainer);\n  hideModelContainer();\n  setCameraPermissionElement(cameraPermissionHandler);\n  setBillingElement(billingHandler);\n  hideCameraPermissionPanel();\n  hideBillingPanel();\n  initConfigContainer(sdkEngine_configurationContainer);\n  setApplyButton(applyEventHandler);\n  setResetButton(resetEventHandler);\n  setAlignMessageElement();\n  setLoadingModelPanelElement();\n  hideLoadingModelPanel();\n  setErrorElement(errorBtnHandler);\n  setAlignMsg(globalVariables_errorMessages.invisbileLiveFace);\n  hideAlignMessagePanel();\n  buildTryOnScreen(sdkEngine_tryOnEventHandler);\n  createConfigBottomSheet(configSliderHandler);\n  createConfigSettings(configSettingHeaderHandler, configSettingContentHandler, configSettingActionsHanlder);\n  showTryOnScreen();\n  buildSettingOptions(settingsEventHandler);\n  createNavigationButtons(onPrevIconClick, onCrossIconClick);\n  showCrossIcon({\n    blurredBg: false,\n    blackIcon: true\n  });\n  createPopupModal(onConfirmClick, onCloseClick);\n  initLottieLoader();\n  if (isvideo) {\n    videoEl = video;\n  } else {\n    videoEl = inputImage;\n  }\n  if (!sceneManager) {\n    sceneManager = new SceneManager(sdkEngine_canvas, debug, useOrtho);\n  }\n  fakeInit();\n}\nfunction timercallback() {\n  onImageClick();\n}\nfunction getSceneManagerInstance() {\n  return sceneManager;\n}\nfunction getIsInitialized() {\n  return isInitialized;\n}\nfunction getAnimationFrameId() {\n  return animationFrameId;\n}\nfunction sdkEngine_getInputImage() {\n  return inputImage;\n}\nfunction getCurrentStream() {\n  return currentStream;\n}\nfunction getVideo() {\n  return video;\n}\nfunction getVideoEl() {\n  return videoEl;\n}\nfunction sdkEngine_getIsVideo() {\n  return isvideo;\n}\nfunction getTrackingMode() {\n  return trackingMode;\n}\nfunction getAppliedSKU() {\n  return appliedSKU;\n}\nfunction getProviders() {\n  return {\n    facemeshLandmarksProvider,\n    handsLandmarkProvider,\n    hairSegmentProvider,\n    nailmaskProvider,\n    shoesProvider\n  };\n}\nfunction getCameraPermissionState() {\n  return cameraPermissionGranted;\n}\nfunction getuseOrtho() {\n  return useOrtho;\n}\nfunction getDebug() {\n  return debug;\n}\nfunction getComparisonState() {\n  return comparisonState;\n}\nfunction getCurrentTryon() {\n  return currentTryon;\n}\nfunction setProvider(type, value) {\n  // console.log(type, value);\n  switch (type) {\n    case "face":\n      facemeshLandmarksProvider = value;\n      break;\n    case "hand":\n      handsLandmarkProvider = value;\n      break;\n    case "hair":\n      hairSegmentProvider = value;\n      break;\n    case "nail":\n      nailmaskProvider = value;\n      break;\n    case "shoe":\n      shoesProvider = value;\n      break;\n  }\n}\nfunction setVideo(value) {\n  return video = value;\n}\nfunction setIsVideo(value) {\n  return isvideo = value;\n}\nfunction setInputImage(value) {\n  inputImage = value;\n}\nfunction setAppliedSKU(value) {\n  appliedSKU = value;\n}\nfunction setIsPause(value) {\n  isPause = value;\n}\nfunction setComparisonState(value) {\n  comparisonState = value;\n}\nfunction setInputImageTexture(value) {\n  inputImageTexture = value;\n}\nfunction setSceneManager(value) {\n  sceneManager = value;\n}\nfunction setVideoEl(value) {\n  videoEl = value;\n}\nfunction setClicked(value) {\n  clicked = value;\n  if (clicked) video?.pause();else video?.play();\n}\nfunction setTrackingMode(value) {\n  trackingMode = value;\n}\nfunction setCurrentTryon(value) {\n  currentTryon = value;\n}\nfunction setTempWidth(value) {\n  tempWidth = value;\n}\nfunction setImageSource(value) {\n  imageSource = value;\n}\nfunction setVisibilityStateOfUploadInput(state) {\n  if (isShouldHideInternalUI()) {\n    sdkEngine_imageInput.style.display = "none";\n    return;\n  }\n  sdkEngine_imageInput.style.display = state;\n}\nconst onLandmarks = ({\n  image,\n  landmarks,\n  ogLandmarks\n}) => {\n  fps++;\n  if (isvideo) sceneManager.onLandmarks(image, landmarks, ogLandmarks, isvideo);else sceneManager.onLandmarks(inputImageTexture, landmarks, ogLandmarks, isvideo);\n};\nconst onShoeLandMark = ({\n  image,\n  landmarks,\n  bounds\n}) => {\n  sceneManager.onShoeLandMark(image, landmarks, bounds, isvideo);\n};\nconst onHairSegment = (image, maskData, isvideo) => {\n  sceneManager.onHairSegment(image, maskData, isvideo);\n};\nconst onHandLandsmarks = (image, landmarks, handedness, isVideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle) => {\n  if (landmarks) {\n    isHandVisible = true;\n  } else {\n    isHandVisible = false;\n  }\n  if (isvideo) {\n    sceneManager.onHandsLandmarks(image, landmarks, handedness, isvideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle);\n  } else {\n    sceneManager.onHandsLandmarks(inputImageTexture, landmarks, handedness, isvideo, maskData, x_cord, y_cord, x2_cord, y2_cord, angle);\n  }\n};\nconst onCameraFrame = ({\n  image,\n  isMask,\n  maskData\n}) => {\n  fps++;\n  if (isMask == 0) {\n    sceneManager.onImageFrame(image, true);\n  } else {\n    sceneManager.onMaskFrame(image, maskData, true);\n  }\n};\nfunction setVisibalityOfModels() {\n  for (let i = 0; i < sceneManager.getModelData().length; i++) {\n    if (sceneManager.getModelData()[i].subCategory === getRelevantModels()) {\n      let model = document.getElementById(`model${i}`);\n      if (model) model.style.display = "block";\n    } else {\n      let model = document.getElementById(`model${i}`);\n      if (model) model.style.display = "none";\n    }\n  }\n  setVisibilityOfModels(sceneManager.getModelData(), getRelevantModels());\n}\nfunction getRelevantModels() {\n  return getCurrentTryon();\n}\nconst animate = () => {\n  animationFrameId = requestAnimationFrame(animate);\n  if (!isPause) {\n    if (isvideo && video && (trackingMode === TrackingMode.Face && facemeshLandmarksProvider && facemeshLandmarksProvider.IsInit() || trackingMode === TrackingMode.Hair && hairSegmentProvider && hairSegmentProvider.IsInit() && !hairSegmentProvider.isSelfieMode() || trackingMode === TrackingMode.Hand && handsLandmarkProvider && handsLandmarkProvider.IsInit() || trackingMode === TrackingMode.Shoe && shoesProvider)) {\n      if (video.readyState >= HTMLMediaElement.HAVE_METADATA) {\n        if (trackingMode === TrackingMode.Face) {\n          if (getCurrentTryon().id === CategoryFactories.faceanalysis) {\n            if (!clicked) {\n              facemeshLandmarksProvider.send(video, true, isvideo);\n            }\n          } else {\n            facemeshLandmarksProvider.send(video);\n          }\n        } else if (trackingMode === TrackingMode.Hair) hairSegmentProvider.send(video, isvideo);else if (trackingMode === TrackingMode.Hand) {\n          handsLandmarkProvider.send(video, clicked, isvideo);\n        } else if (trackingMode === TrackingMode.Shoe) {\n          if (shoesProvider) shoesProvider.send(video, isvideo);\n        }\n        if (tempWidth !== video.videoWidth) {\n          sceneManager.setVideoTryonSettings(video.videoWidth, video.videoHeight);\n          tempWidth = video.videoWidth;\n        }\n        sceneManager.animate(isvideo);\n      }\n    } else if (!isvideo) {\n      if (inputImage.complete) {\n        sceneManager.animate(isvideo);\n      }\n    }\n  }\n};\nlet apiResponse;\n// Handles API response\nasync function handleApiResponse(event) {\n  apiResponse = event;\n  if (!apiResponse) {\n    errorPanel_showErrorPermissionPanel("Invalid SKU Data");\n    return;\n  }\n  console.log(event.sku.arEffect);\n  if (event.sku.arEffect) {\n    let mapData = new skuDataProvider(event.sku);\n    apiResponse.sku = mapData.getConfig();\n    console.log("newdarta", apiResponse);\n  }\n  let categoryID;\n  if (apiResponse.sku._id === getAppliedSKU()) return;\n\n  //console.log(apiResponse.sku._id);\n\n  setAppliedSKU(apiResponse.sku._id);\n  if (apiResponse.sku.subCategory.toLowerCase() === "3d" || apiResponse.sku.subCategory.toLowerCase() === "2d") {\n    categoryID = apiResponse.sku.category.toLowerCase();\n  } else {\n    categoryID = apiResponse.sku.subCategory.toLowerCase();\n  }\n  let PrevTryon = getCurrentTryon();\n  setCurrentTryon(getCategoryFactorybyID(categoryID));\n  trackingMode = getCurrentTryon().MLModelInUse;\n  if (!getCurrentTryon().usesCaptureUI) {\n    hideAllPills();\n    hideCaptureTimer();\n    hideSettingIcon("reset");\n    enableSettingIcon("capture");\n  }\n\n  //setVisibalityOfModels();\n  if (trackingMode === TrackingMode.Face) {\n    if (!facemeshLandmarksProvider) {\n      facemeshLandmarksProvider = new FacemeshLandmarksProvider(onLandmarks, sdkEngine_canvas);\n      await facemeshLandmarksProvider.initialize();\n    } else {\n      facemeshLandmarksProvider.setSelfieMode(isvideo);\n    }\n  } else if (trackingMode === TrackingMode.Shoe) {\n    if (!getProviders().shoesProvider) {\n      setProvider("shoe", new ShoeLandMarkProvider(onShoeLandMark));\n      await getProviders().shoesProvider.initialize();\n    }\n  } else if (trackingMode === TrackingMode.Hair) {\n    if (!hairSegmentProvider) {\n      hairSegmentProvider = new HairSegmentProvider(onHairSegment);\n      await hairSegmentProvider.initialize();\n    } else {\n      hairSegmentProvider.setSelfieMode(isvideo);\n    }\n  } else if (trackingMode === TrackingMode.Hand) {\n    if (!handsLandmarkProvider) {\n      handsLandmarkProvider = new HandsLandmarkProvider(onHandLandsmarks);\n      await handsLandmarkProvider.initialize();\n    } else {\n      handsLandmarkProvider.setSelfieMode(isvideo);\n    }\n    if (getCurrentTryon().id === CategoryFactories.nailcolor) {\n      if (!nailmaskProvider) {\n        nailmaskProvider = new NailMaskProvider(onCameraFrame);\n        await nailmaskProvider.initialize();\n      }\n    }\n  }\n  if (PrevTryon.id !== getCurrentTryon().id) {\n    onClearClick();\n    if (PrevTryon.id === CategoryFactories.nailcolor) {\n      if (sceneManager) {\n        sceneManager.resetNailData();\n      }\n    }\n    if (PrevTryon.id === CategoryFactories.faceanalysis) {\n      // showOptionsContainer();\n    }\n  }\n  if (sceneManager) {\n    sceneManager.setAPIResponse(apiResponse);\n  }\n}\nconst stopTracking = async () => {\n  tempWidth = -1;\n  isvideo = false;\n  resetComparisonSlider("50%", comparisonState, isvideo);\n  // video_Container.style.width = "initial";\n  // video_Container.style.height = "initial";\n  imageSource = null;\n  sdkEngine_canavas_container.style.display = "none";\n  cancelAnimationFrame(animationFrameId);\n  onClearClick();\n  if (sceneManager) sceneManager.resetTryons();\n  if (inputImage) {\n    sdkEngine_video_Container.removeChild(inputImage);\n    inputImage = null;\n  }\n  if (getCurrentStream()) {\n    let tracks = getCurrentStream().getTracks();\n    tracks.forEach(track => track.stop()); // Stop all tracks\n  }\n  if (getVideo()) {\n    getVideo().pause();\n    getVideo().srcObject = null; // Disconnect the video source\n    sdkEngine_video_Container.removeChild(getVideo()); // Remove the video element from DOM\n    setVideo(null);\n  }\n  tempWidth = -1;\n};\nfunction CloseModule() {\n  stopTracking();\n  emitModuleClosed();\n  setIsClosed(true);\n}\nfunction modelsEventHandler(modelObj) {\n  onImageMode(modelObj.imageUrl);\n}\nconst initialize = async (loaderTime = 2000) => {\n  // Unload video\n\n  if (isvideo) {\n    if (video.querySelector("source")) {\n      video.querySelector("source").remove();\n    }\n    video.removeAttribute("src");\n    if (videoFrameProvider) {\n      await videoFrameProvider.stop();\n      videoFrameProvider = null;\n    }\n    let idealRes;\n    if (trackingMode === TrackingMode.Hair) {\n      idealRes = 640;\n    } else {\n      idealRes = 640;\n    }\n    //console.log(idealRes);\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      var constraints = {\n        video: {\n          facingMode: {\n            ideal: "environment"\n          },\n          width: {\n            ideal: idealRes\n          },\n          frameRate: {\n            ideal: 30\n          },\n          //\n          advanced: [\n          // { frameRate: { min: 60 } },\n          // { facingMode: { exact: "user" } },\n          {\n            width: {\n              max: 2560\n            }\n          }, {\n            width: {\n              min: 320\n            }\n          }]\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints) //{ video: { facingMode: "user" } })\n      .then(function (stream) {\n        cameraPermissionGranted = true;\n        currentStream = stream;\n        video.srcObject = stream;\n        video.play();\n        if (sdkEngine_canvas) sdkEngine_canvas.style.display = "block";\n        emitCameraOpened();\n      }).catch(function (error) {\n        cameraPermissionGranted = false;\n        showCameraPermissionPanel();\n        emitCameraAccessIssue();\n        // console.error("Unable to access the camera/webcam.", error);\n      });\n    }\n    // video.src = shoevid;\n    // video.controls = true;\n\n    // video.autoplay = false;\n    // video.playsInline = true;\n\n    // video.play();\n    // if (canvas) canvas.style.display = "block";\n    sceneManager.createNewPlane(video);\n  }\n  animate();\n\n  // emitModuleOpened();\n  sdkEngine_videoContainer.classList.remove("loading");\n\n  //if (!isInitialized) setTimeout(disableInitLoading, 2000);\n\n  setTimeout(disableInitLoading, loaderTime);\n};\nfunction disableInitLoading() {\n  hideLottieLoader();\n  // loaderContainer.style.display = "none";\n  isInitialized = true;\n}\nsdkEngine_imageInput.addEventListener("click", () => {});\nsdkEngine_imageInput.addEventListener("cancel", event => {\n  if (!UserUploadSrc) {\n    emitUploadCancelled();\n  }\n});\nsdkEngine_imageInput.addEventListener("change", event => {\n  const selectedFile = event.target.files[0];\n  function displayError(message) {\n    errorPanel_showErrorPermissionPanel(message);\n  }\n  function downscaleImage(img, maxWidth, maxHeight, callback) {\n    const width = img.width;\n    const height = img.height;\n    let newWidth = width;\n    let newHeight = height;\n    if (width > maxWidth || height > maxHeight) {\n      const aspectRatio = width / height;\n      if (width > height) {\n        newWidth = maxWidth;\n        newHeight = Math.round(maxWidth / aspectRatio);\n      } else {\n        newHeight = maxHeight;\n        newWidth = Math.round(maxHeight * aspectRatio);\n      }\n    }\n    const canvas = document.createElement("canvas");\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n    const ctx = canvas.getContext("2d");\n    ctx.drawImage(img, 0, 0, newWidth, newHeight);\n    callback(canvas.toDataURL());\n  }\n  try {\n    if (selectedFile) {\n      const fileType = selectedFile.type;\n      const validTypes = ["image/jpeg", "image/png", "image/avif", "image/webp", "image/vnd.wap.wbmp", "image/svg+xml"];\n      if (!validTypes.includes(fileType)) {\n        displayError("Invalid file type. Supported types are JPEG, PNG, AVIF, WEBP, WBMP, SVG.");\n        return;\n      }\n      const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n      if (selectedFile.size > MAX_FILE_SIZE) {\n        displayError("File is too large. Please select a file smaller than 10MB.");\n        return;\n      }\n      if (selectedFile.size === 0) {\n        displayError("Selected file is empty.");\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = function (event) {\n        const imageURL = event.target.result;\n        const img = new Image();\n        img.onload = function () {\n          const MAX_WIDTH = 2048; // 2k resolution width\n          const MAX_HEIGHT = 2048; // 2k resolution height\n          hideTryOnScreen();\n          if (!getCurrentTryon().usesCaptureUI) {\n            hideAllPills();\n            hideCaptureTimer();\n            hideSettingIcon("reset");\n            enableSettingIcon("capture");\n          }\n          if (img.width > MAX_WIDTH || img.height > MAX_HEIGHT) {\n            downscaleImage(img, MAX_WIDTH, MAX_HEIGHT, downscaledImageURL => {\n              imageSource = downscaledImageURL;\n              UserUploadSrc = downscaledImageURL;\n              showPrevIcon();\n              showCrossIcon({\n                blurredBg: true\n              });\n              showSettingOptions();\n              tryOnModes_onImageMode(imageSource);\n              hideModelContainer();\n            });\n          } else {\n            imageSource = imageURL;\n            UserUploadSrc = imageURL;\n            showPrevIcon();\n            showCrossIcon({\n              blurredBg: true\n            });\n            showSettingOptions();\n            tryOnModes_onImageMode(imageSource);\n            hideModelContainer();\n          }\n        };\n        img.onerror = function () {\n          displayError("Error loading the image.");\n        };\n        img.src = imageURL;\n      };\n      reader.onerror = function () {\n        displayError("Error reading the file.");\n      };\n      reader.readAsDataURL(selectedFile);\n    } else {\n      displayError("No file selected.");\n    }\n  } catch (error) {\n    displayError("An error occurred while processing the file: " + error.message);\n  }\n  sdkEngine_imageInput.value = "";\n});\nfunction applyEventHandler() {\n  hideConfigContainer();\n  // toggleOptionsButton(3);\n}\nfunction resetEventHandler() {\n  ResetOpacitySliderValue();\n  ResetSliders();\n  getSceneManagerInstance().forceUpdateCurrentStyle();\n  //hideConfigContainer();\n}\nfunction sdkEngine_tryOnEventHandler(type, imageID, imgURL) {\n  try {\n    sceneManager.resetZoomChanges();\n    enableBothZoomIcons();\n    disableSettingIcon("zoomOut");\n    switch (type) {\n      case "live":\n        if (getCameraPermissionState()) {\n          hideTryOnScreen();\n          showPrevIcon();\n          showCrossIcon({\n            blurredBg: true\n          });\n          emitLiveModeStarted();\n          showSettingOptions();\n          if (!getCurrentTryon().usesCaptureUI) {\n            hideAllPills();\n            hideCaptureTimer();\n            hideSettingIcon("reset");\n            enableSettingIcon("capture");\n          }\n          onVideoMode();\n        } else {\n          sdkEngine_canavas_container.style.display = "flex";\n          sdkEngine_canavas_container.style.justifyContent = "center";\n          sdkEngine_canvas.style.display = "none";\n          showCameraPermissionPanel();\n        }\n        break;\n      case "upload":\n        if (globalVariables_isShouldHideInternalUI()) {\n          if (imgURL) {\n            UserUploadSrc = imgURL;\n            emitUploadModeStarted();\n            tryOnModes_onImageMode(UserUploadSrc);\n            //  toggleOptionsSelectedImage(0);\n          }\n        } else {\n          emitUploadModeStarted();\n          sdkEngine_imageInput.click();\n        }\n        break;\n      case "modelTryOn":\n        if (globalVariables_isShouldHideInternalUI()) {\n          emitModelTryonModeStarted();\n          tryOnModes_onImageMode(imgURL);\n        } else {\n          hideTryOnScreen();\n          if (!getCurrentTryon().usesCaptureUI) {\n            hideAllPills();\n            hideCaptureTimer();\n            hideSettingIcon("reset");\n            enableSettingIcon("capture");\n          }\n          if (imgURL) {\n            tryOnModes_onImageMode(imgURL);\n            showPrevIcon();\n            showSettingOptions();\n            showCrossIcon({\n              blurredBg: true\n            });\n          } else {\n            showPrevIcon();\n            showSettingOptions();\n            showCrossIcon({\n              blurredBg: true\n            });\n\n            //console.log(getSceneManagerInstance().getModelData()[]);\n            emitModelTryonModeStarted();\n            tryOnModes_onImageMode(getSceneManagerInstance().getModelData()[imageID].imageUrl);\n          }\n        }\n        break;\n      default:\n        break;\n    }\n  } catch (error) {\n    console.warn("Error in tryOnEventHandler:", error);\n  }\n}\nfunction onPrevIconClick() {\n  stopTracking();\n  onReset();\n}\nfunction onReset() {\n  hideSettingOptions();\n  hidePrevIcon();\n  hideConfigContainer();\n  hideComparisonSlider();\n  unSelectAllSettings();\n  showCrossIcon({\n    blurredBg: false,\n    blackIcon: true\n  });\n  showTryOnScreen();\n  hideAllPills();\n  hideCaptureTimer();\n  hideSettingIcon("reset");\n  disableSettingIcon("capture");\n  if (!["opacity"].includes(getCurrentTryon().ConfigUIType[0])) {\n    resetEverySubComponent(configSettingContentHandler);\n    hideConfigSettingBottomSheet();\n  }\n}\nfunction onCrossIconClick() {\n  showPopupModal();\n}\nfunction onConfirmClick() {\n  onReset();\n  CloseModule();\n  hidePopupModal();\n}\nfunction onCloseClick() {\n  hidePopupModal();\n}\nfunction configSettingHeaderHandler(pillIndex, config) {\n  if (config.tag === "fingers") {\n    setRingIndex(2);\n  }\n}\nfunction configSettingActionsHanlder(tag, type) {\n  switch (type) {\n    case "close":\n      unSelectAllSettings();\n      showSettingOptions();\n\n    // unSelectAllSettings();\n    // showSettingOptions();\n  }\n}\nfunction configSettingContentHandler(type, value) {\n  switch (type) {\n    case "fingers":\n      setRingIndex(value);\n      sceneManager?.forceUpdateCurrentStyle();\n      break;\n    case "horizontal":\n      setXSliderValue(value);\n      sceneManager?.forceUpdateCurrentStyle();\n      break;\n    case "vertical":\n      setYSliderValue(value);\n      sceneManager?.forceUpdateCurrentStyle();\n      break;\n    case "scale":\n      setScaleSliderValue(value);\n      sceneManager?.forceUpdateCurrentStyle();\n      break;\n  }\n}\nfunction settingsEventHandler(data) {\n  switch (data.tag) {\n    case "configSettings":\n      hideComparisonSlider();\n      if (["opacity"].includes(getCurrentTryon().ConfigUIType[0])) {\n        toggleConfigContainer();\n      } else {\n        showConfigSettingBottomSheet();\n      }\n      hideSettingOptions();\n      break;\n    case "comparison":\n      hideConfigContainer();\n      toggleComparisonSlider();\n      break;\n    case "zoomIn":\n      //console.log("salhflhsflahsldfa");\n      getSceneManagerInstance().updateCameraZoom("up");\n      break;\n    case "zoomOut":\n      getSceneManagerInstance().updateCameraZoom("down");\n      break;\n    case "capture":\n      CaptureSnapShot();\n      break;\n    case "reset":\n      onClearClick();\n      if (getSceneManagerInstance()) {\n        getSceneManagerInstance().resetNailData();\n      }\n      disableSettingIcon("reset");\n      disableSettingIcon("capture");\n      break;\n  }\n}\nfunction errorBtnHandler() {\n  hideErrorPermissionPanel();\n  onPrevIconClick();\n}\nfunction configSliderHandler(value, tag) {\n  // console.log(value, tag);\n  switch (tag) {\n    case "Opacity":\n      setOpacitySliderValue(value);\n      getSceneManagerInstance().forceUpdateCurrentStyle();\n      break;\n    case "reset":\n      resetEventHandler();\n      break;\n    case "close":\n      unSelectAllSettings();\n      showSettingOptions();\n      hideConfigContainer();\n      break;\n    default:\n      resetEventHandler();\n  }\n}\nfunction cameraPermissionHandler() {\n  emitCameraFailed();\n  hideCameraPermissionPanel();\n  onPrevIconClick();\n}\nfunction billingHandler() {\n  emitModuleClosed();\n  CloseModule();\n}\nconst onImageClick = async (ignoreHandVisible = false) => {\n  if (isHandVisible || ignoreHandVisible) {\n    await handsLandmarkProvider.SnapNailImage();\n  } else {\n    emitNailColorEvent("error", globalVariables_errorMessages.nailDetectionIssue);\n    errorPanel_showErrorPermissionPanel(globalVariables_errorMessages.nailDetectionIssue + "SDK");\n  }\n};\nconst onClearClick = async () => {\n  // console.log("onClearClick");\n  clicked = false;\n  video?.play();\n  if (getCurrentTryon().usesCaptureUI) {\n    if (isvideo) {\n      createStatusPill();\n      let pills = [{\n        pillId: 1,\n        pillType: "position"\n      }, {\n        pillId: 2,\n        pillType: "look"\n      }];\n      showPills(pills);\n      showSettingIcon("reset");\n      disableSettingIcon("reset");\n      disableSettingIcon("capture");\n    }\n    if (sceneManager) sceneManager.resetHandLandmark();\n  }\n};\nconst loadML = async () => {\n  trackingMode = getCurrentTryon().MLModelInUse;\n  if (trackingMode === TrackingMode.Face) {\n    if (!facemeshLandmarksProvider) {\n      facemeshLandmarksProvider = new FacemeshLandmarksProvider(onLandmarks, sdkEngine_canvas);\n      await facemeshLandmarksProvider.initialize();\n    }\n  } else if (trackingMode === TrackingMode.Hair) {\n    if (!getProviders().hairSegmentProvider) {\n      setProvider("hair", new HairSegmentProvider(onHairSegment));\n      await getProviders().hairSegmentProvider.initialize();\n    }\n  } else if (trackingMode === TrackingMode.Hand) {\n    if (!getProviders().handsLandmarkProvider) {\n      setProvider("hand", new HandsLandmarkProvider(onHandLandsmarks));\n      await getProviders().handsLandmarkProvider.initialize();\n    }\n    if (!getProviders().nailmaskProvider) {\n      setProvider("nail", new NailMaskProvider(onCameraFrame));\n      await getProviders().nailmaskProvider.initialize();\n    }\n  } else if (trackingMode === TrackingMode.Shoe) {\n    if (!getProviders().shoesProvider) {\n      setProvider("shoe", new ShoeLandMarkProvider(onShoeLandMark));\n      await getProviders().shoesProvider.initialize();\n    }\n  }\n  emitModuleLoaded();\n  if (!getOpenLiveOnInit()) {\n    if (getOpenImageOnInit()) {\n      sdkEngine_tryOnEventHandler("modelTryOn", null, getOpenImageOnInit());\n    } else {\n      disableInitLoading();\n    }\n  } else {\n    sdkEngine_tryOnEventHandler("live");\n  }\n  fakeSKU();\n  sdkEngine_toastElement.addEventListener("click", e => {\n    if (e?.target?.id === "snackbar-close-icon") {\n      hideSnackbar();\n    }\n  });\n  window.addEventListener("resize", function () {\n    if (sceneManager) {\n      sceneManager.resizeCamera();\n    }\n  });\n  function fakeSKU() {\n    window.postMessage({\n      type: "applyByConfig",\n      payload: {\n        sku: {\n          _id: "aee9c42a-ef4f-4283-9a7a-b6363dc2f4da",\n          orgId: -99,\n          category: "shoes",\n          subCategory: "3d",\n          productName: "Test glasses1",\n          productImage: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/bracelet/01.png",\n          vendor: "vogue",\n          isActive: true,\n          itemCode: "BRUNT-1709637495061",\n          styleVariant: "single",\n          styleIcon: "https://notavailabledummy.com",\n          attributes: [{\n            name: "matte",\n            icons: [],\n            colors: ["#ff0000", "#ffffff"],\n            effectAssets: [\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/sunglasses/sunglasses_01.glb",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/watches/watch_05.glb",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/rings/2D/ring_01.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/bracelet/2D/bracelet_05.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/earring/2D/earring_3.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/mangtika/05.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/necklace/2D/necklace_03.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/necklace/3D/necklace_6.glb",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/hats/hat_02.glb",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/maangtikka/3D/04.glb",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/glasses/13/13_1.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/glasses/13/13_3.png",\n            // "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/glasses/13/13_4.png",\n            "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/04.glb", "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/05.glb"]\n          }],\n          meta: {\n            material: "Polycarbonate",\n            dimension: "14x15x70",\n            colorIntensity: 80\n          },\n          createdAt: "2024-03-07T11:03:11.373Z",\n          updatedAt: "2024-05-20T07:40:31.757Z"\n        }\n      }\n    });\n\n    // window.postMessage({\n    //   type: "applyByConfig",\n    //   payload: {\n    //     sku: {\n    //       _id: "2dd7fe07-0c34-4618-890a-a5b745dede04",\n    //       category: "eyewear",\n    //       subCategory: "eyeglasses",\n    //       productName: "Test glasses1",\n    //       productImage: "https://cdn.example.com/icon/01.png",\n    //       actionUrl: "https://cdn.example.com/icon/01.png",\n    //       brand: "vogue",\n    //       version: "1.0.0",\n    //       isActive: true,\n    //       barcode: "vogue-1709637495061",\n    //       collectionIds: [],\n    //       additionalProductDetails: {},\n    //       arEffect: {\n    //         effectAssets2D: [\n    //           {\n    //             id: "frontal",\n    //             url: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/glasses/13/13_1.png",\n    //           },\n    //           // {\n    //           //   id: "leftTempleOuter",\n    //           //   url: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/glasses/13/13_3.png",\n    //           // },\n    //           // {\n    //           //   id: "rightTempleOuter",\n    //           //   url: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/6Dzoxo/original/cxr_assets/2d/glasses/13/13_4.png",\n    //           // },\n    //         ],\n    //         effectAssets3D: [\n    //           {\n    //             id: "full",\n    //             url: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-3d-models/sunglasses/sunglasses_01.glb",\n    //           },\n    //         ],\n    //         envSettings: {\n    //           useDefaultEnvironment: false,\n    //           hdr: "https://cdn.pixelbin.io/v2/glamar-fynd-835885/original/glamar-hdr-maps/env.hdr",\n    //           reflectionBlendMode: "normal",\n    //           tileX: 0.0,\n    //           tileY: 0.0,\n    //           intensity: 1.0,\n    //         },\n    //       },\n    //       meta: {},\n    //     },\n    //   },\n    // });\n  }\n};\nconst fakeInit = async () => {\n  window.postMessage({\n    type: "initialize",\n    payload: {\n      mode: "private",\n      apiKey: "ff4146c9-386a-463d-9b7d-4191bfa35c7f",\n      category: "glasses",\n      apiVersion: "v1.0",\n      chooseTryOnConfig: {\n        tryOnScreen: {\n          hideTryOnScreen: false,\n          mode: "light",\n          tryOnTypeConfig: {\n            hideLiveCamera: false,\n            hideModelTryOn: false,\n            hideUploadMode: false\n          }\n        }\n      }\n    }\n  });\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2159\n')},6062:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.capture-timer {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  transform: translate(-50%, -50%);\n}\n\n.capture-timer-heading {\n  font-size: 20px;\n  line-height: 28px;\n  font-weight: 600;\n}\n\n.capture-timer-div {\n  font-size: 72px;\n  line-height: 85px;\n  font-weight: 700;\n  text-align: center;\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/captureTimer.css"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,kBAAkB;EAClB,QAAQ;EACR,SAAS;;EAET,gCAAgC;AAClC;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,iBAAiB;EACjB,gBAAgB;EAChB,kBAAkB;AACpB","sourcesContent":[".capture-timer {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n\\n  transform: translate(-50%, -50%);\\n}\\n\\n.capture-timer-heading {\\n  font-size: 20px;\\n  line-height: 28px;\\n  font-weight: 600;\\n}\\n\\n.capture-timer-div {\\n  font-size: 72px;\\n  line-height: 85px;\\n  font-weight: 700;\\n  text-align: center;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjA2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLDBHQUEwRyxVQUFVLFlBQVksV0FBVyxZQUFZLFdBQVcsV0FBVyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsYUFBYSwwQ0FBMEMsa0JBQWtCLDJCQUEyQixhQUFhLHVCQUF1QixhQUFhLGNBQWMsdUNBQXVDLEdBQUcsNEJBQTRCLG9CQUFvQixzQkFBc0IscUJBQXFCLEdBQUcsd0JBQXdCLG9CQUFvQixzQkFBc0IscUJBQXFCLHVCQUF1QixHQUFHLHFCQUFxQjtBQUMvc0I7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dsYW1hci1zZGsvLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL2NhcHR1cmVUaW1lci5jc3M/ZDMwZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmNhcHR1cmUtdGltZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDhweDtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNTAlO1xuXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xufVxuXG4uY2FwdHVyZS10aW1lci1oZWFkaW5nIHtcbiAgZm9udC1zaXplOiAyMHB4O1xuICBsaW5lLWhlaWdodDogMjhweDtcbiAgZm9udC13ZWlnaHQ6IDYwMDtcbn1cblxuLmNhcHR1cmUtdGltZXItZGl2IHtcbiAgZm9udC1zaXplOiA3MnB4O1xuICBsaW5lLWhlaWdodDogODVweDtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL2NhcHR1cmVUaW1lci5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFFBQVE7RUFDUixrQkFBa0I7RUFDbEIsUUFBUTtFQUNSLFNBQVM7O0VBRVQsZ0NBQWdDO0FBQ2xDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGlCQUFpQjtFQUNqQixnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxlQUFlO0VBQ2YsaUJBQWlCO0VBQ2pCLGdCQUFnQjtFQUNoQixrQkFBa0I7QUFDcEJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNhcHR1cmUtdGltZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDhweDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTAlO1xcbiAgbGVmdDogNTAlO1xcblxcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XFxufVxcblxcbi5jYXB0dXJlLXRpbWVyLWhlYWRpbmcge1xcbiAgZm9udC1zaXplOiAyMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4uY2FwdHVyZS10aW1lci1kaXYge1xcbiAgZm9udC1zaXplOiA3MnB4O1xcbiAgbGluZS1oZWlnaHQ6IDg1cHg7XFxuICBmb250LXdlaWdodDogNzAwO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6062\n')},1510:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.tryon-screen {\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  z-index: 10;\n  /* display: flex; */\n  display: none;\n  justify-content: center;\n}\n\n.tryon_container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 0 auto;\n  padding-top: 64px;\n  gap: 24px;\n  max-width: 344px;\n}\n\n.tryon_screen_light {\n  background: white;\n}\n.tryon_screen_dark {\n  background: #1c1d1e;\n}\n\n.tryon_container_heading {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  color: #101112;\n}\n\n.tryon_container_heading_text {\n  font-size: 20px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 120%;\n}\n\n.tryon_container_heading_subtext {\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: 140%;\n  color: #4c4d4d;\n}\n\n.tryon_container_live_tryon {\n  padding: 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f1f1f1;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.tryon_container_live_tryon_left {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #4c4d4d;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n}\n\n.tryon_container_live_tryon_left_camera {\n  display: flex;\n  align-items: center;\n}\n\n.tryon_container_live_tryon_right path {\n  /* fill: #4c4d4d; */\n}\n\n.tryon_container_upload_tryon {\n  padding: 16px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #f1f1f1;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.tryon_container_upload_tryon_left {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n  color: #4c4d4d;\n  font-size: 16px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n}\n\n.tryon_container_upload_tryon_left_camera {\n  display: flex;\n  align-items: center;\n}\n\n.tryon_container_live_tryon_right path {\n  /* fill: #4c4d4d; */\n}\n\n.tryon_container_choose_model_heading {\n  color: #101112;\n  font-size: 18px;\n  font-style: normal;\n  line-height: 140%;\n  margin-bottom: 4px;\n}\n\n.tryon_container_model_tryon {\n  display: grid;\n  grid-template-columns: auto auto auto;\n  gap: 8px;\n}\n\n.tryon_container_model_tryon_container {\n  width: 108px;\n  height: 108px;\n  cursor: pointer;\n}\n\n.tryon_container_model_tryon_container img {\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 8px;\n}\n.tryon_container_model_tryon_upload {\n  width: 108px;\n  height: 108px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  background: #e7e7e7;\n  border-radius: 8px;\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: normal;\n  color: #b7b8b8;\n  cursor: pointer;\n  gap: 8px;\n}\n\n.tryon_container_footer {\n  height: 100px;\n  padding: 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000000 100%);\n  /* opacity: 0.3; */\n}\n\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\n  .tryon_container {\n    max-width: 296px;\n    padding-top: 48px;\n  }\n  .tryon_container_heading_subtext {\n    display: none;\n  }\n  .tryon_container_heading_text {\n    font-size: 18px;\n    position: relative;\n    top: 12px;\n  }\n  .tryon_container_model_tryon {\n    gap: 10px;\n  }\n  .tryon_container_choose_model_heading {\n    font-size: 16px;\n  }\n  .tryon_container_live_tryon_left {\n    font-size: 14px;\n  }\n  .tryon_container_live_tryon {\n    padding: 12px 8px;\n  }\n  .tryon_container_model_tryon_container {\n    width: 92px;\n    height: 92px;\n  }\n\n  .tryon_container_model_tryon_upload {\n    width: 92px;\n    height: 92px;\n  }\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/chooseTryOn.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,MAAM;EACN,WAAW;EACX,mBAAmB;EACnB,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,iBAAiB;EACjB,SAAS;EACT,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;AACnB;AACA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,cAAc;AAChB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;EACR,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,yBAAyB;EACzB,kBAAkB;EAClB,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,QAAQ;EACR,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,cAAc;EACd,eAAe;EACf,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,qCAAqC;EACrC,QAAQ;AACV;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,cAAc;EACd,eAAe;EACf,QAAQ;AACV;;AAEA;EACE,aAAa;EACb,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,sEAAsE;EACtE,kBAAkB;AACpB;;AAEA;EACE;IACE,gBAAgB;IAChB,iBAAiB;EACnB;EACA;IACE,aAAa;EACf;EACA;IACE,eAAe;IACf,kBAAkB;IAClB,SAAS;EACX;EACA;IACE,SAAS;EACX;EACA;IACE,eAAe;EACjB;EACA;IACE,eAAe;EACjB;EACA;IACE,iBAAiB;EACnB;EACA;IACE,WAAW;IACX,YAAY;EACd;;EAEA;IACE,WAAW;IACX,YAAY;EACd;AACF","sourcesContent":[".tryon-screen {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  top: 0;\\n  z-index: 10;\\n  /* display: flex; */\\n  display: none;\\n  justify-content: center;\\n}\\n\\n.tryon_container {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  flex-direction: column;\\n  padding: 0 auto;\\n  padding-top: 64px;\\n  gap: 24px;\\n  max-width: 344px;\\n}\\n\\n.tryon_screen_light {\\n  background: white;\\n}\\n.tryon_screen_dark {\\n  background: #1c1d1e;\\n}\\n\\n.tryon_container_heading {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  color: #101112;\\n}\\n\\n.tryon_container_heading_text {\\n  font-size: 20px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 120%;\\n}\\n\\n.tryon_container_heading_subtext {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: 140%;\\n  color: #4c4d4d;\\n}\\n\\n.tryon_container_live_tryon {\\n  padding: 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #f1f1f1;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_live_tryon_left {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  color: #4c4d4d;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.tryon_container_live_tryon_left_camera {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.tryon_container_live_tryon_right path {\\n  /* fill: #4c4d4d; */\\n}\\n\\n.tryon_container_upload_tryon {\\n  padding: 16px;\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  background-color: #f1f1f1;\\n  border-radius: 8px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_upload_tryon_left {\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n  color: #4c4d4d;\\n  font-size: 16px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.tryon_container_upload_tryon_left_camera {\\n  display: flex;\\n  align-items: center;\\n}\\n\\n.tryon_container_live_tryon_right path {\\n  /* fill: #4c4d4d; */\\n}\\n\\n.tryon_container_choose_model_heading {\\n  color: #101112;\\n  font-size: 18px;\\n  font-style: normal;\\n  line-height: 140%;\\n  margin-bottom: 4px;\\n}\\n\\n.tryon_container_model_tryon {\\n  display: grid;\\n  grid-template-columns: auto auto auto;\\n  gap: 8px;\\n}\\n\\n.tryon_container_model_tryon_container {\\n  width: 108px;\\n  height: 108px;\\n  cursor: pointer;\\n}\\n\\n.tryon_container_model_tryon_container img {\\n  width: 100%;\\n  height: 100%;\\n  object-fit: cover;\\n  border-radius: 8px;\\n}\\n.tryon_container_model_tryon_upload {\\n  width: 108px;\\n  height: 108px;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  background: #e7e7e7;\\n  border-radius: 8px;\\n  font-size: 12px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: normal;\\n  color: #b7b8b8;\\n  cursor: pointer;\\n  gap: 8px;\\n}\\n\\n.tryon_container_footer {\\n  height: 100px;\\n  padding: 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, #000000 100%);\\n  /* opacity: 0.3; */\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .tryon_container {\\n    max-width: 296px;\\n    padding-top: 48px;\\n  }\\n  .tryon_container_heading_subtext {\\n    display: none;\\n  }\\n  .tryon_container_heading_text {\\n    font-size: 18px;\\n    position: relative;\\n    top: 12px;\\n  }\\n  .tryon_container_model_tryon {\\n    gap: 10px;\\n  }\\n  .tryon_container_choose_model_heading {\\n    font-size: 16px;\\n  }\\n  .tryon_container_live_tryon_left {\\n    font-size: 14px;\\n  }\\n  .tryon_container_live_tryon {\\n    padding: 12px 8px;\\n  }\\n  .tryon_container_model_tryon_container {\\n    width: 92px;\\n    height: 92px;\\n  }\\n\\n  .tryon_container_model_tryon_upload {\\n    width: 92px;\\n    height: 92px;\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1510\n')},7038:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.configuration-container {\n  width: 100%;\n  position: absolute;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  margin: auto;\n  z-index: 2000;\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\n  font-family: sans-serif;\n}\n\n.show-configuration-container {\n  opacity: 1;\n  visibility: visible;\n  transition-delay: 0s;\n}\n\n.config-slider {\n  position: relative;\n}\n\n.config-slider-type {\n  position: absolute;\n  left: -48px;\n  font-family: Inter;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 140%;\n}\n\n.config-slider-value {\n  position: absolute;\n  right: -10%;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 140%;\n}\n\n.config-type-slider {\n  position: absolute;\n  width: 100%;\n  display: flex;\n  top: 6px;\n}\n.config-type-slider input {\n  /* -webkit-appearance: none; */\n  /* background-color: rgba(255, 255, 255, 0.4); */\n}\n.config-type-slider input::-webkit-slider-thumb {\n  /* height: 4px;\n  background-color: aqua;\n  accent-color: red; */\n  /* box-shadow: -1px 0 0 1px #43e5f7; */\n}\n\n.config-reset-icon {\n  position: absolute;\n  backdrop-filter: blur(25px);\n  transition: backdrop-filter 0.33s linear;\n  background: rgba(16, 17, 18, 0.1);\n  border-radius: 50%;\n  left: -112px;\n  padding: 4px;\n  display: flex;\n  bottom: -30px;\n  cursor: pointer;\n}\n\n.config-bottom-sheet-container {\n  padding: 16px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  border-radius: 16px 16px 0px 0px;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n  background: rgba(0, 0, 0, 0.16);\n  backdrop-filter: blur(25px);\n  transform: translateY(100%);\n  transition: 0.3s ease;\n}\n\n.show-configuration-container .config-bottom-sheet-container {\n  transform: translateY(0%);\n}\n\n.config-bottom-sheet-header-text {\n  color: #fff;\n  font-family: Inter;\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 24px;\n  letter-spacing: 0.18px;\n}\n\n.config-bottom-sheet-divider {\n  height: 1px;\n  width: 100%;\n  background: rgba(255, 255, 255, 0.4);\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\n}\n\n.config-bottom-sheet-content {\n  display: flex;\n  gap: 16px;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  max-width: 586px;\n}\n\n.config-bottom-sheet-left-text {\n  font-family: Inter;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 140%;\n}\n.config-bottom-sheet-slider {\n  flex: 1;\n  display: flex;\n  align-items: center;\n}\n.config-bottom-sheet-slider input {\n  height: 1px;\n  width: 100%;\n  padding: 1px;\n  /* accent-color: #fff; */\n  cursor: pointer;\n  -webkit-appearance: none;\n  background: linear-gradient(\n    to right,\n    #fff 0%,\n    #fff 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 100%\n  );\n  transition: background 450ms ease-in;\n  outline: none;\n  border-radius: 4px;\n}\ninput::-webkit-slider-thumb {\n  background-color: white;\n  border-radius: 0;\n\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  -webkit-appearance: none;\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\n}\n.config-bottom-sheet-right-text {\n  width: 56px;\n  display: flex;\n  justify-content: end;\n  font-family: Inter;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 600;\n  line-height: 140%;\n}\n\n.config-bottom-sheet-actions {\n  position: absolute;\n  display: flex;\n  gap: 10px;\n  top: -48px;\n  right: 16px;\n}\n\n.config-bottom-sheet-reset-button,\n.config-bottom-sheet-close-button {\n  width: 40px;\n  height: 40px;\n  border-radius: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  background: rgba(16, 17, 18, 0.1);\n  backdrop-filter: blur(25px);\n  cursor: pointer;\n}\n.config-bottom-sheet-close-button img {\n  position: absolute;\n  left: 8px;\n  top: 8px;\n}\n\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\n  .config-bottom-sheet-header-text {\n    font-size: 16px;\n  }\n  /* … */\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/configSlider.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX,kBAAkB;EAClB,QAAQ;EACR,OAAO;EACP,SAAS;EACT,YAAY;EACZ,aAAa;EACb,kBAAkB;EAClB,UAAU;EACV,4DAA4D;EAC5D,uBAAuB;AACzB;;AAEA;EACE,UAAU;EACV,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,QAAQ;AACV;AACA;EACE,8BAA8B;EAC9B,gDAAgD;AAClD;AACA;EACE;;sBAEoB;EACpB,sCAAsC;AACxC;;AAEA;EACE,kBAAkB;EAClB,2BAA2B;EAC3B,wCAAwC;EACxC,iCAAiC;EACjC,kBAAkB;EAClB,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,aAAa;EACb,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,SAAS;EACT,gCAAgC;EAChC,8CAA8C;EAC9C,+BAA+B;EAC/B,2BAA2B;EAC3B,2BAA2B;EAC3B,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,WAAW;EACX,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,oCAAoC;EACpC,+CAA+C;AACjD;;AAEA;EACE,aAAa;EACb,SAAS;EACT,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;AACA;EACE,OAAO;EACP,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,wBAAwB;EACxB,eAAe;EACf,wBAAwB;EACxB;;;;;;GAMC;EACD,oCAAoC;EACpC,aAAa;EACb,kBAAkB;AACpB;AACA;EACE,uBAAuB;EACvB,gBAAgB;;EAEhB,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;EACxB,qDAAqD;AACvD;AACA;EACE,WAAW;EACX,aAAa;EACb,oBAAoB;EACpB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,UAAU;EACV,WAAW;AACb;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,iCAAiC;EACjC,2BAA2B;EAC3B,eAAe;AACjB;AACA;EACE,kBAAkB;EAClB,SAAS;EACT,QAAQ;AACV;;AAEA;EACE;IACE,eAAe;EACjB;EACA,MAAM;AACR","sourcesContent":[".configuration-container {\\n  width: 100%;\\n  position: absolute;\\n  right: 0;\\n  left: 0;\\n  bottom: 0;\\n  margin: auto;\\n  z-index: 2000;\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\\n  font-family: sans-serif;\\n}\\n\\n.show-configuration-container {\\n  opacity: 1;\\n  visibility: visible;\\n  transition-delay: 0s;\\n}\\n\\n.config-slider {\\n  position: relative;\\n}\\n\\n.config-slider-type {\\n  position: absolute;\\n  left: -48px;\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-slider-value {\\n  position: absolute;\\n  right: -10%;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-type-slider {\\n  position: absolute;\\n  width: 100%;\\n  display: flex;\\n  top: 6px;\\n}\\n.config-type-slider input {\\n  /* -webkit-appearance: none; */\\n  /* background-color: rgba(255, 255, 255, 0.4); */\\n}\\n.config-type-slider input::-webkit-slider-thumb {\\n  /* height: 4px;\\n  background-color: aqua;\\n  accent-color: red; */\\n  /* box-shadow: -1px 0 0 1px #43e5f7; */\\n}\\n\\n.config-reset-icon {\\n  position: absolute;\\n  backdrop-filter: blur(25px);\\n  transition: backdrop-filter 0.33s linear;\\n  background: rgba(16, 17, 18, 0.1);\\n  border-radius: 50%;\\n  left: -112px;\\n  padding: 4px;\\n  display: flex;\\n  bottom: -30px;\\n  cursor: pointer;\\n}\\n\\n.config-bottom-sheet-container {\\n  padding: 16px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 16px;\\n  border-radius: 16px 16px 0px 0px;\\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\\n  background: rgba(0, 0, 0, 0.16);\\n  backdrop-filter: blur(25px);\\n  transform: translateY(100%);\\n  transition: 0.3s ease;\\n}\\n\\n.show-configuration-container .config-bottom-sheet-container {\\n  transform: translateY(0%);\\n}\\n\\n.config-bottom-sheet-header-text {\\n  color: #fff;\\n  font-family: Inter;\\n  font-size: 18px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 24px;\\n  letter-spacing: 0.18px;\\n}\\n\\n.config-bottom-sheet-divider {\\n  height: 1px;\\n  width: 100%;\\n  background: rgba(255, 255, 255, 0.4);\\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\\n}\\n\\n.config-bottom-sheet-content {\\n  display: flex;\\n  gap: 16px;\\n  width: 100%;\\n  justify-content: center;\\n  align-items: center;\\n  max-width: 586px;\\n}\\n\\n.config-bottom-sheet-left-text {\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n.config-bottom-sheet-slider {\\n  flex: 1;\\n  display: flex;\\n  align-items: center;\\n}\\n.config-bottom-sheet-slider input {\\n  height: 1px;\\n  width: 100%;\\n  padding: 1px;\\n  /* accent-color: #fff; */\\n  cursor: pointer;\\n  -webkit-appearance: none;\\n  background: linear-gradient(\\n    to right,\\n    #fff 0%,\\n    #fff 50%,\\n    rgba(255, 255, 255, 0.4) 50%,\\n    rgba(255, 255, 255, 0.4) 100%\\n  );\\n  transition: background 450ms ease-in;\\n  outline: none;\\n  border-radius: 4px;\\n}\\ninput::-webkit-slider-thumb {\\n  background-color: white;\\n  border-radius: 0;\\n\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 50%;\\n  -webkit-appearance: none;\\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\\n}\\n.config-bottom-sheet-right-text {\\n  width: 56px;\\n  display: flex;\\n  justify-content: end;\\n  font-family: Inter;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 600;\\n  line-height: 140%;\\n}\\n\\n.config-bottom-sheet-actions {\\n  position: absolute;\\n  display: flex;\\n  gap: 10px;\\n  top: -48px;\\n  right: 16px;\\n}\\n\\n.config-bottom-sheet-reset-button,\\n.config-bottom-sheet-close-button {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 40px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  background: rgba(16, 17, 18, 0.1);\\n  backdrop-filter: blur(25px);\\n  cursor: pointer;\\n}\\n.config-bottom-sheet-close-button img {\\n  position: absolute;\\n  left: 8px;\\n  top: 8px;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .config-bottom-sheet-header-text {\\n    font-size: 16px;\\n  }\\n  /* … */\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7038\n')},4495:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.config-settings-fs {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  z-index: 5;\n  border-radius: 16px 16px 0px 0px;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n  background: rgba(0, 0, 0, 0.16);\n  backdrop-filter: blur(25px);\n  visibility: hidden;\n  opacity: 0;\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\n}\n\n.show-config-settings-fs {\n  opacity: 1;\n  visibility: visible;\n  transition-delay: 0s;\n}\n\n.config-settings-hide-fs {\n  display: none;\n}\n\n.config-bottom-sheet-container-fs {\n  display: flex;\n  padding: 16px;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 16px;\n  transform: translateY(100%);\n  transition: 0.3s ease;\n}\n\n.show-config-settings-fs .config-bottom-sheet-container-fs {\n  transform: translateY(0%);\n}\n\n.config-bottom-sheet-header-fs {\n  display: flex;\n  align-items: flex-start;\n  gap: 8px;\n  align-self: stretch;\n}\n\n.config-bottom-sheet-pill-fs {\n  display: flex;\n  height: 40px;\n  padding: 0px 12px 0px 8px;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  border-radius: 40px;\n  background: rgba(16, 17, 18, 0.24);\n  cursor: pointer;\n  border: 1px solid transparent;\n}\n\n.hide-pill-fs {\n  display: none;\n}\n\n.config-bottom-sheet-pill-fs:hover {\n  border: 1px solid #404141;\n  background: rgba(16, 17, 18, 0.48);\n}\n\n.active-config-bottom-sheet-pill-active-fs {\n  background: #fff;\n  backdrop-filter: blur(25px);\n  border: 1px solid transparent;\n}\n.active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  color: #101112;\n}\n.active-config-bottom-sheet-pill-active-fs:hover {\n  background: #fff !important;\n  border: 1px solid transparent;\n}\n\n.config-bottom-sheet-pill-icon-wrapper-fs {\n  display: flex;\n  width: 24px;\n  height: 24px;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n}\n\n.config-bottom-sheet-pill-text-fs {\n  color: white;\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n}\n\n.config-bottom-sheet-divider-fs {\n  height: 1px;\n  width: 100%;\n  background: rgba(255, 255, 255, 0.4);\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\n}\n\n.config-bottom-sheet-actions-fs {\n  position: absolute;\n  display: flex;\n  gap: 10px;\n  top: -48px;\n  right: 16px;\n}\n\n.config-bottom-sheet-reset-button-fs,\n.config-bottom-sheet-close-button-fs {\n  width: 40px;\n  height: 40px;\n  border-radius: 40px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: relative;\n  background: rgba(16, 17, 18, 0.1);\n  backdrop-filter: blur(25px);\n  cursor: pointer;\n}\n\n.config-bottom-sheet-content-fs {\n  width: 100%;\n}\n\n.ring-row-container-fs {\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  align-self: stretch;\n}\n\n.config-bottom-sheet-ring-divs-fs {\n  display: flex;\n  width: 64px;\n  padding: 0px 10px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  border-radius: 80px;\n}\n\n.config-bottom-sheet-ringicon-divs-fs {\n  display: flex;\n  width: 64px;\n  height: 64px;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  border-radius: 80px;\n  background: rgba(16, 17, 18, 0.24);\n  cursor: pointer;\n}\n\n.ring-selected-fs {\n  background: #fff;\n}\n\n.config-bottom-sheet-ringicon-label-fs {\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n  color: #fff;\n}\n\n.slider-container-fs {\n  display: flex;\n  height: 40px;\n  justify-content: center;\n  align-items: center;\n  gap: 16px;\n  align-self: stretch;\n  width: 100%;\n  /* max-width: 580px; */\n}\n\n.slider-main-container-fs {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  gap: 8px;\n  align-self: stretch;\n}\n\n.slider-input-div-fs {\n  display: flex;\n  align-items: center;\n  flex: 1;\n}\n\n.slider-input-div-fs input {\n  width: 100%;\n  height: 1px;\n  padding: 1px;\n  /* accent-color: #fff; */\n  -webkit-appearance: none;\n  background: linear-gradient(\n    to right,\n    #fff 0%,\n    #fff 50%,\n    rgba(255, 255, 255, 0.4) 50%,\n    rgba(255, 255, 255, 0.4) 100%\n  );\n  transition: background 450ms ease-in;\n  outline: none;\n  cursor: pointer;\n  border-radius: 4px;\n}\ninput::-webkit-slider-thumb-fs {\n  background-color: white;\n  border-radius: 0;\n\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  -webkit-appearance: none;\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\n}\n\n.slider-left-text-fs,\n.slider-right-text-fs {\n  width: 56px;\n}\n.slider-right-text-fs {\n  text-align: end;\n}\n\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\n  .config-bottom-sheet-pill-fs {\n    height: 32px;\n  }\n  .config-bottom-sheet-pill-text-fs {\n    font-size: 12px;\n  }\n  .active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\n    font-size: 12px;\n  }\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/fyndStyleConfigBottomSheet.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,UAAU;EACV,gCAAgC;EAChC,8CAA8C;EAC9C,+BAA+B;EAC/B,2BAA2B;EAC3B,kBAAkB;EAClB,UAAU;EACV,4DAA4D;AAC9D;;AAEA;EACE,UAAU;EACV,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,SAAS;EACT,2BAA2B;EAC3B,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;AAC3B;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,QAAQ;EACR,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,yBAAyB;EACzB,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,mBAAmB;EACnB,kCAAkC;EAClC,eAAe;EACf,6BAA6B;AAC/B;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,yBAAyB;EACzB,kCAAkC;AACpC;;AAEA;EACE,gBAAgB;EAChB,2BAA2B;EAC3B,6BAA6B;AAC/B;AACA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,cAAc;AAChB;AACA;EACE,2BAA2B;EAC3B,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,WAAW;EACX,oCAAoC;EACpC,+CAA+C;AACjD;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,SAAS;EACT,UAAU;EACV,WAAW;AACb;;AAEA;;EAEE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,iCAAiC;EACjC,2BAA2B;EAC3B,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,WAAW;EACX,iBAAiB;EACjB,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,WAAW;EACX,YAAY;EACZ,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,mBAAmB;EACnB,kCAAkC;EAClC,eAAe;AACjB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,mBAAmB;EACnB,SAAS;EACT,mBAAmB;EACnB,WAAW;EACX,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,QAAQ;EACR,mBAAmB;AACrB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,OAAO;AACT;;AAEA;EACE,WAAW;EACX,WAAW;EACX,YAAY;EACZ,wBAAwB;EACxB,wBAAwB;EACxB;;;;;;GAMC;EACD,oCAAoC;EACpC,aAAa;EACb,eAAe;EACf,kBAAkB;AACpB;AACA;EACE,uBAAuB;EACvB,gBAAgB;;EAEhB,YAAY;EACZ,WAAW;EACX,kBAAkB;EAClB,wBAAwB;EACxB,qDAAqD;AACvD;;AAEA;;EAEE,WAAW;AACb;AACA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,YAAY;EACd;EACA;IACE,eAAe;EACjB;EACA;IACE,eAAe;EACjB;AACF","sourcesContent":[".config-settings-fs {\\n  position: absolute;\\n  bottom: 0;\\n  width: 100%;\\n  z-index: 5;\\n  border-radius: 16px 16px 0px 0px;\\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\\n  background: rgba(0, 0, 0, 0.16);\\n  backdrop-filter: blur(25px);\\n  visibility: hidden;\\n  opacity: 0;\\n  transition: visibility 0s linear 0.33s, opacity 0.33s linear;\\n}\\n\\n.show-config-settings-fs {\\n  opacity: 1;\\n  visibility: visible;\\n  transition-delay: 0s;\\n}\\n\\n.config-settings-hide-fs {\\n  display: none;\\n}\\n\\n.config-bottom-sheet-container-fs {\\n  display: flex;\\n  padding: 16px;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 16px;\\n  transform: translateY(100%);\\n  transition: 0.3s ease;\\n}\\n\\n.show-config-settings-fs .config-bottom-sheet-container-fs {\\n  transform: translateY(0%);\\n}\\n\\n.config-bottom-sheet-header-fs {\\n  display: flex;\\n  align-items: flex-start;\\n  gap: 8px;\\n  align-self: stretch;\\n}\\n\\n.config-bottom-sheet-pill-fs {\\n  display: flex;\\n  height: 40px;\\n  padding: 0px 12px 0px 8px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 40px;\\n  background: rgba(16, 17, 18, 0.24);\\n  cursor: pointer;\\n  border: 1px solid transparent;\\n}\\n\\n.hide-pill-fs {\\n  display: none;\\n}\\n\\n.config-bottom-sheet-pill-fs:hover {\\n  border: 1px solid #404141;\\n  background: rgba(16, 17, 18, 0.48);\\n}\\n\\n.active-config-bottom-sheet-pill-active-fs {\\n  background: #fff;\\n  backdrop-filter: blur(25px);\\n  border: 1px solid transparent;\\n}\\n.active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  color: #101112;\\n}\\n.active-config-bottom-sheet-pill-active-fs:hover {\\n  background: #fff !important;\\n  border: 1px solid transparent;\\n}\\n\\n.config-bottom-sheet-pill-icon-wrapper-fs {\\n  display: flex;\\n  width: 24px;\\n  height: 24px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 10px;\\n}\\n\\n.config-bottom-sheet-pill-text-fs {\\n  color: white;\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n\\n.config-bottom-sheet-divider-fs {\\n  height: 1px;\\n  width: 100%;\\n  background: rgba(255, 255, 255, 0.4);\\n  box-shadow: 0px 4px 8px 0px rgba(0, 0, 0, 0.16);\\n}\\n\\n.config-bottom-sheet-actions-fs {\\n  position: absolute;\\n  display: flex;\\n  gap: 10px;\\n  top: -48px;\\n  right: 16px;\\n}\\n\\n.config-bottom-sheet-reset-button-fs,\\n.config-bottom-sheet-close-button-fs {\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 40px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  position: relative;\\n  background: rgba(16, 17, 18, 0.1);\\n  backdrop-filter: blur(25px);\\n  cursor: pointer;\\n}\\n\\n.config-bottom-sheet-content-fs {\\n  width: 100%;\\n}\\n\\n.ring-row-container-fs {\\n  display: flex;\\n  align-items: center;\\n  gap: 16px;\\n  align-self: stretch;\\n}\\n\\n.config-bottom-sheet-ring-divs-fs {\\n  display: flex;\\n  width: 64px;\\n  padding: 0px 10px;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 80px;\\n}\\n\\n.config-bottom-sheet-ringicon-divs-fs {\\n  display: flex;\\n  width: 64px;\\n  height: 64px;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 10px;\\n  border-radius: 80px;\\n  background: rgba(16, 17, 18, 0.24);\\n  cursor: pointer;\\n}\\n\\n.ring-selected-fs {\\n  background: #fff;\\n}\\n\\n.config-bottom-sheet-ringicon-label-fs {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n  color: #fff;\\n}\\n\\n.slider-container-fs {\\n  display: flex;\\n  height: 40px;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 16px;\\n  align-self: stretch;\\n  width: 100%;\\n  /* max-width: 580px; */\\n}\\n\\n.slider-main-container-fs {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: flex-start;\\n  gap: 8px;\\n  align-self: stretch;\\n}\\n\\n.slider-input-div-fs {\\n  display: flex;\\n  align-items: center;\\n  flex: 1;\\n}\\n\\n.slider-input-div-fs input {\\n  width: 100%;\\n  height: 1px;\\n  padding: 1px;\\n  /* accent-color: #fff; */\\n  -webkit-appearance: none;\\n  background: linear-gradient(\\n    to right,\\n    #fff 0%,\\n    #fff 50%,\\n    rgba(255, 255, 255, 0.4) 50%,\\n    rgba(255, 255, 255, 0.4) 100%\\n  );\\n  transition: background 450ms ease-in;\\n  outline: none;\\n  cursor: pointer;\\n  border-radius: 4px;\\n}\\ninput::-webkit-slider-thumb-fs {\\n  background-color: white;\\n  border-radius: 0;\\n\\n  height: 16px;\\n  width: 16px;\\n  border-radius: 50%;\\n  -webkit-appearance: none;\\n  filter: drop-shadow(0px 4px 10px rgba(0, 0, 0, 0.25));\\n}\\n\\n.slider-left-text-fs,\\n.slider-right-text-fs {\\n  width: 56px;\\n}\\n.slider-right-text-fs {\\n  text-align: end;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .config-bottom-sheet-pill-fs {\\n    height: 32px;\\n  }\\n  .config-bottom-sheet-pill-text-fs {\\n    font-size: 12px;\\n  }\\n  .active-config-bottom-sheet-pill-active-fs .config-bottom-sheet-pill-text-fs {\\n    font-size: 12px;\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDQ5NS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPLHdIQUF3SCxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsYUFBYSxXQUFXLFlBQVksT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxZQUFZLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsV0FBVyxZQUFZLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxVQUFVLE1BQU0sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksYUFBYSxhQUFhLE1BQU0sS0FBSyxVQUFVLFlBQVksYUFBYSxXQUFXLE1BQU0sS0FBSyxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxVQUFVLFlBQVksYUFBYSxXQUFXLE1BQU0sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFVBQVUsVUFBVSxNQUFNLE1BQU0sVUFBVSxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsV0FBVyxPQUFPLEtBQUssVUFBVSxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxXQUFXLFlBQVksYUFBYSxXQUFXLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksYUFBYSxhQUFhLFdBQVcsTUFBTSxLQUFLLFVBQVUsVUFBVSxZQUFZLGFBQWEsV0FBVyxZQUFZLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxVQUFVLFlBQVksV0FBVyxNQUFNLEtBQUssVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLFdBQVcsS0FBSyxZQUFZLFdBQVcsVUFBVSxZQUFZLE1BQU0sS0FBSyxZQUFZLGNBQWMsV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLE9BQU8sTUFBTSxVQUFVLEtBQUssS0FBSyxVQUFVLE9BQU8sS0FBSyxLQUFLLFVBQVUsS0FBSyxLQUFLLFVBQVUsTUFBTSxLQUFLLFVBQVUsTUFBTSw4Q0FBOEMsdUJBQXVCLGNBQWMsZ0JBQWdCLGVBQWUscUNBQXFDLG1EQUFtRCxvQ0FBb0MsZ0NBQWdDLHVCQUF1QixlQUFlLGlFQUFpRSxHQUFHLDhCQUE4QixlQUFlLHdCQUF3Qix5QkFBeUIsR0FBRyw4QkFBOEIsa0JBQWtCLEdBQUcsdUNBQXVDLGtCQUFrQixrQkFBa0IsMkJBQTJCLDRCQUE0QixjQUFjLGdDQUFnQywwQkFBMEIsR0FBRyxnRUFBZ0UsOEJBQThCLEdBQUcsb0NBQW9DLGtCQUFrQiw0QkFBNEIsYUFBYSx3QkFBd0IsR0FBRyxrQ0FBa0Msa0JBQWtCLGlCQUFpQiw4QkFBOEIsNEJBQTRCLHdCQUF3QixhQUFhLHdCQUF3Qix1Q0FBdUMsb0JBQW9CLGtDQUFrQyxHQUFHLG1CQUFtQixrQkFBa0IsR0FBRyx3Q0FBd0MsOEJBQThCLHVDQUF1QyxHQUFHLGdEQUFnRCxxQkFBcUIsZ0NBQWdDLGtDQUFrQyxHQUFHLGdGQUFnRixvQkFBb0IsdUJBQXVCLHFCQUFxQixtQkFBbUIsR0FBRyxvREFBb0QsZ0NBQWdDLGtDQUFrQyxHQUFHLCtDQUErQyxrQkFBa0IsZ0JBQWdCLGlCQUFpQiw0QkFBNEIsd0JBQXdCLGNBQWMsR0FBRyx1Q0FBdUMsaUJBQWlCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQixHQUFHLHFDQUFxQyxnQkFBZ0IsZ0JBQWdCLHlDQUF5QyxvREFBb0QsR0FBRyxxQ0FBcUMsdUJBQXVCLGtCQUFrQixjQUFjLGVBQWUsZ0JBQWdCLEdBQUcsaUZBQWlGLGdCQUFnQixpQkFBaUIsd0JBQXdCLGtCQUFrQiw0QkFBNEIsd0JBQXdCLHVCQUF1QixzQ0FBc0MsZ0NBQWdDLG9CQUFvQixHQUFHLHFDQUFxQyxnQkFBZ0IsR0FBRyw0QkFBNEIsa0JBQWtCLHdCQUF3QixjQUFjLHdCQUF3QixHQUFHLHVDQUF1QyxrQkFBa0IsZ0JBQWdCLHNCQUFzQiwyQkFBMkIsNEJBQTRCLHdCQUF3QixhQUFhLHdCQUF3QixHQUFHLDJDQUEyQyxrQkFBa0IsZ0JBQWdCLGlCQUFpQiwyQkFBMkIsNEJBQTRCLHdCQUF3QixjQUFjLHdCQUF3Qix1Q0FBdUMsb0JBQW9CLEdBQUcsdUJBQXVCLHFCQUFxQixHQUFHLDRDQUE0QyxvQkFBb0IsdUJBQXVCLHFCQUFxQixzQkFBc0IsZ0JBQWdCLEdBQUcsMEJBQTBCLGtCQUFrQixpQkFBaUIsNEJBQTRCLHdCQUF3QixjQUFjLHdCQUF3QixnQkFBZ0IseUJBQXlCLEtBQUssK0JBQStCLGtCQUFrQiwyQkFBMkIsNEJBQTRCLGFBQWEsd0JBQXdCLEdBQUcsMEJBQTBCLGtCQUFrQix3QkFBd0IsWUFBWSxHQUFHLGdDQUFnQyxnQkFBZ0IsZ0JBQWdCLGlCQUFpQiwyQkFBMkIsK0JBQStCLHdKQUF3Six5Q0FBeUMsa0JBQWtCLG9CQUFvQix1QkFBdUIsR0FBRyxrQ0FBa0MsNEJBQTRCLHFCQUFxQixtQkFBbUIsZ0JBQWdCLHVCQUF1Qiw2QkFBNkIsMERBQTBELEdBQUcsa0RBQWtELGdCQUFnQixHQUFHLHlCQUF5QixvQkFBb0IsR0FBRyxnRUFBZ0Usa0NBQWtDLG1CQUFtQixLQUFLLHVDQUF1QyxzQkFBc0IsS0FBSyxrRkFBa0Ysc0JBQXNCLEtBQUssR0FBRyxxQkFBcUI7QUFDbG1PO0FBQ0EsaUVBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9nbGFtYXItc2RrLy4vc3JjL2h0bWxTZXJ2aWNlL3N0eWxlcy9meW5kU3R5bGVDb25maWdCb3R0b21TaGVldC5jc3M/ZjQ1MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLmNvbmZpZy1zZXR0aW5ncy1mcyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgYm90dG9tOiAwO1xuICB3aWR0aDogMTAwJTtcbiAgei1pbmRleDogNTtcbiAgYm9yZGVyLXJhZGl1czogMTZweCAxNnB4IDBweCAwcHg7XG4gIGJvcmRlci10b3A6IDFweCBzb2xpZCByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMik7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4xNik7XG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xuICBvcGFjaXR5OiAwO1xuICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIGxpbmVhciAwLjMzcywgb3BhY2l0eSAwLjMzcyBsaW5lYXI7XG59XG5cbi5zaG93LWNvbmZpZy1zZXR0aW5ncy1mcyB7XG4gIG9wYWNpdHk6IDE7XG4gIHZpc2liaWxpdHk6IHZpc2libGU7XG4gIHRyYW5zaXRpb24tZGVsYXk6IDBzO1xufVxuXG4uY29uZmlnLXNldHRpbmdzLWhpZGUtZnMge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4uY29uZmlnLWJvdHRvbS1zaGVldC1jb250YWluZXItZnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBwYWRkaW5nOiAxNnB4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcbiAgZ2FwOiAxNnB4O1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMTAwJSk7XG4gIHRyYW5zaXRpb246IDAuM3MgZWFzZTtcbn1cblxuLnNob3ctY29uZmlnLXNldHRpbmdzLWZzIC5jb25maWctYm90dG9tLXNoZWV0LWNvbnRhaW5lci1mcyB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwJSk7XG59XG5cbi5jb25maWctYm90dG9tLXNoZWV0LWhlYWRlci1mcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBnYXA6IDhweDtcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1mcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGhlaWdodDogNDBweDtcbiAgcGFkZGluZzogMHB4IDEycHggMHB4IDhweDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogNHB4O1xuICBib3JkZXItcmFkaXVzOiA0MHB4O1xuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMjQpO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xufVxuXG4uaGlkZS1waWxsLWZzIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1mczpob3ZlciB7XG4gIGJvcmRlcjogMXB4IHNvbGlkICM0MDQxNDE7XG4gIGJhY2tncm91bmQ6IHJnYmEoMTYsIDE3LCAxOCwgMC40OCk7XG59XG5cbi5hY3RpdmUtY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLWFjdGl2ZS1mcyB7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG59XG4uYWN0aXZlLWNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1hY3RpdmUtZnMgLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC10ZXh0LWZzIHtcbiAgZm9udC1zaXplOiAxNHB4O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGNvbG9yOiAjMTAxMTEyO1xufVxuLmFjdGl2ZS1jb25maWctYm90dG9tLXNoZWV0LXBpbGwtYWN0aXZlLWZzOmhvdmVyIHtcbiAgYmFja2dyb3VuZDogI2ZmZiAhaW1wb3J0YW50O1xuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1pY29uLXdyYXBwZXItZnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICB3aWR0aDogMjRweDtcbiAgaGVpZ2h0OiAyNHB4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxMHB4O1xufVxuXG4uY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLXRleHQtZnMge1xuICBjb2xvcjogd2hpdGU7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMTQwJTtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtZGl2aWRlci1mcyB7XG4gIGhlaWdodDogMXB4O1xuICB3aWR0aDogMTAwJTtcbiAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpO1xuICBib3gtc2hhZG93OiAwcHggNHB4IDhweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE2KTtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtYWN0aW9ucy1mcyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgZGlzcGxheTogZmxleDtcbiAgZ2FwOiAxMHB4O1xuICB0b3A6IC00OHB4O1xuICByaWdodDogMTZweDtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcmVzZXQtYnV0dG9uLWZzLFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtY2xvc2UtYnV0dG9uLWZzIHtcbiAgd2lkdGg6IDQwcHg7XG4gIGhlaWdodDogNDBweDtcbiAgYm9yZGVyLXJhZGl1czogNDBweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjEpO1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtY29udGVudC1mcyB7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4ucmluZy1yb3ctY29udGFpbmVyLWZzIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxNnB4O1xuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xufVxuXG4uY29uZmlnLWJvdHRvbS1zaGVldC1yaW5nLWRpdnMtZnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICB3aWR0aDogNjRweDtcbiAgcGFkZGluZzogMHB4IDEwcHg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDRweDtcbiAgYm9yZGVyLXJhZGl1czogODBweDtcbn1cblxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcmluZ2ljb24tZGl2cy1mcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHdpZHRoOiA2NHB4O1xuICBoZWlnaHQ6IDY0cHg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBnYXA6IDEwcHg7XG4gIGJvcmRlci1yYWRpdXM6IDgwcHg7XG4gIGJhY2tncm91bmQ6IHJnYmEoMTYsIDE3LCAxOCwgMC4yNCk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLnJpbmctc2VsZWN0ZWQtZnMge1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xufVxuXG4uY29uZmlnLWJvdHRvbS1zaGVldC1yaW5naWNvbi1sYWJlbC1mcyB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMTQwJTtcbiAgY29sb3I6ICNmZmY7XG59XG5cbi5zbGlkZXItY29udGFpbmVyLWZzIHtcbiAgZGlzcGxheTogZmxleDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiAxNnB4O1xuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICB3aWR0aDogMTAwJTtcbiAgLyogbWF4LXdpZHRoOiA1ODBweDsgKi9cbn1cblxuLnNsaWRlci1tYWluLWNvbnRhaW5lci1mcyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xuICBnYXA6IDhweDtcbiAgYWxpZ24tc2VsZjogc3RyZXRjaDtcbn1cblxuLnNsaWRlci1pbnB1dC1kaXYtZnMge1xuICBkaXNwbGF5OiBmbGV4O1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBmbGV4OiAxO1xufVxuXG4uc2xpZGVyLWlucHV0LWRpdi1mcyBpbnB1dCB7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDFweDtcbiAgcGFkZGluZzogMXB4O1xuICAvKiBhY2NlbnQtY29sb3I6ICNmZmY7ICovXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KFxuICAgIHRvIHJpZ2h0LFxuICAgICNmZmYgMCUsXG4gICAgI2ZmZiA1MCUsXG4gICAgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpIDUwJSxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCkgMTAwJVxuICApO1xuICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kIDQ1MG1zIGVhc2UtaW47XG4gIG91dGxpbmU6IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogNHB4O1xufVxuaW5wdXQ6Oi13ZWJraXQtc2xpZGVyLXRodW1iLWZzIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XG4gIGJvcmRlci1yYWRpdXM6IDA7XG5cbiAgaGVpZ2h0OiAxNnB4O1xuICB3aWR0aDogMTZweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gIGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDRweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yNSkpO1xufVxuXG4uc2xpZGVyLWxlZnQtdGV4dC1mcyxcbi5zbGlkZXItcmlnaHQtdGV4dC1mcyB7XG4gIHdpZHRoOiA1NnB4O1xufVxuLnNsaWRlci1yaWdodC10ZXh0LWZzIHtcbiAgdGV4dC1hbGlnbjogZW5kO1xufVxuXG5AbWVkaWEgKG1pbi1hc3BlY3QtcmF0aW86IDQvNSkgYW5kIChtYXgtYXNwZWN0LXJhdGlvOiAxLzEpIHtcbiAgLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1mcyB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICB9XG4gIC5jb25maWctYm90dG9tLXNoZWV0LXBpbGwtdGV4dC1mcyB7XG4gICAgZm9udC1zaXplOiAxMnB4O1xuICB9XG4gIC5hY3RpdmUtY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLWFjdGl2ZS1mcyAuY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLXRleHQtZnMge1xuICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgfVxufVxuYCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL2Z5bmRTdHlsZUNvbmZpZ0JvdHRvbVNoZWV0LmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsV0FBVztFQUNYLFVBQVU7RUFDVixnQ0FBZ0M7RUFDaEMsOENBQThDO0VBQzlDLCtCQUErQjtFQUMvQiwyQkFBMkI7RUFDM0Isa0JBQWtCO0VBQ2xCLFVBQVU7RUFDViw0REFBNEQ7QUFDOUQ7O0FBRUE7RUFDRSxVQUFVO0VBQ1YsbUJBQW1CO0VBQ25CLG9CQUFvQjtBQUN0Qjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLGFBQWE7RUFDYixhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixTQUFTO0VBQ1QsMkJBQTJCO0VBQzNCLHFCQUFxQjtBQUN2Qjs7QUFFQTtFQUNFLHlCQUF5QjtBQUMzQjs7QUFFQTtFQUNFLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsUUFBUTtFQUNSLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixZQUFZO0VBQ1oseUJBQXlCO0VBQ3pCLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsUUFBUTtFQUNSLG1CQUFtQjtFQUNuQixrQ0FBa0M7RUFDbEMsZUFBZTtFQUNmLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLGFBQWE7QUFDZjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixrQ0FBa0M7QUFDcEM7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsMkJBQTJCO0VBQzNCLDZCQUE2QjtBQUMvQjtBQUNBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsY0FBYztBQUNoQjtBQUNBO0VBQ0UsMkJBQTJCO0VBQzNCLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixXQUFXO0VBQ1gsWUFBWTtFQUNaLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsU0FBUztBQUNYOztBQUVBO0VBQ0UsWUFBWTtFQUNaLGVBQWU7RUFDZixrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLGlCQUFpQjtBQUNuQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxXQUFXO0VBQ1gsb0NBQW9DO0VBQ3BDLCtDQUErQztBQUNqRDs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2IsU0FBUztFQUNULFVBQVU7RUFDVixXQUFXO0FBQ2I7O0FBRUE7O0VBRUUsV0FBVztFQUNYLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGlDQUFpQztFQUNqQywyQkFBMkI7RUFDM0IsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsU0FBUztFQUNULG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLGFBQWE7RUFDYixXQUFXO0VBQ1gsaUJBQWlCO0VBQ2pCLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFFBQVE7RUFDUixtQkFBbUI7QUFDckI7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsV0FBVztFQUNYLFlBQVk7RUFDWixzQkFBc0I7RUFDdEIsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixTQUFTO0VBQ1QsbUJBQW1CO0VBQ25CLGtDQUFrQztFQUNsQyxlQUFlO0FBQ2pCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGFBQWE7RUFDYixZQUFZO0VBQ1osdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixTQUFTO0VBQ1QsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLHVCQUF1QjtFQUN2QixRQUFRO0VBQ1IsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLG1CQUFtQjtFQUNuQixPQUFPO0FBQ1Q7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsV0FBVztFQUNYLFlBQVk7RUFDWix3QkFBd0I7RUFDeEIsd0JBQXdCO0VBQ3hCOzs7Ozs7R0FNQztFQUNELG9DQUFvQztFQUNwQyxhQUFhO0VBQ2IsZUFBZTtFQUNmLGtCQUFrQjtBQUNwQjtBQUNBO0VBQ0UsdUJBQXVCO0VBQ3ZCLGdCQUFnQjs7RUFFaEIsWUFBWTtFQUNaLFdBQVc7RUFDWCxrQkFBa0I7RUFDbEIsd0JBQXdCO0VBQ3hCLHFEQUFxRDtBQUN2RDs7QUFFQTs7RUFFRSxXQUFXO0FBQ2I7QUFDQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRTtJQUNFLFlBQVk7RUFDZDtFQUNBO0lBQ0UsZUFBZTtFQUNqQjtFQUNBO0lBQ0UsZUFBZTtFQUNqQjtBQUNGXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5jb25maWctc2V0dGluZ3MtZnMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgd2lkdGg6IDEwMCU7XFxuICB6LWluZGV4OiA1O1xcbiAgYm9yZGVyLXJhZGl1czogMTZweCAxNnB4IDBweCAwcHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjIpO1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjE2KTtcXG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcXG4gIHZpc2liaWxpdHk6IGhpZGRlbjtcXG4gIG9wYWNpdHk6IDA7XFxuICB0cmFuc2l0aW9uOiB2aXNpYmlsaXR5IDBzIGxpbmVhciAwLjMzcywgb3BhY2l0eSAwLjMzcyBsaW5lYXI7XFxufVxcblxcbi5zaG93LWNvbmZpZy1zZXR0aW5ncy1mcyB7XFxuICBvcGFjaXR5OiAxO1xcbiAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXG4gIHRyYW5zaXRpb24tZGVsYXk6IDBzO1xcbn1cXG5cXG4uY29uZmlnLXNldHRpbmdzLWhpZGUtZnMge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtY29udGFpbmVyLWZzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBwYWRkaW5nOiAxNnB4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgZ2FwOiAxNnB4O1xcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwMCUpO1xcbiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xcbn1cXG5cXG4uc2hvdy1jb25maWctc2V0dGluZ3MtZnMgLmNvbmZpZy1ib3R0b20tc2hlZXQtY29udGFpbmVyLWZzIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwJSk7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWhlYWRlci1mcyB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBnYXA6IDhweDtcXG4gIGFsaWduLXNlbGY6IHN0cmV0Y2g7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LXBpbGwtZnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGhlaWdodDogNDBweDtcXG4gIHBhZGRpbmc6IDBweCAxMnB4IDBweCA4cHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDQwcHg7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMjQpO1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxufVxcblxcbi5oaWRlLXBpbGwtZnMge1xcbiAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1mczpob3ZlciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjNDA0MTQxO1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjQ4KTtcXG59XFxuXFxuLmFjdGl2ZS1jb25maWctYm90dG9tLXNoZWV0LXBpbGwtYWN0aXZlLWZzIHtcXG4gIGJhY2tncm91bmQ6ICNmZmY7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuLmFjdGl2ZS1jb25maWctYm90dG9tLXNoZWV0LXBpbGwtYWN0aXZlLWZzIC5jb25maWctYm90dG9tLXNoZWV0LXBpbGwtdGV4dC1mcyB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgY29sb3I6ICMxMDExMTI7XFxufVxcbi5hY3RpdmUtY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLWFjdGl2ZS1mczpob3ZlciB7XFxuICBiYWNrZ3JvdW5kOiAjZmZmICFpbXBvcnRhbnQ7XFxuICBib3JkZXI6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1pY29uLXdyYXBwZXItZnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiAyNHB4O1xcbiAgaGVpZ2h0OiAyNHB4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLXRleHQtZnMge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxNDAlO1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1kaXZpZGVyLWZzIHtcXG4gIGhlaWdodDogMXB4O1xcbiAgd2lkdGg6IDEwMCU7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCk7XFxuICBib3gtc2hhZG93OiAwcHggNHB4IDhweCAwcHggcmdiYSgwLCAwLCAwLCAwLjE2KTtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtYWN0aW9ucy1mcyB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZ2FwOiAxMHB4O1xcbiAgdG9wOiAtNDhweDtcXG4gIHJpZ2h0OiAxNnB4O1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1yZXNldC1idXR0b24tZnMsXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtY2xvc2UtYnV0dG9uLWZzIHtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNDBweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMSk7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5jb25maWctYm90dG9tLXNoZWV0LWNvbnRlbnQtZnMge1xcbiAgd2lkdGg6IDEwMCU7XFxufVxcblxcbi5yaW5nLXJvdy1jb250YWluZXItZnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDE2cHg7XFxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1yaW5nLWRpdnMtZnMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHdpZHRoOiA2NHB4O1xcbiAgcGFkZGluZzogMHB4IDEwcHg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA4MHB4O1xcbn1cXG5cXG4uY29uZmlnLWJvdHRvbS1zaGVldC1yaW5naWNvbi1kaXZzLWZzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICB3aWR0aDogNjRweDtcXG4gIGhlaWdodDogNjRweDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDEwcHg7XFxuICBib3JkZXItcmFkaXVzOiA4MHB4O1xcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjI0KTtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJpbmctc2VsZWN0ZWQtZnMge1xcbiAgYmFja2dyb3VuZDogI2ZmZjtcXG59XFxuXFxuLmNvbmZpZy1ib3R0b20tc2hlZXQtcmluZ2ljb24tbGFiZWwtZnMge1xcbiAgZm9udC1zaXplOiAxNHB4O1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGxpbmUtaGVpZ2h0OiAxNDAlO1xcbiAgY29sb3I6ICNmZmY7XFxufVxcblxcbi5zbGlkZXItY29udGFpbmVyLWZzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBoZWlnaHQ6IDQwcHg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDE2cHg7XFxuICBhbGlnbi1zZWxmOiBzdHJldGNoO1xcbiAgd2lkdGg6IDEwMCU7XFxuICAvKiBtYXgtd2lkdGg6IDU4MHB4OyAqL1xcbn1cXG5cXG4uc2xpZGVyLW1haW4tY29udGFpbmVyLWZzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7XFxuICBnYXA6IDhweDtcXG4gIGFsaWduLXNlbGY6IHN0cmV0Y2g7XFxufVxcblxcbi5zbGlkZXItaW5wdXQtZGl2LWZzIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZmxleDogMTtcXG59XFxuXFxuLnNsaWRlci1pbnB1dC1kaXYtZnMgaW5wdXQge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDFweDtcXG4gIHBhZGRpbmc6IDFweDtcXG4gIC8qIGFjY2VudC1jb2xvcjogI2ZmZjsgKi9cXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudChcXG4gICAgdG8gcmlnaHQsXFxuICAgICNmZmYgMCUsXFxuICAgICNmZmYgNTAlLFxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCkgNTAlLFxcbiAgICByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuNCkgMTAwJVxcbiAgKTtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQgNDUwbXMgZWFzZS1pbjtcXG4gIG91dGxpbmU6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxufVxcbmlucHV0Ojotd2Via2l0LXNsaWRlci10aHVtYi1mcyB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTtcXG4gIGJvcmRlci1yYWRpdXM6IDA7XFxuXFxuICBoZWlnaHQ6IDE2cHg7XFxuICB3aWR0aDogMTZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gIGZpbHRlcjogZHJvcC1zaGFkb3coMHB4IDRweCAxMHB4IHJnYmEoMCwgMCwgMCwgMC4yNSkpO1xcbn1cXG5cXG4uc2xpZGVyLWxlZnQtdGV4dC1mcyxcXG4uc2xpZGVyLXJpZ2h0LXRleHQtZnMge1xcbiAgd2lkdGg6IDU2cHg7XFxufVxcbi5zbGlkZXItcmlnaHQtdGV4dC1mcyB7XFxuICB0ZXh0LWFsaWduOiBlbmQ7XFxufVxcblxcbkBtZWRpYSAobWluLWFzcGVjdC1yYXRpbzogNC81KSBhbmQgKG1heC1hc3BlY3QtcmF0aW86IDEvMSkge1xcbiAgLmNvbmZpZy1ib3R0b20tc2hlZXQtcGlsbC1mcyB7XFxuICAgIGhlaWdodDogMzJweDtcXG4gIH1cXG4gIC5jb25maWctYm90dG9tLXNoZWV0LXBpbGwtdGV4dC1mcyB7XFxuICAgIGZvbnQtc2l6ZTogMTJweDtcXG4gIH1cXG4gIC5hY3RpdmUtY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLWFjdGl2ZS1mcyAuY29uZmlnLWJvdHRvbS1zaGVldC1waWxsLXRleHQtZnMge1xcbiAgICBmb250LXNpemU6IDEycHg7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4495\n')},2262:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.left-nav-icon {\n  position: absolute;\n  left: 16px;\n  top: 16px;\n  display: none;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  border-radius: 50%;\n  z-index: 12;\n}\n\n.cross-nav-icon {\n  position: absolute;\n  right: 16px;\n  top: 16px;\n  display: none;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  height: 40px;\n  cursor: pointer;\n  border-radius: 50%;\n  z-index: 12;\n}\n\n.icon-blur-bg {\n  backdrop-filter: blur(25px);\n  background: rgba(16, 17, 18, 0.1);\n}\n\n.icon-blur-bg img {\n  width: 24px;\n  height: 24px;\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/navigationButtons.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;EACZ,eAAe;EACf,kBAAkB;EAClB,WAAW;AACb;;AAEA;EACE,2BAA2B;EAC3B,iCAAiC;AACnC;;AAEA;EACE,WAAW;EACX,YAAY;AACd","sourcesContent":[".left-nav-icon {\\n  position: absolute;\\n  left: 16px;\\n  top: 16px;\\n  display: none;\\n  justify-content: center;\\n  align-items: center;\\n  width: 40px;\\n  height: 40px;\\n  cursor: pointer;\\n  border-radius: 50%;\\n  z-index: 12;\\n}\\n\\n.cross-nav-icon {\\n  position: absolute;\\n  right: 16px;\\n  top: 16px;\\n  display: none;\\n  justify-content: center;\\n  align-items: center;\\n  width: 40px;\\n  height: 40px;\\n  cursor: pointer;\\n  border-radius: 50%;\\n  z-index: 12;\\n}\\n\\n.icon-blur-bg {\\n  backdrop-filter: blur(25px);\\n  background: rgba(16, 17, 18, 0.1);\\n}\\n\\n.icon-blur-bg img {\\n  width: 24px;\\n  height: 24px;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI2Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTywrR0FBK0csWUFBWSxXQUFXLFVBQVUsVUFBVSxZQUFZLGFBQWEsV0FBVyxVQUFVLFVBQVUsWUFBWSxXQUFXLE1BQU0sS0FBSyxZQUFZLFdBQVcsVUFBVSxVQUFVLFlBQVksYUFBYSxXQUFXLFVBQVUsVUFBVSxZQUFZLFdBQVcsTUFBTSxLQUFLLFlBQVksYUFBYSxPQUFPLEtBQUssVUFBVSxVQUFVLHlDQUF5Qyx1QkFBdUIsZUFBZSxjQUFjLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHVCQUF1QixnQkFBZ0IsR0FBRyxxQkFBcUIsdUJBQXVCLGdCQUFnQixjQUFjLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGdCQUFnQixpQkFBaUIsb0JBQW9CLHVCQUF1QixnQkFBZ0IsR0FBRyxtQkFBbUIsZ0NBQWdDLHNDQUFzQyxHQUFHLHVCQUF1QixnQkFBZ0IsaUJBQWlCLEdBQUcscUJBQXFCO0FBQ3RsQztBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2xhbWFyLXNkay8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvbmF2aWdhdGlvbkJ1dHRvbnMuY3NzP2Y4ZTIiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5sZWZ0LW5hdi1pY29uIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBsZWZ0OiAxNnB4O1xuICB0b3A6IDE2cHg7XG4gIGRpc3BsYXk6IG5vbmU7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgei1pbmRleDogMTI7XG59XG5cbi5jcm9zcy1uYXYtaWNvbiB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDE2cHg7XG4gIHRvcDogMTZweDtcbiAgZGlzcGxheTogbm9uZTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIHdpZHRoOiA0MHB4O1xuICBoZWlnaHQ6IDQwcHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICB6LWluZGV4OiAxMjtcbn1cblxuLmljb24tYmx1ci1iZyB7XG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcbiAgYmFja2dyb3VuZDogcmdiYSgxNiwgMTcsIDE4LCAwLjEpO1xufVxuXG4uaWNvbi1ibHVyLWJnIGltZyB7XG4gIHdpZHRoOiAyNHB4O1xuICBoZWlnaHQ6IDI0cHg7XG59XG5gLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvbmF2aWdhdGlvbkJ1dHRvbnMuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0Usa0JBQWtCO0VBQ2xCLFVBQVU7RUFDVixTQUFTO0VBQ1QsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsV0FBVztFQUNYLFlBQVk7RUFDWixlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsU0FBUztFQUNULGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFdBQVc7RUFDWCxZQUFZO0VBQ1osZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixXQUFXO0FBQ2I7O0FBRUE7RUFDRSwyQkFBMkI7RUFDM0IsaUNBQWlDO0FBQ25DOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7QUFDZFwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIubGVmdC1uYXYtaWNvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICBsZWZ0OiAxNnB4O1xcbiAgdG9wOiAxNnB4O1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgei1pbmRleDogMTI7XFxufVxcblxcbi5jcm9zcy1uYXYtaWNvbiB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICByaWdodDogMTZweDtcXG4gIHRvcDogMTZweDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogNDBweDtcXG4gIGhlaWdodDogNDBweDtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gIHotaW5kZXg6IDEyO1xcbn1cXG5cXG4uaWNvbi1ibHVyLWJnIHtcXG4gIGJhY2tkcm9wLWZpbHRlcjogYmx1cigyNXB4KTtcXG4gIGJhY2tncm91bmQ6IHJnYmEoMTYsIDE3LCAxOCwgMC4xKTtcXG59XFxuXFxuLmljb24tYmx1ci1iZyBpbWcge1xcbiAgd2lkdGg6IDI0cHg7XFxuICBoZWlnaHQ6IDI0cHg7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2262\n')},4790:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.popup-modal {\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  display: none;\n  z-index: 15;\n  justify-content: center;\n  align-items: center;\n  background: rgba(28, 28, 28, 0.4);\n}\n\n.modal-container {\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 16px;\n  border-radius: 8px;\n  justify-content: center;\n  align-items: center;\n  max-width: 328px;\n  background: #fff;\n}\n\n.modal-heading {\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n  color: #242b38;\n  text-align: center;\n}\n\n.modal-separator {\n  border: 1px solid rgba(28, 28, 28, 0.1);\n  width: 100%;\n}\n\n.modal-actions-container {\n  display: flex;\n  justify-content: center;\n  gap: 16px;\n}\n\n.modal-positive-action {\n  min-width: 104px;\n  padding: 10px 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 6px;\n  background: linear-gradient(168deg, #e65f6e 0.66%, #da0e64 59.95%);\n  color: #fff;\n  border-radius: 8px;\n  border: none;\n  cursor: pointer;\n  font-weight: 600;\n}\n\n.modal-negative-action {\n  min-width: 104px;\n  padding: 10px 12px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 6px;\n  border: 1px solid #da0e64;\n  color: #e65e97;\n  background: #fff;\n  border-radius: 8px;\n  cursor: pointer;\n  background: rgba(218, 14, 100, 0.04);\n  font-weight: 600;\n}\n\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\n  .modal-container {\n    width: min-content;\n  }\n  .modal-heading {\n    font-size: 16px;\n  }\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/popupModal.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,WAAW;EACX,YAAY;EACZ,aAAa;EACb,WAAW;EACX,uBAAuB;EACvB,mBAAmB;EACnB,iCAAiC;AACnC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;EACT,aAAa;EACb,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;EACjB,cAAc;EACd,kBAAkB;AACpB;;AAEA;EACE,uCAAuC;EACvC,WAAW;AACb;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,kEAAkE;EAClE,WAAW;EACX,kBAAkB;EAClB,YAAY;EACZ,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,yBAAyB;EACzB,cAAc;EACd,gBAAgB;EAChB,kBAAkB;EAClB,eAAe;EACf,oCAAoC;EACpC,gBAAgB;AAClB;;AAEA;EACE;IACE,kBAAkB;EACpB;EACA;IACE,eAAe;EACjB;AACF","sourcesContent":[".popup-modal {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  width: 100%;\\n  height: 100%;\\n  display: none;\\n  z-index: 15;\\n  justify-content: center;\\n  align-items: center;\\n  background: rgba(28, 28, 28, 0.4);\\n}\\n\\n.modal-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n  padding: 16px;\\n  border-radius: 8px;\\n  justify-content: center;\\n  align-items: center;\\n  max-width: 328px;\\n  background: #fff;\\n}\\n\\n.modal-heading {\\n  font-size: 18px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n  color: #242b38;\\n  text-align: center;\\n}\\n\\n.modal-separator {\\n  border: 1px solid rgba(28, 28, 28, 0.1);\\n  width: 100%;\\n}\\n\\n.modal-actions-container {\\n  display: flex;\\n  justify-content: center;\\n  gap: 16px;\\n}\\n\\n.modal-positive-action {\\n  min-width: 104px;\\n  padding: 10px 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 6px;\\n  background: linear-gradient(168deg, #e65f6e 0.66%, #da0e64 59.95%);\\n  color: #fff;\\n  border-radius: 8px;\\n  border: none;\\n  cursor: pointer;\\n  font-weight: 600;\\n}\\n\\n.modal-negative-action {\\n  min-width: 104px;\\n  padding: 10px 12px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 6px;\\n  border: 1px solid #da0e64;\\n  color: #e65e97;\\n  background: #fff;\\n  border-radius: 8px;\\n  cursor: pointer;\\n  background: rgba(218, 14, 100, 0.04);\\n  font-weight: 600;\\n}\\n\\n@media (min-aspect-ratio: 4/5) and (max-aspect-ratio: 1/1) {\\n  .modal-container {\\n    width: min-content;\\n  }\\n  .modal-heading {\\n    font-size: 16px;\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDc5MC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyx3R0FBd0csWUFBWSxXQUFXLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxZQUFZLGFBQWEsYUFBYSxPQUFPLEtBQUssVUFBVSxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxhQUFhLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLGFBQWEsV0FBVyxZQUFZLE9BQU8sS0FBSyxZQUFZLFdBQVcsTUFBTSxLQUFLLFVBQVUsWUFBWSxXQUFXLE1BQU0sS0FBSyxZQUFZLGFBQWEsV0FBVyxZQUFZLGFBQWEsV0FBVyxZQUFZLFdBQVcsWUFBWSxXQUFXLFVBQVUsWUFBWSxPQUFPLEtBQUssWUFBWSxhQUFhLFdBQVcsWUFBWSxhQUFhLFdBQVcsWUFBWSxXQUFXLFlBQVksYUFBYSxXQUFXLFlBQVksYUFBYSxPQUFPLEtBQUssS0FBSyxZQUFZLE1BQU0sS0FBSyxVQUFVLE1BQU0sdUNBQXVDLHVCQUF1QixXQUFXLGNBQWMsZ0JBQWdCLGlCQUFpQixrQkFBa0IsZ0JBQWdCLDRCQUE0Qix3QkFBd0Isc0NBQXNDLEdBQUcsc0JBQXNCLGtCQUFrQiwyQkFBMkIsY0FBYyxrQkFBa0IsdUJBQXVCLDRCQUE0Qix3QkFBd0IscUJBQXFCLHFCQUFxQixHQUFHLG9CQUFvQixvQkFBb0IsdUJBQXVCLHFCQUFxQixzQkFBc0IsbUJBQW1CLHVCQUF1QixHQUFHLHNCQUFzQiw0Q0FBNEMsZ0JBQWdCLEdBQUcsOEJBQThCLGtCQUFrQiw0QkFBNEIsY0FBYyxHQUFHLDRCQUE0QixxQkFBcUIsdUJBQXVCLGtCQUFrQiw0QkFBNEIsd0JBQXdCLGFBQWEsdUVBQXVFLGdCQUFnQix1QkFBdUIsaUJBQWlCLG9CQUFvQixxQkFBcUIsR0FBRyw0QkFBNEIscUJBQXFCLHVCQUF1QixrQkFBa0IsNEJBQTRCLHdCQUF3QixhQUFhLDhCQUE4QixtQkFBbUIscUJBQXFCLHVCQUF1QixvQkFBb0IseUNBQXlDLHFCQUFxQixHQUFHLGdFQUFnRSxzQkFBc0IseUJBQXlCLEtBQUssb0JBQW9CLHNCQUFzQixLQUFLLEdBQUcscUJBQXFCO0FBQ3Y5RTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2xhbWFyLXNkay8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvcG9wdXBNb2RhbC5jc3M/YzZmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgLnBvcHVwLW1vZGFsIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGJvdHRvbTogMDtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogbm9uZTtcbiAgei1pbmRleDogMTU7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBhbGlnbi1pdGVtczogY2VudGVyO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI4LCAyOCwgMjgsIDAuNCk7XG59XG5cbi5tb2RhbC1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDE2cHg7XG4gIHBhZGRpbmc6IDE2cHg7XG4gIGJvcmRlci1yYWRpdXM6IDhweDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1heC13aWR0aDogMzI4cHg7XG4gIGJhY2tncm91bmQ6ICNmZmY7XG59XG5cbi5tb2RhbC1oZWFkaW5nIHtcbiAgZm9udC1zaXplOiAxOHB4O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA1MDA7XG4gIGxpbmUtaGVpZ2h0OiAxNDAlO1xuICBjb2xvcjogIzI0MmIzODtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xufVxuXG4ubW9kYWwtc2VwYXJhdG9yIHtcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgyOCwgMjgsIDI4LCAwLjEpO1xuICB3aWR0aDogMTAwJTtcbn1cblxuLm1vZGFsLWFjdGlvbnMtY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGdhcDogMTZweDtcbn1cblxuLm1vZGFsLXBvc2l0aXZlLWFjdGlvbiB7XG4gIG1pbi13aWR0aDogMTA0cHg7XG4gIHBhZGRpbmc6IDEwcHggMTJweDtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogNnB4O1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMTY4ZGVnLCAjZTY1ZjZlIDAuNjYlLCAjZGEwZTY0IDU5Ljk1JSk7XG4gIGNvbG9yOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGJvcmRlcjogbm9uZTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBmb250LXdlaWdodDogNjAwO1xufVxuXG4ubW9kYWwtbmVnYXRpdmUtYWN0aW9uIHtcbiAgbWluLXdpZHRoOiAxMDRweDtcbiAgcGFkZGluZzogMTBweCAxMnB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA2cHg7XG4gIGJvcmRlcjogMXB4IHNvbGlkICNkYTBlNjQ7XG4gIGNvbG9yOiAjZTY1ZTk3O1xuICBiYWNrZ3JvdW5kOiAjZmZmO1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYmFja2dyb3VuZDogcmdiYSgyMTgsIDE0LCAxMDAsIDAuMDQpO1xuICBmb250LXdlaWdodDogNjAwO1xufVxuXG5AbWVkaWEgKG1pbi1hc3BlY3QtcmF0aW86IDQvNSkgYW5kIChtYXgtYXNwZWN0LXJhdGlvOiAxLzEpIHtcbiAgLm1vZGFsLWNvbnRhaW5lciB7XG4gICAgd2lkdGg6IG1pbi1jb250ZW50O1xuICB9XG4gIC5tb2RhbC1oZWFkaW5nIHtcbiAgICBmb250LXNpemU6IDE2cHg7XG4gIH1cbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2h0bWxTZXJ2aWNlL3N0eWxlcy9wb3B1cE1vZGFsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixNQUFNO0VBQ04sU0FBUztFQUNULFdBQVc7RUFDWCxZQUFZO0VBQ1osYUFBYTtFQUNiLFdBQVc7RUFDWCx1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLGlDQUFpQztBQUNuQzs7QUFFQTtFQUNFLGFBQWE7RUFDYixzQkFBc0I7RUFDdEIsU0FBUztFQUNULGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsdUJBQXVCO0VBQ3ZCLG1CQUFtQjtFQUNuQixnQkFBZ0I7RUFDaEIsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSx1Q0FBdUM7RUFDdkMsV0FBVztBQUNiOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixTQUFTO0FBQ1g7O0FBRUE7RUFDRSxnQkFBZ0I7RUFDaEIsa0JBQWtCO0VBQ2xCLGFBQWE7RUFDYix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFFBQVE7RUFDUixrRUFBa0U7RUFDbEUsV0FBVztFQUNYLGtCQUFrQjtFQUNsQixZQUFZO0VBQ1osZUFBZTtFQUNmLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFLGdCQUFnQjtFQUNoQixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsUUFBUTtFQUNSLHlCQUF5QjtFQUN6QixjQUFjO0VBQ2QsZ0JBQWdCO0VBQ2hCLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2Ysb0NBQW9DO0VBQ3BDLGdCQUFnQjtBQUNsQjs7QUFFQTtFQUNFO0lBQ0Usa0JBQWtCO0VBQ3BCO0VBQ0E7SUFDRSxlQUFlO0VBQ2pCO0FBQ0ZcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnBvcHVwLW1vZGFsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGJvdHRvbTogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHotaW5kZXg6IDE1O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYmFja2dyb3VuZDogcmdiYSgyOCwgMjgsIDI4LCAwLjQpO1xcbn1cXG5cXG4ubW9kYWwtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiAxNnB4O1xcbiAgcGFkZGluZzogMTZweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIG1heC13aWR0aDogMzI4cHg7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbn1cXG5cXG4ubW9kYWwtaGVhZGluZyB7XFxuICBmb250LXNpemU6IDE4cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XFxuICBjb2xvcjogIzI0MmIzODtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG59XFxuXFxuLm1vZGFsLXNlcGFyYXRvciB7XFxuICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDI4LCAyOCwgMjgsIDAuMSk7XFxuICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLm1vZGFsLWFjdGlvbnMtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGdhcDogMTZweDtcXG59XFxuXFxuLm1vZGFsLXBvc2l0aXZlLWFjdGlvbiB7XFxuICBtaW4td2lkdGg6IDEwNHB4O1xcbiAgcGFkZGluZzogMTBweCAxMnB4O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGdhcDogNnB4O1xcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDE2OGRlZywgI2U2NWY2ZSAwLjY2JSwgI2RhMGU2NCA1OS45NSUpO1xcbiAgY29sb3I6ICNmZmY7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxuICBmb250LXdlaWdodDogNjAwO1xcbn1cXG5cXG4ubW9kYWwtbmVnYXRpdmUtYWN0aW9uIHtcXG4gIG1pbi13aWR0aDogMTA0cHg7XFxuICBwYWRkaW5nOiAxMHB4IDEycHg7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgZ2FwOiA2cHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCAjZGEwZTY0O1xcbiAgY29sb3I6ICNlNjVlOTc7XFxuICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgYm9yZGVyLXJhZGl1czogOHB4O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbiAgYmFja2dyb3VuZDogcmdiYSgyMTgsIDE0LCAxMDAsIDAuMDQpO1xcbiAgZm9udC13ZWlnaHQ6IDYwMDtcXG59XFxuXFxuQG1lZGlhIChtaW4tYXNwZWN0LXJhdGlvOiA0LzUpIGFuZCAobWF4LWFzcGVjdC1yYXRpbzogMS8xKSB7XFxuICAubW9kYWwtY29udGFpbmVyIHtcXG4gICAgd2lkdGg6IG1pbi1jb250ZW50O1xcbiAgfVxcbiAgLm1vZGFsLWhlYWRpbmcge1xcbiAgICBmb250LXNpemU6IDE2cHg7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4790\n')},6009:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.setting-options {\n  visibility: hidden;\n  z-index: 4;\n  position: absolute;\n  right: 12px;\n  bottom: 36px;\n}\n.settingOptions-container {\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  transform: translateX(0%);\n  transition: 0.3s ease;\n}\n.hide-settingOptions .settingOptions-container {\n  transform: translateX(1000px);\n}\n\n.settingOptions-icon-container {\n  box-sizing: border-box;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  display: flex;\n  padding: 4px;\n  justify-content: center;\n  border: 1px solid transparent;\n  backdrop-filter: blur(25px);\n  background: rgba(16, 17, 18, 0.1);\n  cursor: pointer;\n}\n\n.settingOptions-icon-wrapper {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  box-sizing: border-box;\n}\n\n.settingOptions-icon-disabled {\n  opacity: 0.5;\n  pointer-events: none;\n  touch-action: none;\n}\n\n.settingOptions-custom-icon-wrapper {\n  width: 100%;\n  height: 100%;\n  border: 1px solid white;\n  padding: 4px;\n  border-radius: 50%;\n  box-sizing: border-box;\n}\n\n.settingOptions-custom-icon {\n  width: 100%;\n  height: 100%;\n  border-radius: 50%;\n  background: white;\n}\n.settingOptions-icon-selected {\n  border: 1px solid white;\n}\n.settingOptions-icon-selected .settingOptions-icon-wrapper {\n  background: white;\n}\n\n.hide-setting-icon {\n  display: none;\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/settingOptions.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,UAAU;EACV,kBAAkB;EAClB,WAAW;EACX,YAAY;AACd;AACA;EACE,aAAa;EACb,sBAAsB;EACtB,QAAQ;EACR,yBAAyB;EACzB,qBAAqB;AACvB;AACA;EACE,6BAA6B;AAC/B;;AAEA;EACE,sBAAsB;EACtB,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,aAAa;EACb,YAAY;EACZ,uBAAuB;EACvB,6BAA6B;EAC7B,2BAA2B;EAC3B,iCAAiC;EACjC,eAAe;AACjB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,oBAAoB;EACpB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;EAClB,sBAAsB;AACxB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,kBAAkB;EAClB,iBAAiB;AACnB;AACA;EACE,uBAAuB;AACzB;AACA;EACE,iBAAiB;AACnB;;AAEA;EACE,aAAa;AACf","sourcesContent":[".setting-options {\\n  visibility: hidden;\\n  z-index: 4;\\n  position: absolute;\\n  right: 12px;\\n  bottom: 36px;\\n}\\n.settingOptions-container {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 8px;\\n  transform: translateX(0%);\\n  transition: 0.3s ease;\\n}\\n.hide-settingOptions .settingOptions-container {\\n  transform: translateX(1000px);\\n}\\n\\n.settingOptions-icon-container {\\n  box-sizing: border-box;\\n  width: 40px;\\n  height: 40px;\\n  border-radius: 50%;\\n  display: flex;\\n  padding: 4px;\\n  justify-content: center;\\n  border: 1px solid transparent;\\n  backdrop-filter: blur(25px);\\n  background: rgba(16, 17, 18, 0.1);\\n  cursor: pointer;\\n}\\n\\n.settingOptions-icon-wrapper {\\n  width: 100%;\\n  height: 100%;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n}\\n\\n.settingOptions-icon-disabled {\\n  opacity: 0.5;\\n  pointer-events: none;\\n  touch-action: none;\\n}\\n\\n.settingOptions-custom-icon-wrapper {\\n  width: 100%;\\n  height: 100%;\\n  border: 1px solid white;\\n  padding: 4px;\\n  border-radius: 50%;\\n  box-sizing: border-box;\\n}\\n\\n.settingOptions-custom-icon {\\n  width: 100%;\\n  height: 100%;\\n  border-radius: 50%;\\n  background: white;\\n}\\n.settingOptions-icon-selected {\\n  border: 1px solid white;\\n}\\n.settingOptions-icon-selected .settingOptions-icon-wrapper {\\n  background: white;\\n}\\n\\n.hide-setting-icon {\\n  display: none;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjAwOS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsT0FBTyw0R0FBNEcsWUFBWSxXQUFXLFlBQVksV0FBVyxVQUFVLEtBQUssS0FBSyxVQUFVLFlBQVksV0FBVyxZQUFZLGFBQWEsTUFBTSxLQUFLLFlBQVksT0FBTyxLQUFLLFlBQVksV0FBVyxVQUFVLFlBQVksV0FBVyxVQUFVLFlBQVksYUFBYSxhQUFhLGFBQWEsV0FBVyxPQUFPLEtBQUssVUFBVSxVQUFVLFVBQVUsWUFBWSxhQUFhLGFBQWEsYUFBYSxPQUFPLEtBQUssVUFBVSxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsVUFBVSxZQUFZLFdBQVcsWUFBWSxhQUFhLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxhQUFhLE1BQU0sS0FBSyxZQUFZLE1BQU0sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLDJDQUEyQyx1QkFBdUIsZUFBZSx1QkFBdUIsZ0JBQWdCLGlCQUFpQixHQUFHLDZCQUE2QixrQkFBa0IsMkJBQTJCLGFBQWEsOEJBQThCLDBCQUEwQixHQUFHLGtEQUFrRCxrQ0FBa0MsR0FBRyxvQ0FBb0MsMkJBQTJCLGdCQUFnQixpQkFBaUIsdUJBQXVCLGtCQUFrQixpQkFBaUIsNEJBQTRCLGtDQUFrQyxnQ0FBZ0Msc0NBQXNDLG9CQUFvQixHQUFHLGtDQUFrQyxnQkFBZ0IsaUJBQWlCLGtCQUFrQiw0QkFBNEIsd0JBQXdCLHVCQUF1QiwyQkFBMkIsR0FBRyxtQ0FBbUMsaUJBQWlCLHlCQUF5Qix1QkFBdUIsR0FBRyx5Q0FBeUMsZ0JBQWdCLGlCQUFpQiw0QkFBNEIsaUJBQWlCLHVCQUF1QiwyQkFBMkIsR0FBRyxpQ0FBaUMsZ0JBQWdCLGlCQUFpQix1QkFBdUIsc0JBQXNCLEdBQUcsaUNBQWlDLDRCQUE0QixHQUFHLDhEQUE4RCxzQkFBc0IsR0FBRyx3QkFBd0Isa0JBQWtCLEdBQUcscUJBQXFCO0FBQ2pyRTtBQUNBLGlFQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZ2xhbWFyLXNkay8uL3NyYy9odG1sU2VydmljZS9zdHlsZXMvc2V0dGluZ09wdGlvbnMuY3NzP2NlNmMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zZXR0aW5nLW9wdGlvbnMge1xuICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gIHotaW5kZXg6IDQ7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgcmlnaHQ6IDEycHg7XG4gIGJvdHRvbTogMzZweDtcbn1cbi5zZXR0aW5nT3B0aW9ucy1jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDhweDtcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDAlKTtcbiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xufVxuLmhpZGUtc2V0dGluZ09wdGlvbnMgLnNldHRpbmdPcHRpb25zLWNvbnRhaW5lciB7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAwcHgpO1xufVxuXG4uc2V0dGluZ09wdGlvbnMtaWNvbi1jb250YWluZXIge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICB3aWR0aDogNDBweDtcbiAgaGVpZ2h0OiA0MHB4O1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIHBhZGRpbmc6IDRweDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGJvcmRlcjogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XG4gIGJhY2tncm91bmQ6IHJnYmEoMTYsIDE3LCAxOCwgMC4xKTtcbiAgY3Vyc29yOiBwb2ludGVyO1xufVxuXG4uc2V0dGluZ09wdGlvbnMtaWNvbi13cmFwcGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbn1cblxuLnNldHRpbmdPcHRpb25zLWljb24tZGlzYWJsZWQge1xuICBvcGFjaXR5OiAwLjU7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB0b3VjaC1hY3Rpb246IG5vbmU7XG59XG5cbi5zZXR0aW5nT3B0aW9ucy1jdXN0b20taWNvbi13cmFwcGVyIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XG4gIHBhZGRpbmc6IDRweDtcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG4uc2V0dGluZ09wdGlvbnMtY3VzdG9tLWljb24ge1xuICB3aWR0aDogMTAwJTtcbiAgaGVpZ2h0OiAxMDAlO1xuICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGJhY2tncm91bmQ6IHdoaXRlO1xufVxuLnNldHRpbmdPcHRpb25zLWljb24tc2VsZWN0ZWQge1xuICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTtcbn1cbi5zZXR0aW5nT3B0aW9ucy1pY29uLXNlbGVjdGVkIC5zZXR0aW5nT3B0aW9ucy1pY29uLXdyYXBwZXIge1xuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcbn1cblxuLmhpZGUtc2V0dGluZy1pY29uIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2h0bWxTZXJ2aWNlL3N0eWxlcy9zZXR0aW5nT3B0aW9ucy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSxrQkFBa0I7RUFDbEIsVUFBVTtFQUNWLGtCQUFrQjtFQUNsQixXQUFXO0VBQ1gsWUFBWTtBQUNkO0FBQ0E7RUFDRSxhQUFhO0VBQ2Isc0JBQXNCO0VBQ3RCLFFBQVE7RUFDUix5QkFBeUI7RUFDekIscUJBQXFCO0FBQ3ZCO0FBQ0E7RUFDRSw2QkFBNkI7QUFDL0I7O0FBRUE7RUFDRSxzQkFBc0I7RUFDdEIsV0FBVztFQUNYLFlBQVk7RUFDWixrQkFBa0I7RUFDbEIsYUFBYTtFQUNiLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsNkJBQTZCO0VBQzdCLDJCQUEyQjtFQUMzQixpQ0FBaUM7RUFDakMsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLFdBQVc7RUFDWCxZQUFZO0VBQ1osYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLHNCQUFzQjtBQUN4Qjs7QUFFQTtFQUNFLFlBQVk7RUFDWixvQkFBb0I7RUFDcEIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWix1QkFBdUI7RUFDdkIsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixzQkFBc0I7QUFDeEI7O0FBRUE7RUFDRSxXQUFXO0VBQ1gsWUFBWTtFQUNaLGtCQUFrQjtFQUNsQixpQkFBaUI7QUFDbkI7QUFDQTtFQUNFLHVCQUF1QjtBQUN6QjtBQUNBO0VBQ0UsaUJBQWlCO0FBQ25COztBQUVBO0VBQ0UsYUFBYTtBQUNmXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIi5zZXR0aW5nLW9wdGlvbnMge1xcbiAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbiAgei1pbmRleDogNDtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHJpZ2h0OiAxMnB4O1xcbiAgYm90dG9tOiAzNnB4O1xcbn1cXG4uc2V0dGluZ09wdGlvbnMtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgZ2FwOiA4cHg7XFxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMCUpO1xcbiAgdHJhbnNpdGlvbjogMC4zcyBlYXNlO1xcbn1cXG4uaGlkZS1zZXR0aW5nT3B0aW9ucyAuc2V0dGluZ09wdGlvbnMtY29udGFpbmVyIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgxMDAwcHgpO1xcbn1cXG5cXG4uc2V0dGluZ09wdGlvbnMtaWNvbi1jb250YWluZXIge1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gIHdpZHRoOiA0MHB4O1xcbiAgaGVpZ2h0OiA0MHB4O1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIHBhZGRpbmc6IDRweDtcXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XFxuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMjVweCk7XFxuICBiYWNrZ3JvdW5kOiByZ2JhKDE2LCAxNywgMTgsIDAuMSk7XFxuICBjdXJzb3I6IHBvaW50ZXI7XFxufVxcblxcbi5zZXR0aW5nT3B0aW9ucy1pY29uLXdyYXBwZXIge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgYm9yZGVyLXJhZGl1czogNTAlO1xcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxuLnNldHRpbmdPcHRpb25zLWljb24tZGlzYWJsZWQge1xcbiAgb3BhY2l0eTogMC41O1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICB0b3VjaC1hY3Rpb246IG5vbmU7XFxufVxcblxcbi5zZXR0aW5nT3B0aW9ucy1jdXN0b20taWNvbi13cmFwcGVyIHtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XFxuICBwYWRkaW5nOiA0cHg7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbn1cXG5cXG4uc2V0dGluZ09wdGlvbnMtY3VzdG9tLWljb24ge1xcbiAgd2lkdGg6IDEwMCU7XFxuICBoZWlnaHQ6IDEwMCU7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kOiB3aGl0ZTtcXG59XFxuLnNldHRpbmdPcHRpb25zLWljb24tc2VsZWN0ZWQge1xcbiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7XFxufVxcbi5zZXR0aW5nT3B0aW9ucy1pY29uLXNlbGVjdGVkIC5zZXR0aW5nT3B0aW9ucy1pY29uLXdyYXBwZXIge1xcbiAgYmFja2dyb3VuZDogd2hpdGU7XFxufVxcblxcbi5oaWRlLXNldHRpbmctaWNvbiB7XFxuICBkaXNwbGF5OiBub25lO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6009\n')},3412:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1354);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6314);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.status-pill {\n  position: absolute;\n  top: 64px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  z-index: 5;\n}\n\n.pill-container {\n  width: 125px;\n  padding: 4px 12px;\n  backdrop-filter: blur(16px);\n  background: rgba(0, 0, 0, 0.4);\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 4px;\n  border-radius: 8px;\n  transition: background-color 200ms linear;\n}\n\n.pill-text {\n  font-size: 12px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: 0.12px;\n  color: #fff;\n}\n\n.pill-status-text {\n  font-size: 14px;\n  font-style: normal;\n  font-weight: 500;\n  line-height: 140%;\n}\n`, "",{"version":3,"sources":["webpack://./src/htmlService/styles/statusPill.css"],"names":[],"mappings":"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,WAAW;EACX,UAAU;AACZ;;AAEA;EACE,YAAY;EACZ,iBAAiB;EACjB,2BAA2B;EAC3B,8BAA8B;EAC9B,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,QAAQ;EACR,kBAAkB;EAClB,yCAAyC;AAC3C;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,gBAAgB;EAChB,iBAAiB;AACnB","sourcesContent":[".status-pill {\\n  position: absolute;\\n  top: 64px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 8px;\\n  width: 100%;\\n  z-index: 5;\\n}\\n\\n.pill-container {\\n  width: 125px;\\n  padding: 4px 12px;\\n  backdrop-filter: blur(16px);\\n  background: rgba(0, 0, 0, 0.4);\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  gap: 4px;\\n  border-radius: 8px;\\n  transition: background-color 200ms linear;\\n}\\n\\n.pill-text {\\n  font-size: 12px;\\n  font-style: normal;\\n  font-weight: 400;\\n  line-height: normal;\\n  letter-spacing: 0.12px;\\n  color: #fff;\\n}\\n\\n.pill-status-text {\\n  font-size: 14px;\\n  font-style: normal;\\n  font-weight: 500;\\n  line-height: 140%;\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQxMi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTyx3R0FBd0csWUFBWSxXQUFXLFVBQVUsWUFBWSxhQUFhLFdBQVcsVUFBVSxVQUFVLE1BQU0sS0FBSyxVQUFVLFlBQVksYUFBYSxhQUFhLFdBQVcsWUFBWSxhQUFhLGFBQWEsV0FBVyxZQUFZLGFBQWEsT0FBTyxLQUFLLFVBQVUsWUFBWSxhQUFhLGFBQWEsYUFBYSxXQUFXLE1BQU0sS0FBSyxVQUFVLFlBQVksYUFBYSxhQUFhLHdDQUF3Qyx1QkFBdUIsY0FBYyxrQkFBa0IsNEJBQTRCLHdCQUF3QixhQUFhLGdCQUFnQixlQUFlLEdBQUcscUJBQXFCLGlCQUFpQixzQkFBc0IsZ0NBQWdDLG1DQUFtQyxrQkFBa0IsMkJBQTJCLDRCQUE0Qix3QkFBd0IsYUFBYSx1QkFBdUIsOENBQThDLEdBQUcsZ0JBQWdCLG9CQUFvQix1QkFBdUIscUJBQXFCLHdCQUF3QiwyQkFBMkIsZ0JBQWdCLEdBQUcsdUJBQXVCLG9CQUFvQix1QkFBdUIscUJBQXFCLHNCQUFzQixHQUFHLHFCQUFxQjtBQUN6dkM7QUFDQSxpRUFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2dsYW1hci1zZGsvLi9zcmMvaHRtbFNlcnZpY2Uvc3R5bGVzL3N0YXR1c1BpbGwuY3NzPzEyNjAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5zdGF0dXMtcGlsbCB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA2NHB4O1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZ2FwOiA4cHg7XG4gIHdpZHRoOiAxMDAlO1xuICB6LWluZGV4OiA1O1xufVxuXG4ucGlsbC1jb250YWluZXIge1xuICB3aWR0aDogMTI1cHg7XG4gIHBhZGRpbmc6IDRweCAxMnB4O1xuICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTZweCk7XG4gIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC40KTtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIGdhcDogNHB4O1xuICBib3JkZXItcmFkaXVzOiA4cHg7XG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMjAwbXMgbGluZWFyO1xufVxuXG4ucGlsbC10ZXh0IHtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBmb250LXN0eWxlOiBub3JtYWw7XG4gIGZvbnQtd2VpZ2h0OiA0MDA7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG4gIGxldHRlci1zcGFjaW5nOiAwLjEycHg7XG4gIGNvbG9yOiAjZmZmO1xufVxuXG4ucGlsbC1zdGF0dXMtdGV4dCB7XG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xuICBmb250LXdlaWdodDogNTAwO1xuICBsaW5lLWhlaWdodDogMTQwJTtcbn1cbmAsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2h0bWxTZXJ2aWNlL3N0eWxlcy9zdGF0dXNQaWxsLmNzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFBQTtFQUNFLGtCQUFrQjtFQUNsQixTQUFTO0VBQ1QsYUFBYTtFQUNiLHVCQUF1QjtFQUN2QixtQkFBbUI7RUFDbkIsUUFBUTtFQUNSLFdBQVc7RUFDWCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxZQUFZO0VBQ1osaUJBQWlCO0VBQ2pCLDJCQUEyQjtFQUMzQiw4QkFBOEI7RUFDOUIsYUFBYTtFQUNiLHNCQUFzQjtFQUN0Qix1QkFBdUI7RUFDdkIsbUJBQW1CO0VBQ25CLFFBQVE7RUFDUixrQkFBa0I7RUFDbEIseUNBQXlDO0FBQzNDOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLHNCQUFzQjtFQUN0QixXQUFXO0FBQ2I7O0FBRUE7RUFDRSxlQUFlO0VBQ2Ysa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixpQkFBaUI7QUFDbkJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLnN0YXR1cy1waWxsIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNjRweDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDhweDtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgei1pbmRleDogNTtcXG59XFxuXFxuLnBpbGwtY29udGFpbmVyIHtcXG4gIHdpZHRoOiAxMjVweDtcXG4gIHBhZGRpbmc6IDRweCAxMnB4O1xcbiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDE2cHgpO1xcbiAgYmFja2dyb3VuZDogcmdiYSgwLCAwLCAwLCAwLjQpO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICBnYXA6IDRweDtcXG4gIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMjAwbXMgbGluZWFyO1xcbn1cXG5cXG4ucGlsbC10ZXh0IHtcXG4gIGZvbnQtc2l6ZTogMTJweDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBsaW5lLWhlaWdodDogbm9ybWFsO1xcbiAgbGV0dGVyLXNwYWNpbmc6IDAuMTJweDtcXG4gIGNvbG9yOiAjZmZmO1xcbn1cXG5cXG4ucGlsbC1zdGF0dXMtdGV4dCB7XFxuICBmb250LXNpemU6IDE0cHg7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgbGluZS1oZWlnaHQ6IDE0MCU7XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3412\n')},9893:()=>{},8074:()=>{},5281:()=>{},7244:()=>{},3556:()=>{},5817:()=>{},8590:()=>{},4530:()=>{},8108:()=>{},551:()=>{},477:()=>{},2634:()=>{},1234:()=>{}}]);